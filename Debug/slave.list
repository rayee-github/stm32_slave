
slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ffc  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  080091b8  080091b8  000191b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092b0  080092b0  00024b18  2**0
                  CONTENTS
  4 .ARM          00000008  080092b0  080092b0  000192b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080092b8  080092b8  00024b18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092b8  080092b8  000192b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080092bc  080092bc  000192bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00004b18  20000000  080092c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000067a8  20004b18  0800ddd8  00024b18  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000b2c0  0800ddd8  0002b2c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00024b18  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00024b48  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019a03  00000000  00000000  00024b8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d5f  00000000  00000000  0003e58e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001470  00000000  00000000  000412f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001014  00000000  00000000  00042760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00031a75  00000000  00000000  00043774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ae37  00000000  00000000  000751e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0012afb2  00000000  00000000  00090020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000057d4  00000000  00000000  001bafd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  001c07a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20004b18 	.word	0x20004b18
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080091a0 	.word	0x080091a0

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20004b1c 	.word	0x20004b1c
 80001f8:	080091a0 	.word	0x080091a0

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b970 	b.w	80004f4 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	460d      	mov	r5, r1
 8000234:	4604      	mov	r4, r0
 8000236:	460f      	mov	r7, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14a      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023c:	428a      	cmp	r2, r1
 800023e:	4694      	mov	ip, r2
 8000240:	d965      	bls.n	800030e <__udivmoddi4+0xe2>
 8000242:	fab2 f382 	clz	r3, r2
 8000246:	b143      	cbz	r3, 800025a <__udivmoddi4+0x2e>
 8000248:	fa02 fc03 	lsl.w	ip, r2, r3
 800024c:	f1c3 0220 	rsb	r2, r3, #32
 8000250:	409f      	lsls	r7, r3
 8000252:	fa20 f202 	lsr.w	r2, r0, r2
 8000256:	4317      	orrs	r7, r2
 8000258:	409c      	lsls	r4, r3
 800025a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800025e:	fa1f f58c 	uxth.w	r5, ip
 8000262:	fbb7 f1fe 	udiv	r1, r7, lr
 8000266:	0c22      	lsrs	r2, r4, #16
 8000268:	fb0e 7711 	mls	r7, lr, r1, r7
 800026c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000270:	fb01 f005 	mul.w	r0, r1, r5
 8000274:	4290      	cmp	r0, r2
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x62>
 8000278:	eb1c 0202 	adds.w	r2, ip, r2
 800027c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000280:	f080 811c 	bcs.w	80004bc <__udivmoddi4+0x290>
 8000284:	4290      	cmp	r0, r2
 8000286:	f240 8119 	bls.w	80004bc <__udivmoddi4+0x290>
 800028a:	3902      	subs	r1, #2
 800028c:	4462      	add	r2, ip
 800028e:	1a12      	subs	r2, r2, r0
 8000290:	b2a4      	uxth	r4, r4
 8000292:	fbb2 f0fe 	udiv	r0, r2, lr
 8000296:	fb0e 2210 	mls	r2, lr, r0, r2
 800029a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800029e:	fb00 f505 	mul.w	r5, r0, r5
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x90>
 80002a6:	eb1c 0404 	adds.w	r4, ip, r4
 80002aa:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ae:	f080 8107 	bcs.w	80004c0 <__udivmoddi4+0x294>
 80002b2:	42a5      	cmp	r5, r4
 80002b4:	f240 8104 	bls.w	80004c0 <__udivmoddi4+0x294>
 80002b8:	4464      	add	r4, ip
 80002ba:	3802      	subs	r0, #2
 80002bc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c0:	1b64      	subs	r4, r4, r5
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11e      	cbz	r6, 80002ce <__udivmoddi4+0xa2>
 80002c6:	40dc      	lsrs	r4, r3
 80002c8:	2300      	movs	r3, #0
 80002ca:	e9c6 4300 	strd	r4, r3, [r6]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0xbc>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80ed 	beq.w	80004b6 <__udivmoddi4+0x28a>
 80002dc:	2100      	movs	r1, #0
 80002de:	e9c6 0500 	strd	r0, r5, [r6]
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	d149      	bne.n	8000384 <__udivmoddi4+0x158>
 80002f0:	42ab      	cmp	r3, r5
 80002f2:	d302      	bcc.n	80002fa <__udivmoddi4+0xce>
 80002f4:	4282      	cmp	r2, r0
 80002f6:	f200 80f8 	bhi.w	80004ea <__udivmoddi4+0x2be>
 80002fa:	1a84      	subs	r4, r0, r2
 80002fc:	eb65 0203 	sbc.w	r2, r5, r3
 8000300:	2001      	movs	r0, #1
 8000302:	4617      	mov	r7, r2
 8000304:	2e00      	cmp	r6, #0
 8000306:	d0e2      	beq.n	80002ce <__udivmoddi4+0xa2>
 8000308:	e9c6 4700 	strd	r4, r7, [r6]
 800030c:	e7df      	b.n	80002ce <__udivmoddi4+0xa2>
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xe6>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f382 	clz	r3, r2
 8000316:	2b00      	cmp	r3, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x210>
 800031c:	1a8a      	subs	r2, r1, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f fe8c 	uxth.w	lr, ip
 8000326:	2101      	movs	r1, #1
 8000328:	fbb2 f5f7 	udiv	r5, r2, r7
 800032c:	fb07 2015 	mls	r0, r7, r5, r2
 8000330:	0c22      	lsrs	r2, r4, #16
 8000332:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000336:	fb0e f005 	mul.w	r0, lr, r5
 800033a:	4290      	cmp	r0, r2
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x124>
 800033e:	eb1c 0202 	adds.w	r2, ip, r2
 8000342:	f105 38ff 	add.w	r8, r5, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4290      	cmp	r0, r2
 800034a:	f200 80cb 	bhi.w	80004e4 <__udivmoddi4+0x2b8>
 800034e:	4645      	mov	r5, r8
 8000350:	1a12      	subs	r2, r2, r0
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb2 f0f7 	udiv	r0, r2, r7
 8000358:	fb07 2210 	mls	r2, r7, r0, r2
 800035c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000360:	fb0e fe00 	mul.w	lr, lr, r0
 8000364:	45a6      	cmp	lr, r4
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x14e>
 8000368:	eb1c 0404 	adds.w	r4, ip, r4
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x14c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f200 80bb 	bhi.w	80004ee <__udivmoddi4+0x2c2>
 8000378:	4610      	mov	r0, r2
 800037a:	eba4 040e 	sub.w	r4, r4, lr
 800037e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000382:	e79f      	b.n	80002c4 <__udivmoddi4+0x98>
 8000384:	f1c1 0720 	rsb	r7, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 fc07 	lsr.w	ip, r2, r7
 800038e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000392:	fa05 f401 	lsl.w	r4, r5, r1
 8000396:	fa20 f307 	lsr.w	r3, r0, r7
 800039a:	40fd      	lsrs	r5, r7
 800039c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a0:	4323      	orrs	r3, r4
 80003a2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	fb09 5518 	mls	r5, r9, r8, r5
 80003ae:	0c1c      	lsrs	r4, r3, #16
 80003b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b4:	fb08 f50e 	mul.w	r5, r8, lr
 80003b8:	42a5      	cmp	r5, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	fa00 f001 	lsl.w	r0, r0, r1
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003cc:	f080 8088 	bcs.w	80004e0 <__udivmoddi4+0x2b4>
 80003d0:	42a5      	cmp	r5, r4
 80003d2:	f240 8085 	bls.w	80004e0 <__udivmoddi4+0x2b4>
 80003d6:	f1a8 0802 	sub.w	r8, r8, #2
 80003da:	4464      	add	r4, ip
 80003dc:	1b64      	subs	r4, r4, r5
 80003de:	b29d      	uxth	r5, r3
 80003e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e4:	fb09 4413 	mls	r4, r9, r3, r4
 80003e8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003ec:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003fc:	d26c      	bcs.n	80004d8 <__udivmoddi4+0x2ac>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	d96a      	bls.n	80004d8 <__udivmoddi4+0x2ac>
 8000402:	3b02      	subs	r3, #2
 8000404:	4464      	add	r4, ip
 8000406:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800040a:	fba3 9502 	umull	r9, r5, r3, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	42ac      	cmp	r4, r5
 8000414:	46c8      	mov	r8, r9
 8000416:	46ae      	mov	lr, r5
 8000418:	d356      	bcc.n	80004c8 <__udivmoddi4+0x29c>
 800041a:	d053      	beq.n	80004c4 <__udivmoddi4+0x298>
 800041c:	b156      	cbz	r6, 8000434 <__udivmoddi4+0x208>
 800041e:	ebb0 0208 	subs.w	r2, r0, r8
 8000422:	eb64 040e 	sbc.w	r4, r4, lr
 8000426:	fa04 f707 	lsl.w	r7, r4, r7
 800042a:	40ca      	lsrs	r2, r1
 800042c:	40cc      	lsrs	r4, r1
 800042e:	4317      	orrs	r7, r2
 8000430:	e9c6 7400 	strd	r7, r4, [r6]
 8000434:	4618      	mov	r0, r3
 8000436:	2100      	movs	r1, #0
 8000438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043c:	f1c3 0120 	rsb	r1, r3, #32
 8000440:	fa02 fc03 	lsl.w	ip, r2, r3
 8000444:	fa20 f201 	lsr.w	r2, r0, r1
 8000448:	fa25 f101 	lsr.w	r1, r5, r1
 800044c:	409d      	lsls	r5, r3
 800044e:	432a      	orrs	r2, r5
 8000450:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000454:	fa1f fe8c 	uxth.w	lr, ip
 8000458:	fbb1 f0f7 	udiv	r0, r1, r7
 800045c:	fb07 1510 	mls	r5, r7, r0, r1
 8000460:	0c11      	lsrs	r1, r2, #16
 8000462:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000466:	fb00 f50e 	mul.w	r5, r0, lr
 800046a:	428d      	cmp	r5, r1
 800046c:	fa04 f403 	lsl.w	r4, r4, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x258>
 8000472:	eb1c 0101 	adds.w	r1, ip, r1
 8000476:	f100 38ff 	add.w	r8, r0, #4294967295
 800047a:	d22f      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 800047c:	428d      	cmp	r5, r1
 800047e:	d92d      	bls.n	80004dc <__udivmoddi4+0x2b0>
 8000480:	3802      	subs	r0, #2
 8000482:	4461      	add	r1, ip
 8000484:	1b49      	subs	r1, r1, r5
 8000486:	b292      	uxth	r2, r2
 8000488:	fbb1 f5f7 	udiv	r5, r1, r7
 800048c:	fb07 1115 	mls	r1, r7, r5, r1
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	fb05 f10e 	mul.w	r1, r5, lr
 8000498:	4291      	cmp	r1, r2
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x282>
 800049c:	eb1c 0202 	adds.w	r2, ip, r2
 80004a0:	f105 38ff 	add.w	r8, r5, #4294967295
 80004a4:	d216      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 80004a6:	4291      	cmp	r1, r2
 80004a8:	d914      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 80004aa:	3d02      	subs	r5, #2
 80004ac:	4462      	add	r2, ip
 80004ae:	1a52      	subs	r2, r2, r1
 80004b0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004b4:	e738      	b.n	8000328 <__udivmoddi4+0xfc>
 80004b6:	4631      	mov	r1, r6
 80004b8:	4630      	mov	r0, r6
 80004ba:	e708      	b.n	80002ce <__udivmoddi4+0xa2>
 80004bc:	4639      	mov	r1, r7
 80004be:	e6e6      	b.n	800028e <__udivmoddi4+0x62>
 80004c0:	4610      	mov	r0, r2
 80004c2:	e6fb      	b.n	80002bc <__udivmoddi4+0x90>
 80004c4:	4548      	cmp	r0, r9
 80004c6:	d2a9      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c8:	ebb9 0802 	subs.w	r8, r9, r2
 80004cc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d0:	3b01      	subs	r3, #1
 80004d2:	e7a3      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d4:	4645      	mov	r5, r8
 80004d6:	e7ea      	b.n	80004ae <__udivmoddi4+0x282>
 80004d8:	462b      	mov	r3, r5
 80004da:	e794      	b.n	8000406 <__udivmoddi4+0x1da>
 80004dc:	4640      	mov	r0, r8
 80004de:	e7d1      	b.n	8000484 <__udivmoddi4+0x258>
 80004e0:	46d0      	mov	r8, sl
 80004e2:	e77b      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e4:	3d02      	subs	r5, #2
 80004e6:	4462      	add	r2, ip
 80004e8:	e732      	b.n	8000350 <__udivmoddi4+0x124>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e70a      	b.n	8000304 <__udivmoddi4+0xd8>
 80004ee:	4464      	add	r4, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e742      	b.n	800037a <__udivmoddi4+0x14e>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b086      	sub	sp, #24
 80004fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fe:	f002 fb59 	bl	8002bb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000502:	f000 f9d3 	bl	80008ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000506:	f000 fd5d 	bl	8000fc4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800050a:	f000 fb09 	bl	8000b20 <MX_I2C1_Init>
  MX_I2C2_Init();
 800050e:	f000 fb47 	bl	8000ba0 <MX_I2C2_Init>
  MX_OCTOSPI2_Init();
 8000512:	f000 fc05 	bl	8000d20 <MX_OCTOSPI2_Init>
  MX_SPI1_Init();
 8000516:	f000 fc59 	bl	8000dcc <MX_SPI1_Init>
  MX_SPI2_Init();
 800051a:	f000 fc95 	bl	8000e48 <MX_SPI2_Init>
  MX_SPI3_Init();
 800051e:	f000 fccd 	bl	8000ebc <MX_SPI3_Init>
  MX_UART4_Init();
 8000522:	f000 fd03 	bl	8000f2c <MX_UART4_Init>
  MX_DSIHOST_DSI_Init();
 8000526:	f000 fa0f 	bl	8000948 <MX_DSIHOST_DSI_Init>
  MX_LTDC_Init();
 800052a:	f000 fb79 	bl	8000c20 <MX_LTDC_Init>
  /* USER CODE BEGIN 2 */
  mipi_config();
 800052e:	f000 fea9 	bl	8001284 <mipi_config>
  HAL_UART_Transmit(&huart4, "slave start", 11, 1000);
 8000532:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000536:	220b      	movs	r2, #11
 8000538:	498a      	ldr	r1, [pc, #552]	; (8000764 <main+0x26c>)
 800053a:	488b      	ldr	r0, [pc, #556]	; (8000768 <main+0x270>)
 800053c:	f007 ff5c 	bl	80083f8 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int frame_buf_count = 0;
 8000540:	2300      	movs	r3, #0
 8000542:	617b      	str	r3, [r7, #20]

	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4) == GPIO_PIN_SET) //switch = 00
 8000544:	2101      	movs	r1, #1
 8000546:	4889      	ldr	r0, [pc, #548]	; (800076c <main+0x274>)
 8000548:	f003 fd7a 	bl	8004040 <HAL_GPIO_ReadPin>
 800054c:	4603      	mov	r3, r0
 800054e:	2b01      	cmp	r3, #1
 8000550:	d10a      	bne.n	8000568 <main+0x70>
 8000552:	2110      	movs	r1, #16
 8000554:	4886      	ldr	r0, [pc, #536]	; (8000770 <main+0x278>)
 8000556:	f003 fd73 	bl	8004040 <HAL_GPIO_ReadPin>
 800055a:	4603      	mov	r3, r0
 800055c:	2b01      	cmp	r3, #1
 800055e:	d103      	bne.n	8000568 <main+0x70>
	{
		BOARD_NUMBER = 2;
 8000560:	4b84      	ldr	r3, [pc, #528]	; (8000774 <main+0x27c>)
 8000562:	2202      	movs	r2, #2
 8000564:	701a      	strb	r2, [r3, #0]
 8000566:	e034      	b.n	80005d2 <main+0xda>
	}
	else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4) == GPIO_PIN_RESET) //switch = 01
 8000568:	2101      	movs	r1, #1
 800056a:	4880      	ldr	r0, [pc, #512]	; (800076c <main+0x274>)
 800056c:	f003 fd68 	bl	8004040 <HAL_GPIO_ReadPin>
 8000570:	4603      	mov	r3, r0
 8000572:	2b01      	cmp	r3, #1
 8000574:	d10a      	bne.n	800058c <main+0x94>
 8000576:	2110      	movs	r1, #16
 8000578:	487d      	ldr	r0, [pc, #500]	; (8000770 <main+0x278>)
 800057a:	f003 fd61 	bl	8004040 <HAL_GPIO_ReadPin>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d103      	bne.n	800058c <main+0x94>
	{
		BOARD_NUMBER = 2;
 8000584:	4b7b      	ldr	r3, [pc, #492]	; (8000774 <main+0x27c>)
 8000586:	2202      	movs	r2, #2
 8000588:	701a      	strb	r2, [r3, #0]
 800058a:	e022      	b.n	80005d2 <main+0xda>
	}
	else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4) == GPIO_PIN_SET) //switch = 10
 800058c:	2101      	movs	r1, #1
 800058e:	4877      	ldr	r0, [pc, #476]	; (800076c <main+0x274>)
 8000590:	f003 fd56 	bl	8004040 <HAL_GPIO_ReadPin>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d10a      	bne.n	80005b0 <main+0xb8>
 800059a:	2110      	movs	r1, #16
 800059c:	4874      	ldr	r0, [pc, #464]	; (8000770 <main+0x278>)
 800059e:	f003 fd4f 	bl	8004040 <HAL_GPIO_ReadPin>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b01      	cmp	r3, #1
 80005a6:	d103      	bne.n	80005b0 <main+0xb8>
	{
		BOARD_NUMBER = 3;
 80005a8:	4b72      	ldr	r3, [pc, #456]	; (8000774 <main+0x27c>)
 80005aa:	2203      	movs	r2, #3
 80005ac:	701a      	strb	r2, [r3, #0]
 80005ae:	e010      	b.n	80005d2 <main+0xda>
	}
	else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4) == GPIO_PIN_RESET) //switch = 11
 80005b0:	2101      	movs	r1, #1
 80005b2:	486e      	ldr	r0, [pc, #440]	; (800076c <main+0x274>)
 80005b4:	f003 fd44 	bl	8004040 <HAL_GPIO_ReadPin>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d109      	bne.n	80005d2 <main+0xda>
 80005be:	2110      	movs	r1, #16
 80005c0:	486b      	ldr	r0, [pc, #428]	; (8000770 <main+0x278>)
 80005c2:	f003 fd3d 	bl	8004040 <HAL_GPIO_ReadPin>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d102      	bne.n	80005d2 <main+0xda>
	{
		BOARD_NUMBER = 4;
 80005cc:	4b69      	ldr	r3, [pc, #420]	; (8000774 <main+0x27c>)
 80005ce:	2204      	movs	r2, #4
 80005d0:	701a      	strb	r2, [r3, #0]
	}

    __HAL_SPI_ENABLE(&hspi1);
 80005d2:	4b69      	ldr	r3, [pc, #420]	; (8000778 <main+0x280>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	681a      	ldr	r2, [r3, #0]
 80005d8:	4b67      	ldr	r3, [pc, #412]	; (8000778 <main+0x280>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80005e0:	601a      	str	r2, [r3, #0]
    __HAL_SPI_ENABLE(&hspi3);
 80005e2:	4b66      	ldr	r3, [pc, #408]	; (800077c <main+0x284>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	681a      	ldr	r2, [r3, #0]
 80005e8:	4b64      	ldr	r3, [pc, #400]	; (800077c <main+0x284>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80005f0:	601a      	str	r2, [r3, #0]
	HAL_SPI_Receive_IT(&hspi3, &spi3_buf, 2);
 80005f2:	2202      	movs	r2, #2
 80005f4:	4962      	ldr	r1, [pc, #392]	; (8000780 <main+0x288>)
 80005f6:	4861      	ldr	r0, [pc, #388]	; (800077c <main+0x284>)
 80005f8:	f007 f8ae 	bl	8007758 <HAL_SPI_Receive_IT>

	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if(play_mode_source == 0)
 80005fc:	4b61      	ldr	r3, [pc, #388]	; (8000784 <main+0x28c>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2b00      	cmp	r3, #0
 8000602:	f040 80a5 	bne.w	8000750 <main+0x258>
		{
			if(play_mode == 0)
 8000606:	4b60      	ldr	r3, [pc, #384]	; (8000788 <main+0x290>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d142      	bne.n	8000694 <main+0x19c>
			{
				read_flash_page(&frame_buf_flash, display_image_number);
 800060e:	4b5f      	ldr	r3, [pc, #380]	; (800078c <main+0x294>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	4619      	mov	r1, r3
 8000614:	485e      	ldr	r0, [pc, #376]	; (8000790 <main+0x298>)
 8000616:	f001 fde1 	bl	80021dc <read_flash_page>
				frame_buf_count = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	617b      	str	r3, [r7, #20]
				for (int i = 0; i < 6400;  i += 4)
 800061e:	2300      	movs	r3, #0
 8000620:	613b      	str	r3, [r7, #16]
 8000622:	e032      	b.n	800068a <main+0x192>
				{
					image_80x80_rgb888[frame_buf_count] = frame_buf_flash[i+1];
 8000624:	693b      	ldr	r3, [r7, #16]
 8000626:	3301      	adds	r3, #1
 8000628:	4a59      	ldr	r2, [pc, #356]	; (8000790 <main+0x298>)
 800062a:	5cd1      	ldrb	r1, [r2, r3]
 800062c:	4a59      	ldr	r2, [pc, #356]	; (8000794 <main+0x29c>)
 800062e:	697b      	ldr	r3, [r7, #20]
 8000630:	4413      	add	r3, r2
 8000632:	460a      	mov	r2, r1
 8000634:	701a      	strb	r2, [r3, #0]
					frame_buf_count += 2;
 8000636:	697b      	ldr	r3, [r7, #20]
 8000638:	3302      	adds	r3, #2
 800063a:	617b      	str	r3, [r7, #20]
					image_80x80_rgb888[frame_buf_count] = frame_buf_flash[i];
 800063c:	4a54      	ldr	r2, [pc, #336]	; (8000790 <main+0x298>)
 800063e:	693b      	ldr	r3, [r7, #16]
 8000640:	4413      	add	r3, r2
 8000642:	7819      	ldrb	r1, [r3, #0]
 8000644:	4a53      	ldr	r2, [pc, #332]	; (8000794 <main+0x29c>)
 8000646:	697b      	ldr	r3, [r7, #20]
 8000648:	4413      	add	r3, r2
 800064a:	460a      	mov	r2, r1
 800064c:	701a      	strb	r2, [r3, #0]
					frame_buf_count += 4;
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	3304      	adds	r3, #4
 8000652:	617b      	str	r3, [r7, #20]
					image_80x80_rgb888[frame_buf_count] = frame_buf_flash[i+2];
 8000654:	693b      	ldr	r3, [r7, #16]
 8000656:	3302      	adds	r3, #2
 8000658:	4a4d      	ldr	r2, [pc, #308]	; (8000790 <main+0x298>)
 800065a:	5cd1      	ldrb	r1, [r2, r3]
 800065c:	4a4d      	ldr	r2, [pc, #308]	; (8000794 <main+0x29c>)
 800065e:	697b      	ldr	r3, [r7, #20]
 8000660:	4413      	add	r3, r2
 8000662:	460a      	mov	r2, r1
 8000664:	701a      	strb	r2, [r3, #0]
					frame_buf_count += 4;
 8000666:	697b      	ldr	r3, [r7, #20]
 8000668:	3304      	adds	r3, #4
 800066a:	617b      	str	r3, [r7, #20]
					image_80x80_rgb888[frame_buf_count] = frame_buf_flash[i+3];
 800066c:	693b      	ldr	r3, [r7, #16]
 800066e:	3303      	adds	r3, #3
 8000670:	4a47      	ldr	r2, [pc, #284]	; (8000790 <main+0x298>)
 8000672:	5cd1      	ldrb	r1, [r2, r3]
 8000674:	4a47      	ldr	r2, [pc, #284]	; (8000794 <main+0x29c>)
 8000676:	697b      	ldr	r3, [r7, #20]
 8000678:	4413      	add	r3, r2
 800067a:	460a      	mov	r2, r1
 800067c:	701a      	strb	r2, [r3, #0]
					frame_buf_count += 2;
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	3302      	adds	r3, #2
 8000682:	617b      	str	r3, [r7, #20]
				for (int i = 0; i < 6400;  i += 4)
 8000684:	693b      	ldr	r3, [r7, #16]
 8000686:	3304      	adds	r3, #4
 8000688:	613b      	str	r3, [r7, #16]
 800068a:	693b      	ldr	r3, [r7, #16]
 800068c:	f5b3 5fc8 	cmp.w	r3, #6400	; 0x1900
 8000690:	dbc8      	blt.n	8000624 <main+0x12c>
 8000692:	e0ff      	b.n	8000894 <main+0x39c>
				}
			}
			else if(play_mode == 1)
 8000694:	4b3c      	ldr	r3, [pc, #240]	; (8000788 <main+0x290>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b01      	cmp	r3, #1
 800069a:	f040 80fb 	bne.w	8000894 <main+0x39c>
			{
				for(int i=0; i<total_image_in_flash; i++)
 800069e:	2300      	movs	r3, #0
 80006a0:	60fb      	str	r3, [r7, #12]
 80006a2:	e04e      	b.n	8000742 <main+0x24a>
				{
					if(play_mode_source != 0) break;
 80006a4:	4b37      	ldr	r3, [pc, #220]	; (8000784 <main+0x28c>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	f040 80f2 	bne.w	8000892 <main+0x39a>
					read_flash_page(&frame_buf_flash, i);
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	4619      	mov	r1, r3
 80006b4:	4836      	ldr	r0, [pc, #216]	; (8000790 <main+0x298>)
 80006b6:	f001 fd91 	bl	80021dc <read_flash_page>
					frame_buf_count = 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	617b      	str	r3, [r7, #20]
					for (int i = 0; i < 6400;  i += 4)
 80006be:	2300      	movs	r3, #0
 80006c0:	60bb      	str	r3, [r7, #8]
 80006c2:	e032      	b.n	800072a <main+0x232>
					{
						image_80x80_rgb888[frame_buf_count] = frame_buf_flash[i+1];
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	3301      	adds	r3, #1
 80006c8:	4a31      	ldr	r2, [pc, #196]	; (8000790 <main+0x298>)
 80006ca:	5cd1      	ldrb	r1, [r2, r3]
 80006cc:	4a31      	ldr	r2, [pc, #196]	; (8000794 <main+0x29c>)
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	4413      	add	r3, r2
 80006d2:	460a      	mov	r2, r1
 80006d4:	701a      	strb	r2, [r3, #0]
						frame_buf_count += 2;
 80006d6:	697b      	ldr	r3, [r7, #20]
 80006d8:	3302      	adds	r3, #2
 80006da:	617b      	str	r3, [r7, #20]
						image_80x80_rgb888[frame_buf_count] = frame_buf_flash[i];
 80006dc:	4a2c      	ldr	r2, [pc, #176]	; (8000790 <main+0x298>)
 80006de:	68bb      	ldr	r3, [r7, #8]
 80006e0:	4413      	add	r3, r2
 80006e2:	7819      	ldrb	r1, [r3, #0]
 80006e4:	4a2b      	ldr	r2, [pc, #172]	; (8000794 <main+0x29c>)
 80006e6:	697b      	ldr	r3, [r7, #20]
 80006e8:	4413      	add	r3, r2
 80006ea:	460a      	mov	r2, r1
 80006ec:	701a      	strb	r2, [r3, #0]
						frame_buf_count += 4;
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	3304      	adds	r3, #4
 80006f2:	617b      	str	r3, [r7, #20]
						image_80x80_rgb888[frame_buf_count] = frame_buf_flash[i+2];
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	3302      	adds	r3, #2
 80006f8:	4a25      	ldr	r2, [pc, #148]	; (8000790 <main+0x298>)
 80006fa:	5cd1      	ldrb	r1, [r2, r3]
 80006fc:	4a25      	ldr	r2, [pc, #148]	; (8000794 <main+0x29c>)
 80006fe:	697b      	ldr	r3, [r7, #20]
 8000700:	4413      	add	r3, r2
 8000702:	460a      	mov	r2, r1
 8000704:	701a      	strb	r2, [r3, #0]
						frame_buf_count += 4;
 8000706:	697b      	ldr	r3, [r7, #20]
 8000708:	3304      	adds	r3, #4
 800070a:	617b      	str	r3, [r7, #20]
						image_80x80_rgb888[frame_buf_count] = frame_buf_flash[i+3];
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	3303      	adds	r3, #3
 8000710:	4a1f      	ldr	r2, [pc, #124]	; (8000790 <main+0x298>)
 8000712:	5cd1      	ldrb	r1, [r2, r3]
 8000714:	4a1f      	ldr	r2, [pc, #124]	; (8000794 <main+0x29c>)
 8000716:	697b      	ldr	r3, [r7, #20]
 8000718:	4413      	add	r3, r2
 800071a:	460a      	mov	r2, r1
 800071c:	701a      	strb	r2, [r3, #0]
						frame_buf_count += 2;
 800071e:	697b      	ldr	r3, [r7, #20]
 8000720:	3302      	adds	r3, #2
 8000722:	617b      	str	r3, [r7, #20]
					for (int i = 0; i < 6400;  i += 4)
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	3304      	adds	r3, #4
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	68bb      	ldr	r3, [r7, #8]
 800072c:	f5b3 5fc8 	cmp.w	r3, #6400	; 0x1900
 8000730:	dbc8      	blt.n	80006c4 <main+0x1cc>
					}
					HAL_Delay(frame_rate);
 8000732:	4b19      	ldr	r3, [pc, #100]	; (8000798 <main+0x2a0>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4618      	mov	r0, r3
 8000738:	f002 fab8 	bl	8002cac <HAL_Delay>
				for(int i=0; i<total_image_in_flash; i++)
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	3301      	adds	r3, #1
 8000740:	60fb      	str	r3, [r7, #12]
 8000742:	4b16      	ldr	r3, [pc, #88]	; (800079c <main+0x2a4>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	461a      	mov	r2, r3
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	4293      	cmp	r3, r2
 800074c:	dbaa      	blt.n	80006a4 <main+0x1ac>
 800074e:	e0a1      	b.n	8000894 <main+0x39c>
				}
			}
		}
		else if(play_mode_source == 1)
 8000750:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <main+0x28c>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	2b01      	cmp	r3, #1
 8000756:	d15b      	bne.n	8000810 <main+0x318>
		{
			frame_buf_count = 0;
 8000758:	2300      	movs	r3, #0
 800075a:	617b      	str	r3, [r7, #20]
			for (int i = 0; i < 6400;  i += 4)
 800075c:	2300      	movs	r3, #0
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	e051      	b.n	8000806 <main+0x30e>
 8000762:	bf00      	nop
 8000764:	080091b8 	.word	0x080091b8
 8000768:	20004e1c 	.word	0x20004e1c
 800076c:	48000400 	.word	0x48000400
 8000770:	48000800 	.word	0x48000800
 8000774:	20000000 	.word	0x20000000
 8000778:	20004cf0 	.word	0x20004cf0
 800077c:	20004db8 	.word	0x20004db8
 8000780:	20004eb0 	.word	0x20004eb0
 8000784:	2000b2b5 	.word	0x2000b2b5
 8000788:	2000b2b4 	.word	0x2000b2b4
 800078c:	2000b2b6 	.word	0x2000b2b6
 8000790:	200099b4 	.word	0x200099b4
 8000794:	2000000c 	.word	0x2000000c
 8000798:	20000004 	.word	0x20000004
 800079c:	20000008 	.word	0x20000008
			{
				image_80x80_rgb888[frame_buf_count] = frame_buf_0[i+1];
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	3301      	adds	r3, #1
 80007a4:	4a3d      	ldr	r2, [pc, #244]	; (800089c <main+0x3a4>)
 80007a6:	5cd1      	ldrb	r1, [r2, r3]
 80007a8:	4a3d      	ldr	r2, [pc, #244]	; (80008a0 <main+0x3a8>)
 80007aa:	697b      	ldr	r3, [r7, #20]
 80007ac:	4413      	add	r3, r2
 80007ae:	460a      	mov	r2, r1
 80007b0:	701a      	strb	r2, [r3, #0]
				frame_buf_count += 2;
 80007b2:	697b      	ldr	r3, [r7, #20]
 80007b4:	3302      	adds	r3, #2
 80007b6:	617b      	str	r3, [r7, #20]
				image_80x80_rgb888[frame_buf_count] = frame_buf_0[i];
 80007b8:	4a38      	ldr	r2, [pc, #224]	; (800089c <main+0x3a4>)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	4413      	add	r3, r2
 80007be:	7819      	ldrb	r1, [r3, #0]
 80007c0:	4a37      	ldr	r2, [pc, #220]	; (80008a0 <main+0x3a8>)
 80007c2:	697b      	ldr	r3, [r7, #20]
 80007c4:	4413      	add	r3, r2
 80007c6:	460a      	mov	r2, r1
 80007c8:	701a      	strb	r2, [r3, #0]
				frame_buf_count += 4;
 80007ca:	697b      	ldr	r3, [r7, #20]
 80007cc:	3304      	adds	r3, #4
 80007ce:	617b      	str	r3, [r7, #20]
				image_80x80_rgb888[frame_buf_count] = frame_buf_0[i+2];
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	3302      	adds	r3, #2
 80007d4:	4a31      	ldr	r2, [pc, #196]	; (800089c <main+0x3a4>)
 80007d6:	5cd1      	ldrb	r1, [r2, r3]
 80007d8:	4a31      	ldr	r2, [pc, #196]	; (80008a0 <main+0x3a8>)
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	4413      	add	r3, r2
 80007de:	460a      	mov	r2, r1
 80007e0:	701a      	strb	r2, [r3, #0]
				frame_buf_count += 4;
 80007e2:	697b      	ldr	r3, [r7, #20]
 80007e4:	3304      	adds	r3, #4
 80007e6:	617b      	str	r3, [r7, #20]
				image_80x80_rgb888[frame_buf_count] = frame_buf_0[i+3];
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	3303      	adds	r3, #3
 80007ec:	4a2b      	ldr	r2, [pc, #172]	; (800089c <main+0x3a4>)
 80007ee:	5cd1      	ldrb	r1, [r2, r3]
 80007f0:	4a2b      	ldr	r2, [pc, #172]	; (80008a0 <main+0x3a8>)
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	4413      	add	r3, r2
 80007f6:	460a      	mov	r2, r1
 80007f8:	701a      	strb	r2, [r3, #0]
				frame_buf_count += 2;
 80007fa:	697b      	ldr	r3, [r7, #20]
 80007fc:	3302      	adds	r3, #2
 80007fe:	617b      	str	r3, [r7, #20]
			for (int i = 0; i < 6400;  i += 4)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	3304      	adds	r3, #4
 8000804:	607b      	str	r3, [r7, #4]
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	f5b3 5fc8 	cmp.w	r3, #6400	; 0x1900
 800080c:	dbc8      	blt.n	80007a0 <main+0x2a8>
 800080e:	e041      	b.n	8000894 <main+0x39c>
			}
		}
		else if(play_mode_source == 2)
 8000810:	4b24      	ldr	r3, [pc, #144]	; (80008a4 <main+0x3ac>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	2b02      	cmp	r3, #2
 8000816:	d13d      	bne.n	8000894 <main+0x39c>
		{
			frame_buf_count = 0;
 8000818:	2300      	movs	r3, #0
 800081a:	617b      	str	r3, [r7, #20]
			for (int i = 0; i < 6400;  i += 4)
 800081c:	2300      	movs	r3, #0
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	e032      	b.n	8000888 <main+0x390>
			{
				image_80x80_rgb888[frame_buf_count] = frame_buf_1[i+1];
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	3301      	adds	r3, #1
 8000826:	4a20      	ldr	r2, [pc, #128]	; (80008a8 <main+0x3b0>)
 8000828:	5cd1      	ldrb	r1, [r2, r3]
 800082a:	4a1d      	ldr	r2, [pc, #116]	; (80008a0 <main+0x3a8>)
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	4413      	add	r3, r2
 8000830:	460a      	mov	r2, r1
 8000832:	701a      	strb	r2, [r3, #0]
				frame_buf_count += 2;
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	3302      	adds	r3, #2
 8000838:	617b      	str	r3, [r7, #20]
				image_80x80_rgb888[frame_buf_count] = frame_buf_1[i];
 800083a:	4a1b      	ldr	r2, [pc, #108]	; (80008a8 <main+0x3b0>)
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	4413      	add	r3, r2
 8000840:	7819      	ldrb	r1, [r3, #0]
 8000842:	4a17      	ldr	r2, [pc, #92]	; (80008a0 <main+0x3a8>)
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	4413      	add	r3, r2
 8000848:	460a      	mov	r2, r1
 800084a:	701a      	strb	r2, [r3, #0]
				frame_buf_count += 4;
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	3304      	adds	r3, #4
 8000850:	617b      	str	r3, [r7, #20]
				image_80x80_rgb888[frame_buf_count] = frame_buf_1[i+2];
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	3302      	adds	r3, #2
 8000856:	4a14      	ldr	r2, [pc, #80]	; (80008a8 <main+0x3b0>)
 8000858:	5cd1      	ldrb	r1, [r2, r3]
 800085a:	4a11      	ldr	r2, [pc, #68]	; (80008a0 <main+0x3a8>)
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	4413      	add	r3, r2
 8000860:	460a      	mov	r2, r1
 8000862:	701a      	strb	r2, [r3, #0]
				frame_buf_count += 4;
 8000864:	697b      	ldr	r3, [r7, #20]
 8000866:	3304      	adds	r3, #4
 8000868:	617b      	str	r3, [r7, #20]
				image_80x80_rgb888[frame_buf_count] = frame_buf_1[i+3];
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	3303      	adds	r3, #3
 800086e:	4a0e      	ldr	r2, [pc, #56]	; (80008a8 <main+0x3b0>)
 8000870:	5cd1      	ldrb	r1, [r2, r3]
 8000872:	4a0b      	ldr	r2, [pc, #44]	; (80008a0 <main+0x3a8>)
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	4413      	add	r3, r2
 8000878:	460a      	mov	r2, r1
 800087a:	701a      	strb	r2, [r3, #0]
				frame_buf_count += 2;
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	3302      	adds	r3, #2
 8000880:	617b      	str	r3, [r7, #20]
			for (int i = 0; i < 6400;  i += 4)
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	3304      	adds	r3, #4
 8000886:	603b      	str	r3, [r7, #0]
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	f5b3 5fc8 	cmp.w	r3, #6400	; 0x1900
 800088e:	dbc8      	blt.n	8000822 <main+0x32a>
 8000890:	e000      	b.n	8000894 <main+0x39c>
					if(play_mode_source != 0) break;
 8000892:	bf00      	nop
			}
		}
		HAL_Delay(10);
 8000894:	200a      	movs	r0, #10
 8000896:	f002 fa09 	bl	8002cac <HAL_Delay>
		if(play_mode_source == 0)
 800089a:	e6af      	b.n	80005fc <main+0x104>
 800089c:	200067b4 	.word	0x200067b4
 80008a0:	2000000c 	.word	0x2000000c
 80008a4:	2000b2b5 	.word	0x2000b2b5
 80008a8:	200080b4 	.word	0x200080b4

080008ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b096      	sub	sp, #88	; 0x58
 80008b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b2:	f107 0314 	add.w	r3, r7, #20
 80008b6:	2244      	movs	r2, #68	; 0x44
 80008b8:	2100      	movs	r1, #0
 80008ba:	4618      	mov	r0, r3
 80008bc:	f008 fc44 	bl	8009148 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c0:	463b      	mov	r3, r7
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80008ce:	2000      	movs	r0, #0
 80008d0:	f004 fccc 	bl	800526c <HAL_PWREx_ControlVoltageScaling>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <SystemClock_Config+0x32>
  {
    Error_Handler();
 80008da:	f001 fd9d 	bl	8002418 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008de:	2301      	movs	r3, #1
 80008e0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008e6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008e8:	2302      	movs	r3, #2
 80008ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ec:	2303      	movs	r3, #3
 80008ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008f0:	2301      	movs	r3, #1
 80008f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 80008f4:	231e      	movs	r3, #30
 80008f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008f8:	2302      	movs	r3, #2
 80008fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008fc:	2302      	movs	r3, #2
 80008fe:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000900:	2302      	movs	r3, #2
 8000902:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	4618      	mov	r0, r3
 800090a:	f004 fd63 	bl	80053d4 <HAL_RCC_OscConfig>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000914:	f001 fd80 	bl	8002418 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000918:	230f      	movs	r3, #15
 800091a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800091c:	2303      	movs	r3, #3
 800091e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000920:	2300      	movs	r3, #0
 8000922:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000924:	2300      	movs	r3, #0
 8000926:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000928:	2300      	movs	r3, #0
 800092a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800092c:	463b      	mov	r3, r7
 800092e:	2105      	movs	r1, #5
 8000930:	4618      	mov	r0, r3
 8000932:	f005 f969 	bl	8005c08 <HAL_RCC_ClockConfig>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800093c:	f001 fd6c 	bl	8002418 <Error_Handler>
  }
}
 8000940:	bf00      	nop
 8000942:	3758      	adds	r7, #88	; 0x58
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}

08000948 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b0ae      	sub	sp, #184	; 0xb8
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 800094e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 800095a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800095e:	2224      	movs	r2, #36	; 0x24
 8000960:	2100      	movs	r1, #0
 8000962:	4618      	mov	r0, r3
 8000964:	f008 fbf0 	bl	8009148 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000968:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	611a      	str	r2, [r3, #16]
 8000978:	615a      	str	r2, [r3, #20]
  DSI_VidCfgTypeDef VidCfg = {0};
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	226c      	movs	r2, #108	; 0x6c
 800097e:	2100      	movs	r1, #0
 8000980:	4618      	mov	r0, r3
 8000982:	f008 fbe1 	bl	8009148 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8000986:	4b64      	ldr	r3, [pc, #400]	; (8000b18 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000988:	4a64      	ldr	r2, [pc, #400]	; (8000b1c <MX_DSIHOST_DSI_Init+0x1d4>)
 800098a:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 800098c:	4b62      	ldr	r3, [pc, #392]	; (8000b18 <MX_DSIHOST_DSI_Init+0x1d0>)
 800098e:	2200      	movs	r2, #0
 8000990:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 2;
 8000992:	4b61      	ldr	r3, [pc, #388]	; (8000b18 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000994:	2202      	movs	r2, #2
 8000996:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 8000998:	4b5f      	ldr	r3, [pc, #380]	; (8000b18 <MX_DSIHOST_DSI_Init+0x1d0>)
 800099a:	2200      	movs	r2, #0
 800099c:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 50;
 800099e:	2332      	movs	r3, #50	; 0x32
 80009a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 80009a4:	2301      	movs	r3, #1
 80009a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 80009aa:	2301      	movs	r3, #1
 80009ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 80009b0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80009b4:	4619      	mov	r1, r3
 80009b6:	4858      	ldr	r0, [pc, #352]	; (8000b18 <MX_DSIHOST_DSI_Init+0x1d0>)
 80009b8:	f002 fb54 	bl	8003064 <HAL_DSI_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_DSIHOST_DSI_Init+0x7e>
  {
    Error_Handler();
 80009c2:	f001 fd29 	bl	8002418 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 80009c6:	2301      	movs	r3, #1
 80009c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 80009d2:	2300      	movs	r3, #0
 80009d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.HighSpeedReadTimeout = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.LowPowerReadTimeout = 0;
 80009de:	2300      	movs	r3, #0
 80009e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  HostTimeouts.HighSpeedWriteTimeout = 0;
 80009e4:	2300      	movs	r3, #0
 80009e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 80009ea:	2300      	movs	r3, #0
 80009ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  HostTimeouts.LowPowerWriteTimeout = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HostTimeouts.BTATimeout = 0;
 80009f6:	2300      	movs	r3, #0
 80009f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 80009fc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000a00:	4619      	mov	r1, r3
 8000a02:	4845      	ldr	r0, [pc, #276]	; (8000b18 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000a04:	f002 ffa1 	bl	800394a <HAL_DSI_ConfigHostTimeouts>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_DSIHOST_DSI_Init+0xca>
  {
    Error_Handler();
 8000a0e:	f001 fd03 	bl	8002418 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 19;
 8000a12:	2313      	movs	r3, #19
 8000a14:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.ClockLaneLP2HSTime = 15;
 8000a16:	230f      	movs	r3, #15
 8000a18:	677b      	str	r3, [r7, #116]	; 0x74
  PhyTimings.DataLaneHS2LPTime = 9;
 8000a1a:	2309      	movs	r3, #9
 8000a1c:	67bb      	str	r3, [r7, #120]	; 0x78
  PhyTimings.DataLaneLP2HSTime = 10;
 8000a1e:	230a      	movs	r3, #10
 8000a20:	67fb      	str	r3, [r7, #124]	; 0x7c
  PhyTimings.DataLaneMaxReadTime = 0;
 8000a22:	2300      	movs	r3, #0
 8000a24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PhyTimings.StopWaitTime = 0;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000a2e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000a32:	4619      	mov	r1, r3
 8000a34:	4838      	ldr	r0, [pc, #224]	; (8000b18 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000a36:	f002 ff1e 	bl	8003876 <HAL_DSI_ConfigPhyTimer>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_DSIHOST_DSI_Init+0xfc>
  {
    Error_Handler();
 8000a40:	f001 fcea 	bl	8002418 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000a44:	f242 7110 	movw	r1, #10000	; 0x2710
 8000a48:	4833      	ldr	r0, [pc, #204]	; (8000b18 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000a4a:	f003 f93a 	bl	8003cc2 <HAL_DSI_SetLowPowerRXFilter>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_DSIHOST_DSI_Init+0x110>
  {
    Error_Handler();
 8000a54:	f001 fce0 	bl	8002418 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000a58:	2100      	movs	r1, #0
 8000a5a:	482f      	ldr	r0, [pc, #188]	; (8000b18 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000a5c:	f002 fc1e 	bl	800329c <HAL_DSI_ConfigErrorMonitor>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_DSIHOST_DSI_Init+0x122>
  {
    Error_Handler();
 8000a66:	f001 fcd7 	bl	8002418 <Error_Handler>
  }
  VidCfg.VirtualChannelID = 0;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	607b      	str	r3, [r7, #4]
  VidCfg.ColorCoding = DSI_RGB888;
 8000a6e:	2305      	movs	r3, #5
 8000a70:	60bb      	str	r3, [r7, #8]
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 8000a72:	2300      	movs	r3, #0
 8000a74:	60fb      	str	r3, [r7, #12]
  VidCfg.Mode = DSI_VID_MODE_NB_EVENTS;
 8000a76:	2301      	movs	r3, #1
 8000a78:	613b      	str	r3, [r7, #16]
  VidCfg.PacketSize = 80;
 8000a7a:	2350      	movs	r3, #80	; 0x50
 8000a7c:	617b      	str	r3, [r7, #20]
  VidCfg.NumberOfChunks = 1;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	61bb      	str	r3, [r7, #24]
  VidCfg.NullPacketSize = 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61fb      	str	r3, [r7, #28]
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8000a86:	2300      	movs	r3, #0
 8000a88:	623b      	str	r3, [r7, #32]
  VidCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	627b      	str	r3, [r7, #36]	; 0x24
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	62bb      	str	r3, [r7, #40]	; 0x28
  VidCfg.HorizontalSyncActive = 252;
 8000a92:	23fc      	movs	r3, #252	; 0xfc
 8000a94:	62fb      	str	r3, [r7, #44]	; 0x2c
  VidCfg.HorizontalBackPorch = 252;
 8000a96:	23fc      	movs	r3, #252	; 0xfc
 8000a98:	633b      	str	r3, [r7, #48]	; 0x30
  VidCfg.HorizontalLine = 836;
 8000a9a:	f44f 7351 	mov.w	r3, #836	; 0x344
 8000a9e:	637b      	str	r3, [r7, #52]	; 0x34
  VidCfg.VerticalSyncActive = 8;
 8000aa0:	2308      	movs	r3, #8
 8000aa2:	63bb      	str	r3, [r7, #56]	; 0x38
  VidCfg.VerticalBackPorch = 8;
 8000aa4:	2308      	movs	r3, #8
 8000aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  VidCfg.VerticalFrontPorch = 8;
 8000aa8:	2308      	movs	r3, #8
 8000aaa:	643b      	str	r3, [r7, #64]	; 0x40
  VidCfg.VerticalActive = 80;
 8000aac:	2350      	movs	r3, #80	; 0x50
 8000aae:	647b      	str	r3, [r7, #68]	; 0x44
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 8000ab0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ab4:	64bb      	str	r3, [r7, #72]	; 0x48
  VidCfg.LPLargestPacketSize = 28;
 8000ab6:	231c      	movs	r3, #28
 8000ab8:	64fb      	str	r3, [r7, #76]	; 0x4c
  VidCfg.LPVACTLargestPacketSize = 80;
 8000aba:	2350      	movs	r3, #80	; 0x50
 8000abc:	653b      	str	r3, [r7, #80]	; 0x50
  VidCfg.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;
 8000abe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ac2:	657b      	str	r3, [r7, #84]	; 0x54
  VidCfg.LPHorizontalBackPorchEnable = DSI_LP_HBP_ENABLE;
 8000ac4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ac8:	65bb      	str	r3, [r7, #88]	; 0x58
  VidCfg.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;
 8000aca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ace:	65fb      	str	r3, [r7, #92]	; 0x5c
  VidCfg.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;
 8000ad0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ad4:	663b      	str	r3, [r7, #96]	; 0x60
  VidCfg.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;
 8000ad6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ada:	667b      	str	r3, [r7, #100]	; 0x64
  VidCfg.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE;
 8000adc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ae0:	66bb      	str	r3, [r7, #104]	; 0x68
  VidCfg.FrameBTAAcknowledgeEnable = DSI_FBTAA_DISABLE;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_DSI_ConfigVideoMode(&hdsi, &VidCfg) != HAL_OK)
 8000ae6:	1d3b      	adds	r3, r7, #4
 8000ae8:	4619      	mov	r1, r3
 8000aea:	480b      	ldr	r0, [pc, #44]	; (8000b18 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000aec:	f002 fcbb 	bl	8003466 <HAL_DSI_ConfigVideoMode>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_DSIHOST_DSI_Init+0x1b2>
  {
    Error_Handler();
 8000af6:	f001 fc8f 	bl	8002418 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000afa:	2100      	movs	r1, #0
 8000afc:	4806      	ldr	r0, [pc, #24]	; (8000b18 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000afe:	f002 fc8a 	bl	8003416 <HAL_DSI_SetGenericVCID>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_DSIHOST_DSI_Init+0x1c4>
  {
    Error_Handler();
 8000b08:	f001 fc86 	bl	8002418 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */
	LCD_PowerOn();
 8000b0c:	f000 fe8a 	bl	8001824 <LCD_PowerOn>
  /* USER CODE END DSIHOST_Init 2 */

}
 8000b10:	bf00      	nop
 8000b12:	37b8      	adds	r7, #184	; 0xb8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20004b34 	.word	0x20004b34
 8000b1c:	40016c00 	.word	0x40016c00

08000b20 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b24:	4b1b      	ldr	r3, [pc, #108]	; (8000b94 <MX_I2C1_Init+0x74>)
 8000b26:	4a1c      	ldr	r2, [pc, #112]	; (8000b98 <MX_I2C1_Init+0x78>)
 8000b28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000b2a:	4b1a      	ldr	r3, [pc, #104]	; (8000b94 <MX_I2C1_Init+0x74>)
 8000b2c:	4a1b      	ldr	r2, [pc, #108]	; (8000b9c <MX_I2C1_Init+0x7c>)
 8000b2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b30:	4b18      	ldr	r3, [pc, #96]	; (8000b94 <MX_I2C1_Init+0x74>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b36:	4b17      	ldr	r3, [pc, #92]	; (8000b94 <MX_I2C1_Init+0x74>)
 8000b38:	2201      	movs	r2, #1
 8000b3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b3c:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <MX_I2C1_Init+0x74>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b42:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <MX_I2C1_Init+0x74>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b48:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <MX_I2C1_Init+0x74>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <MX_I2C1_Init+0x74>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b54:	4b0f      	ldr	r3, [pc, #60]	; (8000b94 <MX_I2C1_Init+0x74>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b5a:	480e      	ldr	r0, [pc, #56]	; (8000b94 <MX_I2C1_Init+0x74>)
 8000b5c:	f003 fab8 	bl	80040d0 <HAL_I2C_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b66:	f001 fc57 	bl	8002418 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	4809      	ldr	r0, [pc, #36]	; (8000b94 <MX_I2C1_Init+0x74>)
 8000b6e:	f003 fb4a 	bl	8004206 <HAL_I2CEx_ConfigAnalogFilter>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b78:	f001 fc4e 	bl	8002418 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	4805      	ldr	r0, [pc, #20]	; (8000b94 <MX_I2C1_Init+0x74>)
 8000b80:	f003 fb8c 	bl	800429c <HAL_I2CEx_ConfigDigitalFilter>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b8a:	f001 fc45 	bl	8002418 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20004b50 	.word	0x20004b50
 8000b98:	40005400 	.word	0x40005400
 8000b9c:	307075b1 	.word	0x307075b1

08000ba0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000ba4:	4b1b      	ldr	r3, [pc, #108]	; (8000c14 <MX_I2C2_Init+0x74>)
 8000ba6:	4a1c      	ldr	r2, [pc, #112]	; (8000c18 <MX_I2C2_Init+0x78>)
 8000ba8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8000baa:	4b1a      	ldr	r3, [pc, #104]	; (8000c14 <MX_I2C2_Init+0x74>)
 8000bac:	4a1b      	ldr	r2, [pc, #108]	; (8000c1c <MX_I2C2_Init+0x7c>)
 8000bae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000bb0:	4b18      	ldr	r3, [pc, #96]	; (8000c14 <MX_I2C2_Init+0x74>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bb6:	4b17      	ldr	r3, [pc, #92]	; (8000c14 <MX_I2C2_Init+0x74>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bbc:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <MX_I2C2_Init+0x74>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000bc2:	4b14      	ldr	r3, [pc, #80]	; (8000c14 <MX_I2C2_Init+0x74>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bc8:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <MX_I2C2_Init+0x74>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bce:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <MX_I2C2_Init+0x74>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bd4:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <MX_I2C2_Init+0x74>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000bda:	480e      	ldr	r0, [pc, #56]	; (8000c14 <MX_I2C2_Init+0x74>)
 8000bdc:	f003 fa78 	bl	80040d0 <HAL_I2C_Init>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000be6:	f001 fc17 	bl	8002418 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bea:	2100      	movs	r1, #0
 8000bec:	4809      	ldr	r0, [pc, #36]	; (8000c14 <MX_I2C2_Init+0x74>)
 8000bee:	f003 fb0a 	bl	8004206 <HAL_I2CEx_ConfigAnalogFilter>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000bf8:	f001 fc0e 	bl	8002418 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	4805      	ldr	r0, [pc, #20]	; (8000c14 <MX_I2C2_Init+0x74>)
 8000c00:	f003 fb4c 	bl	800429c <HAL_I2CEx_ConfigDigitalFilter>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000c0a:	f001 fc05 	bl	8002418 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20004ba4 	.word	0x20004ba4
 8000c18:	40005800 	.word	0x40005800
 8000c1c:	307075b1 	.word	0x307075b1

08000c20 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08e      	sub	sp, #56	; 0x38
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000c26:	1d3b      	adds	r3, r7, #4
 8000c28:	2234      	movs	r2, #52	; 0x34
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f008 fa8b 	bl	8009148 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000c32:	4b38      	ldr	r3, [pc, #224]	; (8000d14 <MX_LTDC_Init+0xf4>)
 8000c34:	4a38      	ldr	r2, [pc, #224]	; (8000d18 <MX_LTDC_Init+0xf8>)
 8000c36:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000c38:	4b36      	ldr	r3, [pc, #216]	; (8000d14 <MX_LTDC_Init+0xf4>)
 8000c3a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000c3e:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8000c40:	4b34      	ldr	r3, [pc, #208]	; (8000d14 <MX_LTDC_Init+0xf4>)
 8000c42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c46:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000c48:	4b32      	ldr	r3, [pc, #200]	; (8000d14 <MX_LTDC_Init+0xf4>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000c4e:	4b31      	ldr	r3, [pc, #196]	; (8000d14 <MX_LTDC_Init+0xf4>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 251;
 8000c54:	4b2f      	ldr	r3, [pc, #188]	; (8000d14 <MX_LTDC_Init+0xf4>)
 8000c56:	22fb      	movs	r2, #251	; 0xfb
 8000c58:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 7;
 8000c5a:	4b2e      	ldr	r3, [pc, #184]	; (8000d14 <MX_LTDC_Init+0xf4>)
 8000c5c:	2207      	movs	r2, #7
 8000c5e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 503;
 8000c60:	4b2c      	ldr	r3, [pc, #176]	; (8000d14 <MX_LTDC_Init+0xf4>)
 8000c62:	f240 12f7 	movw	r2, #503	; 0x1f7
 8000c66:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 15;
 8000c68:	4b2a      	ldr	r3, [pc, #168]	; (8000d14 <MX_LTDC_Init+0xf4>)
 8000c6a:	220f      	movs	r2, #15
 8000c6c:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 583;
 8000c6e:	4b29      	ldr	r3, [pc, #164]	; (8000d14 <MX_LTDC_Init+0xf4>)
 8000c70:	f240 2247 	movw	r2, #583	; 0x247
 8000c74:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 95;
 8000c76:	4b27      	ldr	r3, [pc, #156]	; (8000d14 <MX_LTDC_Init+0xf4>)
 8000c78:	225f      	movs	r2, #95	; 0x5f
 8000c7a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 835;
 8000c7c:	4b25      	ldr	r3, [pc, #148]	; (8000d14 <MX_LTDC_Init+0xf4>)
 8000c7e:	f240 3243 	movw	r2, #835	; 0x343
 8000c82:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 97;
 8000c84:	4b23      	ldr	r3, [pc, #140]	; (8000d14 <MX_LTDC_Init+0xf4>)
 8000c86:	2261      	movs	r2, #97	; 0x61
 8000c88:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 255;
 8000c8a:	4b22      	ldr	r3, [pc, #136]	; (8000d14 <MX_LTDC_Init+0xf4>)
 8000c8c:	22ff      	movs	r2, #255	; 0xff
 8000c8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 255;
 8000c92:	4b20      	ldr	r3, [pc, #128]	; (8000d14 <MX_LTDC_Init+0xf4>)
 8000c94:	22ff      	movs	r2, #255	; 0xff
 8000c96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 255;
 8000c9a:	4b1e      	ldr	r3, [pc, #120]	; (8000d14 <MX_LTDC_Init+0xf4>)
 8000c9c:	22ff      	movs	r2, #255	; 0xff
 8000c9e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000ca2:	481c      	ldr	r0, [pc, #112]	; (8000d14 <MX_LTDC_Init+0xf4>)
 8000ca4:	f003 fb46 	bl	8004334 <HAL_LTDC_Init>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_LTDC_Init+0x92>
  {
    Error_Handler();
 8000cae:	f001 fbb3 	bl	8002418 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 80;
 8000cb6:	2350      	movs	r3, #80	; 0x50
 8000cb8:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 80;
 8000cbe:	2350      	movs	r3, #80	; 0x50
 8000cc0:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000cc6:	23ff      	movs	r3, #255	; 0xff
 8000cc8:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000cce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cd2:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000cd4:	2305      	movs	r3, #5
 8000cd6:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = (uint32_t *)image_80x80_rgb888;
 8000cd8:	4b10      	ldr	r3, [pc, #64]	; (8000d1c <MX_LTDC_Init+0xfc>)
 8000cda:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 80;
 8000cdc:	2350      	movs	r3, #80	; 0x50
 8000cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 80;
 8000ce0:	2350      	movs	r3, #80	; 0x50
 8000ce2:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 255;
 8000ce4:	23ff      	movs	r3, #255	; 0xff
 8000ce6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 255;
 8000cea:	23ff      	movs	r3, #255	; 0xff
 8000cec:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 255;
 8000cf0:	23ff      	movs	r3, #255	; 0xff
 8000cf2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000cf6:	1d3b      	adds	r3, r7, #4
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4805      	ldr	r0, [pc, #20]	; (8000d14 <MX_LTDC_Init+0xf4>)
 8000cfe:	f003 fbe9 	bl	80044d4 <HAL_LTDC_ConfigLayer>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 8000d08:	f001 fb86 	bl	8002418 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */
  //(uint32_t *)image_80x80_rgb888;
  /* USER CODE END LTDC_Init 2 */

}
 8000d0c:	bf00      	nop
 8000d0e:	3738      	adds	r7, #56	; 0x38
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	20004bf8 	.word	0x20004bf8
 8000d18:	40016800 	.word	0x40016800
 8000d1c:	2000000c 	.word	0x2000000c

08000d20 <MX_OCTOSPI2_Init>:
  * @brief OCTOSPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI2_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI2_Init 0 */

  /* USER CODE END OCTOSPI2_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 8000d26:	1d3b      	adds	r3, r7, #4
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI2_Init 1 */

  /* USER CODE END OCTOSPI2_Init 1 */
  /* OCTOSPI2 parameter configuration*/
  hospi2.Instance = OCTOSPI2;
 8000d34:	4b22      	ldr	r3, [pc, #136]	; (8000dc0 <MX_OCTOSPI2_Init+0xa0>)
 8000d36:	4a23      	ldr	r2, [pc, #140]	; (8000dc4 <MX_OCTOSPI2_Init+0xa4>)
 8000d38:	601a      	str	r2, [r3, #0]
  hospi2.Init.FifoThreshold = 1;
 8000d3a:	4b21      	ldr	r3, [pc, #132]	; (8000dc0 <MX_OCTOSPI2_Init+0xa0>)
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	605a      	str	r2, [r3, #4]
  hospi2.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000d40:	4b1f      	ldr	r3, [pc, #124]	; (8000dc0 <MX_OCTOSPI2_Init+0xa0>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	609a      	str	r2, [r3, #8]
  hospi2.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8000d46:	4b1e      	ldr	r3, [pc, #120]	; (8000dc0 <MX_OCTOSPI2_Init+0xa0>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	60da      	str	r2, [r3, #12]
  hospi2.Init.DeviceSize = 32;
 8000d4c:	4b1c      	ldr	r3, [pc, #112]	; (8000dc0 <MX_OCTOSPI2_Init+0xa0>)
 8000d4e:	2220      	movs	r2, #32
 8000d50:	611a      	str	r2, [r3, #16]
  hospi2.Init.ChipSelectHighTime = 1;
 8000d52:	4b1b      	ldr	r3, [pc, #108]	; (8000dc0 <MX_OCTOSPI2_Init+0xa0>)
 8000d54:	2201      	movs	r2, #1
 8000d56:	615a      	str	r2, [r3, #20]
  hospi2.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000d58:	4b19      	ldr	r3, [pc, #100]	; (8000dc0 <MX_OCTOSPI2_Init+0xa0>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	619a      	str	r2, [r3, #24]
  hospi2.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000d5e:	4b18      	ldr	r3, [pc, #96]	; (8000dc0 <MX_OCTOSPI2_Init+0xa0>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	61da      	str	r2, [r3, #28]
  hospi2.Init.ClockPrescaler = 1;
 8000d64:	4b16      	ldr	r3, [pc, #88]	; (8000dc0 <MX_OCTOSPI2_Init+0xa0>)
 8000d66:	2201      	movs	r2, #1
 8000d68:	621a      	str	r2, [r3, #32]
  hospi2.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000d6a:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <MX_OCTOSPI2_Init+0xa0>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	625a      	str	r2, [r3, #36]	; 0x24
  hospi2.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000d70:	4b13      	ldr	r3, [pc, #76]	; (8000dc0 <MX_OCTOSPI2_Init+0xa0>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	629a      	str	r2, [r3, #40]	; 0x28
  hospi2.Init.ChipSelectBoundary = 0;
 8000d76:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <MX_OCTOSPI2_Init+0xa0>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi2.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000d7c:	4b10      	ldr	r3, [pc, #64]	; (8000dc0 <MX_OCTOSPI2_Init+0xa0>)
 8000d7e:	2208      	movs	r2, #8
 8000d80:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 8000d82:	480f      	ldr	r0, [pc, #60]	; (8000dc0 <MX_OCTOSPI2_Init+0xa0>)
 8000d84:	f003 fd7c 	bl	8004880 <HAL_OSPI_Init>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_OCTOSPI2_Init+0x72>
  {
    Error_Handler();
 8000d8e:	f001 fb43 	bl	8002418 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 2;
 8000d92:	2302      	movs	r3, #2
 8000d94:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 2;
 8000d96:	2302      	movs	r3, #2
 8000d98:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 8000d9a:	4b0b      	ldr	r3, [pc, #44]	; (8000dc8 <MX_OCTOSPI2_Init+0xa8>)
 8000d9c:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi2, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000d9e:	1d3b      	adds	r3, r7, #4
 8000da0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000da4:	4619      	mov	r1, r3
 8000da6:	4806      	ldr	r0, [pc, #24]	; (8000dc0 <MX_OCTOSPI2_Init+0xa0>)
 8000da8:	f003 fe24 	bl	80049f4 <HAL_OSPIM_Config>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_OCTOSPI2_Init+0x96>
  {
    Error_Handler();
 8000db2:	f001 fb31 	bl	8002418 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI2_Init 2 */

  /* USER CODE END OCTOSPI2_Init 2 */

}
 8000db6:	bf00      	nop
 8000db8:	3718      	adds	r7, #24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20004ca0 	.word	0x20004ca0
 8000dc4:	a0001400 	.word	0xa0001400
 8000dc8:	00010002 	.word	0x00010002

08000dcc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000dd0:	4b1b      	ldr	r3, [pc, #108]	; (8000e40 <MX_SPI1_Init+0x74>)
 8000dd2:	4a1c      	ldr	r2, [pc, #112]	; (8000e44 <MX_SPI1_Init+0x78>)
 8000dd4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000dd6:	4b1a      	ldr	r3, [pc, #104]	; (8000e40 <MX_SPI1_Init+0x74>)
 8000dd8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ddc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000dde:	4b18      	ldr	r3, [pc, #96]	; (8000e40 <MX_SPI1_Init+0x74>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000de4:	4b16      	ldr	r3, [pc, #88]	; (8000e40 <MX_SPI1_Init+0x74>)
 8000de6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000dea:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dec:	4b14      	ldr	r3, [pc, #80]	; (8000e40 <MX_SPI1_Init+0x74>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000df2:	4b13      	ldr	r3, [pc, #76]	; (8000e40 <MX_SPI1_Init+0x74>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000df8:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <MX_SPI1_Init+0x74>)
 8000dfa:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000dfe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000e00:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <MX_SPI1_Init+0x74>)
 8000e02:	2220      	movs	r2, #32
 8000e04:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e06:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <MX_SPI1_Init+0x74>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e0c:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <MX_SPI1_Init+0x74>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e12:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <MX_SPI1_Init+0x74>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000e18:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <MX_SPI1_Init+0x74>)
 8000e1a:	2207      	movs	r2, #7
 8000e1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e1e:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <MX_SPI1_Init+0x74>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e24:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <MX_SPI1_Init+0x74>)
 8000e26:	2208      	movs	r2, #8
 8000e28:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e2a:	4805      	ldr	r0, [pc, #20]	; (8000e40 <MX_SPI1_Init+0x74>)
 8000e2c:	f005 ff22 	bl	8006c74 <HAL_SPI_Init>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000e36:	f001 faef 	bl	8002418 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20004cf0 	.word	0x20004cf0
 8000e44:	40013000 	.word	0x40013000

08000e48 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000e4c:	4b19      	ldr	r3, [pc, #100]	; (8000eb4 <MX_SPI2_Init+0x6c>)
 8000e4e:	4a1a      	ldr	r2, [pc, #104]	; (8000eb8 <MX_SPI2_Init+0x70>)
 8000e50:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000e52:	4b18      	ldr	r3, [pc, #96]	; (8000eb4 <MX_SPI2_Init+0x6c>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000e58:	4b16      	ldr	r3, [pc, #88]	; (8000eb4 <MX_SPI2_Init+0x6c>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e5e:	4b15      	ldr	r3, [pc, #84]	; (8000eb4 <MX_SPI2_Init+0x6c>)
 8000e60:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000e64:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e66:	4b13      	ldr	r3, [pc, #76]	; (8000eb4 <MX_SPI2_Init+0x6c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e6c:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <MX_SPI2_Init+0x6c>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000e72:	4b10      	ldr	r3, [pc, #64]	; (8000eb4 <MX_SPI2_Init+0x6c>)
 8000e74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e78:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e7a:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <MX_SPI2_Init+0x6c>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e80:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <MX_SPI2_Init+0x6c>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e86:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <MX_SPI2_Init+0x6c>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000e8c:	4b09      	ldr	r3, [pc, #36]	; (8000eb4 <MX_SPI2_Init+0x6c>)
 8000e8e:	2207      	movs	r2, #7
 8000e90:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e92:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <MX_SPI2_Init+0x6c>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <MX_SPI2_Init+0x6c>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000e9e:	4805      	ldr	r0, [pc, #20]	; (8000eb4 <MX_SPI2_Init+0x6c>)
 8000ea0:	f005 fee8 	bl	8006c74 <HAL_SPI_Init>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_SPI2_Init+0x66>
  {
    Error_Handler();
 8000eaa:	f001 fab5 	bl	8002418 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20004d54 	.word	0x20004d54
 8000eb8:	40003800 	.word	0x40003800

08000ebc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000ec0:	4b18      	ldr	r3, [pc, #96]	; (8000f24 <MX_SPI3_Init+0x68>)
 8000ec2:	4a19      	ldr	r2, [pc, #100]	; (8000f28 <MX_SPI3_Init+0x6c>)
 8000ec4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8000ec6:	4b17      	ldr	r3, [pc, #92]	; (8000f24 <MX_SPI3_Init+0x68>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000ecc:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <MX_SPI3_Init+0x68>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ed2:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <MX_SPI3_Init+0x68>)
 8000ed4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000ed8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000eda:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <MX_SPI3_Init+0x68>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ee0:	4b10      	ldr	r3, [pc, #64]	; (8000f24 <MX_SPI3_Init+0x68>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 8000ee6:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <MX_SPI3_Init+0x68>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000eec:	4b0d      	ldr	r3, [pc, #52]	; (8000f24 <MX_SPI3_Init+0x68>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ef2:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <MX_SPI3_Init+0x68>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ef8:	4b0a      	ldr	r3, [pc, #40]	; (8000f24 <MX_SPI3_Init+0x68>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000efe:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <MX_SPI3_Init+0x68>)
 8000f00:	2207      	movs	r2, #7
 8000f02:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f04:	4b07      	ldr	r3, [pc, #28]	; (8000f24 <MX_SPI3_Init+0x68>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000f0a:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <MX_SPI3_Init+0x68>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000f10:	4804      	ldr	r0, [pc, #16]	; (8000f24 <MX_SPI3_Init+0x68>)
 8000f12:	f005 feaf 	bl	8006c74 <HAL_SPI_Init>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_SPI3_Init+0x64>
  {
    Error_Handler();
 8000f1c:	f001 fa7c 	bl	8002418 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20004db8 	.word	0x20004db8
 8000f28:	40003c00 	.word	0x40003c00

08000f2c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000f30:	4b22      	ldr	r3, [pc, #136]	; (8000fbc <MX_UART4_Init+0x90>)
 8000f32:	4a23      	ldr	r2, [pc, #140]	; (8000fc0 <MX_UART4_Init+0x94>)
 8000f34:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000f36:	4b21      	ldr	r3, [pc, #132]	; (8000fbc <MX_UART4_Init+0x90>)
 8000f38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f3c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000f3e:	4b1f      	ldr	r3, [pc, #124]	; (8000fbc <MX_UART4_Init+0x90>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000f44:	4b1d      	ldr	r3, [pc, #116]	; (8000fbc <MX_UART4_Init+0x90>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000f4a:	4b1c      	ldr	r3, [pc, #112]	; (8000fbc <MX_UART4_Init+0x90>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000f50:	4b1a      	ldr	r3, [pc, #104]	; (8000fbc <MX_UART4_Init+0x90>)
 8000f52:	220c      	movs	r2, #12
 8000f54:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f56:	4b19      	ldr	r3, [pc, #100]	; (8000fbc <MX_UART4_Init+0x90>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f5c:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <MX_UART4_Init+0x90>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f62:	4b16      	ldr	r3, [pc, #88]	; (8000fbc <MX_UART4_Init+0x90>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f68:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <MX_UART4_Init+0x90>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f6e:	4b13      	ldr	r3, [pc, #76]	; (8000fbc <MX_UART4_Init+0x90>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000f74:	4811      	ldr	r0, [pc, #68]	; (8000fbc <MX_UART4_Init+0x90>)
 8000f76:	f007 f9ef 	bl	8008358 <HAL_UART_Init>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000f80:	f001 fa4a 	bl	8002418 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f84:	2100      	movs	r1, #0
 8000f86:	480d      	ldr	r0, [pc, #52]	; (8000fbc <MX_UART4_Init+0x90>)
 8000f88:	f008 f814 	bl	8008fb4 <HAL_UARTEx_SetTxFifoThreshold>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000f92:	f001 fa41 	bl	8002418 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f96:	2100      	movs	r1, #0
 8000f98:	4808      	ldr	r0, [pc, #32]	; (8000fbc <MX_UART4_Init+0x90>)
 8000f9a:	f008 f849 	bl	8009030 <HAL_UARTEx_SetRxFifoThreshold>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000fa4:	f001 fa38 	bl	8002418 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000fa8:	4804      	ldr	r0, [pc, #16]	; (8000fbc <MX_UART4_Init+0x90>)
 8000faa:	f007 ffca 	bl	8008f42 <HAL_UARTEx_DisableFifoMode>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000fb4:	f001 fa30 	bl	8002418 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20004e1c 	.word	0x20004e1c
 8000fc0:	40004c00 	.word	0x40004c00

08000fc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08e      	sub	sp, #56	; 0x38
 8000fc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]
 8000fd4:	609a      	str	r2, [r3, #8]
 8000fd6:	60da      	str	r2, [r3, #12]
 8000fd8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fda:	4ba4      	ldr	r3, [pc, #656]	; (800126c <MX_GPIO_Init+0x2a8>)
 8000fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fde:	4aa3      	ldr	r2, [pc, #652]	; (800126c <MX_GPIO_Init+0x2a8>)
 8000fe0:	f043 0302 	orr.w	r3, r3, #2
 8000fe4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fe6:	4ba1      	ldr	r3, [pc, #644]	; (800126c <MX_GPIO_Init+0x2a8>)
 8000fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fea:	f003 0302 	and.w	r3, r3, #2
 8000fee:	623b      	str	r3, [r7, #32]
 8000ff0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ff2:	4b9e      	ldr	r3, [pc, #632]	; (800126c <MX_GPIO_Init+0x2a8>)
 8000ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff6:	4a9d      	ldr	r2, [pc, #628]	; (800126c <MX_GPIO_Init+0x2a8>)
 8000ff8:	f043 0308 	orr.w	r3, r3, #8
 8000ffc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ffe:	4b9b      	ldr	r3, [pc, #620]	; (800126c <MX_GPIO_Init+0x2a8>)
 8001000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001002:	f003 0308 	and.w	r3, r3, #8
 8001006:	61fb      	str	r3, [r7, #28]
 8001008:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800100a:	4b98      	ldr	r3, [pc, #608]	; (800126c <MX_GPIO_Init+0x2a8>)
 800100c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100e:	4a97      	ldr	r2, [pc, #604]	; (800126c <MX_GPIO_Init+0x2a8>)
 8001010:	f043 0304 	orr.w	r3, r3, #4
 8001014:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001016:	4b95      	ldr	r3, [pc, #596]	; (800126c <MX_GPIO_Init+0x2a8>)
 8001018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101a:	f003 0304 	and.w	r3, r3, #4
 800101e:	61bb      	str	r3, [r7, #24]
 8001020:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001022:	4b92      	ldr	r3, [pc, #584]	; (800126c <MX_GPIO_Init+0x2a8>)
 8001024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001026:	4a91      	ldr	r2, [pc, #580]	; (800126c <MX_GPIO_Init+0x2a8>)
 8001028:	f043 0301 	orr.w	r3, r3, #1
 800102c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800102e:	4b8f      	ldr	r3, [pc, #572]	; (800126c <MX_GPIO_Init+0x2a8>)
 8001030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	617b      	str	r3, [r7, #20]
 8001038:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800103a:	4b8c      	ldr	r3, [pc, #560]	; (800126c <MX_GPIO_Init+0x2a8>)
 800103c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103e:	4a8b      	ldr	r2, [pc, #556]	; (800126c <MX_GPIO_Init+0x2a8>)
 8001040:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001044:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001046:	4b89      	ldr	r3, [pc, #548]	; (800126c <MX_GPIO_Init+0x2a8>)
 8001048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800104e:	613b      	str	r3, [r7, #16]
 8001050:	693b      	ldr	r3, [r7, #16]
  HAL_PWREx_EnableVddIO2();
 8001052:	f004 f9af 	bl	80053b4 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001056:	4b85      	ldr	r3, [pc, #532]	; (800126c <MX_GPIO_Init+0x2a8>)
 8001058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105a:	4a84      	ldr	r2, [pc, #528]	; (800126c <MX_GPIO_Init+0x2a8>)
 800105c:	f043 0320 	orr.w	r3, r3, #32
 8001060:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001062:	4b82      	ldr	r3, [pc, #520]	; (800126c <MX_GPIO_Init+0x2a8>)
 8001064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001066:	f003 0320 	and.w	r3, r3, #32
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800106e:	4b7f      	ldr	r3, [pc, #508]	; (800126c <MX_GPIO_Init+0x2a8>)
 8001070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001072:	4a7e      	ldr	r2, [pc, #504]	; (800126c <MX_GPIO_Init+0x2a8>)
 8001074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001078:	64d3      	str	r3, [r2, #76]	; 0x4c
 800107a:	4b7c      	ldr	r3, [pc, #496]	; (800126c <MX_GPIO_Init+0x2a8>)
 800107c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001082:	60bb      	str	r3, [r7, #8]
 8001084:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001086:	4b79      	ldr	r3, [pc, #484]	; (800126c <MX_GPIO_Init+0x2a8>)
 8001088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108a:	4a78      	ldr	r2, [pc, #480]	; (800126c <MX_GPIO_Init+0x2a8>)
 800108c:	f043 0310 	orr.w	r3, r3, #16
 8001090:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001092:	4b76      	ldr	r3, [pc, #472]	; (800126c <MX_GPIO_Init+0x2a8>)
 8001094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001096:	f003 0310 	and.w	r3, r3, #16
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(flash_cs_GPIO_Port, flash_cs_Pin, GPIO_PIN_SET);
 800109e:	2201      	movs	r2, #1
 80010a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010a4:	4872      	ldr	r0, [pc, #456]	; (8001270 <MX_GPIO_Init+0x2ac>)
 80010a6:	f002 ffe3 	bl	8004070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, flash_mosi_Pin|flash_clk_Pin|GPIO_PIN_14, GPIO_PIN_RESET);
 80010aa:	2200      	movs	r2, #0
 80010ac:	f44f 418a 	mov.w	r1, #17664	; 0x4500
 80010b0:	4870      	ldr	r0, [pc, #448]	; (8001274 <MX_GPIO_Init+0x2b0>)
 80010b2:	f002 ffdd 	bl	8004070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 80010b6:	2200      	movs	r2, #0
 80010b8:	21a0      	movs	r1, #160	; 0xa0
 80010ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010be:	f002 ffd7 	bl	8004070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 80010c2:	2200      	movs	r2, #0
 80010c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010c8:	486b      	ldr	r0, [pc, #428]	; (8001278 <MX_GPIO_Init+0x2b4>)
 80010ca:	f002 ffd1 	bl	8004070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80010ce:	2200      	movs	r2, #0
 80010d0:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80010d4:	4869      	ldr	r0, [pc, #420]	; (800127c <MX_GPIO_Init+0x2b8>)
 80010d6:	f002 ffcb 	bl	8004070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 80010da:	2201      	movs	r2, #1
 80010dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010e0:	4865      	ldr	r0, [pc, #404]	; (8001278 <MX_GPIO_Init+0x2b4>)
 80010e2:	f002 ffc5 	bl	8004070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : flash_cs_Pin */
  GPIO_InitStruct.Pin = flash_cs_Pin;
 80010e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ec:	2301      	movs	r3, #1
 80010ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f4:	2303      	movs	r3, #3
 80010f6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(flash_cs_GPIO_Port, &GPIO_InitStruct);
 80010f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010fc:	4619      	mov	r1, r3
 80010fe:	485c      	ldr	r0, [pc, #368]	; (8001270 <MX_GPIO_Init+0x2ac>)
 8001100:	f002 fe0c 	bl	8003d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : flash_mosi_Pin flash_clk_Pin */
  GPIO_InitStruct.Pin = flash_mosi_Pin|flash_clk_Pin;
 8001104:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110a:	2301      	movs	r3, #1
 800110c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001112:	2303      	movs	r3, #3
 8001114:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001116:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800111a:	4619      	mov	r1, r3
 800111c:	4855      	ldr	r0, [pc, #340]	; (8001274 <MX_GPIO_Init+0x2b0>)
 800111e:	f002 fdfd 	bl	8003d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : flash_miso_Pin */
  GPIO_InitStruct.Pin = flash_miso_Pin;
 8001122:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001126:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001128:	2300      	movs	r3, #0
 800112a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(flash_miso_GPIO_Port, &GPIO_InitStruct);
 8001130:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001134:	4619      	mov	r1, r3
 8001136:	484f      	ldr	r0, [pc, #316]	; (8001274 <MX_GPIO_Init+0x2b0>)
 8001138:	f002 fdf0 	bl	8003d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800113c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001140:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001142:	2300      	movs	r3, #0
 8001144:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800114a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800114e:	4619      	mov	r1, r3
 8001150:	484b      	ldr	r0, [pc, #300]	; (8001280 <MX_GPIO_Init+0x2bc>)
 8001152:	f002 fde3 	bl	8003d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 8001156:	2318      	movs	r3, #24
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800115a:	2300      	movs	r3, #0
 800115c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001162:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001166:	4619      	mov	r1, r3
 8001168:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800116c:	f002 fdd6 	bl	8003d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001170:	23a0      	movs	r3, #160	; 0xa0
 8001172:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001174:	2301      	movs	r3, #1
 8001176:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117c:	2300      	movs	r3, #0
 800117e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001180:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001184:	4619      	mov	r1, r3
 8001186:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800118a:	f002 fdc7 	bl	8003d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800118e:	2310      	movs	r3, #16
 8001190:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001192:	2300      	movs	r3, #0
 8001194:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800119a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800119e:	4619      	mov	r1, r3
 80011a0:	4833      	ldr	r0, [pc, #204]	; (8001270 <MX_GPIO_Init+0x2ac>)
 80011a2:	f002 fdbb 	bl	8003d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ac:	2301      	movs	r3, #1
 80011ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b4:	2300      	movs	r3, #0
 80011b6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011bc:	4619      	mov	r1, r3
 80011be:	482e      	ldr	r0, [pc, #184]	; (8001278 <MX_GPIO_Init+0x2b4>)
 80011c0:	f002 fdac 	bl	8003d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80011c4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80011c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ca:	2301      	movs	r3, #1
 80011cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d2:	2300      	movs	r3, #0
 80011d4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011da:	4619      	mov	r1, r3
 80011dc:	4827      	ldr	r0, [pc, #156]	; (800127c <MX_GPIO_Init+0x2b8>)
 80011de:	f002 fd9d 	bl	8003d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011e2:	2301      	movs	r3, #1
 80011e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e6:	2300      	movs	r3, #0
 80011e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f2:	4619      	mov	r1, r3
 80011f4:	4821      	ldr	r0, [pc, #132]	; (800127c <MX_GPIO_Init+0x2b8>)
 80011f6:	f002 fd91 	bl	8003d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80011fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001200:	2301      	movs	r3, #1
 8001202:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001208:	2300      	movs	r3, #0
 800120a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800120c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001210:	4619      	mov	r1, r3
 8001212:	4818      	ldr	r0, [pc, #96]	; (8001274 <MX_GPIO_Init+0x2b0>)
 8001214:	f002 fd82 	bl	8003d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001218:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800121c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800121e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001222:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001224:	2302      	movs	r3, #2
 8001226:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001228:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800122c:	4619      	mov	r1, r3
 800122e:	4812      	ldr	r0, [pc, #72]	; (8001278 <MX_GPIO_Init+0x2b4>)
 8001230:	f002 fd74 	bl	8003d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001234:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001238:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123a:	2301      	movs	r3, #1
 800123c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800123e:	2301      	movs	r3, #1
 8001240:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001242:	2303      	movs	r3, #3
 8001244:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001246:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800124a:	4619      	mov	r1, r3
 800124c:	480a      	ldr	r0, [pc, #40]	; (8001278 <MX_GPIO_Init+0x2b4>)
 800124e:	f002 fd65 	bl	8003d1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8001252:	2200      	movs	r2, #0
 8001254:	2103      	movs	r1, #3
 8001256:	2028      	movs	r0, #40	; 0x28
 8001258:	f001 fe27 	bl	8002eaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800125c:	2028      	movs	r0, #40	; 0x28
 800125e:	f001 fe40 	bl	8002ee2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001262:	bf00      	nop
 8001264:	3738      	adds	r7, #56	; 0x38
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40021000 	.word	0x40021000
 8001270:	48000800 	.word	0x48000800
 8001274:	48001400 	.word	0x48001400
 8001278:	48001000 	.word	0x48001000
 800127c:	48000400 	.word	0x48000400
 8001280:	48000c00 	.word	0x48000c00

08001284 <mipi_config>:

/* USER CODE BEGIN 4 */
void mipi_config() {
 8001284:	b590      	push	{r4, r7, lr}
 8001286:	b0af      	sub	sp, #188	; 0xbc
 8001288:	af02      	add	r7, sp, #8
	if (HAL_DSI_Start(&hdsi) != HAL_OK) {
 800128a:	48c4      	ldr	r0, [pc, #784]	; (800159c <mipi_config+0x318>)
 800128c:	f002 fc23 	bl	8003ad6 <HAL_DSI_Start>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <mipi_config+0x16>
		Error_Handler();
 8001296:	f001 f8bf 	bl	8002418 <Error_Handler>
	}
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xF0, 0xC3);
 800129a:	23c3      	movs	r3, #195	; 0xc3
 800129c:	9300      	str	r3, [sp, #0]
 800129e:	23f0      	movs	r3, #240	; 0xf0
 80012a0:	2215      	movs	r2, #21
 80012a2:	2100      	movs	r1, #0
 80012a4:	48bd      	ldr	r0, [pc, #756]	; (800159c <mipi_config+0x318>)
 80012a6:	f002 fc52 	bl	8003b4e <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xF0, 0x96);
 80012aa:	2396      	movs	r3, #150	; 0x96
 80012ac:	9300      	str	r3, [sp, #0]
 80012ae:	23f0      	movs	r3, #240	; 0xf0
 80012b0:	2215      	movs	r2, #21
 80012b2:	2100      	movs	r1, #0
 80012b4:	48b9      	ldr	r0, [pc, #740]	; (800159c <mipi_config+0x318>)
 80012b6:	f002 fc4a 	bl	8003b4e <HAL_DSI_ShortWrite>
	uint8_t cmd3[7] = { 0x00, 0x77, 0x1F, 0x04, 0x2A, 0x80, 0x33 };
 80012ba:	4ab9      	ldr	r2, [pc, #740]	; (80015a0 <mipi_config+0x31c>)
 80012bc:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80012c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012c4:	6018      	str	r0, [r3, #0]
 80012c6:	3304      	adds	r3, #4
 80012c8:	8019      	strh	r1, [r3, #0]
 80012ca:	3302      	adds	r3, #2
 80012cc:	0c0a      	lsrs	r2, r1, #16
 80012ce:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 8, 0xE7, cmd3);
 80012d0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80012d4:	9301      	str	r3, [sp, #4]
 80012d6:	23e7      	movs	r3, #231	; 0xe7
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	2308      	movs	r3, #8
 80012dc:	2239      	movs	r2, #57	; 0x39
 80012de:	2100      	movs	r1, #0
 80012e0:	48ae      	ldr	r0, [pc, #696]	; (800159c <mipi_config+0x318>)
 80012e2:	f002 fc56 	bl	8003b92 <HAL_DSI_LongWrite>
	uint8_t cmd4[3] = { 0xC0, 0x68, 0xE0 };
 80012e6:	4aaf      	ldr	r2, [pc, #700]	; (80015a4 <mipi_config+0x320>)
 80012e8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012ec:	6812      	ldr	r2, [r2, #0]
 80012ee:	4611      	mov	r1, r2
 80012f0:	8019      	strh	r1, [r3, #0]
 80012f2:	3302      	adds	r3, #2
 80012f4:	0c12      	lsrs	r2, r2, #16
 80012f6:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, 0xA4, cmd4);
 80012f8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012fc:	9301      	str	r3, [sp, #4]
 80012fe:	23a4      	movs	r3, #164	; 0xa4
 8001300:	9300      	str	r3, [sp, #0]
 8001302:	2304      	movs	r3, #4
 8001304:	2239      	movs	r2, #57	; 0x39
 8001306:	2100      	movs	r1, #0
 8001308:	48a4      	ldr	r0, [pc, #656]	; (800159c <mipi_config+0x318>)
 800130a:	f002 fc42 	bl	8003b92 <HAL_DSI_LongWrite>
	uint8_t cmd5[4] = { 0x42, 0x05, 0x24, 0x03 };
 800130e:	4ba6      	ldr	r3, [pc, #664]	; (80015a8 <mipi_config+0x324>)
 8001310:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC3, cmd5);
 8001314:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001318:	9301      	str	r3, [sp, #4]
 800131a:	23c3      	movs	r3, #195	; 0xc3
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	2305      	movs	r3, #5
 8001320:	2239      	movs	r2, #57	; 0x39
 8001322:	2100      	movs	r1, #0
 8001324:	489d      	ldr	r0, [pc, #628]	; (800159c <mipi_config+0x318>)
 8001326:	f002 fc34 	bl	8003b92 <HAL_DSI_LongWrite>
	uint8_t cmd6[4] = { 0x42, 0x05, 0x24, 0x03 };
 800132a:	4b9f      	ldr	r3, [pc, #636]	; (80015a8 <mipi_config+0x324>)
 800132c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC4, cmd6);
 8001330:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001334:	9301      	str	r3, [sp, #4]
 8001336:	23c4      	movs	r3, #196	; 0xc4
 8001338:	9300      	str	r3, [sp, #0]
 800133a:	2305      	movs	r3, #5
 800133c:	2239      	movs	r2, #57	; 0x39
 800133e:	2100      	movs	r1, #0
 8001340:	4896      	ldr	r0, [pc, #600]	; (800159c <mipi_config+0x318>)
 8001342:	f002 fc26 	bl	8003b92 <HAL_DSI_LongWrite>
	uint8_t cmd7[12] = { 0x0F, 0xF5, 0x10, 0x13, 0x22, 0x25, 0x10, 0x55, 0x55,
 8001346:	4a99      	ldr	r2, [pc, #612]	; (80015ac <mipi_config+0x328>)
 8001348:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800134c:	ca07      	ldmia	r2, {r0, r1, r2}
 800134e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x55, 0x55, 0x55 };
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 13, 0xE5, cmd7);
 8001352:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001356:	9301      	str	r3, [sp, #4]
 8001358:	23e5      	movs	r3, #229	; 0xe5
 800135a:	9300      	str	r3, [sp, #0]
 800135c:	230d      	movs	r3, #13
 800135e:	2239      	movs	r2, #57	; 0x39
 8001360:	2100      	movs	r1, #0
 8001362:	488e      	ldr	r0, [pc, #568]	; (800159c <mipi_config+0x318>)
 8001364:	f002 fc15 	bl	8003b92 <HAL_DSI_LongWrite>
	uint8_t cmd8[12] = { 0x0F, 0xF5, 0x10, 0x13, 0x22, 0x25, 0x10, 0x55, 0x55,
 8001368:	4a90      	ldr	r2, [pc, #576]	; (80015ac <mipi_config+0x328>)
 800136a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800136e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001370:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x55, 0x55, 0x55 };
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 13, 0xE6, cmd8);
 8001374:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001378:	9301      	str	r3, [sp, #4]
 800137a:	23e6      	movs	r3, #230	; 0xe6
 800137c:	9300      	str	r3, [sp, #0]
 800137e:	230d      	movs	r3, #13
 8001380:	2239      	movs	r2, #57	; 0x39
 8001382:	2100      	movs	r1, #0
 8001384:	4885      	ldr	r0, [pc, #532]	; (800159c <mipi_config+0x318>)
 8001386:	f002 fc04 	bl	8003b92 <HAL_DSI_LongWrite>
	uint8_t cmd9[7] = { 0x00, 0x55, 0x00, 0x00, 0x00, 0x49, 0x22 };
 800138a:	4a89      	ldr	r2, [pc, #548]	; (80015b0 <mipi_config+0x32c>)
 800138c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001390:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001394:	6018      	str	r0, [r3, #0]
 8001396:	3304      	adds	r3, #4
 8001398:	8019      	strh	r1, [r3, #0]
 800139a:	3302      	adds	r3, #2
 800139c:	0c0a      	lsrs	r2, r1, #16
 800139e:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 8, 0xEC, cmd9);
 80013a0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80013a4:	9301      	str	r3, [sp, #4]
 80013a6:	23ec      	movs	r3, #236	; 0xec
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	2308      	movs	r3, #8
 80013ac:	2239      	movs	r2, #57	; 0x39
 80013ae:	2100      	movs	r1, #0
 80013b0:	487a      	ldr	r0, [pc, #488]	; (800159c <mipi_config+0x318>)
 80013b2:	f002 fbee 	bl	8003b92 <HAL_DSI_LongWrite>
	uint8_t cmd10[4] = { 0x88, 0x05, 0x0F, 0x18 };
 80013b6:	4b7f      	ldr	r3, [pc, #508]	; (80015b4 <mipi_config+0x330>)
 80013b8:	67bb      	str	r3, [r7, #120]	; 0x78
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC1, cmd10);
 80013ba:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80013be:	9301      	str	r3, [sp, #4]
 80013c0:	23c1      	movs	r3, #193	; 0xc1
 80013c2:	9300      	str	r3, [sp, #0]
 80013c4:	2305      	movs	r3, #5
 80013c6:	2239      	movs	r2, #57	; 0x39
 80013c8:	2100      	movs	r1, #0
 80013ca:	4874      	ldr	r0, [pc, #464]	; (800159c <mipi_config+0x318>)
 80013cc:	f002 fbe1 	bl	8003b92 <HAL_DSI_LongWrite>
	uint8_t cmd11[4] = { 0x88, 0x05, 0x0F, 0x18 };
 80013d0:	4b78      	ldr	r3, [pc, #480]	; (80015b4 <mipi_config+0x330>)
 80013d2:	677b      	str	r3, [r7, #116]	; 0x74
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC2, cmd11);
 80013d4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80013d8:	9301      	str	r3, [sp, #4]
 80013da:	23c2      	movs	r3, #194	; 0xc2
 80013dc:	9300      	str	r3, [sp, #0]
 80013de:	2305      	movs	r3, #5
 80013e0:	2239      	movs	r2, #57	; 0x39
 80013e2:	2100      	movs	r1, #0
 80013e4:	486d      	ldr	r0, [pc, #436]	; (800159c <mipi_config+0x318>)
 80013e6:	f002 fbd4 	bl	8003b92 <HAL_DSI_LongWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x36, 0x00);
 80013ea:	2300      	movs	r3, #0
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	2336      	movs	r3, #54	; 0x36
 80013f0:	2215      	movs	r2, #21
 80013f2:	2100      	movs	r1, #0
 80013f4:	4869      	ldr	r0, [pc, #420]	; (800159c <mipi_config+0x318>)
 80013f6:	f002 fbaa 	bl	8003b4e <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x3A, 0x07);
 80013fa:	2307      	movs	r3, #7
 80013fc:	9300      	str	r3, [sp, #0]
 80013fe:	233a      	movs	r3, #58	; 0x3a
 8001400:	2215      	movs	r2, #21
 8001402:	2100      	movs	r1, #0
 8001404:	4865      	ldr	r0, [pc, #404]	; (800159c <mipi_config+0x318>)
 8001406:	f002 fba2 	bl	8003b4e <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xC5, 0xBE);
 800140a:	23be      	movs	r3, #190	; 0xbe
 800140c:	9300      	str	r3, [sp, #0]
 800140e:	23c5      	movs	r3, #197	; 0xc5
 8001410:	2215      	movs	r2, #21
 8001412:	2100      	movs	r1, #0
 8001414:	4861      	ldr	r0, [pc, #388]	; (800159c <mipi_config+0x318>)
 8001416:	f002 fb9a 	bl	8003b4e <HAL_DSI_ShortWrite>
	uint8_t cmd15[14] = { 0xC0, 0x01, 0x04, 0x0B, 0x0B, 0x29, 0x41, 0x55, 0x55,
 800141a:	4b67      	ldr	r3, [pc, #412]	; (80015b8 <mipi_config+0x334>)
 800141c:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8001420:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001422:	c407      	stmia	r4!, {r0, r1, r2}
 8001424:	8023      	strh	r3, [r4, #0]
			0x3D, 0x19, 0x18, 0x24, 0x27 };
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 15, 0xE0, cmd15);
 8001426:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800142a:	9301      	str	r3, [sp, #4]
 800142c:	23e0      	movs	r3, #224	; 0xe0
 800142e:	9300      	str	r3, [sp, #0]
 8001430:	230f      	movs	r3, #15
 8001432:	2239      	movs	r2, #57	; 0x39
 8001434:	2100      	movs	r1, #0
 8001436:	4859      	ldr	r0, [pc, #356]	; (800159c <mipi_config+0x318>)
 8001438:	f002 fbab 	bl	8003b92 <HAL_DSI_LongWrite>
	uint8_t cmd16[14] = { 0xC0, 0x01, 0x05, 0x0B, 0x0C, 0x29, 0x42, 0x55, 0x56,
 800143c:	4b5f      	ldr	r3, [pc, #380]	; (80015bc <mipi_config+0x338>)
 800143e:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8001442:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001444:	c407      	stmia	r4!, {r0, r1, r2}
 8001446:	8023      	strh	r3, [r4, #0]
			0x3E, 0x1A, 0x18, 0x24, 0x28 };
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 15, 0xE1, cmd16);
 8001448:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800144c:	9301      	str	r3, [sp, #4]
 800144e:	23e1      	movs	r3, #225	; 0xe1
 8001450:	9300      	str	r3, [sp, #0]
 8001452:	230f      	movs	r3, #15
 8001454:	2239      	movs	r2, #57	; 0x39
 8001456:	2100      	movs	r1, #0
 8001458:	4850      	ldr	r0, [pc, #320]	; (800159c <mipi_config+0x318>)
 800145a:	f002 fb9a 	bl	8003b92 <HAL_DSI_LongWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xB2, 0x10);
 800145e:	2310      	movs	r3, #16
 8001460:	9300      	str	r3, [sp, #0]
 8001462:	23b2      	movs	r3, #178	; 0xb2
 8001464:	2215      	movs	r2, #21
 8001466:	2100      	movs	r1, #0
 8001468:	484c      	ldr	r0, [pc, #304]	; (800159c <mipi_config+0x318>)
 800146a:	f002 fb70 	bl	8003b4e <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xB3, 0x01);
 800146e:	2301      	movs	r3, #1
 8001470:	9300      	str	r3, [sp, #0]
 8001472:	23b3      	movs	r3, #179	; 0xb3
 8001474:	2215      	movs	r2, #21
 8001476:	2100      	movs	r1, #0
 8001478:	4848      	ldr	r0, [pc, #288]	; (800159c <mipi_config+0x318>)
 800147a:	f002 fb68 	bl	8003b4e <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xB4, 0x01);
 800147e:	2301      	movs	r3, #1
 8001480:	9300      	str	r3, [sp, #0]
 8001482:	23b4      	movs	r3, #180	; 0xb4
 8001484:	2215      	movs	r2, #21
 8001486:	2100      	movs	r1, #0
 8001488:	4844      	ldr	r0, [pc, #272]	; (800159c <mipi_config+0x318>)
 800148a:	f002 fb60 	bl	8003b4e <HAL_DSI_ShortWrite>
	uint8_t cmd20[2] = { 0x27, 0x09 };
 800148e:	f640 1327 	movw	r3, #2343	; 0x927
 8001492:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 3, 0xB6, cmd20);
 8001496:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800149a:	9301      	str	r3, [sp, #4]
 800149c:	23b6      	movs	r3, #182	; 0xb6
 800149e:	9300      	str	r3, [sp, #0]
 80014a0:	2303      	movs	r3, #3
 80014a2:	2239      	movs	r2, #57	; 0x39
 80014a4:	2100      	movs	r1, #0
 80014a6:	483d      	ldr	r0, [pc, #244]	; (800159c <mipi_config+0x318>)
 80014a8:	f002 fb73 	bl	8003b92 <HAL_DSI_LongWrite>
	uint8_t cmd21[4] = { 0x00, 0x54, 0x00, 0x54 };
 80014ac:	f04f 2354 	mov.w	r3, #1409307648	; 0x54005400
 80014b0:	64fb      	str	r3, [r7, #76]	; 0x4c
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xB5, cmd21);
 80014b2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014b6:	9301      	str	r3, [sp, #4]
 80014b8:	23b5      	movs	r3, #181	; 0xb5
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	2305      	movs	r3, #5
 80014be:	2239      	movs	r2, #57	; 0x39
 80014c0:	2100      	movs	r1, #0
 80014c2:	4836      	ldr	r0, [pc, #216]	; (800159c <mipi_config+0x318>)
 80014c4:	f002 fb65 	bl	8003b92 <HAL_DSI_LongWrite>
	uint8_t cmd22[9] = { 0x20, 0x12, 0x40, 0x00, 0x00, 0x2F, 0x2A, 0x0A, 0x00 };
 80014c8:	4a3d      	ldr	r2, [pc, #244]	; (80015c0 <mipi_config+0x33c>)
 80014ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80014d0:	c303      	stmia	r3!, {r0, r1}
 80014d2:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 10, 0xA5, cmd22);
 80014d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014d8:	9301      	str	r3, [sp, #4]
 80014da:	23a5      	movs	r3, #165	; 0xa5
 80014dc:	9300      	str	r3, [sp, #0]
 80014de:	230a      	movs	r3, #10
 80014e0:	2239      	movs	r2, #57	; 0x39
 80014e2:	2100      	movs	r1, #0
 80014e4:	482d      	ldr	r0, [pc, #180]	; (800159c <mipi_config+0x318>)
 80014e6:	f002 fb54 	bl	8003b92 <HAL_DSI_LongWrite>
	uint8_t cmd23[9] = { 0x20, 0x12, 0x40, 0x00, 0x00, 0x2F, 0x2A, 0x0A, 0x00 };
 80014ea:	4a35      	ldr	r2, [pc, #212]	; (80015c0 <mipi_config+0x33c>)
 80014ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80014f2:	c303      	stmia	r3!, {r0, r1}
 80014f4:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 10, 0xA6, cmd23);
 80014f6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014fa:	9301      	str	r3, [sp, #4]
 80014fc:	23a6      	movs	r3, #166	; 0xa6
 80014fe:	9300      	str	r3, [sp, #0]
 8001500:	230a      	movs	r3, #10
 8001502:	2239      	movs	r2, #57	; 0x39
 8001504:	2100      	movs	r1, #0
 8001506:	4825      	ldr	r0, [pc, #148]	; (800159c <mipi_config+0x318>)
 8001508:	f002 fb43 	bl	8003b92 <HAL_DSI_LongWrite>
	uint8_t cmd24[7] = { 0x58, 0x0A, 0x21, 0x00, 0x20, 0x01, 0x00 };
 800150c:	4a2d      	ldr	r2, [pc, #180]	; (80015c4 <mipi_config+0x340>)
 800150e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001512:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001516:	6018      	str	r0, [r3, #0]
 8001518:	3304      	adds	r3, #4
 800151a:	8019      	strh	r1, [r3, #0]
 800151c:	3302      	adds	r3, #2
 800151e:	0c0a      	lsrs	r2, r1, #16
 8001520:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 8, 0xBA, cmd24);
 8001522:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001526:	9301      	str	r3, [sp, #4]
 8001528:	23ba      	movs	r3, #186	; 0xba
 800152a:	9300      	str	r3, [sp, #0]
 800152c:	2308      	movs	r3, #8
 800152e:	2239      	movs	r2, #57	; 0x39
 8001530:	2100      	movs	r1, #0
 8001532:	481a      	ldr	r0, [pc, #104]	; (800159c <mipi_config+0x318>)
 8001534:	f002 fb2d 	bl	8003b92 <HAL_DSI_LongWrite>
	uint8_t cmd25[8] = { 0x00, 0x45, 0x00, 0x1F, 0x15, 0x87, 0x07, 0x04 };
 8001538:	4a23      	ldr	r2, [pc, #140]	; (80015c8 <mipi_config+0x344>)
 800153a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800153e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001542:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 9, 0xBB, cmd25);
 8001546:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800154a:	9301      	str	r3, [sp, #4]
 800154c:	23bb      	movs	r3, #187	; 0xbb
 800154e:	9300      	str	r3, [sp, #0]
 8001550:	2309      	movs	r3, #9
 8001552:	2239      	movs	r2, #57	; 0x39
 8001554:	2100      	movs	r1, #0
 8001556:	4811      	ldr	r0, [pc, #68]	; (800159c <mipi_config+0x318>)
 8001558:	f002 fb1b 	bl	8003b92 <HAL_DSI_LongWrite>
	uint8_t cmd26[8] = { 0x00, 0x45, 0x00, 0x1F, 0x15, 0x87, 0x07, 0x04 };
 800155c:	4a1a      	ldr	r2, [pc, #104]	; (80015c8 <mipi_config+0x344>)
 800155e:	f107 031c 	add.w	r3, r7, #28
 8001562:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001566:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 9, 0xBC, cmd26);
 800156a:	f107 031c 	add.w	r3, r7, #28
 800156e:	9301      	str	r3, [sp, #4]
 8001570:	23bc      	movs	r3, #188	; 0xbc
 8001572:	9300      	str	r3, [sp, #0]
 8001574:	2309      	movs	r3, #9
 8001576:	2239      	movs	r2, #57	; 0x39
 8001578:	2100      	movs	r1, #0
 800157a:	4808      	ldr	r0, [pc, #32]	; (800159c <mipi_config+0x318>)
 800157c:	f002 fb09 	bl	8003b92 <HAL_DSI_LongWrite>
	uint8_t cmd27[11] = { 0x11, 0x77, 0xFF, 0xFF, 0x25, 0x34, 0x43, 0x52, 0xFF,
 8001580:	4a12      	ldr	r2, [pc, #72]	; (80015cc <mipi_config+0x348>)
 8001582:	f107 0310 	add.w	r3, r7, #16
 8001586:	ca07      	ldmia	r2, {r0, r1, r2}
 8001588:	c303      	stmia	r3!, {r0, r1}
 800158a:	801a      	strh	r2, [r3, #0]
 800158c:	3302      	adds	r3, #2
 800158e:	0c12      	lsrs	r2, r2, #16
 8001590:	701a      	strb	r2, [r3, #0]
			0xFF, 0xF9 };
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 12, 0xBD, cmd27);
 8001592:	f107 0310 	add.w	r3, r7, #16
 8001596:	9301      	str	r3, [sp, #4]
 8001598:	e01a      	b.n	80015d0 <mipi_config+0x34c>
 800159a:	bf00      	nop
 800159c:	20004b34 	.word	0x20004b34
 80015a0:	080091c4 	.word	0x080091c4
 80015a4:	080091cc 	.word	0x080091cc
 80015a8:	03240542 	.word	0x03240542
 80015ac:	080091d0 	.word	0x080091d0
 80015b0:	080091dc 	.word	0x080091dc
 80015b4:	180f0588 	.word	0x180f0588
 80015b8:	080091e4 	.word	0x080091e4
 80015bc:	080091f4 	.word	0x080091f4
 80015c0:	08009204 	.word	0x08009204
 80015c4:	08009210 	.word	0x08009210
 80015c8:	08009218 	.word	0x08009218
 80015cc:	08009220 	.word	0x08009220
 80015d0:	23bd      	movs	r3, #189	; 0xbd
 80015d2:	9300      	str	r3, [sp, #0]
 80015d4:	230c      	movs	r3, #12
 80015d6:	2239      	movs	r2, #57	; 0x39
 80015d8:	2100      	movs	r1, #0
 80015da:	482d      	ldr	r0, [pc, #180]	; (8001690 <mipi_config+0x40c>)
 80015dc:	f002 fad9 	bl	8003b92 <HAL_DSI_LongWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xED, 0xC3);
 80015e0:	23c3      	movs	r3, #195	; 0xc3
 80015e2:	9300      	str	r3, [sp, #0]
 80015e4:	23ed      	movs	r3, #237	; 0xed
 80015e6:	2215      	movs	r2, #21
 80015e8:	2100      	movs	r1, #0
 80015ea:	4829      	ldr	r0, [pc, #164]	; (8001690 <mipi_config+0x40c>)
 80015ec:	f002 faaf 	bl	8003b4e <HAL_DSI_ShortWrite>
	uint8_t cmd29[3] = { 0x40, 0x0F, 0x00 };
 80015f0:	4a28      	ldr	r2, [pc, #160]	; (8001694 <mipi_config+0x410>)
 80015f2:	f107 030c 	add.w	r3, r7, #12
 80015f6:	6812      	ldr	r2, [r2, #0]
 80015f8:	4611      	mov	r1, r2
 80015fa:	8019      	strh	r1, [r3, #0]
 80015fc:	3302      	adds	r3, #2
 80015fe:	0c12      	lsrs	r2, r2, #16
 8001600:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, 0xE4, cmd29);
 8001602:	f107 030c 	add.w	r3, r7, #12
 8001606:	9301      	str	r3, [sp, #4]
 8001608:	23e4      	movs	r3, #228	; 0xe4
 800160a:	9300      	str	r3, [sp, #0]
 800160c:	2304      	movs	r3, #4
 800160e:	2239      	movs	r2, #57	; 0x39
 8001610:	2100      	movs	r1, #0
 8001612:	481f      	ldr	r0, [pc, #124]	; (8001690 <mipi_config+0x40c>)
 8001614:	f002 fabd 	bl	8003b92 <HAL_DSI_LongWrite>
	uint8_t cmd30[9] = { 0x90, 0x00, 0x3F, 0x10, 0x3F, 0x35, 0x7F, 0x7F, 0x25 };
 8001618:	4a1f      	ldr	r2, [pc, #124]	; (8001698 <mipi_config+0x414>)
 800161a:	463b      	mov	r3, r7
 800161c:	ca07      	ldmia	r2, {r0, r1, r2}
 800161e:	c303      	stmia	r3!, {r0, r1}
 8001620:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 10, 0xCC, cmd30);
 8001622:	463b      	mov	r3, r7
 8001624:	9301      	str	r3, [sp, #4]
 8001626:	23cc      	movs	r3, #204	; 0xcc
 8001628:	9300      	str	r3, [sp, #0]
 800162a:	230a      	movs	r3, #10
 800162c:	2239      	movs	r2, #57	; 0x39
 800162e:	2100      	movs	r1, #0
 8001630:	4817      	ldr	r0, [pc, #92]	; (8001690 <mipi_config+0x40c>)
 8001632:	f002 faae 	bl	8003b92 <HAL_DSI_LongWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x35, 0x00);
 8001636:	2300      	movs	r3, #0
 8001638:	9300      	str	r3, [sp, #0]
 800163a:	2335      	movs	r3, #53	; 0x35
 800163c:	2215      	movs	r2, #21
 800163e:	2100      	movs	r1, #0
 8001640:	4813      	ldr	r0, [pc, #76]	; (8001690 <mipi_config+0x40c>)
 8001642:	f002 fa84 	bl	8003b4e <HAL_DSI_ShortWrite>
	HAL_Delay(0);
 8001646:	2000      	movs	r0, #0
 8001648:	f001 fb30 	bl	8002cac <HAL_Delay>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, 0x11, 0x00);
 800164c:	2300      	movs	r3, #0
 800164e:	9300      	str	r3, [sp, #0]
 8001650:	2311      	movs	r3, #17
 8001652:	2205      	movs	r2, #5
 8001654:	2100      	movs	r1, #0
 8001656:	480e      	ldr	r0, [pc, #56]	; (8001690 <mipi_config+0x40c>)
 8001658:	f002 fa79 	bl	8003b4e <HAL_DSI_ShortWrite>
	HAL_Delay(120);
 800165c:	2078      	movs	r0, #120	; 0x78
 800165e:	f001 fb25 	bl	8002cac <HAL_Delay>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, 0x29, 0x00);
 8001662:	2300      	movs	r3, #0
 8001664:	9300      	str	r3, [sp, #0]
 8001666:	2329      	movs	r3, #41	; 0x29
 8001668:	2205      	movs	r2, #5
 800166a:	2100      	movs	r1, #0
 800166c:	4808      	ldr	r0, [pc, #32]	; (8001690 <mipi_config+0x40c>)
 800166e:	f002 fa6e 	bl	8003b4e <HAL_DSI_ShortWrite>
	HAL_Delay(120);
 8001672:	2078      	movs	r0, #120	; 0x78
 8001674:	f001 fb1a 	bl	8002cac <HAL_Delay>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x35, 0x00);
 8001678:	2300      	movs	r3, #0
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	2335      	movs	r3, #53	; 0x35
 800167e:	2215      	movs	r2, #21
 8001680:	2100      	movs	r1, #0
 8001682:	4803      	ldr	r0, [pc, #12]	; (8001690 <mipi_config+0x40c>)
 8001684:	f002 fa63 	bl	8003b4e <HAL_DSI_ShortWrite>
}
 8001688:	bf00      	nop
 800168a:	37b4      	adds	r7, #180	; 0xb4
 800168c:	46bd      	mov	sp, r7
 800168e:	bd90      	pop	{r4, r7, pc}
 8001690:	20004b34 	.word	0x20004b34
 8001694:	0800922c 	.word	0x0800922c
 8001698:	08009230 	.word	0x08009230

0800169c <SPI_master2slave>:

void SPI_master2slave(char * buf, char * frame_buf, uint8_t image_flag) {
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	4613      	mov	r3, r2
 80016a8:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &buf[0], 1, 1000);
 80016aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ae:	2201      	movs	r2, #1
 80016b0:	68f9      	ldr	r1, [r7, #12]
 80016b2:	4812      	ldr	r0, [pc, #72]	; (80016fc <SPI_master2slave+0x60>)
 80016b4:	f005 fb81 	bl	8006dba <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &buf[1], 1, 1000);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	1c59      	adds	r1, r3, #1
 80016bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016c0:	2201      	movs	r2, #1
 80016c2:	480e      	ldr	r0, [pc, #56]	; (80016fc <SPI_master2slave+0x60>)
 80016c4:	f005 fb79 	bl	8006dba <HAL_SPI_Transmit>
	if(image_flag == 1)
 80016c8:	79fb      	ldrb	r3, [r7, #7]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d112      	bne.n	80016f4 <SPI_master2slave+0x58>
	{
		for(int i=0; i< 6400; i++)
 80016ce:	2300      	movs	r3, #0
 80016d0:	617b      	str	r3, [r7, #20]
 80016d2:	e00b      	b.n	80016ec <SPI_master2slave+0x50>
		{
			HAL_SPI_Transmit(&hspi1, &frame_buf[i], 1, 1000);
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	68ba      	ldr	r2, [r7, #8]
 80016d8:	18d1      	adds	r1, r2, r3
 80016da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016de:	2201      	movs	r2, #1
 80016e0:	4806      	ldr	r0, [pc, #24]	; (80016fc <SPI_master2slave+0x60>)
 80016e2:	f005 fb6a 	bl	8006dba <HAL_SPI_Transmit>
		for(int i=0; i< 6400; i++)
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	3301      	adds	r3, #1
 80016ea:	617b      	str	r3, [r7, #20]
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	f5b3 5fc8 	cmp.w	r3, #6400	; 0x1900
 80016f2:	dbef      	blt.n	80016d4 <SPI_master2slave+0x38>
		}
	}
}
 80016f4:	bf00      	nop
 80016f6:	3718      	adds	r7, #24
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20004cf0 	.word	0x20004cf0

08001700 <Write_Registers_data>:

void Write_Registers_data(uint8_t do_flag) {
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	71fb      	strb	r3, [r7, #7]
	uint8_t Register_Address[1] = { 0 };
 800170a:	2300      	movs	r3, #0
 800170c:	733b      	strb	r3, [r7, #12]
	uint8_t data[1] = { 0 };
 800170e:	2300      	movs	r3, #0
 8001710:	723b      	strb	r3, [r7, #8]

	HAL_SPI_Receive(&hspi3, (uint8_t *)Register_Address, 1, 1000);
 8001712:	f107 010c 	add.w	r1, r7, #12
 8001716:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800171a:	2201      	movs	r2, #1
 800171c:	483d      	ldr	r0, [pc, #244]	; (8001814 <Write_Registers_data+0x114>)
 800171e:	f005 fcc1 	bl	80070a4 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi3, (uint8_t *)data, 1, 1000);
 8001722:	f107 0108 	add.w	r1, r7, #8
 8001726:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800172a:	2201      	movs	r2, #1
 800172c:	4839      	ldr	r0, [pc, #228]	; (8001814 <Write_Registers_data+0x114>)
 800172e:	f005 fcb9 	bl	80070a4 <HAL_SPI_Receive>
	HAL_SPI_Transmit(&hspi1, &Register_Address[0], 1, 1000);
 8001732:	f107 010c 	add.w	r1, r7, #12
 8001736:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800173a:	2201      	movs	r2, #1
 800173c:	4836      	ldr	r0, [pc, #216]	; (8001818 <Write_Registers_data+0x118>)
 800173e:	f005 fb3c 	bl	8006dba <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &data[0], 1, 1000);
 8001742:	f107 0108 	add.w	r1, r7, #8
 8001746:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800174a:	2201      	movs	r2, #1
 800174c:	4832      	ldr	r0, [pc, #200]	; (8001818 <Write_Registers_data+0x118>)
 800174e:	f005 fb34 	bl	8006dba <HAL_SPI_Transmit>
	if(do_flag == 1)
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d158      	bne.n	800180a <Write_Registers_data+0x10a>
	{
		switch (Register_Address[0]) {
 8001758:	7b3b      	ldrb	r3, [r7, #12]
 800175a:	2b13      	cmp	r3, #19
 800175c:	d855      	bhi.n	800180a <Write_Registers_data+0x10a>
 800175e:	a201      	add	r2, pc, #4	; (adr r2, 8001764 <Write_Registers_data+0x64>)
 8001760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001764:	08001805 	.word	0x08001805
 8001768:	08001805 	.word	0x08001805
 800176c:	08001805 	.word	0x08001805
 8001770:	08001805 	.word	0x08001805
 8001774:	08001805 	.word	0x08001805
 8001778:	08001805 	.word	0x08001805
 800177c:	080017b5 	.word	0x080017b5
 8001780:	08001805 	.word	0x08001805
 8001784:	08001805 	.word	0x08001805
 8001788:	08001805 	.word	0x08001805
 800178c:	08001805 	.word	0x08001805
 8001790:	08001805 	.word	0x08001805
 8001794:	08001805 	.word	0x08001805
 8001798:	08001805 	.word	0x08001805
 800179c:	08001805 	.word	0x08001805
 80017a0:	08001805 	.word	0x08001805
 80017a4:	080017c7 	.word	0x080017c7
 80017a8:	0800180b 	.word	0x0800180b
 80017ac:	0800180b 	.word	0x0800180b
 80017b0:	08001805 	.word	0x08001805
		case 4: //Vertical blanking (High byte)
			break;
		case 5: //Vertical blanking (Low byte)
			break;
		case 6: //Frame rate x 2 (Hz)
			frame_rate=(uint32_t)data[0]*1000;
 80017b4:	7a3b      	ldrb	r3, [r7, #8]
 80017b6:	461a      	mov	r2, r3
 80017b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017bc:	fb02 f303 	mul.w	r3, r2, r3
 80017c0:	4a16      	ldr	r2, [pc, #88]	; (800181c <Write_Registers_data+0x11c>)
 80017c2:	6013      	str	r3, [r2, #0]
			break;
 80017c4:	e021      	b.n	800180a <Write_Registers_data+0x10a>
		case 14: //Day of Version
			break;
		case 15: //Month of Version
			break;
		case 16: //Control A
			switch (data[0] & 0b00000011) {
 80017c6:	7a3b      	ldrb	r3, [r7, #8]
 80017c8:	f003 0303 	and.w	r3, r3, #3
 80017cc:	2b03      	cmp	r3, #3
 80017ce:	d81b      	bhi.n	8001808 <Write_Registers_data+0x108>
 80017d0:	a201      	add	r2, pc, #4	; (adr r2, 80017d8 <Write_Registers_data+0xd8>)
 80017d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d6:	bf00      	nop
 80017d8:	080017e9 	.word	0x080017e9
 80017dc:	080017f1 	.word	0x080017f1
 80017e0:	08001801 	.word	0x08001801
 80017e4:	080017f9 	.word	0x080017f9
			case 0b00000000:  //Display content of frame buffer (0)
				play_mode_source = 1;
 80017e8:	4b0d      	ldr	r3, [pc, #52]	; (8001820 <Write_Registers_data+0x120>)
 80017ea:	2201      	movs	r2, #1
 80017ec:	701a      	strb	r2, [r3, #0]
				break;
 80017ee:	e008      	b.n	8001802 <Write_Registers_data+0x102>
			case 0b00000001:  //Display content of frame buffer (1)
				play_mode_source = 2;
 80017f0:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <Write_Registers_data+0x120>)
 80017f2:	2202      	movs	r2, #2
 80017f4:	701a      	strb	r2, [r3, #0]
				break;
 80017f6:	e004      	b.n	8001802 <Write_Registers_data+0x102>
			case 0b00000010:  //Display SPI input content
				break;
			case 0b00000011:  //Display Flash content
				play_mode_source = 0;
 80017f8:	4b09      	ldr	r3, [pc, #36]	; (8001820 <Write_Registers_data+0x120>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	701a      	strb	r2, [r3, #0]
				break;
 80017fe:	e000      	b.n	8001802 <Write_Registers_data+0x102>
				break;
 8001800:	bf00      	nop
			}
			break;
 8001802:	e001      	b.n	8001808 <Write_Registers_data+0x108>
			break;
 8001804:	bf00      	nop
 8001806:	e000      	b.n	800180a <Write_Registers_data+0x10a>
			break;
 8001808:	bf00      	nop
		case 19: //Status
			break;
		}
	}
}
 800180a:	bf00      	nop
 800180c:	3710      	adds	r7, #16
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20004db8 	.word	0x20004db8
 8001818:	20004cf0 	.word	0x20004cf0
 800181c:	20000004 	.word	0x20000004
 8001820:	2000b2b5 	.word	0x2000b2b5

08001824 <LCD_PowerOn>:
		}
	}*/
}

static void LCD_PowerOn(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
	/* Activate XRES active low */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8001828:	2200      	movs	r2, #0
 800182a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800182e:	4808      	ldr	r0, [pc, #32]	; (8001850 <LCD_PowerOn+0x2c>)
 8001830:	f002 fc1e 	bl	8004070 <HAL_GPIO_WritePin>

	HAL_Delay(20); /* wait 20 ms */
 8001834:	2014      	movs	r0, #20
 8001836:	f001 fa39 	bl	8002cac <HAL_Delay>

	/* Desactivate XRES */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 800183a:	2201      	movs	r2, #1
 800183c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001840:	4803      	ldr	r0, [pc, #12]	; (8001850 <LCD_PowerOn+0x2c>)
 8001842:	f002 fc15 	bl	8004070 <HAL_GPIO_WritePin>

	/* Wait for 10ms after releasing XRES before sending commands */
	HAL_Delay(120);
 8001846:	2078      	movs	r0, #120	; 0x78
 8001848:	f001 fa30 	bl	8002cac <HAL_Delay>
}
 800184c:	bf00      	nop
 800184e:	bd80      	pop	{r7, pc}
 8001850:	48001000 	.word	0x48001000

08001854 <delay_us>:

void delay_us(int time)
{
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
	int i = 0;
 800185c:	2300      	movs	r3, #0
 800185e:	60fb      	str	r3, [r7, #12]
	while (time--)
 8001860:	e007      	b.n	8001872 <delay_us+0x1e>
	{
		i = 13;
 8001862:	230d      	movs	r3, #13
 8001864:	60fb      	str	r3, [r7, #12]
		while (i--)
 8001866:	bf00      	nop
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	1e5a      	subs	r2, r3, #1
 800186c:	60fa      	str	r2, [r7, #12]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d1fa      	bne.n	8001868 <delay_us+0x14>
	while (time--)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	1e5a      	subs	r2, r3, #1
 8001876:	607a      	str	r2, [r7, #4]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d1f2      	bne.n	8001862 <delay_us+0xe>
			;
	}
}
 800187c:	bf00      	nop
 800187e:	bf00      	nop
 8001880:	3714      	adds	r7, #20
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr

0800188a <delay_100ns>:

void delay_100ns(int time)
{
 800188a:	b480      	push	{r7}
 800188c:	b085      	sub	sp, #20
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
	int i = 0;
 8001892:	2300      	movs	r3, #0
 8001894:	60fb      	str	r3, [r7, #12]
	while (time--)
 8001896:	e007      	b.n	80018a8 <delay_100ns+0x1e>
	{
		i = 1;
 8001898:	2301      	movs	r3, #1
 800189a:	60fb      	str	r3, [r7, #12]
		while (i--)
 800189c:	bf00      	nop
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	1e5a      	subs	r2, r3, #1
 80018a2:	60fa      	str	r2, [r7, #12]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d1fa      	bne.n	800189e <delay_100ns+0x14>
	while (time--)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	1e5a      	subs	r2, r3, #1
 80018ac:	607a      	str	r2, [r7, #4]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1f2      	bne.n	8001898 <delay_100ns+0xe>
			;
	}
}
 80018b2:	bf00      	nop
 80018b4:	bf00      	nop
 80018b6:	3714      	adds	r7, #20
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <HAL_GPIO_EXTI_Callback>:

int button_count=0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_12)
 80018ca:	88fb      	ldrh	r3, [r7, #6]
 80018cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018d0:	d15b      	bne.n	800198a <HAL_GPIO_EXTI_Callback+0xca>
	{
		button_count++;
 80018d2:	4b2f      	ldr	r3, [pc, #188]	; (8001990 <HAL_GPIO_EXTI_Callback+0xd0>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	3301      	adds	r3, #1
 80018d8:	4a2d      	ldr	r2, [pc, #180]	; (8001990 <HAL_GPIO_EXTI_Callback+0xd0>)
 80018da:	6013      	str	r3, [r2, #0]
		delay_us(50000);
 80018dc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80018e0:	f7ff ffb8 	bl	8001854 <delay_us>
		for(int i=0; i<200; i++)
 80018e4:	2300      	movs	r3, #0
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	e02e      	b.n	8001948 <HAL_GPIO_EXTI_Callback+0x88>
		{
			if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12) == GPIO_PIN_RESET)
 80018ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018ee:	4829      	ldr	r0, [pc, #164]	; (8001994 <HAL_GPIO_EXTI_Callback+0xd4>)
 80018f0:	f002 fba6 	bl	8004040 <HAL_GPIO_ReadPin>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d11a      	bne.n	8001930 <HAL_GPIO_EXTI_Callback+0x70>
			{
				if(button_count<50 && play_mode==0)
 80018fa:	4b25      	ldr	r3, [pc, #148]	; (8001990 <HAL_GPIO_EXTI_Callback+0xd0>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2b31      	cmp	r3, #49	; 0x31
 8001900:	dc12      	bgt.n	8001928 <HAL_GPIO_EXTI_Callback+0x68>
 8001902:	4b25      	ldr	r3, [pc, #148]	; (8001998 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d10e      	bne.n	8001928 <HAL_GPIO_EXTI_Callback+0x68>
				{
					display_image_number++;
 800190a:	4b24      	ldr	r3, [pc, #144]	; (800199c <HAL_GPIO_EXTI_Callback+0xdc>)
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	3301      	adds	r3, #1
 8001910:	b2da      	uxtb	r2, r3
 8001912:	4b22      	ldr	r3, [pc, #136]	; (800199c <HAL_GPIO_EXTI_Callback+0xdc>)
 8001914:	701a      	strb	r2, [r3, #0]
					if(display_image_number >= total_image_in_flash)
 8001916:	4b21      	ldr	r3, [pc, #132]	; (800199c <HAL_GPIO_EXTI_Callback+0xdc>)
 8001918:	781a      	ldrb	r2, [r3, #0]
 800191a:	4b21      	ldr	r3, [pc, #132]	; (80019a0 <HAL_GPIO_EXTI_Callback+0xe0>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	429a      	cmp	r2, r3
 8001920:	d302      	bcc.n	8001928 <HAL_GPIO_EXTI_Callback+0x68>
						display_image_number = 0;
 8001922:	4b1e      	ldr	r3, [pc, #120]	; (800199c <HAL_GPIO_EXTI_Callback+0xdc>)
 8001924:	2200      	movs	r2, #0
 8001926:	701a      	strb	r2, [r3, #0]
				}
				button_count = 0;
 8001928:	4b19      	ldr	r3, [pc, #100]	; (8001990 <HAL_GPIO_EXTI_Callback+0xd0>)
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
				return;
 800192e:	e02c      	b.n	800198a <HAL_GPIO_EXTI_Callback+0xca>
			}
			button_count++;
 8001930:	4b17      	ldr	r3, [pc, #92]	; (8001990 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	3301      	adds	r3, #1
 8001936:	4a16      	ldr	r2, [pc, #88]	; (8001990 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001938:	6013      	str	r3, [r2, #0]
			delay_us(10000);
 800193a:	f242 7010 	movw	r0, #10000	; 0x2710
 800193e:	f7ff ff89 	bl	8001854 <delay_us>
		for(int i=0; i<200; i++)
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	3301      	adds	r3, #1
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2bc7      	cmp	r3, #199	; 0xc7
 800194c:	ddcd      	ble.n	80018ea <HAL_GPIO_EXTI_Callback+0x2a>
		}
		if(play_mode==1)
 800194e:	4b12      	ldr	r3, [pc, #72]	; (8001998 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d109      	bne.n	800196a <HAL_GPIO_EXTI_Callback+0xaa>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001956:	2200      	movs	r2, #0
 8001958:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800195c:	4811      	ldr	r0, [pc, #68]	; (80019a4 <HAL_GPIO_EXTI_Callback+0xe4>)
 800195e:	f002 fb87 	bl	8004070 <HAL_GPIO_WritePin>
			play_mode = 0;
 8001962:	4b0d      	ldr	r3, [pc, #52]	; (8001998 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001964:	2200      	movs	r2, #0
 8001966:	701a      	strb	r2, [r3, #0]
 8001968:	e00c      	b.n	8001984 <HAL_GPIO_EXTI_Callback+0xc4>
		}
		else if(play_mode==0)
 800196a:	4b0b      	ldr	r3, [pc, #44]	; (8001998 <HAL_GPIO_EXTI_Callback+0xd8>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d108      	bne.n	8001984 <HAL_GPIO_EXTI_Callback+0xc4>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001972:	2201      	movs	r2, #1
 8001974:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001978:	480a      	ldr	r0, [pc, #40]	; (80019a4 <HAL_GPIO_EXTI_Callback+0xe4>)
 800197a:	f002 fb79 	bl	8004070 <HAL_GPIO_WritePin>
			play_mode = 1;
 800197e:	4b06      	ldr	r3, [pc, #24]	; (8001998 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001980:	2201      	movs	r2, #1
 8001982:	701a      	strb	r2, [r3, #0]
		}
		button_count = 0;
 8001984:	4b02      	ldr	r3, [pc, #8]	; (8001990 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
	}
}
 800198a:	3710      	adds	r7, #16
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	2000b2b8 	.word	0x2000b2b8
 8001994:	48001000 	.word	0x48001000
 8001998:	2000b2b4 	.word	0x2000b2b4
 800199c:	2000b2b6 	.word	0x2000b2b6
 80019a0:	20000008 	.word	0x20000008
 80019a4:	48000400 	.word	0x48000400

080019a8 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef * hspi)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
	// USB command: Type and command
	switch (spi3_buf[0] & 0b11000000) {
 80019b0:	4bc2      	ldr	r3, [pc, #776]	; (8001cbc <HAL_SPI_RxCpltCallback+0x314>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80019b8:	2bc0      	cmp	r3, #192	; 0xc0
 80019ba:	f000 824b 	beq.w	8001e54 <HAL_SPI_RxCpltCallback+0x4ac>
 80019be:	2bc0      	cmp	r3, #192	; 0xc0
 80019c0:	f300 8305 	bgt.w	8001fce <HAL_SPI_RxCpltCallback+0x626>
 80019c4:	2b80      	cmp	r3, #128	; 0x80
 80019c6:	f000 8239 	beq.w	8001e3c <HAL_SPI_RxCpltCallback+0x494>
 80019ca:	2b80      	cmp	r3, #128	; 0x80
 80019cc:	f300 82ff 	bgt.w	8001fce <HAL_SPI_RxCpltCallback+0x626>
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d003      	beq.n	80019dc <HAL_SPI_RxCpltCallback+0x34>
 80019d4:	2b40      	cmp	r3, #64	; 0x40
 80019d6:	f000 81d2 	beq.w	8001d7e <HAL_SPI_RxCpltCallback+0x3d6>
 80019da:	e2f8      	b.n	8001fce <HAL_SPI_RxCpltCallback+0x626>
	case 0b00000000:  //Chain SPI functions
		switch (spi3_buf[0] & 0b00111000) {
 80019dc:	4bb7      	ldr	r3, [pc, #732]	; (8001cbc <HAL_SPI_RxCpltCallback+0x314>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80019e4:	2b38      	cmp	r3, #56	; 0x38
 80019e6:	f200 82e0 	bhi.w	8001faa <HAL_SPI_RxCpltCallback+0x602>
 80019ea:	a201      	add	r2, pc, #4	; (adr r2, 80019f0 <HAL_SPI_RxCpltCallback+0x48>)
 80019ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019f0:	08001ad5 	.word	0x08001ad5
 80019f4:	08001fab 	.word	0x08001fab
 80019f8:	08001fab 	.word	0x08001fab
 80019fc:	08001fab 	.word	0x08001fab
 8001a00:	08001fab 	.word	0x08001fab
 8001a04:	08001fab 	.word	0x08001fab
 8001a08:	08001fab 	.word	0x08001fab
 8001a0c:	08001fab 	.word	0x08001fab
 8001a10:	08001bd9 	.word	0x08001bd9
 8001a14:	08001fab 	.word	0x08001fab
 8001a18:	08001fab 	.word	0x08001fab
 8001a1c:	08001fab 	.word	0x08001fab
 8001a20:	08001fab 	.word	0x08001fab
 8001a24:	08001fab 	.word	0x08001fab
 8001a28:	08001fab 	.word	0x08001fab
 8001a2c:	08001fab 	.word	0x08001fab
 8001a30:	08001cf5 	.word	0x08001cf5
 8001a34:	08001fab 	.word	0x08001fab
 8001a38:	08001fab 	.word	0x08001fab
 8001a3c:	08001fab 	.word	0x08001fab
 8001a40:	08001fab 	.word	0x08001fab
 8001a44:	08001fab 	.word	0x08001fab
 8001a48:	08001fab 	.word	0x08001fab
 8001a4c:	08001fab 	.word	0x08001fab
 8001a50:	08001d7b 	.word	0x08001d7b
 8001a54:	08001fab 	.word	0x08001fab
 8001a58:	08001fab 	.word	0x08001fab
 8001a5c:	08001fab 	.word	0x08001fab
 8001a60:	08001fab 	.word	0x08001fab
 8001a64:	08001fab 	.word	0x08001fab
 8001a68:	08001fab 	.word	0x08001fab
 8001a6c:	08001fab 	.word	0x08001fab
 8001a70:	08001d7b 	.word	0x08001d7b
 8001a74:	08001fab 	.word	0x08001fab
 8001a78:	08001fab 	.word	0x08001fab
 8001a7c:	08001fab 	.word	0x08001fab
 8001a80:	08001fab 	.word	0x08001fab
 8001a84:	08001fab 	.word	0x08001fab
 8001a88:	08001fab 	.word	0x08001fab
 8001a8c:	08001fab 	.word	0x08001fab
 8001a90:	08001d7b 	.word	0x08001d7b
 8001a94:	08001fab 	.word	0x08001fab
 8001a98:	08001fab 	.word	0x08001fab
 8001a9c:	08001fab 	.word	0x08001fab
 8001aa0:	08001fab 	.word	0x08001fab
 8001aa4:	08001fab 	.word	0x08001fab
 8001aa8:	08001fab 	.word	0x08001fab
 8001aac:	08001fab 	.word	0x08001fab
 8001ab0:	08001d7b 	.word	0x08001d7b
 8001ab4:	08001fab 	.word	0x08001fab
 8001ab8:	08001fab 	.word	0x08001fab
 8001abc:	08001fab 	.word	0x08001fab
 8001ac0:	08001fab 	.word	0x08001fab
 8001ac4:	08001fab 	.word	0x08001fab
 8001ac8:	08001fab 	.word	0x08001fab
 8001acc:	08001fab 	.word	0x08001fab
 8001ad0:	08001d7b 	.word	0x08001d7b
		case 0b00000000: //Write content of full frame buffer to fram buffer (0)
			switch (spi3_buf[0] & 0b00000111) {
 8001ad4:	4b79      	ldr	r3, [pc, #484]	; (8001cbc <HAL_SPI_RxCpltCallback+0x314>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	f003 0307 	and.w	r3, r3, #7
 8001adc:	2b03      	cmp	r3, #3
 8001ade:	d86b      	bhi.n	8001bb8 <HAL_SPI_RxCpltCallback+0x210>
 8001ae0:	a201      	add	r2, pc, #4	; (adr r2, 8001ae8 <HAL_SPI_RxCpltCallback+0x140>)
 8001ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ae6:	bf00      	nop
 8001ae8:	08001bd5 	.word	0x08001bd5
 8001aec:	08001af9 	.word	0x08001af9
 8001af0:	08001b39 	.word	0x08001b39
 8001af4:	08001b79 	.word	0x08001b79
			case 0b00000000: //Command for DIP switch ID = 00
				break;
			case 0b00000001: //Command for DIP switch ID = 01
				if(BOARD_NUMBER==2)
 8001af8:	4b71      	ldr	r3, [pc, #452]	; (8001cc0 <HAL_SPI_RxCpltCallback+0x318>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d10d      	bne.n	8001b1c <HAL_SPI_RxCpltCallback+0x174>
				{
					HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_0, 6400, 1000);
 8001b00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b04:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001b08:	496e      	ldr	r1, [pc, #440]	; (8001cc4 <HAL_SPI_RxCpltCallback+0x31c>)
 8001b0a:	486f      	ldr	r0, [pc, #444]	; (8001cc8 <HAL_SPI_RxCpltCallback+0x320>)
 8001b0c:	f005 faca 	bl	80070a4 <HAL_SPI_Receive>
					SPI_master2slave(&spi3_buf, &frame_buf_0, 1);
 8001b10:	2201      	movs	r2, #1
 8001b12:	496c      	ldr	r1, [pc, #432]	; (8001cc4 <HAL_SPI_RxCpltCallback+0x31c>)
 8001b14:	4869      	ldr	r0, [pc, #420]	; (8001cbc <HAL_SPI_RxCpltCallback+0x314>)
 8001b16:	f7ff fdc1 	bl	800169c <SPI_master2slave>
				else
				{
					HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
					SPI_master2slave(&spi3_buf, &frame_buf_tmp, 1);
				}
				break;
 8001b1a:	e05c      	b.n	8001bd6 <HAL_SPI_RxCpltCallback+0x22e>
					HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
 8001b1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b20:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001b24:	4969      	ldr	r1, [pc, #420]	; (8001ccc <HAL_SPI_RxCpltCallback+0x324>)
 8001b26:	4868      	ldr	r0, [pc, #416]	; (8001cc8 <HAL_SPI_RxCpltCallback+0x320>)
 8001b28:	f005 fabc 	bl	80070a4 <HAL_SPI_Receive>
					SPI_master2slave(&spi3_buf, &frame_buf_tmp, 1);
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	4967      	ldr	r1, [pc, #412]	; (8001ccc <HAL_SPI_RxCpltCallback+0x324>)
 8001b30:	4862      	ldr	r0, [pc, #392]	; (8001cbc <HAL_SPI_RxCpltCallback+0x314>)
 8001b32:	f7ff fdb3 	bl	800169c <SPI_master2slave>
				break;
 8001b36:	e04e      	b.n	8001bd6 <HAL_SPI_RxCpltCallback+0x22e>
			case 0b00000010: //Command for DIP switch ID = 10
				if(BOARD_NUMBER==3)
 8001b38:	4b61      	ldr	r3, [pc, #388]	; (8001cc0 <HAL_SPI_RxCpltCallback+0x318>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	2b03      	cmp	r3, #3
 8001b3e:	d10d      	bne.n	8001b5c <HAL_SPI_RxCpltCallback+0x1b4>
				{
					HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_0, 6400, 1000);
 8001b40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b44:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001b48:	495e      	ldr	r1, [pc, #376]	; (8001cc4 <HAL_SPI_RxCpltCallback+0x31c>)
 8001b4a:	485f      	ldr	r0, [pc, #380]	; (8001cc8 <HAL_SPI_RxCpltCallback+0x320>)
 8001b4c:	f005 faaa 	bl	80070a4 <HAL_SPI_Receive>
					SPI_master2slave(&spi3_buf, &frame_buf_0, 1);
 8001b50:	2201      	movs	r2, #1
 8001b52:	495c      	ldr	r1, [pc, #368]	; (8001cc4 <HAL_SPI_RxCpltCallback+0x31c>)
 8001b54:	4859      	ldr	r0, [pc, #356]	; (8001cbc <HAL_SPI_RxCpltCallback+0x314>)
 8001b56:	f7ff fda1 	bl	800169c <SPI_master2slave>
				else
				{
					HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
					SPI_master2slave(&spi3_buf, &frame_buf_tmp, 1);
				}
				break;
 8001b5a:	e03c      	b.n	8001bd6 <HAL_SPI_RxCpltCallback+0x22e>
					HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
 8001b5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b60:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001b64:	4959      	ldr	r1, [pc, #356]	; (8001ccc <HAL_SPI_RxCpltCallback+0x324>)
 8001b66:	4858      	ldr	r0, [pc, #352]	; (8001cc8 <HAL_SPI_RxCpltCallback+0x320>)
 8001b68:	f005 fa9c 	bl	80070a4 <HAL_SPI_Receive>
					SPI_master2slave(&spi3_buf, &frame_buf_tmp, 1);
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	4957      	ldr	r1, [pc, #348]	; (8001ccc <HAL_SPI_RxCpltCallback+0x324>)
 8001b70:	4852      	ldr	r0, [pc, #328]	; (8001cbc <HAL_SPI_RxCpltCallback+0x314>)
 8001b72:	f7ff fd93 	bl	800169c <SPI_master2slave>
				break;
 8001b76:	e02e      	b.n	8001bd6 <HAL_SPI_RxCpltCallback+0x22e>
			case 0b00000011: //Command for DIP switch ID = 11
				if(BOARD_NUMBER==4)
 8001b78:	4b51      	ldr	r3, [pc, #324]	; (8001cc0 <HAL_SPI_RxCpltCallback+0x318>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	2b04      	cmp	r3, #4
 8001b7e:	d10d      	bne.n	8001b9c <HAL_SPI_RxCpltCallback+0x1f4>
				{
					HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_0, 6400, 1000);
 8001b80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b84:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001b88:	494e      	ldr	r1, [pc, #312]	; (8001cc4 <HAL_SPI_RxCpltCallback+0x31c>)
 8001b8a:	484f      	ldr	r0, [pc, #316]	; (8001cc8 <HAL_SPI_RxCpltCallback+0x320>)
 8001b8c:	f005 fa8a 	bl	80070a4 <HAL_SPI_Receive>
					SPI_master2slave(&spi3_buf, &frame_buf_0, 1);
 8001b90:	2201      	movs	r2, #1
 8001b92:	494c      	ldr	r1, [pc, #304]	; (8001cc4 <HAL_SPI_RxCpltCallback+0x31c>)
 8001b94:	4849      	ldr	r0, [pc, #292]	; (8001cbc <HAL_SPI_RxCpltCallback+0x314>)
 8001b96:	f7ff fd81 	bl	800169c <SPI_master2slave>
				else
				{
					HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
					SPI_master2slave(&spi3_buf, &frame_buf_tmp, 1);
				}
				break;
 8001b9a:	e01c      	b.n	8001bd6 <HAL_SPI_RxCpltCallback+0x22e>
					HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
 8001b9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ba0:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001ba4:	4949      	ldr	r1, [pc, #292]	; (8001ccc <HAL_SPI_RxCpltCallback+0x324>)
 8001ba6:	4848      	ldr	r0, [pc, #288]	; (8001cc8 <HAL_SPI_RxCpltCallback+0x320>)
 8001ba8:	f005 fa7c 	bl	80070a4 <HAL_SPI_Receive>
					SPI_master2slave(&spi3_buf, &frame_buf_tmp, 1);
 8001bac:	2201      	movs	r2, #1
 8001bae:	4947      	ldr	r1, [pc, #284]	; (8001ccc <HAL_SPI_RxCpltCallback+0x324>)
 8001bb0:	4842      	ldr	r0, [pc, #264]	; (8001cbc <HAL_SPI_RxCpltCallback+0x314>)
 8001bb2:	f7ff fd73 	bl	800169c <SPI_master2slave>
				break;
 8001bb6:	e00e      	b.n	8001bd6 <HAL_SPI_RxCpltCallback+0x22e>
			default: //Broadcast to every board
				HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_0, 6400, 1000);
 8001bb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bbc:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001bc0:	4940      	ldr	r1, [pc, #256]	; (8001cc4 <HAL_SPI_RxCpltCallback+0x31c>)
 8001bc2:	4841      	ldr	r0, [pc, #260]	; (8001cc8 <HAL_SPI_RxCpltCallback+0x320>)
 8001bc4:	f005 fa6e 	bl	80070a4 <HAL_SPI_Receive>
				SPI_master2slave(&spi3_buf, &frame_buf_0, 1);
 8001bc8:	2201      	movs	r2, #1
 8001bca:	493e      	ldr	r1, [pc, #248]	; (8001cc4 <HAL_SPI_RxCpltCallback+0x31c>)
 8001bcc:	483b      	ldr	r0, [pc, #236]	; (8001cbc <HAL_SPI_RxCpltCallback+0x314>)
 8001bce:	f7ff fd65 	bl	800169c <SPI_master2slave>
				break;
 8001bd2:	e000      	b.n	8001bd6 <HAL_SPI_RxCpltCallback+0x22e>
				break;
 8001bd4:	bf00      	nop
			}
			break;
 8001bd6:	e0d1      	b.n	8001d7c <HAL_SPI_RxCpltCallback+0x3d4>
		case 0b00001000: //Write content of full frame buffer to fram buffer (1)
			switch (spi3_buf[0] & 0b00000111) {
 8001bd8:	4b38      	ldr	r3, [pc, #224]	; (8001cbc <HAL_SPI_RxCpltCallback+0x314>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	f003 0307 	and.w	r3, r3, #7
 8001be0:	2b03      	cmp	r3, #3
 8001be2:	d877      	bhi.n	8001cd4 <HAL_SPI_RxCpltCallback+0x32c>
 8001be4:	a201      	add	r2, pc, #4	; (adr r2, 8001bec <HAL_SPI_RxCpltCallback+0x244>)
 8001be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bea:	bf00      	nop
 8001bec:	08001cf1 	.word	0x08001cf1
 8001bf0:	08001bfd 	.word	0x08001bfd
 8001bf4:	08001c3d 	.word	0x08001c3d
 8001bf8:	08001c7d 	.word	0x08001c7d
			case 0b00000000: //Command for DIP switch ID = 00
				break;
			case 0b00000001: //Command for DIP switch ID = 01
				if(BOARD_NUMBER==2)
 8001bfc:	4b30      	ldr	r3, [pc, #192]	; (8001cc0 <HAL_SPI_RxCpltCallback+0x318>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d10d      	bne.n	8001c20 <HAL_SPI_RxCpltCallback+0x278>
				{
					HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_1, 6400, 1000);
 8001c04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c08:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001c0c:	4930      	ldr	r1, [pc, #192]	; (8001cd0 <HAL_SPI_RxCpltCallback+0x328>)
 8001c0e:	482e      	ldr	r0, [pc, #184]	; (8001cc8 <HAL_SPI_RxCpltCallback+0x320>)
 8001c10:	f005 fa48 	bl	80070a4 <HAL_SPI_Receive>
					SPI_master2slave(&spi3_buf, &frame_buf_1, 1);
 8001c14:	2201      	movs	r2, #1
 8001c16:	492e      	ldr	r1, [pc, #184]	; (8001cd0 <HAL_SPI_RxCpltCallback+0x328>)
 8001c18:	4828      	ldr	r0, [pc, #160]	; (8001cbc <HAL_SPI_RxCpltCallback+0x314>)
 8001c1a:	f7ff fd3f 	bl	800169c <SPI_master2slave>
				else
				{
					HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
					SPI_master2slave(&spi3_buf, &frame_buf_tmp, 1);
				}
				break;
 8001c1e:	e068      	b.n	8001cf2 <HAL_SPI_RxCpltCallback+0x34a>
					HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
 8001c20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c24:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001c28:	4928      	ldr	r1, [pc, #160]	; (8001ccc <HAL_SPI_RxCpltCallback+0x324>)
 8001c2a:	4827      	ldr	r0, [pc, #156]	; (8001cc8 <HAL_SPI_RxCpltCallback+0x320>)
 8001c2c:	f005 fa3a 	bl	80070a4 <HAL_SPI_Receive>
					SPI_master2slave(&spi3_buf, &frame_buf_tmp, 1);
 8001c30:	2201      	movs	r2, #1
 8001c32:	4926      	ldr	r1, [pc, #152]	; (8001ccc <HAL_SPI_RxCpltCallback+0x324>)
 8001c34:	4821      	ldr	r0, [pc, #132]	; (8001cbc <HAL_SPI_RxCpltCallback+0x314>)
 8001c36:	f7ff fd31 	bl	800169c <SPI_master2slave>
				break;
 8001c3a:	e05a      	b.n	8001cf2 <HAL_SPI_RxCpltCallback+0x34a>
			case 0b00000010: //Command for DIP switch ID = 10
				if(BOARD_NUMBER==3)
 8001c3c:	4b20      	ldr	r3, [pc, #128]	; (8001cc0 <HAL_SPI_RxCpltCallback+0x318>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b03      	cmp	r3, #3
 8001c42:	d10d      	bne.n	8001c60 <HAL_SPI_RxCpltCallback+0x2b8>
				{
					HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_1, 6400, 1000);
 8001c44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c48:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001c4c:	4920      	ldr	r1, [pc, #128]	; (8001cd0 <HAL_SPI_RxCpltCallback+0x328>)
 8001c4e:	481e      	ldr	r0, [pc, #120]	; (8001cc8 <HAL_SPI_RxCpltCallback+0x320>)
 8001c50:	f005 fa28 	bl	80070a4 <HAL_SPI_Receive>
					SPI_master2slave(&spi3_buf, &frame_buf_1, 1);
 8001c54:	2201      	movs	r2, #1
 8001c56:	491e      	ldr	r1, [pc, #120]	; (8001cd0 <HAL_SPI_RxCpltCallback+0x328>)
 8001c58:	4818      	ldr	r0, [pc, #96]	; (8001cbc <HAL_SPI_RxCpltCallback+0x314>)
 8001c5a:	f7ff fd1f 	bl	800169c <SPI_master2slave>
				else
				{
					HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
					SPI_master2slave(&spi3_buf, &frame_buf_tmp, 1);
				}
				break;
 8001c5e:	e048      	b.n	8001cf2 <HAL_SPI_RxCpltCallback+0x34a>
					HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
 8001c60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c64:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001c68:	4918      	ldr	r1, [pc, #96]	; (8001ccc <HAL_SPI_RxCpltCallback+0x324>)
 8001c6a:	4817      	ldr	r0, [pc, #92]	; (8001cc8 <HAL_SPI_RxCpltCallback+0x320>)
 8001c6c:	f005 fa1a 	bl	80070a4 <HAL_SPI_Receive>
					SPI_master2slave(&spi3_buf, &frame_buf_tmp, 1);
 8001c70:	2201      	movs	r2, #1
 8001c72:	4916      	ldr	r1, [pc, #88]	; (8001ccc <HAL_SPI_RxCpltCallback+0x324>)
 8001c74:	4811      	ldr	r0, [pc, #68]	; (8001cbc <HAL_SPI_RxCpltCallback+0x314>)
 8001c76:	f7ff fd11 	bl	800169c <SPI_master2slave>
				break;
 8001c7a:	e03a      	b.n	8001cf2 <HAL_SPI_RxCpltCallback+0x34a>
			case 0b00000011: //Command for DIP switch ID = 11
				if(BOARD_NUMBER==4)
 8001c7c:	4b10      	ldr	r3, [pc, #64]	; (8001cc0 <HAL_SPI_RxCpltCallback+0x318>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b04      	cmp	r3, #4
 8001c82:	d10d      	bne.n	8001ca0 <HAL_SPI_RxCpltCallback+0x2f8>
				{
					HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_1, 6400, 1000);
 8001c84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c88:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001c8c:	4910      	ldr	r1, [pc, #64]	; (8001cd0 <HAL_SPI_RxCpltCallback+0x328>)
 8001c8e:	480e      	ldr	r0, [pc, #56]	; (8001cc8 <HAL_SPI_RxCpltCallback+0x320>)
 8001c90:	f005 fa08 	bl	80070a4 <HAL_SPI_Receive>
					SPI_master2slave(&spi3_buf, &frame_buf_1, 1);
 8001c94:	2201      	movs	r2, #1
 8001c96:	490e      	ldr	r1, [pc, #56]	; (8001cd0 <HAL_SPI_RxCpltCallback+0x328>)
 8001c98:	4808      	ldr	r0, [pc, #32]	; (8001cbc <HAL_SPI_RxCpltCallback+0x314>)
 8001c9a:	f7ff fcff 	bl	800169c <SPI_master2slave>
				else
				{
					HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
					SPI_master2slave(&spi3_buf, &frame_buf_tmp, 1);
				}
				break;
 8001c9e:	e028      	b.n	8001cf2 <HAL_SPI_RxCpltCallback+0x34a>
					HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
 8001ca0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ca4:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001ca8:	4908      	ldr	r1, [pc, #32]	; (8001ccc <HAL_SPI_RxCpltCallback+0x324>)
 8001caa:	4807      	ldr	r0, [pc, #28]	; (8001cc8 <HAL_SPI_RxCpltCallback+0x320>)
 8001cac:	f005 f9fa 	bl	80070a4 <HAL_SPI_Receive>
					SPI_master2slave(&spi3_buf, &frame_buf_tmp, 1);
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	4906      	ldr	r1, [pc, #24]	; (8001ccc <HAL_SPI_RxCpltCallback+0x324>)
 8001cb4:	4801      	ldr	r0, [pc, #4]	; (8001cbc <HAL_SPI_RxCpltCallback+0x314>)
 8001cb6:	f7ff fcf1 	bl	800169c <SPI_master2slave>
				break;
 8001cba:	e01a      	b.n	8001cf2 <HAL_SPI_RxCpltCallback+0x34a>
 8001cbc:	20004eb0 	.word	0x20004eb0
 8001cc0:	20000000 	.word	0x20000000
 8001cc4:	200067b4 	.word	0x200067b4
 8001cc8:	20004db8 	.word	0x20004db8
 8001ccc:	20004eb4 	.word	0x20004eb4
 8001cd0:	200080b4 	.word	0x200080b4
			default: //Broadcast to every board
				HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_1, 6400, 1000);
 8001cd4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cd8:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001cdc:	49b6      	ldr	r1, [pc, #728]	; (8001fb8 <HAL_SPI_RxCpltCallback+0x610>)
 8001cde:	48b7      	ldr	r0, [pc, #732]	; (8001fbc <HAL_SPI_RxCpltCallback+0x614>)
 8001ce0:	f005 f9e0 	bl	80070a4 <HAL_SPI_Receive>
				SPI_master2slave(&spi3_buf, &frame_buf_1, 1);
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	49b4      	ldr	r1, [pc, #720]	; (8001fb8 <HAL_SPI_RxCpltCallback+0x610>)
 8001ce8:	48b5      	ldr	r0, [pc, #724]	; (8001fc0 <HAL_SPI_RxCpltCallback+0x618>)
 8001cea:	f7ff fcd7 	bl	800169c <SPI_master2slave>
				break;
 8001cee:	e000      	b.n	8001cf2 <HAL_SPI_RxCpltCallback+0x34a>
				break;
 8001cf0:	bf00      	nop
			}
			break;
 8001cf2:	e043      	b.n	8001d7c <HAL_SPI_RxCpltCallback+0x3d4>
		case 0b00010000: //Write Registers data
			SPI_master2slave(&spi3_buf, NULL, 0);
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	48b1      	ldr	r0, [pc, #708]	; (8001fc0 <HAL_SPI_RxCpltCallback+0x618>)
 8001cfa:	f7ff fccf 	bl	800169c <SPI_master2slave>
			switch (spi3_buf[0] & 0b00000111) {
 8001cfe:	4bb0      	ldr	r3, [pc, #704]	; (8001fc0 <HAL_SPI_RxCpltCallback+0x618>)
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	2b03      	cmp	r3, #3
 8001d08:	d832      	bhi.n	8001d70 <HAL_SPI_RxCpltCallback+0x3c8>
 8001d0a:	a201      	add	r2, pc, #4	; (adr r2, 8001d10 <HAL_SPI_RxCpltCallback+0x368>)
 8001d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d10:	08001d21 	.word	0x08001d21
 8001d14:	08001d29 	.word	0x08001d29
 8001d18:	08001d41 	.word	0x08001d41
 8001d1c:	08001d59 	.word	0x08001d59
			case 0b00000000: //Command for DIP switch ID = 00
				Write_Registers_data(0);
 8001d20:	2000      	movs	r0, #0
 8001d22:	f7ff fced 	bl	8001700 <Write_Registers_data>
				break;
 8001d26:	e027      	b.n	8001d78 <HAL_SPI_RxCpltCallback+0x3d0>
			case 0b00000001: //Command for DIP switch ID = 01
				if(BOARD_NUMBER==2)
 8001d28:	4ba6      	ldr	r3, [pc, #664]	; (8001fc4 <HAL_SPI_RxCpltCallback+0x61c>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d103      	bne.n	8001d38 <HAL_SPI_RxCpltCallback+0x390>
				{
					Write_Registers_data(1);
 8001d30:	2001      	movs	r0, #1
 8001d32:	f7ff fce5 	bl	8001700 <Write_Registers_data>
				}
				else
				{
					Write_Registers_data(0);
				}
				break;
 8001d36:	e01f      	b.n	8001d78 <HAL_SPI_RxCpltCallback+0x3d0>
					Write_Registers_data(0);
 8001d38:	2000      	movs	r0, #0
 8001d3a:	f7ff fce1 	bl	8001700 <Write_Registers_data>
				break;
 8001d3e:	e01b      	b.n	8001d78 <HAL_SPI_RxCpltCallback+0x3d0>
			case 0b00000010: //Command for DIP switch ID = 10
				if(BOARD_NUMBER==3)
 8001d40:	4ba0      	ldr	r3, [pc, #640]	; (8001fc4 <HAL_SPI_RxCpltCallback+0x61c>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	2b03      	cmp	r3, #3
 8001d46:	d103      	bne.n	8001d50 <HAL_SPI_RxCpltCallback+0x3a8>
				{
					Write_Registers_data(1);
 8001d48:	2001      	movs	r0, #1
 8001d4a:	f7ff fcd9 	bl	8001700 <Write_Registers_data>
				}
				else
				{
					Write_Registers_data(0);
				}
				break;
 8001d4e:	e013      	b.n	8001d78 <HAL_SPI_RxCpltCallback+0x3d0>
					Write_Registers_data(0);
 8001d50:	2000      	movs	r0, #0
 8001d52:	f7ff fcd5 	bl	8001700 <Write_Registers_data>
				break;
 8001d56:	e00f      	b.n	8001d78 <HAL_SPI_RxCpltCallback+0x3d0>
			case 0b00000011: //Command for DIP switch ID = 11
				if(BOARD_NUMBER==4)
 8001d58:	4b9a      	ldr	r3, [pc, #616]	; (8001fc4 <HAL_SPI_RxCpltCallback+0x61c>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	2b04      	cmp	r3, #4
 8001d5e:	d103      	bne.n	8001d68 <HAL_SPI_RxCpltCallback+0x3c0>
				{
					Write_Registers_data(1);
 8001d60:	2001      	movs	r0, #1
 8001d62:	f7ff fccd 	bl	8001700 <Write_Registers_data>
				}
				else
				{
					Write_Registers_data(0);
				}
				break;
 8001d66:	e007      	b.n	8001d78 <HAL_SPI_RxCpltCallback+0x3d0>
					Write_Registers_data(0);
 8001d68:	2000      	movs	r0, #0
 8001d6a:	f7ff fcc9 	bl	8001700 <Write_Registers_data>
				break;
 8001d6e:	e003      	b.n	8001d78 <HAL_SPI_RxCpltCallback+0x3d0>
			default: //Broadcast to every board
				Write_Registers_data(1);
 8001d70:	2001      	movs	r0, #1
 8001d72:	f7ff fcc5 	bl	8001700 <Write_Registers_data>
				break;
 8001d76:	bf00      	nop
			}
			break;
 8001d78:	e000      	b.n	8001d7c <HAL_SPI_RxCpltCallback+0x3d4>
		case 0b00011000: //Write partial content of frame buffer
			break;
 8001d7a:	bf00      	nop
		case 0b00110000: //Read Registers data
			break;
		case 0b00111000: //Read partial content of frame buffer
			break;
		}
		break;
 8001d7c:	e115      	b.n	8001faa <HAL_SPI_RxCpltCallback+0x602>
	case 0b01000000:  //Master SPI functions
		switch (spi3_buf[0] & 0b00111000) {
 8001d7e:	4b90      	ldr	r3, [pc, #576]	; (8001fc0 <HAL_SPI_RxCpltCallback+0x618>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d86:	2b28      	cmp	r3, #40	; 0x28
 8001d88:	f200 8111 	bhi.w	8001fae <HAL_SPI_RxCpltCallback+0x606>
 8001d8c:	a201      	add	r2, pc, #4	; (adr r2, 8001d94 <HAL_SPI_RxCpltCallback+0x3ec>)
 8001d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d92:	bf00      	nop
 8001d94:	08001e39 	.word	0x08001e39
 8001d98:	08001faf 	.word	0x08001faf
 8001d9c:	08001faf 	.word	0x08001faf
 8001da0:	08001faf 	.word	0x08001faf
 8001da4:	08001faf 	.word	0x08001faf
 8001da8:	08001faf 	.word	0x08001faf
 8001dac:	08001faf 	.word	0x08001faf
 8001db0:	08001faf 	.word	0x08001faf
 8001db4:	08001e39 	.word	0x08001e39
 8001db8:	08001faf 	.word	0x08001faf
 8001dbc:	08001faf 	.word	0x08001faf
 8001dc0:	08001faf 	.word	0x08001faf
 8001dc4:	08001faf 	.word	0x08001faf
 8001dc8:	08001faf 	.word	0x08001faf
 8001dcc:	08001faf 	.word	0x08001faf
 8001dd0:	08001faf 	.word	0x08001faf
 8001dd4:	08001e39 	.word	0x08001e39
 8001dd8:	08001faf 	.word	0x08001faf
 8001ddc:	08001faf 	.word	0x08001faf
 8001de0:	08001faf 	.word	0x08001faf
 8001de4:	08001faf 	.word	0x08001faf
 8001de8:	08001faf 	.word	0x08001faf
 8001dec:	08001faf 	.word	0x08001faf
 8001df0:	08001faf 	.word	0x08001faf
 8001df4:	08001e39 	.word	0x08001e39
 8001df8:	08001faf 	.word	0x08001faf
 8001dfc:	08001faf 	.word	0x08001faf
 8001e00:	08001faf 	.word	0x08001faf
 8001e04:	08001faf 	.word	0x08001faf
 8001e08:	08001faf 	.word	0x08001faf
 8001e0c:	08001faf 	.word	0x08001faf
 8001e10:	08001faf 	.word	0x08001faf
 8001e14:	08001e39 	.word	0x08001e39
 8001e18:	08001faf 	.word	0x08001faf
 8001e1c:	08001faf 	.word	0x08001faf
 8001e20:	08001faf 	.word	0x08001faf
 8001e24:	08001faf 	.word	0x08001faf
 8001e28:	08001faf 	.word	0x08001faf
 8001e2c:	08001faf 	.word	0x08001faf
 8001e30:	08001faf 	.word	0x08001faf
 8001e34:	08001e39 	.word	0x08001e39
		case 0b00000000: //Start SPI write data
			break;
 8001e38:	bf00      	nop
		case 0b00100000: //Continuous Read SPI data
			break;
		case 0b00101000: //End SPI Read data
			break;
		}
		break;
 8001e3a:	e0b8      	b.n	8001fae <HAL_SPI_RxCpltCallback+0x606>
	case 0b10000000:  //I2C command
		switch (spi3_buf[0] & 0b00111000) {
 8001e3c:	4b60      	ldr	r3, [pc, #384]	; (8001fc0 <HAL_SPI_RxCpltCallback+0x618>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d003      	beq.n	8001e50 <HAL_SPI_RxCpltCallback+0x4a8>
 8001e48:	2b20      	cmp	r3, #32
 8001e4a:	f040 80b2 	bne.w	8001fb2 <HAL_SPI_RxCpltCallback+0x60a>
		case 0b00000000: //I2C Write Data
			break;
		case 0b00100000: //I2C Read Data
			break;
 8001e4e:	e000      	b.n	8001e52 <HAL_SPI_RxCpltCallback+0x4aa>
			break;
 8001e50:	bf00      	nop
		}
		break;
 8001e52:	e0ae      	b.n	8001fb2 <HAL_SPI_RxCpltCallback+0x60a>
	case 0b11000000:  //SPI flash function & Slave SPI
		switch (spi3_buf[0] & 0b00111000) {
 8001e54:	4b5a      	ldr	r3, [pc, #360]	; (8001fc0 <HAL_SPI_RxCpltCallback+0x618>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e5c:	2b20      	cmp	r3, #32
 8001e5e:	f000 80a0 	beq.w	8001fa2 <HAL_SPI_RxCpltCallback+0x5fa>
 8001e62:	2b20      	cmp	r3, #32
 8001e64:	f300 80b2 	bgt.w	8001fcc <HAL_SPI_RxCpltCallback+0x624>
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d003      	beq.n	8001e74 <HAL_SPI_RxCpltCallback+0x4cc>
 8001e6c:	2b08      	cmp	r3, #8
 8001e6e:	f000 809a 	beq.w	8001fa6 <HAL_SPI_RxCpltCallback+0x5fe>
		case 0b00001000: //Read data from SPI flash
			break;
		case 0b00100000: //Display Data by Slave SPI
			break;
		}
		break;
 8001e72:	e0ab      	b.n	8001fcc <HAL_SPI_RxCpltCallback+0x624>
			switch (spi3_buf[0] & 0b00000111) {
 8001e74:	4b52      	ldr	r3, [pc, #328]	; (8001fc0 <HAL_SPI_RxCpltCallback+0x618>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	f003 0307 	and.w	r3, r3, #7
 8001e7c:	2b03      	cmp	r3, #3
 8001e7e:	d86d      	bhi.n	8001f5c <HAL_SPI_RxCpltCallback+0x5b4>
 8001e80:	a201      	add	r2, pc, #4	; (adr r2, 8001e88 <HAL_SPI_RxCpltCallback+0x4e0>)
 8001e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e86:	bf00      	nop
 8001e88:	08001f97 	.word	0x08001f97
 8001e8c:	08001e99 	.word	0x08001e99
 8001e90:	08001edb 	.word	0x08001edb
 8001e94:	08001f1b 	.word	0x08001f1b
				HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
 8001e98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e9c:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001ea0:	4949      	ldr	r1, [pc, #292]	; (8001fc8 <HAL_SPI_RxCpltCallback+0x620>)
 8001ea2:	4846      	ldr	r0, [pc, #280]	; (8001fbc <HAL_SPI_RxCpltCallback+0x614>)
 8001ea4:	f005 f8fe 	bl	80070a4 <HAL_SPI_Receive>
				SPI_master2slave(&spi3_buf, &frame_buf_tmp, 1);
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	4947      	ldr	r1, [pc, #284]	; (8001fc8 <HAL_SPI_RxCpltCallback+0x620>)
 8001eac:	4844      	ldr	r0, [pc, #272]	; (8001fc0 <HAL_SPI_RxCpltCallback+0x618>)
 8001eae:	f7ff fbf5 	bl	800169c <SPI_master2slave>
				if(BOARD_NUMBER==2)
 8001eb2:	4b44      	ldr	r3, [pc, #272]	; (8001fc4 <HAL_SPI_RxCpltCallback+0x61c>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d16f      	bne.n	8001f9a <HAL_SPI_RxCpltCallback+0x5f2>
					erase_flash_sector(spi3_buf[1] - 1);
 8001eba:	4b41      	ldr	r3, [pc, #260]	; (8001fc0 <HAL_SPI_RxCpltCallback+0x618>)
 8001ebc:	785b      	ldrb	r3, [r3, #1]
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f000 f9e2 	bl	800228c <erase_flash_sector>
					write_flash_page(&frame_buf_tmp, spi3_buf[1] - 1);
 8001ec8:	4b3d      	ldr	r3, [pc, #244]	; (8001fc0 <HAL_SPI_RxCpltCallback+0x618>)
 8001eca:	785b      	ldrb	r3, [r3, #1]
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	483d      	ldr	r0, [pc, #244]	; (8001fc8 <HAL_SPI_RxCpltCallback+0x620>)
 8001ed4:	f000 f908 	bl	80020e8 <write_flash_page>
				break;
 8001ed8:	e05f      	b.n	8001f9a <HAL_SPI_RxCpltCallback+0x5f2>
				HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
 8001eda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ede:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001ee2:	4939      	ldr	r1, [pc, #228]	; (8001fc8 <HAL_SPI_RxCpltCallback+0x620>)
 8001ee4:	4835      	ldr	r0, [pc, #212]	; (8001fbc <HAL_SPI_RxCpltCallback+0x614>)
 8001ee6:	f005 f8dd 	bl	80070a4 <HAL_SPI_Receive>
				SPI_master2slave(&spi3_buf, &frame_buf_tmp, 1);
 8001eea:	2201      	movs	r2, #1
 8001eec:	4936      	ldr	r1, [pc, #216]	; (8001fc8 <HAL_SPI_RxCpltCallback+0x620>)
 8001eee:	4834      	ldr	r0, [pc, #208]	; (8001fc0 <HAL_SPI_RxCpltCallback+0x618>)
 8001ef0:	f7ff fbd4 	bl	800169c <SPI_master2slave>
				if(BOARD_NUMBER=3)
 8001ef4:	4b33      	ldr	r3, [pc, #204]	; (8001fc4 <HAL_SPI_RxCpltCallback+0x61c>)
 8001ef6:	2203      	movs	r2, #3
 8001ef8:	701a      	strb	r2, [r3, #0]
					erase_flash_sector(spi3_buf[1] - 1);
 8001efa:	4b31      	ldr	r3, [pc, #196]	; (8001fc0 <HAL_SPI_RxCpltCallback+0x618>)
 8001efc:	785b      	ldrb	r3, [r3, #1]
 8001efe:	3b01      	subs	r3, #1
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	4618      	mov	r0, r3
 8001f04:	f000 f9c2 	bl	800228c <erase_flash_sector>
					write_flash_page(&frame_buf_tmp, spi3_buf[1] - 1);
 8001f08:	4b2d      	ldr	r3, [pc, #180]	; (8001fc0 <HAL_SPI_RxCpltCallback+0x618>)
 8001f0a:	785b      	ldrb	r3, [r3, #1]
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	4619      	mov	r1, r3
 8001f12:	482d      	ldr	r0, [pc, #180]	; (8001fc8 <HAL_SPI_RxCpltCallback+0x620>)
 8001f14:	f000 f8e8 	bl	80020e8 <write_flash_page>
				break;
 8001f18:	e042      	b.n	8001fa0 <HAL_SPI_RxCpltCallback+0x5f8>
				HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
 8001f1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f1e:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001f22:	4929      	ldr	r1, [pc, #164]	; (8001fc8 <HAL_SPI_RxCpltCallback+0x620>)
 8001f24:	4825      	ldr	r0, [pc, #148]	; (8001fbc <HAL_SPI_RxCpltCallback+0x614>)
 8001f26:	f005 f8bd 	bl	80070a4 <HAL_SPI_Receive>
				SPI_master2slave(&spi3_buf, &frame_buf_tmp, 1);
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	4926      	ldr	r1, [pc, #152]	; (8001fc8 <HAL_SPI_RxCpltCallback+0x620>)
 8001f2e:	4824      	ldr	r0, [pc, #144]	; (8001fc0 <HAL_SPI_RxCpltCallback+0x618>)
 8001f30:	f7ff fbb4 	bl	800169c <SPI_master2slave>
				if(BOARD_NUMBER==4)
 8001f34:	4b23      	ldr	r3, [pc, #140]	; (8001fc4 <HAL_SPI_RxCpltCallback+0x61c>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	2b04      	cmp	r3, #4
 8001f3a:	d130      	bne.n	8001f9e <HAL_SPI_RxCpltCallback+0x5f6>
					erase_flash_sector(spi3_buf[1] - 1);
 8001f3c:	4b20      	ldr	r3, [pc, #128]	; (8001fc0 <HAL_SPI_RxCpltCallback+0x618>)
 8001f3e:	785b      	ldrb	r3, [r3, #1]
 8001f40:	3b01      	subs	r3, #1
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	4618      	mov	r0, r3
 8001f46:	f000 f9a1 	bl	800228c <erase_flash_sector>
					write_flash_page(&frame_buf_tmp, spi3_buf[1] - 1);
 8001f4a:	4b1d      	ldr	r3, [pc, #116]	; (8001fc0 <HAL_SPI_RxCpltCallback+0x618>)
 8001f4c:	785b      	ldrb	r3, [r3, #1]
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	4619      	mov	r1, r3
 8001f54:	481c      	ldr	r0, [pc, #112]	; (8001fc8 <HAL_SPI_RxCpltCallback+0x620>)
 8001f56:	f000 f8c7 	bl	80020e8 <write_flash_page>
				break;
 8001f5a:	e020      	b.n	8001f9e <HAL_SPI_RxCpltCallback+0x5f6>
				HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
 8001f5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f60:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001f64:	4918      	ldr	r1, [pc, #96]	; (8001fc8 <HAL_SPI_RxCpltCallback+0x620>)
 8001f66:	4815      	ldr	r0, [pc, #84]	; (8001fbc <HAL_SPI_RxCpltCallback+0x614>)
 8001f68:	f005 f89c 	bl	80070a4 <HAL_SPI_Receive>
				SPI_master2slave(&spi3_buf, &frame_buf_tmp, 1);
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	4916      	ldr	r1, [pc, #88]	; (8001fc8 <HAL_SPI_RxCpltCallback+0x620>)
 8001f70:	4813      	ldr	r0, [pc, #76]	; (8001fc0 <HAL_SPI_RxCpltCallback+0x618>)
 8001f72:	f7ff fb93 	bl	800169c <SPI_master2slave>
				erase_flash_sector(spi3_buf[1] - 1);
 8001f76:	4b12      	ldr	r3, [pc, #72]	; (8001fc0 <HAL_SPI_RxCpltCallback+0x618>)
 8001f78:	785b      	ldrb	r3, [r3, #1]
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f000 f984 	bl	800228c <erase_flash_sector>
				write_flash_page(&frame_buf_tmp, spi3_buf[1] - 1);
 8001f84:	4b0e      	ldr	r3, [pc, #56]	; (8001fc0 <HAL_SPI_RxCpltCallback+0x618>)
 8001f86:	785b      	ldrb	r3, [r3, #1]
 8001f88:	3b01      	subs	r3, #1
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	480e      	ldr	r0, [pc, #56]	; (8001fc8 <HAL_SPI_RxCpltCallback+0x620>)
 8001f90:	f000 f8aa 	bl	80020e8 <write_flash_page>
				break;
 8001f94:	e004      	b.n	8001fa0 <HAL_SPI_RxCpltCallback+0x5f8>
				break;
 8001f96:	bf00      	nop
 8001f98:	e006      	b.n	8001fa8 <HAL_SPI_RxCpltCallback+0x600>
				break;
 8001f9a:	bf00      	nop
 8001f9c:	e004      	b.n	8001fa8 <HAL_SPI_RxCpltCallback+0x600>
				break;
 8001f9e:	bf00      	nop
			break;
 8001fa0:	e002      	b.n	8001fa8 <HAL_SPI_RxCpltCallback+0x600>
			break;
 8001fa2:	bf00      	nop
 8001fa4:	e012      	b.n	8001fcc <HAL_SPI_RxCpltCallback+0x624>
			break;
 8001fa6:	bf00      	nop
		break;
 8001fa8:	e010      	b.n	8001fcc <HAL_SPI_RxCpltCallback+0x624>
		break;
 8001faa:	bf00      	nop
 8001fac:	e00f      	b.n	8001fce <HAL_SPI_RxCpltCallback+0x626>
		break;
 8001fae:	bf00      	nop
 8001fb0:	e00d      	b.n	8001fce <HAL_SPI_RxCpltCallback+0x626>
		break;
 8001fb2:	bf00      	nop
 8001fb4:	e00b      	b.n	8001fce <HAL_SPI_RxCpltCallback+0x626>
 8001fb6:	bf00      	nop
 8001fb8:	200080b4 	.word	0x200080b4
 8001fbc:	20004db8 	.word	0x20004db8
 8001fc0:	20004eb0 	.word	0x20004eb0
 8001fc4:	20000000 	.word	0x20000000
 8001fc8:	20004eb4 	.word	0x20004eb4
		break;
 8001fcc:	bf00      	nop
	}
	// USB command: ID
	switch (spi3_buf[0] & 0b00000111) {
 8001fce:	4b0d      	ldr	r3, [pc, #52]	; (8002004 <HAL_SPI_RxCpltCallback+0x65c>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	2b03      	cmp	r3, #3
 8001fd8:	d80a      	bhi.n	8001ff0 <HAL_SPI_RxCpltCallback+0x648>
 8001fda:	a201      	add	r2, pc, #4	; (adr r2, 8001fe0 <HAL_SPI_RxCpltCallback+0x638>)
 8001fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe0:	08001ff1 	.word	0x08001ff1
 8001fe4:	08001ff1 	.word	0x08001ff1
 8001fe8:	08001ff1 	.word	0x08001ff1
 8001fec:	08001ff1 	.word	0x08001ff1
	case 0b00000010:  //Command for DIP switch ID = 10
		break;
	case 0b00000011:  //Command for DIP switch ID = 11
		break;
	default:  //Broadcast to every board
		break;
 8001ff0:	bf00      	nop
	}

	HAL_SPI_Receive_IT(&hspi3, &spi3_buf, 2);
 8001ff2:	2202      	movs	r2, #2
 8001ff4:	4903      	ldr	r1, [pc, #12]	; (8002004 <HAL_SPI_RxCpltCallback+0x65c>)
 8001ff6:	4804      	ldr	r0, [pc, #16]	; (8002008 <HAL_SPI_RxCpltCallback+0x660>)
 8001ff8:	f005 fbae 	bl	8007758 <HAL_SPI_Receive_IT>
}
 8001ffc:	bf00      	nop
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	20004eb0 	.word	0x20004eb0
 8002008:	20004db8 	.word	0x20004db8

0800200c <FLASH_WriteByte>:

void FLASH_WriteByte(uint8_t data) {
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	4603      	mov	r3, r0
 8002014:	71fb      	strb	r3, [r7, #7]
    for (int i = 7; i >= 0; i--) {
 8002016:	2307      	movs	r3, #7
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	e022      	b.n	8002062 <FLASH_WriteByte+0x56>
        HAL_GPIO_WritePin(FLASH_MOSI_PORT, FLASH_MOSI_PIN, (data >> i) & 1);
 800201c:	79fa      	ldrb	r2, [r7, #7]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	fa42 f303 	asr.w	r3, r2, r3
 8002024:	b2db      	uxtb	r3, r3
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	b2db      	uxtb	r3, r3
 800202c:	461a      	mov	r2, r3
 800202e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002032:	4810      	ldr	r0, [pc, #64]	; (8002074 <FLASH_WriteByte+0x68>)
 8002034:	f002 f81c 	bl	8004070 <HAL_GPIO_WritePin>

        HAL_GPIO_WritePin(FLASH_CLK_PORT, FLASH_CLK_PIN, GPIO_PIN_SET);
 8002038:	2201      	movs	r2, #1
 800203a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800203e:	480d      	ldr	r0, [pc, #52]	; (8002074 <FLASH_WriteByte+0x68>)
 8002040:	f002 f816 	bl	8004070 <HAL_GPIO_WritePin>
        delay_100ns(1);
 8002044:	2001      	movs	r0, #1
 8002046:	f7ff fc20 	bl	800188a <delay_100ns>
        HAL_GPIO_WritePin(FLASH_CLK_PORT, FLASH_CLK_PIN, GPIO_PIN_RESET);
 800204a:	2200      	movs	r2, #0
 800204c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002050:	4808      	ldr	r0, [pc, #32]	; (8002074 <FLASH_WriteByte+0x68>)
 8002052:	f002 f80d 	bl	8004070 <HAL_GPIO_WritePin>
        delay_100ns(1);
 8002056:	2001      	movs	r0, #1
 8002058:	f7ff fc17 	bl	800188a <delay_100ns>
    for (int i = 7; i >= 0; i--) {
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	3b01      	subs	r3, #1
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2b00      	cmp	r3, #0
 8002066:	dad9      	bge.n	800201c <FLASH_WriteByte+0x10>
    }
}
 8002068:	bf00      	nop
 800206a:	bf00      	nop
 800206c:	3710      	adds	r7, #16
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	48001400 	.word	0x48001400

08002078 <FLASH_ReadByte>:

uint8_t FLASH_ReadByte(void) {
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
    uint8_t data = 0;
 800207e:	2300      	movs	r3, #0
 8002080:	71fb      	strb	r3, [r7, #7]

    for (int i = 7; i >= 0; i--) {
 8002082:	2307      	movs	r3, #7
 8002084:	603b      	str	r3, [r7, #0]
 8002086:	e024      	b.n	80020d2 <FLASH_ReadByte+0x5a>
        HAL_GPIO_WritePin(FLASH_CLK_PORT, FLASH_CLK_PIN, GPIO_PIN_SET);
 8002088:	2201      	movs	r2, #1
 800208a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800208e:	4815      	ldr	r0, [pc, #84]	; (80020e4 <FLASH_ReadByte+0x6c>)
 8002090:	f001 ffee 	bl	8004070 <HAL_GPIO_WritePin>
        delay_100ns(1);
 8002094:	2001      	movs	r0, #1
 8002096:	f7ff fbf8 	bl	800188a <delay_100ns>
        data |= (HAL_GPIO_ReadPin(FLASH_MISO_PORT, FLASH_MISO_PIN) << i);
 800209a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800209e:	4811      	ldr	r0, [pc, #68]	; (80020e4 <FLASH_ReadByte+0x6c>)
 80020a0:	f001 ffce 	bl	8004040 <HAL_GPIO_ReadPin>
 80020a4:	4603      	mov	r3, r0
 80020a6:	461a      	mov	r2, r3
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	b25a      	sxtb	r2, r3
 80020b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	b25b      	sxtb	r3, r3
 80020b8:	71fb      	strb	r3, [r7, #7]
        HAL_GPIO_WritePin(FLASH_CLK_PORT,FLASH_CLK_PIN, GPIO_PIN_RESET);
 80020ba:	2200      	movs	r2, #0
 80020bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020c0:	4808      	ldr	r0, [pc, #32]	; (80020e4 <FLASH_ReadByte+0x6c>)
 80020c2:	f001 ffd5 	bl	8004070 <HAL_GPIO_WritePin>
        delay_100ns(1);
 80020c6:	2001      	movs	r0, #1
 80020c8:	f7ff fbdf 	bl	800188a <delay_100ns>
    for (int i = 7; i >= 0; i--) {
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	3b01      	subs	r3, #1
 80020d0:	603b      	str	r3, [r7, #0]
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	dad7      	bge.n	8002088 <FLASH_ReadByte+0x10>
    }

    return data;
 80020d8:	79fb      	ldrb	r3, [r7, #7]
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	48001400 	.word	0x48001400

080020e8 <write_flash_page>:

void write_flash_page(uint8_t *data, uint8_t image_id)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b088      	sub	sp, #32
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	460b      	mov	r3, r1
 80020f2:	70fb      	strb	r3, [r7, #3]
	int image_id_H = image_id/8;
 80020f4:	78fb      	ldrb	r3, [r7, #3]
 80020f6:	08db      	lsrs	r3, r3, #3
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	613b      	str	r3, [r7, #16]
	int image_id_L = image_id%8;
 80020fc:	78fb      	ldrb	r3, [r7, #3]
 80020fe:	f003 0307 	and.w	r3, r3, #7
 8002102:	60fb      	str	r3, [r7, #12]
	int count=0;
 8002104:	2300      	movs	r3, #0
 8002106:	61fb      	str	r3, [r7, #28]
	for(uint32_t i=image_id_L*0x20; i<image_id_L*0x20+25; i++)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	015b      	lsls	r3, r3, #5
 800210c:	61bb      	str	r3, [r7, #24]
 800210e:	e057      	b.n	80021c0 <write_flash_page+0xd8>
	{
		// enable write
		HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_RESET);
 8002110:	2200      	movs	r2, #0
 8002112:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002116:	4830      	ldr	r0, [pc, #192]	; (80021d8 <write_flash_page+0xf0>)
 8002118:	f001 ffaa 	bl	8004070 <HAL_GPIO_WritePin>
		FLASH_WriteByte(0x06);
 800211c:	2006      	movs	r0, #6
 800211e:	f7ff ff75 	bl	800200c <FLASH_WriteByte>
		HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_SET);
 8002122:	2201      	movs	r2, #1
 8002124:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002128:	482b      	ldr	r0, [pc, #172]	; (80021d8 <write_flash_page+0xf0>)
 800212a:	f001 ffa1 	bl	8004070 <HAL_GPIO_WritePin>

		// write data to flash page
		HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_RESET);
 800212e:	2200      	movs	r2, #0
 8002130:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002134:	4828      	ldr	r0, [pc, #160]	; (80021d8 <write_flash_page+0xf0>)
 8002136:	f001 ff9b 	bl	8004070 <HAL_GPIO_WritePin>
		FLASH_WriteByte(0x02);
 800213a:	2002      	movs	r0, #2
 800213c:	f7ff ff66 	bl	800200c <FLASH_WriteByte>
		FLASH_WriteByte(image_id_H);
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	b2db      	uxtb	r3, r3
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff ff61 	bl	800200c <FLASH_WriteByte>
		FLASH_WriteByte(i);
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	b2db      	uxtb	r3, r3
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff ff5c 	bl	800200c <FLASH_WriteByte>
		FLASH_WriteByte(0x00);
 8002154:	2000      	movs	r0, #0
 8002156:	f7ff ff59 	bl	800200c <FLASH_WriteByte>
		for(uint32_t j=0; j<256; j++)
 800215a:	2300      	movs	r3, #0
 800215c:	617b      	str	r3, [r7, #20]
 800215e:	e00d      	b.n	800217c <write_flash_page+0x94>
		{
			FLASH_WriteByte(data[count*256+j]);
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	021b      	lsls	r3, r3, #8
 8002164:	461a      	mov	r2, r3
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	4413      	add	r3, r2
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	4413      	add	r3, r2
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff ff4b 	bl	800200c <FLASH_WriteByte>
		for(uint32_t j=0; j<256; j++)
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	3301      	adds	r3, #1
 800217a:	617b      	str	r3, [r7, #20]
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	2bff      	cmp	r3, #255	; 0xff
 8002180:	d9ee      	bls.n	8002160 <write_flash_page+0x78>
		}
		HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_SET);
 8002182:	2201      	movs	r2, #1
 8002184:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002188:	4813      	ldr	r0, [pc, #76]	; (80021d8 <write_flash_page+0xf0>)
 800218a:	f001 ff71 	bl	8004070 <HAL_GPIO_WritePin>

		// disable write
		HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_RESET);
 800218e:	2200      	movs	r2, #0
 8002190:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002194:	4810      	ldr	r0, [pc, #64]	; (80021d8 <write_flash_page+0xf0>)
 8002196:	f001 ff6b 	bl	8004070 <HAL_GPIO_WritePin>
		FLASH_WriteByte(0x04);
 800219a:	2004      	movs	r0, #4
 800219c:	f7ff ff36 	bl	800200c <FLASH_WriteByte>
		HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_SET);
 80021a0:	2201      	movs	r2, #1
 80021a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021a6:	480c      	ldr	r0, [pc, #48]	; (80021d8 <write_flash_page+0xf0>)
 80021a8:	f001 ff62 	bl	8004070 <HAL_GPIO_WritePin>
		delay_us(1000);
 80021ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021b0:	f7ff fb50 	bl	8001854 <delay_us>
		count++;
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	3301      	adds	r3, #1
 80021b8:	61fb      	str	r3, [r7, #28]
	for(uint32_t i=image_id_L*0x20; i<image_id_L*0x20+25; i++)
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	3301      	adds	r3, #1
 80021be:	61bb      	str	r3, [r7, #24]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	015b      	lsls	r3, r3, #5
 80021c4:	3319      	adds	r3, #25
 80021c6:	461a      	mov	r2, r3
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d3a0      	bcc.n	8002110 <write_flash_page+0x28>
	}
}
 80021ce:	bf00      	nop
 80021d0:	bf00      	nop
 80021d2:	3720      	adds	r7, #32
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	48000800 	.word	0x48000800

080021dc <read_flash_page>:

void read_flash_page(uint8_t *data, uint8_t image_id)
{
 80021dc:	b590      	push	{r4, r7, lr}
 80021de:	b089      	sub	sp, #36	; 0x24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	460b      	mov	r3, r1
 80021e6:	70fb      	strb	r3, [r7, #3]
	int image_id_H = image_id/8;
 80021e8:	78fb      	ldrb	r3, [r7, #3]
 80021ea:	08db      	lsrs	r3, r3, #3
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	613b      	str	r3, [r7, #16]
	int image_id_L = image_id%8;
 80021f0:	78fb      	ldrb	r3, [r7, #3]
 80021f2:	f003 0307 	and.w	r3, r3, #7
 80021f6:	60fb      	str	r3, [r7, #12]
	int count=0;
 80021f8:	2300      	movs	r3, #0
 80021fa:	61fb      	str	r3, [r7, #28]
	for(uint32_t i=image_id_L*0x20; i<image_id_L*0x20+25; i++)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	015b      	lsls	r3, r3, #5
 8002200:	61bb      	str	r3, [r7, #24]
 8002202:	e035      	b.n	8002270 <read_flash_page+0x94>
	{
		HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_RESET);
 8002204:	2200      	movs	r2, #0
 8002206:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800220a:	481f      	ldr	r0, [pc, #124]	; (8002288 <read_flash_page+0xac>)
 800220c:	f001 ff30 	bl	8004070 <HAL_GPIO_WritePin>
		FLASH_WriteByte(0x03);
 8002210:	2003      	movs	r0, #3
 8002212:	f7ff fefb 	bl	800200c <FLASH_WriteByte>
		FLASH_WriteByte(image_id_H);
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	b2db      	uxtb	r3, r3
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff fef6 	bl	800200c <FLASH_WriteByte>
		FLASH_WriteByte(i);
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	b2db      	uxtb	r3, r3
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff fef1 	bl	800200c <FLASH_WriteByte>
		FLASH_WriteByte(0x00);
 800222a:	2000      	movs	r0, #0
 800222c:	f7ff feee 	bl	800200c <FLASH_WriteByte>
		for(uint32_t j=0; j<256; j++)
 8002230:	2300      	movs	r3, #0
 8002232:	617b      	str	r3, [r7, #20]
 8002234:	e00d      	b.n	8002252 <read_flash_page+0x76>
		{
			data[count*256+j] = FLASH_ReadByte();
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	021b      	lsls	r3, r3, #8
 800223a:	461a      	mov	r2, r3
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	4413      	add	r3, r2
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	18d4      	adds	r4, r2, r3
 8002244:	f7ff ff18 	bl	8002078 <FLASH_ReadByte>
 8002248:	4603      	mov	r3, r0
 800224a:	7023      	strb	r3, [r4, #0]
		for(uint32_t j=0; j<256; j++)
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	3301      	adds	r3, #1
 8002250:	617b      	str	r3, [r7, #20]
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	2bff      	cmp	r3, #255	; 0xff
 8002256:	d9ee      	bls.n	8002236 <read_flash_page+0x5a>
		}
		HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_SET);
 8002258:	2201      	movs	r2, #1
 800225a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800225e:	480a      	ldr	r0, [pc, #40]	; (8002288 <read_flash_page+0xac>)
 8002260:	f001 ff06 	bl	8004070 <HAL_GPIO_WritePin>
		count++;
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	3301      	adds	r3, #1
 8002268:	61fb      	str	r3, [r7, #28]
	for(uint32_t i=image_id_L*0x20; i<image_id_L*0x20+25; i++)
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	3301      	adds	r3, #1
 800226e:	61bb      	str	r3, [r7, #24]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	015b      	lsls	r3, r3, #5
 8002274:	3319      	adds	r3, #25
 8002276:	461a      	mov	r2, r3
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	4293      	cmp	r3, r2
 800227c:	d3c2      	bcc.n	8002204 <read_flash_page+0x28>
	}
}
 800227e:	bf00      	nop
 8002280:	bf00      	nop
 8002282:	3724      	adds	r7, #36	; 0x24
 8002284:	46bd      	mov	sp, r7
 8002286:	bd90      	pop	{r4, r7, pc}
 8002288:	48000800 	.word	0x48000800

0800228c <erase_flash_sector>:

void erase_flash_sector(uint8_t image_id)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	4603      	mov	r3, r0
 8002294:	71fb      	strb	r3, [r7, #7]
	int image_id_H = image_id/8;
 8002296:	79fb      	ldrb	r3, [r7, #7]
 8002298:	08db      	lsrs	r3, r3, #3
 800229a:	b2db      	uxtb	r3, r3
 800229c:	60fb      	str	r3, [r7, #12]
	int image_id_L = image_id%8;
 800229e:	79fb      	ldrb	r3, [r7, #7]
 80022a0:	f003 0307 	and.w	r3, r3, #7
 80022a4:	60bb      	str	r3, [r7, #8]
	reset_flash_software();
 80022a6:	f000 f889 	bl	80023bc <reset_flash_software>

	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_RESET);
 80022aa:	2200      	movs	r2, #0
 80022ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022b0:	4841      	ldr	r0, [pc, #260]	; (80023b8 <erase_flash_sector+0x12c>)
 80022b2:	f001 fedd 	bl	8004070 <HAL_GPIO_WritePin>
	FLASH_WriteByte(0x06);
 80022b6:	2006      	movs	r0, #6
 80022b8:	f7ff fea8 	bl	800200c <FLASH_WriteByte>
	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_SET);
 80022bc:	2201      	movs	r2, #1
 80022be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022c2:	483d      	ldr	r0, [pc, #244]	; (80023b8 <erase_flash_sector+0x12c>)
 80022c4:	f001 fed4 	bl	8004070 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_RESET);
 80022c8:	2200      	movs	r2, #0
 80022ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022ce:	483a      	ldr	r0, [pc, #232]	; (80023b8 <erase_flash_sector+0x12c>)
 80022d0:	f001 fece 	bl	8004070 <HAL_GPIO_WritePin>
	FLASH_WriteByte(0x20);
 80022d4:	2020      	movs	r0, #32
 80022d6:	f7ff fe99 	bl	800200c <FLASH_WriteByte>
	FLASH_WriteByte(image_id_H);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	4618      	mov	r0, r3
 80022e0:	f7ff fe94 	bl	800200c <FLASH_WriteByte>
	FLASH_WriteByte(image_id_L*0x20);
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	015b      	lsls	r3, r3, #5
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff fe8d 	bl	800200c <FLASH_WriteByte>
	FLASH_WriteByte(0x00);
 80022f2:	2000      	movs	r0, #0
 80022f4:	f7ff fe8a 	bl	800200c <FLASH_WriteByte>
	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_SET);
 80022f8:	2201      	movs	r2, #1
 80022fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022fe:	482e      	ldr	r0, [pc, #184]	; (80023b8 <erase_flash_sector+0x12c>)
 8002300:	f001 feb6 	bl	8004070 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_RESET);
 8002304:	2200      	movs	r2, #0
 8002306:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800230a:	482b      	ldr	r0, [pc, #172]	; (80023b8 <erase_flash_sector+0x12c>)
 800230c:	f001 feb0 	bl	8004070 <HAL_GPIO_WritePin>
	FLASH_WriteByte(0x04);
 8002310:	2004      	movs	r0, #4
 8002312:	f7ff fe7b 	bl	800200c <FLASH_WriteByte>
	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_SET);
 8002316:	2201      	movs	r2, #1
 8002318:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800231c:	4826      	ldr	r0, [pc, #152]	; (80023b8 <erase_flash_sector+0x12c>)
 800231e:	f001 fea7 	bl	8004070 <HAL_GPIO_WritePin>

	delay_us(30000);
 8002322:	f247 5030 	movw	r0, #30000	; 0x7530
 8002326:	f7ff fa95 	bl	8001854 <delay_us>
	////////////////////////////////////////////////////////////
	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_RESET);
 800232a:	2200      	movs	r2, #0
 800232c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002330:	4821      	ldr	r0, [pc, #132]	; (80023b8 <erase_flash_sector+0x12c>)
 8002332:	f001 fe9d 	bl	8004070 <HAL_GPIO_WritePin>
	FLASH_WriteByte(0x06);
 8002336:	2006      	movs	r0, #6
 8002338:	f7ff fe68 	bl	800200c <FLASH_WriteByte>
	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_SET);
 800233c:	2201      	movs	r2, #1
 800233e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002342:	481d      	ldr	r0, [pc, #116]	; (80023b8 <erase_flash_sector+0x12c>)
 8002344:	f001 fe94 	bl	8004070 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_RESET);
 8002348:	2200      	movs	r2, #0
 800234a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800234e:	481a      	ldr	r0, [pc, #104]	; (80023b8 <erase_flash_sector+0x12c>)
 8002350:	f001 fe8e 	bl	8004070 <HAL_GPIO_WritePin>
	FLASH_WriteByte(0x20);
 8002354:	2020      	movs	r0, #32
 8002356:	f7ff fe59 	bl	800200c <FLASH_WriteByte>
	FLASH_WriteByte(image_id_H);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	b2db      	uxtb	r3, r3
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff fe54 	bl	800200c <FLASH_WriteByte>
	FLASH_WriteByte(image_id_L*0x20+0x10);
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	b2db      	uxtb	r3, r3
 8002368:	015b      	lsls	r3, r3, #5
 800236a:	b2db      	uxtb	r3, r3
 800236c:	3310      	adds	r3, #16
 800236e:	b2db      	uxtb	r3, r3
 8002370:	4618      	mov	r0, r3
 8002372:	f7ff fe4b 	bl	800200c <FLASH_WriteByte>
	FLASH_WriteByte(0x00);
 8002376:	2000      	movs	r0, #0
 8002378:	f7ff fe48 	bl	800200c <FLASH_WriteByte>
	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_SET);
 800237c:	2201      	movs	r2, #1
 800237e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002382:	480d      	ldr	r0, [pc, #52]	; (80023b8 <erase_flash_sector+0x12c>)
 8002384:	f001 fe74 	bl	8004070 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_RESET);
 8002388:	2200      	movs	r2, #0
 800238a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800238e:	480a      	ldr	r0, [pc, #40]	; (80023b8 <erase_flash_sector+0x12c>)
 8002390:	f001 fe6e 	bl	8004070 <HAL_GPIO_WritePin>
	FLASH_WriteByte(0x04);
 8002394:	2004      	movs	r0, #4
 8002396:	f7ff fe39 	bl	800200c <FLASH_WriteByte>
	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_SET);
 800239a:	2201      	movs	r2, #1
 800239c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023a0:	4805      	ldr	r0, [pc, #20]	; (80023b8 <erase_flash_sector+0x12c>)
 80023a2:	f001 fe65 	bl	8004070 <HAL_GPIO_WritePin>

	delay_us(30000);
 80023a6:	f247 5030 	movw	r0, #30000	; 0x7530
 80023aa:	f7ff fa53 	bl	8001854 <delay_us>
}
 80023ae:	bf00      	nop
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	48000800 	.word	0x48000800

080023bc <reset_flash_software>:

void reset_flash_software()
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_RESET);
 80023c0:	2200      	movs	r2, #0
 80023c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023c6:	4813      	ldr	r0, [pc, #76]	; (8002414 <reset_flash_software+0x58>)
 80023c8:	f001 fe52 	bl	8004070 <HAL_GPIO_WritePin>
	FLASH_WriteByte(0x66);
 80023cc:	2066      	movs	r0, #102	; 0x66
 80023ce:	f7ff fe1d 	bl	800200c <FLASH_WriteByte>
	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_SET);
 80023d2:	2201      	movs	r2, #1
 80023d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023d8:	480e      	ldr	r0, [pc, #56]	; (8002414 <reset_flash_software+0x58>)
 80023da:	f001 fe49 	bl	8004070 <HAL_GPIO_WritePin>
	delay_100ns(1);
 80023de:	2001      	movs	r0, #1
 80023e0:	f7ff fa53 	bl	800188a <delay_100ns>
	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_RESET);
 80023e4:	2200      	movs	r2, #0
 80023e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023ea:	480a      	ldr	r0, [pc, #40]	; (8002414 <reset_flash_software+0x58>)
 80023ec:	f001 fe40 	bl	8004070 <HAL_GPIO_WritePin>
	FLASH_WriteByte(0x99);
 80023f0:	2099      	movs	r0, #153	; 0x99
 80023f2:	f7ff fe0b 	bl	800200c <FLASH_WriteByte>
	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_SET);
 80023f6:	2201      	movs	r2, #1
 80023f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023fc:	4805      	ldr	r0, [pc, #20]	; (8002414 <reset_flash_software+0x58>)
 80023fe:	f001 fe37 	bl	8004070 <HAL_GPIO_WritePin>
	delay_100ns(1);
 8002402:	2001      	movs	r0, #1
 8002404:	f7ff fa41 	bl	800188a <delay_100ns>

	delay_us(1000);
 8002408:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800240c:	f7ff fa22 	bl	8001854 <delay_us>
}
 8002410:	bf00      	nop
 8002412:	bd80      	pop	{r7, pc}
 8002414:	48000800 	.word	0x48000800

08002418 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800241c:	b672      	cpsid	i
}
 800241e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002420:	e7fe      	b.n	8002420 <Error_Handler+0x8>
	...

08002424 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800242a:	4b0f      	ldr	r3, [pc, #60]	; (8002468 <HAL_MspInit+0x44>)
 800242c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800242e:	4a0e      	ldr	r2, [pc, #56]	; (8002468 <HAL_MspInit+0x44>)
 8002430:	f043 0301 	orr.w	r3, r3, #1
 8002434:	6613      	str	r3, [r2, #96]	; 0x60
 8002436:	4b0c      	ldr	r3, [pc, #48]	; (8002468 <HAL_MspInit+0x44>)
 8002438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	607b      	str	r3, [r7, #4]
 8002440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002442:	4b09      	ldr	r3, [pc, #36]	; (8002468 <HAL_MspInit+0x44>)
 8002444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002446:	4a08      	ldr	r2, [pc, #32]	; (8002468 <HAL_MspInit+0x44>)
 8002448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800244c:	6593      	str	r3, [r2, #88]	; 0x58
 800244e:	4b06      	ldr	r3, [pc, #24]	; (8002468 <HAL_MspInit+0x44>)
 8002450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002456:	603b      	str	r3, [r7, #0]
 8002458:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800245a:	bf00      	nop
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	40021000 	.word	0x40021000

0800246c <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b0aa      	sub	sp, #168	; 0xa8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002474:	f107 030c 	add.w	r3, r7, #12
 8002478:	229c      	movs	r2, #156	; 0x9c
 800247a:	2100      	movs	r1, #0
 800247c:	4618      	mov	r0, r3
 800247e:	f006 fe63 	bl	8009148 <memset>
  if(hdsi->Instance==DSI)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a11      	ldr	r2, [pc, #68]	; (80024cc <HAL_DSI_MspInit+0x60>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d11b      	bne.n	80024c4 <HAL_DSI_MspInit+0x58>

  /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 800248c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8002490:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.DsiClockSelection = RCC_DSICLKSOURCE_DSIPHY;
 8002492:	2300      	movs	r3, #0
 8002494:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002498:	f107 030c 	add.w	r3, r7, #12
 800249c:	4618      	mov	r0, r3
 800249e:	f003 fe71 	bl	8006184 <HAL_RCCEx_PeriphCLKConfig>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <HAL_DSI_MspInit+0x40>
    {
      Error_Handler();
 80024a8:	f7ff ffb6 	bl	8002418 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 80024ac:	4b08      	ldr	r3, [pc, #32]	; (80024d0 <HAL_DSI_MspInit+0x64>)
 80024ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024b0:	4a07      	ldr	r2, [pc, #28]	; (80024d0 <HAL_DSI_MspInit+0x64>)
 80024b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80024b6:	6613      	str	r3, [r2, #96]	; 0x60
 80024b8:	4b05      	ldr	r3, [pc, #20]	; (80024d0 <HAL_DSI_MspInit+0x64>)
 80024ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024c0:	60bb      	str	r3, [r7, #8]
 80024c2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 80024c4:	bf00      	nop
 80024c6:	37a8      	adds	r7, #168	; 0xa8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40016c00 	.word	0x40016c00
 80024d0:	40021000 	.word	0x40021000

080024d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b0b2      	sub	sp, #200	; 0xc8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024dc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	605a      	str	r2, [r3, #4]
 80024e6:	609a      	str	r2, [r3, #8]
 80024e8:	60da      	str	r2, [r3, #12]
 80024ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024ec:	f107 0318 	add.w	r3, r7, #24
 80024f0:	229c      	movs	r2, #156	; 0x9c
 80024f2:	2100      	movs	r1, #0
 80024f4:	4618      	mov	r0, r3
 80024f6:	f006 fe27 	bl	8009148 <memset>
  if(hi2c->Instance==I2C1)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a42      	ldr	r2, [pc, #264]	; (8002608 <HAL_I2C_MspInit+0x134>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d13c      	bne.n	800257e <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002504:	2340      	movs	r3, #64	; 0x40
 8002506:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002508:	2300      	movs	r3, #0
 800250a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800250c:	f107 0318 	add.w	r3, r7, #24
 8002510:	4618      	mov	r0, r3
 8002512:	f003 fe37 	bl	8006184 <HAL_RCCEx_PeriphCLKConfig>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800251c:	f7ff ff7c 	bl	8002418 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002520:	4b3a      	ldr	r3, [pc, #232]	; (800260c <HAL_I2C_MspInit+0x138>)
 8002522:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002524:	4a39      	ldr	r2, [pc, #228]	; (800260c <HAL_I2C_MspInit+0x138>)
 8002526:	f043 0302 	orr.w	r3, r3, #2
 800252a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800252c:	4b37      	ldr	r3, [pc, #220]	; (800260c <HAL_I2C_MspInit+0x138>)
 800252e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	617b      	str	r3, [r7, #20]
 8002536:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8002538:	f44f 7340 	mov.w	r3, #768	; 0x300
 800253c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002540:	2312      	movs	r3, #18
 8002542:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002546:	2300      	movs	r3, #0
 8002548:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800254c:	2303      	movs	r3, #3
 800254e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002552:	2304      	movs	r3, #4
 8002554:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002558:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800255c:	4619      	mov	r1, r3
 800255e:	482c      	ldr	r0, [pc, #176]	; (8002610 <HAL_I2C_MspInit+0x13c>)
 8002560:	f001 fbdc 	bl	8003d1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002564:	4b29      	ldr	r3, [pc, #164]	; (800260c <HAL_I2C_MspInit+0x138>)
 8002566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002568:	4a28      	ldr	r2, [pc, #160]	; (800260c <HAL_I2C_MspInit+0x138>)
 800256a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800256e:	6593      	str	r3, [r2, #88]	; 0x58
 8002570:	4b26      	ldr	r3, [pc, #152]	; (800260c <HAL_I2C_MspInit+0x138>)
 8002572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002574:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002578:	613b      	str	r3, [r7, #16]
 800257a:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800257c:	e040      	b.n	8002600 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a24      	ldr	r2, [pc, #144]	; (8002614 <HAL_I2C_MspInit+0x140>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d13b      	bne.n	8002600 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002588:	2380      	movs	r3, #128	; 0x80
 800258a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800258c:	2300      	movs	r3, #0
 800258e:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002590:	f107 0318 	add.w	r3, r7, #24
 8002594:	4618      	mov	r0, r3
 8002596:	f003 fdf5 	bl	8006184 <HAL_RCCEx_PeriphCLKConfig>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 80025a0:	f7ff ff3a 	bl	8002418 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025a4:	4b19      	ldr	r3, [pc, #100]	; (800260c <HAL_I2C_MspInit+0x138>)
 80025a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025a8:	4a18      	ldr	r2, [pc, #96]	; (800260c <HAL_I2C_MspInit+0x138>)
 80025aa:	f043 0302 	orr.w	r3, r3, #2
 80025ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025b0:	4b16      	ldr	r3, [pc, #88]	; (800260c <HAL_I2C_MspInit+0x138>)
 80025b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	60fb      	str	r3, [r7, #12]
 80025ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 80025bc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80025c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025c4:	2312      	movs	r3, #18
 80025c6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ca:	2300      	movs	r3, #0
 80025cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025d0:	2303      	movs	r3, #3
 80025d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80025d6:	2304      	movs	r3, #4
 80025d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025dc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80025e0:	4619      	mov	r1, r3
 80025e2:	480b      	ldr	r0, [pc, #44]	; (8002610 <HAL_I2C_MspInit+0x13c>)
 80025e4:	f001 fb9a 	bl	8003d1c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80025e8:	4b08      	ldr	r3, [pc, #32]	; (800260c <HAL_I2C_MspInit+0x138>)
 80025ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ec:	4a07      	ldr	r2, [pc, #28]	; (800260c <HAL_I2C_MspInit+0x138>)
 80025ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025f2:	6593      	str	r3, [r2, #88]	; 0x58
 80025f4:	4b05      	ldr	r3, [pc, #20]	; (800260c <HAL_I2C_MspInit+0x138>)
 80025f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025fc:	60bb      	str	r3, [r7, #8]
 80025fe:	68bb      	ldr	r3, [r7, #8]
}
 8002600:	bf00      	nop
 8002602:	37c8      	adds	r7, #200	; 0xc8
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40005400 	.word	0x40005400
 800260c:	40021000 	.word	0x40021000
 8002610:	48000400 	.word	0x48000400
 8002614:	40005800 	.word	0x40005800

08002618 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b0aa      	sub	sp, #168	; 0xa8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002620:	f107 030c 	add.w	r3, r7, #12
 8002624:	229c      	movs	r2, #156	; 0x9c
 8002626:	2100      	movs	r1, #0
 8002628:	4618      	mov	r0, r3
 800262a:	f006 fd8d 	bl	8009148 <memset>
  if(hltdc->Instance==LTDC)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a19      	ldr	r2, [pc, #100]	; (8002698 <HAL_LTDC_MspInit+0x80>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d12b      	bne.n	8002690 <HAL_LTDC_MspInit+0x78>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002638:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800263c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLLSAI2_DIV4;
 800263e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002642:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    PeriphClkInit.PLLSAI2.PLLSAI2Source = RCC_PLLSOURCE_HSE;
 8002646:	2303      	movs	r3, #3
 8002648:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI2.PLLSAI2M = 1;
 800264a:	2301      	movs	r3, #1
 800264c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI2.PLLSAI2N = 8;
 800264e:	2308      	movs	r3, #8
 8002650:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.PLLSAI2.PLLSAI2P = RCC_PLLP_DIV2;
 8002652:	2302      	movs	r3, #2
 8002654:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.PLLSAI2.PLLSAI2R = RCC_PLLR_DIV2;
 8002656:	2302      	movs	r3, #2
 8002658:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInit.PLLSAI2.PLLSAI2Q = RCC_PLLQ_DIV2;
 800265a:	2302      	movs	r3, #2
 800265c:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInit.PLLSAI2.PLLSAI2ClockOut = RCC_PLLSAI2_LTDCCLK;
 800265e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002662:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002664:	f107 030c 	add.w	r3, r7, #12
 8002668:	4618      	mov	r0, r3
 800266a:	f003 fd8b 	bl	8006184 <HAL_RCCEx_PeriphCLKConfig>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <HAL_LTDC_MspInit+0x60>
    {
      Error_Handler();
 8002674:	f7ff fed0 	bl	8002418 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002678:	4b08      	ldr	r3, [pc, #32]	; (800269c <HAL_LTDC_MspInit+0x84>)
 800267a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800267c:	4a07      	ldr	r2, [pc, #28]	; (800269c <HAL_LTDC_MspInit+0x84>)
 800267e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002682:	6613      	str	r3, [r2, #96]	; 0x60
 8002684:	4b05      	ldr	r3, [pc, #20]	; (800269c <HAL_LTDC_MspInit+0x84>)
 8002686:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002688:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800268c:	60bb      	str	r3, [r7, #8]
 800268e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002690:	bf00      	nop
 8002692:	37a8      	adds	r7, #168	; 0xa8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	40016800 	.word	0x40016800
 800269c:	40021000 	.word	0x40021000

080026a0 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b0b2      	sub	sp, #200	; 0xc8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	605a      	str	r2, [r3, #4]
 80026b2:	609a      	str	r2, [r3, #8]
 80026b4:	60da      	str	r2, [r3, #12]
 80026b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026b8:	f107 0318 	add.w	r3, r7, #24
 80026bc:	229c      	movs	r2, #156	; 0x9c
 80026be:	2100      	movs	r1, #0
 80026c0:	4618      	mov	r0, r3
 80026c2:	f006 fd41 	bl	8009148 <memset>
  if(hospi->Instance==OCTOSPI2)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a38      	ldr	r2, [pc, #224]	; (80027ac <HAL_OSPI_MspInit+0x10c>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d169      	bne.n	80027a4 <HAL_OSPI_MspInit+0x104>

  /* USER CODE END OCTOSPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 80026d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026d4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 80026d6:	2300      	movs	r3, #0
 80026d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026dc:	f107 0318 	add.w	r3, r7, #24
 80026e0:	4618      	mov	r0, r3
 80026e2:	f003 fd4f 	bl	8006184 <HAL_RCCEx_PeriphCLKConfig>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 80026ec:	f7ff fe94 	bl	8002418 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 80026f0:	4b2f      	ldr	r3, [pc, #188]	; (80027b0 <HAL_OSPI_MspInit+0x110>)
 80026f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f4:	4a2e      	ldr	r2, [pc, #184]	; (80027b0 <HAL_OSPI_MspInit+0x110>)
 80026f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026fc:	4b2c      	ldr	r3, [pc, #176]	; (80027b0 <HAL_OSPI_MspInit+0x110>)
 80026fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002700:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002704:	617b      	str	r3, [r7, #20]
 8002706:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI2_CLK_ENABLE();
 8002708:	4b29      	ldr	r3, [pc, #164]	; (80027b0 <HAL_OSPI_MspInit+0x110>)
 800270a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800270c:	4a28      	ldr	r2, [pc, #160]	; (80027b0 <HAL_OSPI_MspInit+0x110>)
 800270e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002712:	6513      	str	r3, [r2, #80]	; 0x50
 8002714:	4b26      	ldr	r3, [pc, #152]	; (80027b0 <HAL_OSPI_MspInit+0x110>)
 8002716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002718:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800271c:	613b      	str	r3, [r7, #16]
 800271e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002720:	4b23      	ldr	r3, [pc, #140]	; (80027b0 <HAL_OSPI_MspInit+0x110>)
 8002722:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002724:	4a22      	ldr	r2, [pc, #136]	; (80027b0 <HAL_OSPI_MspInit+0x110>)
 8002726:	f043 0308 	orr.w	r3, r3, #8
 800272a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800272c:	4b20      	ldr	r3, [pc, #128]	; (80027b0 <HAL_OSPI_MspInit+0x110>)
 800272e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002730:	f003 0308 	and.w	r3, r3, #8
 8002734:	60fb      	str	r3, [r7, #12]
 8002736:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002738:	4b1d      	ldr	r3, [pc, #116]	; (80027b0 <HAL_OSPI_MspInit+0x110>)
 800273a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800273c:	4a1c      	ldr	r2, [pc, #112]	; (80027b0 <HAL_OSPI_MspInit+0x110>)
 800273e:	f043 0320 	orr.w	r3, r3, #32
 8002742:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002744:	4b1a      	ldr	r3, [pc, #104]	; (80027b0 <HAL_OSPI_MspInit+0x110>)
 8002746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002748:	f003 0320 	and.w	r3, r3, #32
 800274c:	60bb      	str	r3, [r7, #8]
 800274e:	68bb      	ldr	r3, [r7, #8]
    PD3     ------> OCTOSPIM_P2_NCS
    PF1     ------> OCTOSPIM_P2_IO1
    PF0     ------> OCTOSPIM_P2_IO0
    PF4     ------> OCTOSPIM_P2_CLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002750:	2308      	movs	r3, #8
 8002752:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002756:	2302      	movs	r3, #2
 8002758:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275c:	2300      	movs	r3, #0
 800275e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002762:	2303      	movs	r3, #3
 8002764:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P2;
 8002768:	230a      	movs	r3, #10
 800276a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800276e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002772:	4619      	mov	r1, r3
 8002774:	480f      	ldr	r0, [pc, #60]	; (80027b4 <HAL_OSPI_MspInit+0x114>)
 8002776:	f001 fad1 	bl	8003d1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_4;
 800277a:	2313      	movs	r3, #19
 800277c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002780:	2302      	movs	r3, #2
 8002782:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002786:	2300      	movs	r3, #0
 8002788:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800278c:	2303      	movs	r3, #3
 800278e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8002792:	2305      	movs	r3, #5
 8002794:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002798:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800279c:	4619      	mov	r1, r3
 800279e:	4806      	ldr	r0, [pc, #24]	; (80027b8 <HAL_OSPI_MspInit+0x118>)
 80027a0:	f001 fabc 	bl	8003d1c <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI2_MspInit 1 */

  /* USER CODE END OCTOSPI2_MspInit 1 */
  }

}
 80027a4:	bf00      	nop
 80027a6:	37c8      	adds	r7, #200	; 0xc8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	a0001400 	.word	0xa0001400
 80027b0:	40021000 	.word	0x40021000
 80027b4:	48000c00 	.word	0x48000c00
 80027b8:	48001400 	.word	0x48001400

080027bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b092      	sub	sp, #72	; 0x48
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80027c8:	2200      	movs	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	605a      	str	r2, [r3, #4]
 80027ce:	609a      	str	r2, [r3, #8]
 80027d0:	60da      	str	r2, [r3, #12]
 80027d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a84      	ldr	r2, [pc, #528]	; (80029ec <HAL_SPI_MspInit+0x230>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d146      	bne.n	800286c <HAL_SPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80027de:	4b84      	ldr	r3, [pc, #528]	; (80029f0 <HAL_SPI_MspInit+0x234>)
 80027e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027e2:	4a83      	ldr	r2, [pc, #524]	; (80029f0 <HAL_SPI_MspInit+0x234>)
 80027e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027e8:	6613      	str	r3, [r2, #96]	; 0x60
 80027ea:	4b81      	ldr	r3, [pc, #516]	; (80029f0 <HAL_SPI_MspInit+0x234>)
 80027ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027f2:	633b      	str	r3, [r7, #48]	; 0x30
 80027f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027f6:	4b7e      	ldr	r3, [pc, #504]	; (80029f0 <HAL_SPI_MspInit+0x234>)
 80027f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027fa:	4a7d      	ldr	r2, [pc, #500]	; (80029f0 <HAL_SPI_MspInit+0x234>)
 80027fc:	f043 0302 	orr.w	r3, r3, #2
 8002800:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002802:	4b7b      	ldr	r3, [pc, #492]	; (80029f0 <HAL_SPI_MspInit+0x234>)
 8002804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800280c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800280e:	4b78      	ldr	r3, [pc, #480]	; (80029f0 <HAL_SPI_MspInit+0x234>)
 8002810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002812:	4a77      	ldr	r2, [pc, #476]	; (80029f0 <HAL_SPI_MspInit+0x234>)
 8002814:	f043 0301 	orr.w	r3, r3, #1
 8002818:	64d3      	str	r3, [r2, #76]	; 0x4c
 800281a:	4b75      	ldr	r3, [pc, #468]	; (80029f0 <HAL_SPI_MspInit+0x234>)
 800281c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	62bb      	str	r3, [r7, #40]	; 0x28
 8002824:	6abb      	ldr	r3, [r7, #40]	; 0x28
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PA15 (JTDI)     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_3;
 8002826:	2338      	movs	r3, #56	; 0x38
 8002828:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800282a:	2302      	movs	r3, #2
 800282c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282e:	2300      	movs	r3, #0
 8002830:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002832:	2303      	movs	r3, #3
 8002834:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002836:	2305      	movs	r3, #5
 8002838:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800283a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800283e:	4619      	mov	r1, r3
 8002840:	486c      	ldr	r0, [pc, #432]	; (80029f4 <HAL_SPI_MspInit+0x238>)
 8002842:	f001 fa6b 	bl	8003d1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002846:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800284a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800284c:	2302      	movs	r3, #2
 800284e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002850:	2300      	movs	r3, #0
 8002852:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002854:	2303      	movs	r3, #3
 8002856:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002858:	2305      	movs	r3, #5
 800285a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800285c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002860:	4619      	mov	r1, r3
 8002862:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002866:	f001 fa59 	bl	8003d1c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800286a:	e0ba      	b.n	80029e2 <HAL_SPI_MspInit+0x226>
  else if(hspi->Instance==SPI2)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a61      	ldr	r2, [pc, #388]	; (80029f8 <HAL_SPI_MspInit+0x23c>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d144      	bne.n	8002900 <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002876:	4b5e      	ldr	r3, [pc, #376]	; (80029f0 <HAL_SPI_MspInit+0x234>)
 8002878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800287a:	4a5d      	ldr	r2, [pc, #372]	; (80029f0 <HAL_SPI_MspInit+0x234>)
 800287c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002880:	6593      	str	r3, [r2, #88]	; 0x58
 8002882:	4b5b      	ldr	r3, [pc, #364]	; (80029f0 <HAL_SPI_MspInit+0x234>)
 8002884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002886:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800288a:	627b      	str	r3, [r7, #36]	; 0x24
 800288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800288e:	4b58      	ldr	r3, [pc, #352]	; (80029f0 <HAL_SPI_MspInit+0x234>)
 8002890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002892:	4a57      	ldr	r2, [pc, #348]	; (80029f0 <HAL_SPI_MspInit+0x234>)
 8002894:	f043 0308 	orr.w	r3, r3, #8
 8002898:	64d3      	str	r3, [r2, #76]	; 0x4c
 800289a:	4b55      	ldr	r3, [pc, #340]	; (80029f0 <HAL_SPI_MspInit+0x234>)
 800289c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800289e:	f003 0308 	and.w	r3, r3, #8
 80028a2:	623b      	str	r3, [r7, #32]
 80028a4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028a6:	4b52      	ldr	r3, [pc, #328]	; (80029f0 <HAL_SPI_MspInit+0x234>)
 80028a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028aa:	4a51      	ldr	r2, [pc, #324]	; (80029f0 <HAL_SPI_MspInit+0x234>)
 80028ac:	f043 0304 	orr.w	r3, r3, #4
 80028b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028b2:	4b4f      	ldr	r3, [pc, #316]	; (80029f0 <HAL_SPI_MspInit+0x234>)
 80028b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028b6:	f003 0304 	and.w	r3, r3, #4
 80028ba:	61fb      	str	r3, [r7, #28]
 80028bc:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 80028be:	2312      	movs	r3, #18
 80028c0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c2:	2302      	movs	r3, #2
 80028c4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c6:	2300      	movs	r3, #0
 80028c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ca:	2303      	movs	r3, #3
 80028cc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80028ce:	2305      	movs	r3, #5
 80028d0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028d2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80028d6:	4619      	mov	r1, r3
 80028d8:	4848      	ldr	r0, [pc, #288]	; (80029fc <HAL_SPI_MspInit+0x240>)
 80028da:	f001 fa1f 	bl	8003d1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80028de:	2304      	movs	r3, #4
 80028e0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e2:	2302      	movs	r3, #2
 80028e4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e6:	2300      	movs	r3, #0
 80028e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ea:	2303      	movs	r3, #3
 80028ec:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80028ee:	2305      	movs	r3, #5
 80028f0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028f2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80028f6:	4619      	mov	r1, r3
 80028f8:	4841      	ldr	r0, [pc, #260]	; (8002a00 <HAL_SPI_MspInit+0x244>)
 80028fa:	f001 fa0f 	bl	8003d1c <HAL_GPIO_Init>
}
 80028fe:	e070      	b.n	80029e2 <HAL_SPI_MspInit+0x226>
  else if(hspi->Instance==SPI3)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a3f      	ldr	r2, [pc, #252]	; (8002a04 <HAL_SPI_MspInit+0x248>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d16b      	bne.n	80029e2 <HAL_SPI_MspInit+0x226>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800290a:	4b39      	ldr	r3, [pc, #228]	; (80029f0 <HAL_SPI_MspInit+0x234>)
 800290c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800290e:	4a38      	ldr	r2, [pc, #224]	; (80029f0 <HAL_SPI_MspInit+0x234>)
 8002910:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002914:	6593      	str	r3, [r2, #88]	; 0x58
 8002916:	4b36      	ldr	r3, [pc, #216]	; (80029f0 <HAL_SPI_MspInit+0x234>)
 8002918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800291a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800291e:	61bb      	str	r3, [r7, #24]
 8002920:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002922:	4b33      	ldr	r3, [pc, #204]	; (80029f0 <HAL_SPI_MspInit+0x234>)
 8002924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002926:	4a32      	ldr	r2, [pc, #200]	; (80029f0 <HAL_SPI_MspInit+0x234>)
 8002928:	f043 0308 	orr.w	r3, r3, #8
 800292c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800292e:	4b30      	ldr	r3, [pc, #192]	; (80029f0 <HAL_SPI_MspInit+0x234>)
 8002930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002932:	f003 0308 	and.w	r3, r3, #8
 8002936:	617b      	str	r3, [r7, #20]
 8002938:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800293a:	4b2d      	ldr	r3, [pc, #180]	; (80029f0 <HAL_SPI_MspInit+0x234>)
 800293c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800293e:	4a2c      	ldr	r2, [pc, #176]	; (80029f0 <HAL_SPI_MspInit+0x234>)
 8002940:	f043 0304 	orr.w	r3, r3, #4
 8002944:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002946:	4b2a      	ldr	r3, [pc, #168]	; (80029f0 <HAL_SPI_MspInit+0x234>)
 8002948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800294a:	f003 0304 	and.w	r3, r3, #4
 800294e:	613b      	str	r3, [r7, #16]
 8002950:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002952:	4b27      	ldr	r3, [pc, #156]	; (80029f0 <HAL_SPI_MspInit+0x234>)
 8002954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002956:	4a26      	ldr	r2, [pc, #152]	; (80029f0 <HAL_SPI_MspInit+0x234>)
 8002958:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800295c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800295e:	4b24      	ldr	r3, [pc, #144]	; (80029f0 <HAL_SPI_MspInit+0x234>)
 8002960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 800296a:	f002 fd23 	bl	80053b4 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800296e:	2340      	movs	r3, #64	; 0x40
 8002970:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002972:	2302      	movs	r3, #2
 8002974:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002976:	2300      	movs	r3, #0
 8002978:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800297a:	2303      	movs	r3, #3
 800297c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI3;
 800297e:	2305      	movs	r3, #5
 8002980:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002982:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002986:	4619      	mov	r1, r3
 8002988:	481c      	ldr	r0, [pc, #112]	; (80029fc <HAL_SPI_MspInit+0x240>)
 800298a:	f001 f9c7 	bl	8003d1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800298e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002992:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002994:	2302      	movs	r3, #2
 8002996:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002998:	2300      	movs	r3, #0
 800299a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800299c:	2303      	movs	r3, #3
 800299e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80029a0:	2306      	movs	r3, #6
 80029a2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029a4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80029a8:	4619      	mov	r1, r3
 80029aa:	4815      	ldr	r0, [pc, #84]	; (8002a00 <HAL_SPI_MspInit+0x244>)
 80029ac:	f001 f9b6 	bl	8003d1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_10;
 80029b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80029b4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b6:	2302      	movs	r3, #2
 80029b8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ba:	2300      	movs	r3, #0
 80029bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029be:	2303      	movs	r3, #3
 80029c0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80029c2:	2306      	movs	r3, #6
 80029c4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80029c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80029ca:	4619      	mov	r1, r3
 80029cc:	480e      	ldr	r0, [pc, #56]	; (8002a08 <HAL_SPI_MspInit+0x24c>)
 80029ce:	f001 f9a5 	bl	8003d1c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80029d2:	2200      	movs	r2, #0
 80029d4:	2100      	movs	r1, #0
 80029d6:	2033      	movs	r0, #51	; 0x33
 80029d8:	f000 fa67 	bl	8002eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80029dc:	2033      	movs	r0, #51	; 0x33
 80029de:	f000 fa80 	bl	8002ee2 <HAL_NVIC_EnableIRQ>
}
 80029e2:	bf00      	nop
 80029e4:	3748      	adds	r7, #72	; 0x48
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	40013000 	.word	0x40013000
 80029f0:	40021000 	.word	0x40021000
 80029f4:	48000400 	.word	0x48000400
 80029f8:	40003800 	.word	0x40003800
 80029fc:	48000c00 	.word	0x48000c00
 8002a00:	48000800 	.word	0x48000800
 8002a04:	40003c00 	.word	0x40003c00
 8002a08:	48001800 	.word	0x48001800

08002a0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b0b0      	sub	sp, #192	; 0xc0
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a14:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	605a      	str	r2, [r3, #4]
 8002a1e:	609a      	str	r2, [r3, #8]
 8002a20:	60da      	str	r2, [r3, #12]
 8002a22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a24:	f107 0310 	add.w	r3, r7, #16
 8002a28:	229c      	movs	r2, #156	; 0x9c
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f006 fb8b 	bl	8009148 <memset>
  if(huart->Instance==UART4)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a21      	ldr	r2, [pc, #132]	; (8002abc <HAL_UART_MspInit+0xb0>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d13b      	bne.n	8002ab4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002a3c:	2308      	movs	r3, #8
 8002a3e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002a40:	2300      	movs	r3, #0
 8002a42:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a44:	f107 0310 	add.w	r3, r7, #16
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f003 fb9b 	bl	8006184 <HAL_RCCEx_PeriphCLKConfig>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d001      	beq.n	8002a58 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002a54:	f7ff fce0 	bl	8002418 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002a58:	4b19      	ldr	r3, [pc, #100]	; (8002ac0 <HAL_UART_MspInit+0xb4>)
 8002a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a5c:	4a18      	ldr	r2, [pc, #96]	; (8002ac0 <HAL_UART_MspInit+0xb4>)
 8002a5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002a62:	6593      	str	r3, [r2, #88]	; 0x58
 8002a64:	4b16      	ldr	r3, [pc, #88]	; (8002ac0 <HAL_UART_MspInit+0xb4>)
 8002a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a6c:	60fb      	str	r3, [r7, #12]
 8002a6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a70:	4b13      	ldr	r3, [pc, #76]	; (8002ac0 <HAL_UART_MspInit+0xb4>)
 8002a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a74:	4a12      	ldr	r2, [pc, #72]	; (8002ac0 <HAL_UART_MspInit+0xb4>)
 8002a76:	f043 0301 	orr.w	r3, r3, #1
 8002a7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a7c:	4b10      	ldr	r3, [pc, #64]	; (8002ac0 <HAL_UART_MspInit+0xb4>)
 8002a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a80:	f003 0301 	and.w	r3, r3, #1
 8002a84:	60bb      	str	r3, [r7, #8]
 8002a86:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a8e:	2302      	movs	r3, #2
 8002a90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a94:	2300      	movs	r3, #0
 8002a96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002aa0:	2308      	movs	r3, #8
 8002aa2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aa6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002aaa:	4619      	mov	r1, r3
 8002aac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ab0:	f001 f934 	bl	8003d1c <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8002ab4:	bf00      	nop
 8002ab6:	37c0      	adds	r7, #192	; 0xc0
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40004c00 	.word	0x40004c00
 8002ac0:	40021000 	.word	0x40021000

08002ac4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ac8:	e7fe      	b.n	8002ac8 <NMI_Handler+0x4>

08002aca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002aca:	b480      	push	{r7}
 8002acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ace:	e7fe      	b.n	8002ace <HardFault_Handler+0x4>

08002ad0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ad4:	e7fe      	b.n	8002ad4 <MemManage_Handler+0x4>

08002ad6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ada:	e7fe      	b.n	8002ada <BusFault_Handler+0x4>

08002adc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ae0:	e7fe      	b.n	8002ae0 <UsageFault_Handler+0x4>

08002ae2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ae6:	bf00      	nop
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002af4:	bf00      	nop
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr

08002afe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002afe:	b480      	push	{r7}
 8002b00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b02:	bf00      	nop
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b10:	f000 f8ac 	bl	8002c6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b14:	bf00      	nop
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002b1c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002b20:	f001 fabe 	bl	80040a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002b24:	bf00      	nop
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8002b2c:	4802      	ldr	r0, [pc, #8]	; (8002b38 <SPI3_IRQHandler+0x10>)
 8002b2e:	f004 ff6f 	bl	8007a10 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8002b32:	bf00      	nop
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	20004db8 	.word	0x20004db8

08002b3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002b40:	4b06      	ldr	r3, [pc, #24]	; (8002b5c <SystemInit+0x20>)
 8002b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b46:	4a05      	ldr	r2, [pc, #20]	; (8002b5c <SystemInit+0x20>)
 8002b48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002b50:	bf00      	nop
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	e000ed00 	.word	0xe000ed00

08002b60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002b60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b98 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002b64:	f7ff ffea 	bl	8002b3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b68:	480c      	ldr	r0, [pc, #48]	; (8002b9c <LoopForever+0x6>)
  ldr r1, =_edata
 8002b6a:	490d      	ldr	r1, [pc, #52]	; (8002ba0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002b6c:	4a0d      	ldr	r2, [pc, #52]	; (8002ba4 <LoopForever+0xe>)
  movs r3, #0
 8002b6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b70:	e002      	b.n	8002b78 <LoopCopyDataInit>

08002b72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b76:	3304      	adds	r3, #4

08002b78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b7c:	d3f9      	bcc.n	8002b72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b7e:	4a0a      	ldr	r2, [pc, #40]	; (8002ba8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b80:	4c0a      	ldr	r4, [pc, #40]	; (8002bac <LoopForever+0x16>)
  movs r3, #0
 8002b82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b84:	e001      	b.n	8002b8a <LoopFillZerobss>

08002b86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b88:	3204      	adds	r2, #4

08002b8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b8c:	d3fb      	bcc.n	8002b86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b8e:	f006 fae3 	bl	8009158 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002b92:	f7fd fcb1 	bl	80004f8 <main>

08002b96 <LoopForever>:

LoopForever:
    b LoopForever
 8002b96:	e7fe      	b.n	8002b96 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002b98:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002b9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ba0:	20004b18 	.word	0x20004b18
  ldr r2, =_sidata
 8002ba4:	080092c0 	.word	0x080092c0
  ldr r2, =_sbss
 8002ba8:	20004b18 	.word	0x20004b18
  ldr r4, =_ebss
 8002bac:	2000b2c0 	.word	0x2000b2c0

08002bb0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002bb0:	e7fe      	b.n	8002bb0 <ADC1_IRQHandler>
	...

08002bb4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bbe:	4b0c      	ldr	r3, [pc, #48]	; (8002bf0 <HAL_Init+0x3c>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a0b      	ldr	r2, [pc, #44]	; (8002bf0 <HAL_Init+0x3c>)
 8002bc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bc8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bca:	2003      	movs	r0, #3
 8002bcc:	f000 f962 	bl	8002e94 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002bd0:	2002      	movs	r0, #2
 8002bd2:	f000 f80f 	bl	8002bf4 <HAL_InitTick>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d002      	beq.n	8002be2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	71fb      	strb	r3, [r7, #7]
 8002be0:	e001      	b.n	8002be6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002be2:	f7ff fc1f 	bl	8002424 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002be6:	79fb      	ldrb	r3, [r7, #7]
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3708      	adds	r7, #8
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	40022000 	.word	0x40022000

08002bf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002c00:	4b17      	ldr	r3, [pc, #92]	; (8002c60 <HAL_InitTick+0x6c>)
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d023      	beq.n	8002c50 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002c08:	4b16      	ldr	r3, [pc, #88]	; (8002c64 <HAL_InitTick+0x70>)
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	4b14      	ldr	r3, [pc, #80]	; (8002c60 <HAL_InitTick+0x6c>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	4619      	mov	r1, r3
 8002c12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c16:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f000 f96d 	bl	8002efe <HAL_SYSTICK_Config>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d10f      	bne.n	8002c4a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2b0f      	cmp	r3, #15
 8002c2e:	d809      	bhi.n	8002c44 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c30:	2200      	movs	r2, #0
 8002c32:	6879      	ldr	r1, [r7, #4]
 8002c34:	f04f 30ff 	mov.w	r0, #4294967295
 8002c38:	f000 f937 	bl	8002eaa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c3c:	4a0a      	ldr	r2, [pc, #40]	; (8002c68 <HAL_InitTick+0x74>)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6013      	str	r3, [r2, #0]
 8002c42:	e007      	b.n	8002c54 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	73fb      	strb	r3, [r7, #15]
 8002c48:	e004      	b.n	8002c54 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	73fb      	strb	r3, [r7, #15]
 8002c4e:	e001      	b.n	8002c54 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3710      	adds	r7, #16
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	20004b14 	.word	0x20004b14
 8002c64:	20004b0c 	.word	0x20004b0c
 8002c68:	20004b10 	.word	0x20004b10

08002c6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002c70:	4b06      	ldr	r3, [pc, #24]	; (8002c8c <HAL_IncTick+0x20>)
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	461a      	mov	r2, r3
 8002c76:	4b06      	ldr	r3, [pc, #24]	; (8002c90 <HAL_IncTick+0x24>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	4a04      	ldr	r2, [pc, #16]	; (8002c90 <HAL_IncTick+0x24>)
 8002c7e:	6013      	str	r3, [r2, #0]
}
 8002c80:	bf00      	nop
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	20004b14 	.word	0x20004b14
 8002c90:	2000b2bc 	.word	0x2000b2bc

08002c94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  return uwTick;
 8002c98:	4b03      	ldr	r3, [pc, #12]	; (8002ca8 <HAL_GetTick+0x14>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	2000b2bc 	.word	0x2000b2bc

08002cac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cb4:	f7ff ffee 	bl	8002c94 <HAL_GetTick>
 8002cb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc4:	d005      	beq.n	8002cd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002cc6:	4b0a      	ldr	r3, [pc, #40]	; (8002cf0 <HAL_Delay+0x44>)
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	461a      	mov	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	4413      	add	r3, r2
 8002cd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002cd2:	bf00      	nop
 8002cd4:	f7ff ffde 	bl	8002c94 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d8f7      	bhi.n	8002cd4 <HAL_Delay+0x28>
  {
  }
}
 8002ce4:	bf00      	nop
 8002ce6:	bf00      	nop
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	20004b14 	.word	0x20004b14

08002cf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f003 0307 	and.w	r3, r3, #7
 8002d02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d04:	4b0c      	ldr	r3, [pc, #48]	; (8002d38 <__NVIC_SetPriorityGrouping+0x44>)
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d0a:	68ba      	ldr	r2, [r7, #8]
 8002d0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d10:	4013      	ands	r3, r2
 8002d12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d26:	4a04      	ldr	r2, [pc, #16]	; (8002d38 <__NVIC_SetPriorityGrouping+0x44>)
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	60d3      	str	r3, [r2, #12]
}
 8002d2c:	bf00      	nop
 8002d2e:	3714      	adds	r7, #20
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr
 8002d38:	e000ed00 	.word	0xe000ed00

08002d3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d40:	4b04      	ldr	r3, [pc, #16]	; (8002d54 <__NVIC_GetPriorityGrouping+0x18>)
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	0a1b      	lsrs	r3, r3, #8
 8002d46:	f003 0307 	and.w	r3, r3, #7
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr
 8002d54:	e000ed00 	.word	0xe000ed00

08002d58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	4603      	mov	r3, r0
 8002d60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	db0b      	blt.n	8002d82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d6a:	79fb      	ldrb	r3, [r7, #7]
 8002d6c:	f003 021f 	and.w	r2, r3, #31
 8002d70:	4907      	ldr	r1, [pc, #28]	; (8002d90 <__NVIC_EnableIRQ+0x38>)
 8002d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d76:	095b      	lsrs	r3, r3, #5
 8002d78:	2001      	movs	r0, #1
 8002d7a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d82:	bf00      	nop
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	e000e100 	.word	0xe000e100

08002d94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	6039      	str	r1, [r7, #0]
 8002d9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	db0a      	blt.n	8002dbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	b2da      	uxtb	r2, r3
 8002dac:	490c      	ldr	r1, [pc, #48]	; (8002de0 <__NVIC_SetPriority+0x4c>)
 8002dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db2:	0112      	lsls	r2, r2, #4
 8002db4:	b2d2      	uxtb	r2, r2
 8002db6:	440b      	add	r3, r1
 8002db8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dbc:	e00a      	b.n	8002dd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	b2da      	uxtb	r2, r3
 8002dc2:	4908      	ldr	r1, [pc, #32]	; (8002de4 <__NVIC_SetPriority+0x50>)
 8002dc4:	79fb      	ldrb	r3, [r7, #7]
 8002dc6:	f003 030f 	and.w	r3, r3, #15
 8002dca:	3b04      	subs	r3, #4
 8002dcc:	0112      	lsls	r2, r2, #4
 8002dce:	b2d2      	uxtb	r2, r2
 8002dd0:	440b      	add	r3, r1
 8002dd2:	761a      	strb	r2, [r3, #24]
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr
 8002de0:	e000e100 	.word	0xe000e100
 8002de4:	e000ed00 	.word	0xe000ed00

08002de8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b089      	sub	sp, #36	; 0x24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f003 0307 	and.w	r3, r3, #7
 8002dfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	f1c3 0307 	rsb	r3, r3, #7
 8002e02:	2b04      	cmp	r3, #4
 8002e04:	bf28      	it	cs
 8002e06:	2304      	movcs	r3, #4
 8002e08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	3304      	adds	r3, #4
 8002e0e:	2b06      	cmp	r3, #6
 8002e10:	d902      	bls.n	8002e18 <NVIC_EncodePriority+0x30>
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	3b03      	subs	r3, #3
 8002e16:	e000      	b.n	8002e1a <NVIC_EncodePriority+0x32>
 8002e18:	2300      	movs	r3, #0
 8002e1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	fa02 f303 	lsl.w	r3, r2, r3
 8002e26:	43da      	mvns	r2, r3
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	401a      	ands	r2, r3
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e30:	f04f 31ff 	mov.w	r1, #4294967295
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	fa01 f303 	lsl.w	r3, r1, r3
 8002e3a:	43d9      	mvns	r1, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e40:	4313      	orrs	r3, r2
         );
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3724      	adds	r7, #36	; 0x24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
	...

08002e50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e60:	d301      	bcc.n	8002e66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e62:	2301      	movs	r3, #1
 8002e64:	e00f      	b.n	8002e86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e66:	4a0a      	ldr	r2, [pc, #40]	; (8002e90 <SysTick_Config+0x40>)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e6e:	210f      	movs	r1, #15
 8002e70:	f04f 30ff 	mov.w	r0, #4294967295
 8002e74:	f7ff ff8e 	bl	8002d94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e78:	4b05      	ldr	r3, [pc, #20]	; (8002e90 <SysTick_Config+0x40>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e7e:	4b04      	ldr	r3, [pc, #16]	; (8002e90 <SysTick_Config+0x40>)
 8002e80:	2207      	movs	r2, #7
 8002e82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3708      	adds	r7, #8
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	e000e010 	.word	0xe000e010

08002e94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f7ff ff29 	bl	8002cf4 <__NVIC_SetPriorityGrouping>
}
 8002ea2:	bf00      	nop
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b086      	sub	sp, #24
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	60b9      	str	r1, [r7, #8]
 8002eb4:	607a      	str	r2, [r7, #4]
 8002eb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ebc:	f7ff ff3e 	bl	8002d3c <__NVIC_GetPriorityGrouping>
 8002ec0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	68b9      	ldr	r1, [r7, #8]
 8002ec6:	6978      	ldr	r0, [r7, #20]
 8002ec8:	f7ff ff8e 	bl	8002de8 <NVIC_EncodePriority>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ed2:	4611      	mov	r1, r2
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7ff ff5d 	bl	8002d94 <__NVIC_SetPriority>
}
 8002eda:	bf00      	nop
 8002edc:	3718      	adds	r7, #24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b082      	sub	sp, #8
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	4603      	mov	r3, r0
 8002eea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7ff ff31 	bl	8002d58 <__NVIC_EnableIRQ>
}
 8002ef6:	bf00      	nop
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b082      	sub	sp, #8
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f7ff ffa2 	bl	8002e50 <SysTick_Config>
 8002f0c:	4603      	mov	r3, r0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b084      	sub	sp, #16
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d005      	beq.n	8002f3a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2204      	movs	r2, #4
 8002f32:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	73fb      	strb	r3, [r7, #15]
 8002f38:	e047      	b.n	8002fca <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f022 020e 	bic.w	r2, r2, #14
 8002f48:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 0201 	bic.w	r2, r2, #1
 8002f58:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f68:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f6e:	f003 021c 	and.w	r2, r3, #28
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	2101      	movs	r1, #1
 8002f78:	fa01 f202 	lsl.w	r2, r1, r2
 8002f7c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002f86:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d00c      	beq.n	8002faa <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f9e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002fa8:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	4798      	blx	r3
    }
  }
  return status;
 8002fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3710      	adds	r7, #16
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
 8002fe0:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	019a      	lsls	r2, r3, #6
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	431a      	orrs	r2, r3
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	021b      	lsls	r3, r3, #8
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	041b      	lsls	r3, r3, #16
 8002ff4:	431a      	orrs	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8002ffa:	bf00      	nop
 8002ffc:	3714      	adds	r7, #20
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr

08003006 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b086      	sub	sp, #24
 800300a:	af00      	add	r7, sp, #0
 800300c:	60f8      	str	r0, [r7, #12]
 800300e:	60b9      	str	r1, [r7, #8]
 8003010:	607a      	str	r2, [r7, #4]
 8003012:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8003014:	f7ff fe3e 	bl	8002c94 <HAL_GetTick>
 8003018:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800301a:	e009      	b.n	8003030 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800301c:	f7ff fe3a 	bl	8002c94 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800302a:	d901      	bls.n	8003030 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e015      	b.n	800305c <DSI_ShortWrite+0x56>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b00      	cmp	r3, #0
 800303c:	d0ee      	beq.n	800301c <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	019a      	lsls	r2, r3, #6
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	431a      	orrs	r2, r3
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	021b      	lsls	r3, r3, #8
 800304a:	ea42 0103 	orr.w	r1, r2, r3
 800304e:	6a3b      	ldr	r3, [r7, #32]
 8003050:	041a      	lsls	r2, r3, #16
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	430a      	orrs	r2, r1
 8003058:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 800305a:	2300      	movs	r3, #0
}
 800305c:	4618      	mov	r0, r3
 800305e:	3718      	adds	r7, #24
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b088      	sub	sp, #32
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d101      	bne.n	8003078 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e10b      	b.n	8003290 <HAL_DSI_Init+0x22c>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	7c5b      	ldrb	r3, [r3, #17]
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d102      	bne.n	8003088 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f7ff f9f2 	bl	800246c <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2203      	movs	r2, #3
 800308c:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 800308e:	2300      	movs	r3, #0
 8003090:	613b      	str	r3, [r7, #16]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80030a2:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80030ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030b2:	613b      	str	r3, [r7, #16]
 80030b4:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030b6:	f7ff fded 	bl	8002c94 <HAL_GetTick>
 80030ba:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 80030bc:	e009      	b.n	80030d2 <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80030be:	f7ff fde9 	bl	8002c94 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030cc:	d901      	bls.n	80030d2 <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e0de      	b.n	8003290 <HAL_DSI_Init+0x22c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80030da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d0ed      	beq.n	80030be <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	6812      	ldr	r2, [r2, #0]
 80030ee:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 80030f2:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 80030f6:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800310e:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8003116:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	430a      	orrs	r2, r1
 800311e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8003122:	2300      	movs	r3, #0
 8003124:	60fb      	str	r3, [r7, #12]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f042 0201 	orr.w	r2, r2, #1
 8003136:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	60fb      	str	r3, [r7, #12]
 8003148:	68fb      	ldr	r3, [r7, #12]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 800314a:	2001      	movs	r0, #1
 800314c:	f7ff fdae 	bl	8002cac <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8003150:	f7ff fda0 	bl	8002c94 <HAL_GetTick>
 8003154:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003156:	e009      	b.n	800316c <HAL_DSI_Init+0x108>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003158:	f7ff fd9c 	bl	8002c94 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003166:	d901      	bls.n	800316c <HAL_DSI_Init+0x108>
    {
      return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e091      	b.n	8003290 <HAL_DSI_Init+0x22c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003178:	2b00      	cmp	r3, #0
 800317a:	d0ed      	beq.n	8003158 <HAL_DSI_Init+0xf4>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f042 0206 	orr.w	r2, r2, #6
 800318c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f022 0203 	bic.w	r2, r2, #3
 80031a0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	431a      	orrs	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f042 0201 	orr.w	r2, r2, #1
 80031ba:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f022 0203 	bic.w	r2, r2, #3
 80031ce:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	68da      	ldr	r2, [r3, #12]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	430a      	orrs	r2, r1
 80031e4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	689a      	ldr	r2, [r3, #8]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80031f6:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	6899      	ldr	r1, [r3, #8]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	689a      	ldr	r2, [r3, #8]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	430a      	orrs	r2, r1
 8003208:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d002      	beq.n	8003218 <HAL_DSI_Init+0x1b4>
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	e000      	b.n	800321a <HAL_DSI_Init+0x1b6>
 8003218:	2301      	movs	r3, #1
 800321a:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	4a1e      	ldr	r2, [pc, #120]	; (8003298 <HAL_DSI_Init+0x234>)
 8003220:	fb03 f202 	mul.w	r2, r3, r2
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f003 0303 	and.w	r3, r3, #3
 800322c:	409a      	lsls	r2, r3
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8003236:	fb01 f303 	mul.w	r3, r1, r3
 800323a:	fbb2 f3f3 	udiv	r3, r2, r3
 800323e:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003250:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	430a      	orrs	r2, r1
 8003264:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2200      	movs	r2, #0
 800326e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2200      	movs	r2, #0
 8003278:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 800328e:	2300      	movs	r3, #0
}
 8003290:	4618      	mov	r0, r3
 8003292:	3720      	adds	r7, #32
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	003d0900 	.word	0x003d0900

0800329c <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	7c1b      	ldrb	r3, [r3, #16]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d101      	bne.n	80032b2 <HAL_DSI_ConfigErrorMonitor+0x16>
 80032ae:	2302      	movs	r3, #2
 80032b0:	e0ab      	b.n	800340a <HAL_DSI_ConfigErrorMonitor+0x16e>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2201      	movs	r2, #1
 80032b6:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2200      	movs	r2, #0
 80032be:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	683a      	ldr	r2, [r7, #0]
 80032d0:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	f003 0301 	and.w	r3, r3, #1
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00b      	beq.n	80032f4 <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	6812      	ldr	r2, [r2, #0]
 80032e8:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 80032ec:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 80032f0:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d009      	beq.n	8003312 <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 800330e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	f003 0304 	and.w	r3, r3, #4
 8003318:	2b00      	cmp	r3, #0
 800331a:	d009      	beq.n	8003330 <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f042 0201 	orr.w	r2, r2, #1
 800332c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	f003 0308 	and.w	r3, r3, #8
 8003336:	2b00      	cmp	r3, #0
 8003338:	d009      	beq.n	800334e <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f042 0202 	orr.w	r2, r2, #2
 800334a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	f003 0310 	and.w	r3, r3, #16
 8003354:	2b00      	cmp	r3, #0
 8003356:	d009      	beq.n	800336c <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f042 020c 	orr.w	r2, r2, #12
 8003368:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	f003 0320 	and.w	r3, r3, #32
 8003372:	2b00      	cmp	r3, #0
 8003374:	d009      	beq.n	800338a <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f042 0210 	orr.w	r2, r2, #16
 8003386:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003390:	2b00      	cmp	r3, #0
 8003392:	d009      	beq.n	80033a8 <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f042 0220 	orr.w	r2, r2, #32
 80033a4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d009      	beq.n	80033c6 <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033c2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d009      	beq.n	80033e4 <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80033e0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d009      	beq.n	8003402 <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 80033fe:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr

08003416 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8003416:	b480      	push	{r7}
 8003418:	b083      	sub	sp, #12
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
 800341e:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	7c1b      	ldrb	r3, [r3, #16]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d101      	bne.n	800342c <HAL_DSI_SetGenericVCID+0x16>
 8003428:	2302      	movs	r3, #2
 800342a:	e016      	b.n	800345a <HAL_DSI_SetGenericVCID+0x44>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 0203 	bic.w	r2, r2, #3
 8003440:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	683a      	ldr	r2, [r7, #0]
 800344e:	430a      	orrs	r2, r1
 8003450:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	370c      	adds	r7, #12
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr

08003466 <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 8003466:	b480      	push	{r7}
 8003468:	b083      	sub	sp, #12
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
 800346e:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	7c1b      	ldrb	r3, [r3, #16]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d101      	bne.n	800347c <HAL_DSI_ConfigVideoMode+0x16>
 8003478:	2302      	movs	r3, #2
 800347a:	e1f6      	b.n	800386a <HAL_DSI_ConfigVideoMode+0x404>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 0201 	bic.w	r2, r2, #1
 8003490:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f022 0201 	bic.w	r2, r2, #1
 80034a2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f022 0203 	bic.w	r2, r2, #3
 80034b4:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	68da      	ldr	r2, [r3, #12]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	430a      	orrs	r2, r1
 80034c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	6812      	ldr	r2, [r2, #0]
 80034d2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80034d6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80034da:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	691a      	ldr	r2, [r3, #16]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	430a      	orrs	r2, r1
 80034ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	6812      	ldr	r2, [r2, #0]
 80034f8:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80034fc:	f023 031f 	bic.w	r3, r3, #31
 8003500:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	695a      	ldr	r2, [r3, #20]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	430a      	orrs	r2, r1
 8003512:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	6812      	ldr	r2, [r2, #0]
 800351e:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8003522:	f023 031f 	bic.w	r3, r3, #31
 8003526:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	699a      	ldr	r2, [r3, #24]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	430a      	orrs	r2, r1
 8003538:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68da      	ldr	r2, [r3, #12]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f022 0203 	bic.w	r2, r2, #3
 8003548:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68d9      	ldr	r1, [r3, #12]
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	430a      	orrs	r2, r1
 800355a:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	695a      	ldr	r2, [r3, #20]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 0207 	bic.w	r2, r2, #7
 800356a:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	6959      	ldr	r1, [r3, #20]
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	431a      	orrs	r2, r3
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	69db      	ldr	r3, [r3, #28]
 8003580:	431a      	orrs	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	430a      	orrs	r2, r1
 8003588:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	691a      	ldr	r2, [r3, #16]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f022 020f 	bic.w	r2, r2, #15
 8003598:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	6919      	ldr	r1, [r3, #16]
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685a      	ldr	r2, [r3, #4]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	430a      	orrs	r2, r1
 80035aa:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f022 020e 	bic.w	r2, r2, #14
 80035bc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	005a      	lsls	r2, r3, #1
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	430a      	orrs	r2, r1
 80035d4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	2b03      	cmp	r3, #3
 80035de:	d110      	bne.n	8003602 <HAL_DSI_ConfigVideoMode+0x19c>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	691a      	ldr	r2, [r3, #16]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035ee:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	6919      	ldr	r1, [r3, #16]
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	689a      	ldr	r2, [r3, #8]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	430a      	orrs	r2, r1
 8003600:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	6812      	ldr	r2, [r2, #0]
 800360c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003610:	f023 030f 	bic.w	r3, r3, #15
 8003614:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	430a      	orrs	r2, r1
 8003626:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	6812      	ldr	r2, [r2, #0]
 8003632:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003636:	f023 030f 	bic.w	r3, r3, #15
 800363a:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	430a      	orrs	r2, r1
 800364c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	6812      	ldr	r2, [r2, #0]
 8003658:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800365c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003660:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	430a      	orrs	r2, r1
 8003672:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	6812      	ldr	r2, [r2, #0]
 800367e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003682:	f023 0303 	bic.w	r3, r3, #3
 8003686:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	430a      	orrs	r2, r1
 8003698:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	6812      	ldr	r2, [r2, #0]
 80036a4:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036a8:	f023 0303 	bic.w	r3, r3, #3
 80036ac:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	430a      	orrs	r2, r1
 80036be:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	6812      	ldr	r2, [r2, #0]
 80036ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036ce:	f023 0303 	bic.w	r3, r3, #3
 80036d2:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	430a      	orrs	r2, r1
 80036e4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	6812      	ldr	r2, [r2, #0]
 80036f0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80036f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80036f8:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	430a      	orrs	r2, r1
 800370a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800371a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	430a      	orrs	r2, r1
 800372c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	699a      	ldr	r2, [r3, #24]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 800373c:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	6999      	ldr	r1, [r3, #24]
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003748:	041a      	lsls	r2, r3, #16
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	430a      	orrs	r2, r1
 8003750:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	699a      	ldr	r2, [r3, #24]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003760:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	6999      	ldr	r1, [r3, #24]
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	430a      	orrs	r2, r1
 8003772:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003782:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	430a      	orrs	r2, r1
 8003794:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80037a4:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	430a      	orrs	r2, r1
 80037b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037c6:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037e8:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	430a      	orrs	r2, r1
 80037fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800380a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800382c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	430a      	orrs	r2, r1
 800383e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800384e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	430a      	orrs	r2, r1
 8003860:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	370c      	adds	r7, #12
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr

08003876 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8003876:	b480      	push	{r7}
 8003878:	b085      	sub	sp, #20
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
 800387e:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	7c1b      	ldrb	r3, [r3, #16]
 8003884:	2b01      	cmp	r3, #1
 8003886:	d101      	bne.n	800388c <HAL_DSI_ConfigPhyTimer+0x16>
 8003888:	2302      	movs	r3, #2
 800388a:	e058      	b.n	800393e <HAL_DSI_ConfigPhyTimer+0xc8>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	4293      	cmp	r3, r2
 800389c:	bf38      	it	cc
 800389e:	4613      	movcc	r3, r2
 80038a0:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 80038b2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	041a      	lsls	r2, r3, #16
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	431a      	orrs	r2, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	430a      	orrs	r2, r1
 80038cc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80038e0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	691a      	ldr	r2, [r3, #16]
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	041b      	lsls	r3, r3, #16
 80038f6:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80038fe:	431a      	orrs	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	430a      	orrs	r2, r1
 8003906:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800391a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	021a      	lsls	r2, r3, #8
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	430a      	orrs	r2, r1
 8003932:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3714      	adds	r7, #20
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr

0800394a <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 800394a:	b480      	push	{r7}
 800394c:	b083      	sub	sp, #12
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
 8003952:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	7c1b      	ldrb	r3, [r3, #16]
 8003958:	2b01      	cmp	r3, #1
 800395a:	d101      	bne.n	8003960 <HAL_DSI_ConfigHostTimeouts+0x16>
 800395c:	2302      	movs	r3, #2
 800395e:	e0b4      	b.n	8003aca <HAL_DSI_ConfigHostTimeouts+0x180>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	689a      	ldr	r2, [r3, #8]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003974:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	6899      	ldr	r1, [r3, #8]
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	021a      	lsls	r2, r3, #8
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	430a      	orrs	r2, r1
 8003988:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	b292      	uxth	r2, r2
 8003996:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	6f99      	ldr	r1, [r3, #120]	; 0x78
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	041a      	lsls	r2, r3, #16
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	430a      	orrs	r2, r1
 80039aa:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	6812      	ldr	r2, [r2, #0]
 80039b6:	0c1b      	lsrs	r3, r3, #16
 80039b8:	041b      	lsls	r3, r3, #16
 80039ba:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	689a      	ldr	r2, [r3, #8]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	430a      	orrs	r2, r1
 80039cc:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	6812      	ldr	r2, [r2, #0]
 80039d8:	0c1b      	lsrs	r3, r3, #16
 80039da:	041b      	lsls	r3, r3, #16
 80039dc:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	68da      	ldr	r2, [r3, #12]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	430a      	orrs	r2, r1
 80039ee:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	6812      	ldr	r2, [r2, #0]
 80039fc:	0c1b      	lsrs	r3, r3, #16
 80039fe:	041b      	lsls	r3, r3, #16
 8003a00:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	691a      	ldr	r2, [r3, #16]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	430a      	orrs	r2, r1
 8003a16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	6812      	ldr	r2, [r2, #0]
 8003a26:	0c1b      	lsrs	r3, r3, #16
 8003a28:	041b      	lsls	r3, r3, #16
 8003a2a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	695a      	ldr	r2, [r3, #20]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003a54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	699a      	ldr	r2, [r3, #24]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	6812      	ldr	r2, [r2, #0]
 8003a7a:	0c1b      	lsrs	r3, r3, #16
 8003a7c:	041b      	lsls	r3, r3, #16
 8003a7e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	69da      	ldr	r2, [r3, #28]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	430a      	orrs	r2, r1
 8003a94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	6812      	ldr	r2, [r2, #0]
 8003aa4:	0c1b      	lsrs	r3, r3, #16
 8003aa6:	041b      	lsls	r3, r3, #16
 8003aa8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	6a1a      	ldr	r2, [r3, #32]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	430a      	orrs	r2, r1
 8003abe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	370c      	adds	r7, #12
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr

08003ad6 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8003ad6:	b480      	push	{r7}
 8003ad8:	b085      	sub	sp, #20
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	7c1b      	ldrb	r3, [r3, #16]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d101      	bne.n	8003aea <HAL_DSI_Start+0x14>
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	e02b      	b.n	8003b42 <HAL_DSI_Start+0x6c>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2201      	movs	r2, #1
 8003aee:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8003af0:	2300      	movs	r3, #0
 8003af2:	60fb      	str	r3, [r7, #12]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	685a      	ldr	r2, [r3, #4]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f042 0201 	orr.w	r2, r2, #1
 8003b02:	605a      	str	r2, [r3, #4]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	60fb      	str	r3, [r7, #12]
 8003b10:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8003b12:	2300      	movs	r3, #0
 8003b14:	60bb      	str	r3, [r7, #8]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f042 0208 	orr.w	r2, r2, #8
 8003b26:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003b32:	f003 0308 	and.w	r3, r3, #8
 8003b36:	60bb      	str	r3, [r7, #8]
 8003b38:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3714      	adds	r7, #20
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr

08003b4e <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b088      	sub	sp, #32
 8003b52:	af02      	add	r7, sp, #8
 8003b54:	60f8      	str	r0, [r7, #12]
 8003b56:	60b9      	str	r1, [r7, #8]
 8003b58:	607a      	str	r2, [r7, #4]
 8003b5a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	7c1b      	ldrb	r3, [r3, #16]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d101      	bne.n	8003b68 <HAL_DSI_ShortWrite+0x1a>
 8003b64:	2302      	movs	r3, #2
 8003b66:	e010      	b.n	8003b8a <HAL_DSI_ShortWrite+0x3c>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	741a      	strb	r2, [r3, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8003b6e:	6a3b      	ldr	r3, [r7, #32]
 8003b70:	9300      	str	r3, [sp, #0]
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	68b9      	ldr	r1, [r7, #8]
 8003b78:	68f8      	ldr	r0, [r7, #12]
 8003b7a:	f7ff fa44 	bl	8003006 <DSI_ShortWrite>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	741a      	strb	r2, [r3, #16]

  return status;
 8003b88:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3718      	adds	r7, #24
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b08c      	sub	sp, #48	; 0x30
 8003b96:	af02      	add	r7, sp, #8
 8003b98:	60f8      	str	r0, [r7, #12]
 8003b9a:	60b9      	str	r1, [r7, #8]
 8003b9c:	607a      	str	r2, [r7, #4]
 8003b9e:	603b      	str	r3, [r7, #0]
  uint32_t uicounter;
  uint32_t nbBytes;
  uint32_t count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 8003ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ba2:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	7c1b      	ldrb	r3, [r3, #16]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d101      	bne.n	8003bb0 <HAL_DSI_LongWrite+0x1e>
 8003bac:	2302      	movs	r3, #2
 8003bae:	e084      	b.n	8003cba <HAL_DSI_LongWrite+0x128>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8003bb6:	f7ff f86d 	bl	8002c94 <HAL_GetTick>
 8003bba:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003bbc:	e00c      	b.n	8003bd8 <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003bbe:	f7ff f869 	bl	8002c94 <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003bcc:	d904      	bls.n	8003bd8 <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e070      	b.n	8003cba <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d0eb      	beq.n	8003bbe <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8003be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be8:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	2b03      	cmp	r3, #3
 8003bee:	bf28      	it	cs
 8003bf0:	2303      	movcs	r3, #3
 8003bf2:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	623b      	str	r3, [r7, #32]
 8003bf8:	e00f      	b.n	8003c1a <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8003bfa:	69ba      	ldr	r2, [r7, #24]
 8003bfc:	6a3b      	ldr	r3, [r7, #32]
 8003bfe:	4413      	add	r3, r2
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	461a      	mov	r2, r3
 8003c04:	6a3b      	ldr	r3, [r7, #32]
 8003c06:	3301      	adds	r3, #1
 8003c08:	00db      	lsls	r3, r3, #3
 8003c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0e:	69fa      	ldr	r2, [r7, #28]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8003c14:	6a3b      	ldr	r3, [r7, #32]
 8003c16:	3301      	adds	r3, #1
 8003c18:	623b      	str	r3, [r7, #32]
 8003c1a:	6a3a      	ldr	r2, [r7, #32]
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d3eb      	bcc.n	8003bfa <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	69fa      	ldr	r2, [r7, #28]
 8003c28:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8003c2a:	683a      	ldr	r2, [r7, #0]
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 8003c32:	69ba      	ldr	r2, [r7, #24]
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	4413      	add	r3, r2
 8003c38:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8003c3a:	e028      	b.n	8003c8e <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8003c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3e:	2b04      	cmp	r3, #4
 8003c40:	bf28      	it	cs
 8003c42:	2304      	movcs	r3, #4
 8003c44:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8003c46:	2300      	movs	r3, #0
 8003c48:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	623b      	str	r3, [r7, #32]
 8003c4e:	e00e      	b.n	8003c6e <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	6a3b      	ldr	r3, [r7, #32]
 8003c54:	4413      	add	r3, r2
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	461a      	mov	r2, r3
 8003c5a:	6a3b      	ldr	r3, [r7, #32]
 8003c5c:	00db      	lsls	r3, r3, #3
 8003c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c62:	69fa      	ldr	r2, [r7, #28]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8003c68:	6a3b      	ldr	r3, [r7, #32]
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	623b      	str	r3, [r7, #32]
 8003c6e:	6a3a      	ldr	r2, [r7, #32]
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d3ec      	bcc.n	8003c50 <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	69fa      	ldr	r2, [r7, #28]
 8003c7c:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8003c7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 8003c86:	69ba      	ldr	r2, [r7, #24]
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8003c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d1d3      	bne.n	8003c3c <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8003c9c:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	9300      	str	r3, [sp, #0]
 8003ca8:	4613      	mov	r3, r2
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	68b9      	ldr	r1, [r7, #8]
 8003cae:	f7ff f991 	bl	8002fd4 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3728      	adds	r7, #40	; 0x28
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 8003cc2:	b480      	push	{r7}
 8003cc4:	b083      	sub	sp, #12
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
 8003cca:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	7c1b      	ldrb	r3, [r3, #16]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d101      	bne.n	8003cd8 <HAL_DSI_SetLowPowerRXFilter+0x16>
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	e01b      	b.n	8003d10 <HAL_DSI_SetLowPowerRXFilter+0x4e>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8003cee:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	065a      	lsls	r2, r3, #25
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	430a      	orrs	r2, r1
 8003d04:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b087      	sub	sp, #28
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d26:	2300      	movs	r3, #0
 8003d28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d2a:	e166      	b.n	8003ffa <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	2101      	movs	r1, #1
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	fa01 f303 	lsl.w	r3, r1, r3
 8003d38:	4013      	ands	r3, r2
 8003d3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	f000 8158 	beq.w	8003ff4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f003 0303 	and.w	r3, r3, #3
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d005      	beq.n	8003d5c <HAL_GPIO_Init+0x40>
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f003 0303 	and.w	r3, r3, #3
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d130      	bne.n	8003dbe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	005b      	lsls	r3, r3, #1
 8003d66:	2203      	movs	r2, #3
 8003d68:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6c:	43db      	mvns	r3, r3
 8003d6e:	693a      	ldr	r2, [r7, #16]
 8003d70:	4013      	ands	r3, r2
 8003d72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	68da      	ldr	r2, [r3, #12]
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	005b      	lsls	r3, r3, #1
 8003d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d92:	2201      	movs	r2, #1
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9a:	43db      	mvns	r3, r3
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	4013      	ands	r3, r2
 8003da0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	091b      	lsrs	r3, r3, #4
 8003da8:	f003 0201 	and.w	r2, r3, #1
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	fa02 f303 	lsl.w	r3, r2, r3
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f003 0303 	and.w	r3, r3, #3
 8003dc6:	2b03      	cmp	r3, #3
 8003dc8:	d017      	beq.n	8003dfa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	005b      	lsls	r3, r3, #1
 8003dd4:	2203      	movs	r2, #3
 8003dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dda:	43db      	mvns	r3, r3
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	4013      	ands	r3, r2
 8003de0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	689a      	ldr	r2, [r3, #8]
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	005b      	lsls	r3, r3, #1
 8003dea:	fa02 f303 	lsl.w	r3, r2, r3
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	693a      	ldr	r2, [r7, #16]
 8003df8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f003 0303 	and.w	r3, r3, #3
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d123      	bne.n	8003e4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	08da      	lsrs	r2, r3, #3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	3208      	adds	r2, #8
 8003e0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	f003 0307 	and.w	r3, r3, #7
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	220f      	movs	r2, #15
 8003e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e22:	43db      	mvns	r3, r3
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	4013      	ands	r3, r2
 8003e28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	691a      	ldr	r2, [r3, #16]
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	f003 0307 	and.w	r3, r3, #7
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	08da      	lsrs	r2, r3, #3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	3208      	adds	r2, #8
 8003e48:	6939      	ldr	r1, [r7, #16]
 8003e4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	005b      	lsls	r3, r3, #1
 8003e58:	2203      	movs	r2, #3
 8003e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5e:	43db      	mvns	r3, r3
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	4013      	ands	r3, r2
 8003e64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f003 0203 	and.w	r2, r3, #3
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	fa02 f303 	lsl.w	r3, r2, r3
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	f000 80b2 	beq.w	8003ff4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e90:	4b61      	ldr	r3, [pc, #388]	; (8004018 <HAL_GPIO_Init+0x2fc>)
 8003e92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e94:	4a60      	ldr	r2, [pc, #384]	; (8004018 <HAL_GPIO_Init+0x2fc>)
 8003e96:	f043 0301 	orr.w	r3, r3, #1
 8003e9a:	6613      	str	r3, [r2, #96]	; 0x60
 8003e9c:	4b5e      	ldr	r3, [pc, #376]	; (8004018 <HAL_GPIO_Init+0x2fc>)
 8003e9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ea0:	f003 0301 	and.w	r3, r3, #1
 8003ea4:	60bb      	str	r3, [r7, #8]
 8003ea6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003ea8:	4a5c      	ldr	r2, [pc, #368]	; (800401c <HAL_GPIO_Init+0x300>)
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	089b      	lsrs	r3, r3, #2
 8003eae:	3302      	adds	r3, #2
 8003eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	f003 0303 	and.w	r3, r3, #3
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	220f      	movs	r2, #15
 8003ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec4:	43db      	mvns	r3, r3
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	4013      	ands	r3, r2
 8003eca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003ed2:	d02b      	beq.n	8003f2c <HAL_GPIO_Init+0x210>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a52      	ldr	r2, [pc, #328]	; (8004020 <HAL_GPIO_Init+0x304>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d025      	beq.n	8003f28 <HAL_GPIO_Init+0x20c>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a51      	ldr	r2, [pc, #324]	; (8004024 <HAL_GPIO_Init+0x308>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d01f      	beq.n	8003f24 <HAL_GPIO_Init+0x208>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a50      	ldr	r2, [pc, #320]	; (8004028 <HAL_GPIO_Init+0x30c>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d019      	beq.n	8003f20 <HAL_GPIO_Init+0x204>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a4f      	ldr	r2, [pc, #316]	; (800402c <HAL_GPIO_Init+0x310>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d013      	beq.n	8003f1c <HAL_GPIO_Init+0x200>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a4e      	ldr	r2, [pc, #312]	; (8004030 <HAL_GPIO_Init+0x314>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d00d      	beq.n	8003f18 <HAL_GPIO_Init+0x1fc>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a4d      	ldr	r2, [pc, #308]	; (8004034 <HAL_GPIO_Init+0x318>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d007      	beq.n	8003f14 <HAL_GPIO_Init+0x1f8>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a4c      	ldr	r2, [pc, #304]	; (8004038 <HAL_GPIO_Init+0x31c>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d101      	bne.n	8003f10 <HAL_GPIO_Init+0x1f4>
 8003f0c:	2307      	movs	r3, #7
 8003f0e:	e00e      	b.n	8003f2e <HAL_GPIO_Init+0x212>
 8003f10:	2308      	movs	r3, #8
 8003f12:	e00c      	b.n	8003f2e <HAL_GPIO_Init+0x212>
 8003f14:	2306      	movs	r3, #6
 8003f16:	e00a      	b.n	8003f2e <HAL_GPIO_Init+0x212>
 8003f18:	2305      	movs	r3, #5
 8003f1a:	e008      	b.n	8003f2e <HAL_GPIO_Init+0x212>
 8003f1c:	2304      	movs	r3, #4
 8003f1e:	e006      	b.n	8003f2e <HAL_GPIO_Init+0x212>
 8003f20:	2303      	movs	r3, #3
 8003f22:	e004      	b.n	8003f2e <HAL_GPIO_Init+0x212>
 8003f24:	2302      	movs	r3, #2
 8003f26:	e002      	b.n	8003f2e <HAL_GPIO_Init+0x212>
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e000      	b.n	8003f2e <HAL_GPIO_Init+0x212>
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	697a      	ldr	r2, [r7, #20]
 8003f30:	f002 0203 	and.w	r2, r2, #3
 8003f34:	0092      	lsls	r2, r2, #2
 8003f36:	4093      	lsls	r3, r2
 8003f38:	693a      	ldr	r2, [r7, #16]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003f3e:	4937      	ldr	r1, [pc, #220]	; (800401c <HAL_GPIO_Init+0x300>)
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	089b      	lsrs	r3, r3, #2
 8003f44:	3302      	adds	r3, #2
 8003f46:	693a      	ldr	r2, [r7, #16]
 8003f48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f4c:	4b3b      	ldr	r3, [pc, #236]	; (800403c <HAL_GPIO_Init+0x320>)
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	43db      	mvns	r3, r3
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	4013      	ands	r3, r2
 8003f5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d003      	beq.n	8003f70 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003f68:	693a      	ldr	r2, [r7, #16]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003f70:	4a32      	ldr	r2, [pc, #200]	; (800403c <HAL_GPIO_Init+0x320>)
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003f76:	4b31      	ldr	r3, [pc, #196]	; (800403c <HAL_GPIO_Init+0x320>)
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	43db      	mvns	r3, r3
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	4013      	ands	r3, r2
 8003f84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d003      	beq.n	8003f9a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003f92:	693a      	ldr	r2, [r7, #16]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003f9a:	4a28      	ldr	r2, [pc, #160]	; (800403c <HAL_GPIO_Init+0x320>)
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003fa0:	4b26      	ldr	r3, [pc, #152]	; (800403c <HAL_GPIO_Init+0x320>)
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	43db      	mvns	r3, r3
 8003faa:	693a      	ldr	r2, [r7, #16]
 8003fac:	4013      	ands	r3, r2
 8003fae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d003      	beq.n	8003fc4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003fc4:	4a1d      	ldr	r2, [pc, #116]	; (800403c <HAL_GPIO_Init+0x320>)
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003fca:	4b1c      	ldr	r3, [pc, #112]	; (800403c <HAL_GPIO_Init+0x320>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	43db      	mvns	r3, r3
 8003fd4:	693a      	ldr	r2, [r7, #16]
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d003      	beq.n	8003fee <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003fe6:	693a      	ldr	r2, [r7, #16]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003fee:	4a13      	ldr	r2, [pc, #76]	; (800403c <HAL_GPIO_Init+0x320>)
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	fa22 f303 	lsr.w	r3, r2, r3
 8004004:	2b00      	cmp	r3, #0
 8004006:	f47f ae91 	bne.w	8003d2c <HAL_GPIO_Init+0x10>
  }
}
 800400a:	bf00      	nop
 800400c:	bf00      	nop
 800400e:	371c      	adds	r7, #28
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr
 8004018:	40021000 	.word	0x40021000
 800401c:	40010000 	.word	0x40010000
 8004020:	48000400 	.word	0x48000400
 8004024:	48000800 	.word	0x48000800
 8004028:	48000c00 	.word	0x48000c00
 800402c:	48001000 	.word	0x48001000
 8004030:	48001400 	.word	0x48001400
 8004034:	48001800 	.word	0x48001800
 8004038:	48001c00 	.word	0x48001c00
 800403c:	40010400 	.word	0x40010400

08004040 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004040:	b480      	push	{r7}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	460b      	mov	r3, r1
 800404a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	691a      	ldr	r2, [r3, #16]
 8004050:	887b      	ldrh	r3, [r7, #2]
 8004052:	4013      	ands	r3, r2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d002      	beq.n	800405e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004058:	2301      	movs	r3, #1
 800405a:	73fb      	strb	r3, [r7, #15]
 800405c:	e001      	b.n	8004062 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800405e:	2300      	movs	r3, #0
 8004060:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004062:	7bfb      	ldrb	r3, [r7, #15]
}
 8004064:	4618      	mov	r0, r3
 8004066:	3714      	adds	r7, #20
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	460b      	mov	r3, r1
 800407a:	807b      	strh	r3, [r7, #2]
 800407c:	4613      	mov	r3, r2
 800407e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004080:	787b      	ldrb	r3, [r7, #1]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d003      	beq.n	800408e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004086:	887a      	ldrh	r2, [r7, #2]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800408c:	e002      	b.n	8004094 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800408e:	887a      	ldrh	r2, [r7, #2]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	4603      	mov	r3, r0
 80040a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80040aa:	4b08      	ldr	r3, [pc, #32]	; (80040cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040ac:	695a      	ldr	r2, [r3, #20]
 80040ae:	88fb      	ldrh	r3, [r7, #6]
 80040b0:	4013      	ands	r3, r2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d006      	beq.n	80040c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80040b6:	4a05      	ldr	r2, [pc, #20]	; (80040cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040b8:	88fb      	ldrh	r3, [r7, #6]
 80040ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80040bc:	88fb      	ldrh	r3, [r7, #6]
 80040be:	4618      	mov	r0, r3
 80040c0:	f7fd fbfe 	bl	80018c0 <HAL_GPIO_EXTI_Callback>
  }
}
 80040c4:	bf00      	nop
 80040c6:	3708      	adds	r7, #8
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	40010400 	.word	0x40010400

080040d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e08d      	b.n	80041fe <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d106      	bne.n	80040fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f7fe f9ec 	bl	80024d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2224      	movs	r2, #36	; 0x24
 8004100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f022 0201 	bic.w	r2, r2, #1
 8004112:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685a      	ldr	r2, [r3, #4]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004120:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	689a      	ldr	r2, [r3, #8]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004130:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d107      	bne.n	800414a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	689a      	ldr	r2, [r3, #8]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004146:	609a      	str	r2, [r3, #8]
 8004148:	e006      	b.n	8004158 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	689a      	ldr	r2, [r3, #8]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004156:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	2b02      	cmp	r3, #2
 800415e:	d108      	bne.n	8004172 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	685a      	ldr	r2, [r3, #4]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800416e:	605a      	str	r2, [r3, #4]
 8004170:	e007      	b.n	8004182 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	685a      	ldr	r2, [r3, #4]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004180:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	6812      	ldr	r2, [r2, #0]
 800418c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004190:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004194:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68da      	ldr	r2, [r3, #12]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	691a      	ldr	r2, [r3, #16]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	430a      	orrs	r2, r1
 80041be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	69d9      	ldr	r1, [r3, #28]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a1a      	ldr	r2, [r3, #32]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	430a      	orrs	r2, r1
 80041ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f042 0201 	orr.w	r2, r2, #1
 80041de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2220      	movs	r2, #32
 80041ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3708      	adds	r7, #8
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004206:	b480      	push	{r7}
 8004208:	b083      	sub	sp, #12
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
 800420e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004216:	b2db      	uxtb	r3, r3
 8004218:	2b20      	cmp	r3, #32
 800421a:	d138      	bne.n	800428e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004222:	2b01      	cmp	r3, #1
 8004224:	d101      	bne.n	800422a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004226:	2302      	movs	r3, #2
 8004228:	e032      	b.n	8004290 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2201      	movs	r2, #1
 800422e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2224      	movs	r2, #36	; 0x24
 8004236:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f022 0201 	bic.w	r2, r2, #1
 8004248:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004258:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	6819      	ldr	r1, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	683a      	ldr	r2, [r7, #0]
 8004266:	430a      	orrs	r2, r1
 8004268:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f042 0201 	orr.w	r2, r2, #1
 8004278:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2220      	movs	r2, #32
 800427e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800428a:	2300      	movs	r3, #0
 800428c:	e000      	b.n	8004290 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800428e:	2302      	movs	r3, #2
  }
}
 8004290:	4618      	mov	r0, r3
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b20      	cmp	r3, #32
 80042b0:	d139      	bne.n	8004326 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d101      	bne.n	80042c0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80042bc:	2302      	movs	r3, #2
 80042be:	e033      	b.n	8004328 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2224      	movs	r2, #36	; 0x24
 80042cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f022 0201 	bic.w	r2, r2, #1
 80042de:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80042ee:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	021b      	lsls	r3, r3, #8
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f042 0201 	orr.w	r2, r2, #1
 8004310:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2220      	movs	r2, #32
 8004316:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004322:	2300      	movs	r3, #0
 8004324:	e000      	b.n	8004328 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004326:	2302      	movs	r3, #2
  }
}
 8004328:	4618      	mov	r0, r3
 800432a:	3714      	adds	r7, #20
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d101      	bne.n	8004346 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e0bf      	b.n	80044c6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2b00      	cmp	r3, #0
 8004350:	d106      	bne.n	8004360 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f7fe f95c 	bl	8002618 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2202      	movs	r2, #2
 8004364:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	699a      	ldr	r2, [r3, #24]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004376:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6999      	ldr	r1, [r3, #24]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685a      	ldr	r2, [r3, #4]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800438c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	430a      	orrs	r2, r1
 800439a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	6899      	ldr	r1, [r3, #8]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	4b4a      	ldr	r3, [pc, #296]	; (80044d0 <HAL_LTDC_Init+0x19c>)
 80043a8:	400b      	ands	r3, r1
 80043aa:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	695b      	ldr	r3, [r3, #20]
 80043b0:	041b      	lsls	r3, r3, #16
 80043b2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	6899      	ldr	r1, [r3, #8]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	699a      	ldr	r2, [r3, #24]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	431a      	orrs	r2, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	430a      	orrs	r2, r1
 80043c8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68d9      	ldr	r1, [r3, #12]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	4b3e      	ldr	r3, [pc, #248]	; (80044d0 <HAL_LTDC_Init+0x19c>)
 80043d6:	400b      	ands	r3, r1
 80043d8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	69db      	ldr	r3, [r3, #28]
 80043de:	041b      	lsls	r3, r3, #16
 80043e0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68d9      	ldr	r1, [r3, #12]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a1a      	ldr	r2, [r3, #32]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	431a      	orrs	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	430a      	orrs	r2, r1
 80043f6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	6919      	ldr	r1, [r3, #16]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	4b33      	ldr	r3, [pc, #204]	; (80044d0 <HAL_LTDC_Init+0x19c>)
 8004404:	400b      	ands	r3, r1
 8004406:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440c:	041b      	lsls	r3, r3, #16
 800440e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	6919      	ldr	r1, [r3, #16]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	431a      	orrs	r2, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	430a      	orrs	r2, r1
 8004424:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	6959      	ldr	r1, [r3, #20]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	4b27      	ldr	r3, [pc, #156]	; (80044d0 <HAL_LTDC_Init+0x19c>)
 8004432:	400b      	ands	r3, r1
 8004434:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443a:	041b      	lsls	r3, r3, #16
 800443c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	6959      	ldr	r1, [r3, #20]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	431a      	orrs	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	430a      	orrs	r2, r1
 8004452:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800445a:	021b      	lsls	r3, r3, #8
 800445c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004464:	041b      	lsls	r3, r3, #16
 8004466:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004476:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800447e:	68ba      	ldr	r2, [r7, #8]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	4313      	orrs	r3, r2
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800448a:	431a      	orrs	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	430a      	orrs	r2, r1
 8004492:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f042 0206 	orr.w	r2, r2, #6
 80044a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	699a      	ldr	r2, [r3, #24]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f042 0201 	orr.w	r2, r2, #1
 80044b2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3710      	adds	r7, #16
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	f000f800 	.word	0xf000f800

080044d4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80044d4:	b5b0      	push	{r4, r5, r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d101      	bne.n	80044ee <HAL_LTDC_ConfigLayer+0x1a>
 80044ea:	2302      	movs	r3, #2
 80044ec:	e02c      	b.n	8004548 <HAL_LTDC_ConfigLayer+0x74>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2202      	movs	r2, #2
 80044fa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2134      	movs	r1, #52	; 0x34
 8004504:	fb01 f303 	mul.w	r3, r1, r3
 8004508:	4413      	add	r3, r2
 800450a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	4614      	mov	r4, r2
 8004512:	461d      	mov	r5, r3
 8004514:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004516:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004518:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800451a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800451c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800451e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004520:	682b      	ldr	r3, [r5, #0]
 8004522:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	68b9      	ldr	r1, [r7, #8]
 8004528:	68f8      	ldr	r0, [r7, #12]
 800452a:	f000 f811 	bl	8004550 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2201      	movs	r2, #1
 8004534:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2201      	movs	r2, #1
 800453a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3710      	adds	r7, #16
 800454c:	46bd      	mov	sp, r7
 800454e:	bdb0      	pop	{r4, r5, r7, pc}

08004550 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004550:	b480      	push	{r7}
 8004552:	b089      	sub	sp, #36	; 0x24
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	685a      	ldr	r2, [r3, #4]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	0c1b      	lsrs	r3, r3, #16
 8004568:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800456c:	4413      	add	r3, r2
 800456e:	041b      	lsls	r3, r3, #16
 8004570:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	461a      	mov	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	01db      	lsls	r3, r3, #7
 800457c:	4413      	add	r3, r2
 800457e:	3384      	adds	r3, #132	; 0x84
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	6812      	ldr	r2, [r2, #0]
 8004586:	4611      	mov	r1, r2
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	01d2      	lsls	r2, r2, #7
 800458c:	440a      	add	r2, r1
 800458e:	3284      	adds	r2, #132	; 0x84
 8004590:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 8004594:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	0c1b      	lsrs	r3, r3, #16
 80045a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80045a6:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80045a8:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4619      	mov	r1, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	01db      	lsls	r3, r3, #7
 80045b4:	440b      	add	r3, r1
 80045b6:	3384      	adds	r3, #132	; 0x84
 80045b8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80045be:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	68da      	ldr	r2, [r3, #12]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045ce:	4413      	add	r3, r2
 80045d0:	041b      	lsls	r3, r3, #16
 80045d2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	461a      	mov	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	01db      	lsls	r3, r3, #7
 80045de:	4413      	add	r3, r2
 80045e0:	3384      	adds	r3, #132	; 0x84
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	68fa      	ldr	r2, [r7, #12]
 80045e6:	6812      	ldr	r2, [r2, #0]
 80045e8:	4611      	mov	r1, r2
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	01d2      	lsls	r2, r2, #7
 80045ee:	440a      	add	r2, r1
 80045f0:	3284      	adds	r2, #132	; 0x84
 80045f2:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 80045f6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	689a      	ldr	r2, [r3, #8]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004606:	4413      	add	r3, r2
 8004608:	1c5a      	adds	r2, r3, #1
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4619      	mov	r1, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	01db      	lsls	r3, r3, #7
 8004614:	440b      	add	r3, r1
 8004616:	3384      	adds	r3, #132	; 0x84
 8004618:	4619      	mov	r1, r3
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	4313      	orrs	r3, r2
 800461e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	461a      	mov	r2, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	01db      	lsls	r3, r3, #7
 800462a:	4413      	add	r3, r2
 800462c:	3384      	adds	r3, #132	; 0x84
 800462e:	691b      	ldr	r3, [r3, #16]
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	6812      	ldr	r2, [r2, #0]
 8004634:	4611      	mov	r1, r2
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	01d2      	lsls	r2, r2, #7
 800463a:	440a      	add	r2, r1
 800463c:	3284      	adds	r2, #132	; 0x84
 800463e:	f023 0307 	bic.w	r3, r3, #7
 8004642:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	461a      	mov	r2, r3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	01db      	lsls	r3, r3, #7
 800464e:	4413      	add	r3, r2
 8004650:	3384      	adds	r3, #132	; 0x84
 8004652:	461a      	mov	r2, r3
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004660:	021b      	lsls	r3, r3, #8
 8004662:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800466a:	041b      	lsls	r3, r3, #16
 800466c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	061b      	lsls	r3, r3, #24
 8004674:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	461a      	mov	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	01db      	lsls	r3, r3, #7
 8004680:	4413      	add	r3, r2
 8004682:	3384      	adds	r3, #132	; 0x84
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	461a      	mov	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	01db      	lsls	r3, r3, #7
 8004690:	4413      	add	r3, r2
 8004692:	3384      	adds	r3, #132	; 0x84
 8004694:	461a      	mov	r2, r3
 8004696:	2300      	movs	r3, #0
 8004698:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80046a0:	461a      	mov	r2, r3
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	431a      	orrs	r2, r3
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	431a      	orrs	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4619      	mov	r1, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	01db      	lsls	r3, r3, #7
 80046b4:	440b      	add	r3, r1
 80046b6:	3384      	adds	r3, #132	; 0x84
 80046b8:	4619      	mov	r1, r3
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	4313      	orrs	r3, r2
 80046be:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	461a      	mov	r2, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	01db      	lsls	r3, r3, #7
 80046ca:	4413      	add	r3, r2
 80046cc:	3384      	adds	r3, #132	; 0x84
 80046ce:	695b      	ldr	r3, [r3, #20]
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	6812      	ldr	r2, [r2, #0]
 80046d4:	4611      	mov	r1, r2
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	01d2      	lsls	r2, r2, #7
 80046da:	440a      	add	r2, r1
 80046dc:	3284      	adds	r2, #132	; 0x84
 80046de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80046e2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	461a      	mov	r2, r3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	01db      	lsls	r3, r3, #7
 80046ee:	4413      	add	r3, r2
 80046f0:	3384      	adds	r3, #132	; 0x84
 80046f2:	461a      	mov	r2, r3
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	695b      	ldr	r3, [r3, #20]
 80046f8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	461a      	mov	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	01db      	lsls	r3, r3, #7
 8004704:	4413      	add	r3, r2
 8004706:	3384      	adds	r3, #132	; 0x84
 8004708:	69db      	ldr	r3, [r3, #28]
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	6812      	ldr	r2, [r2, #0]
 800470e:	4611      	mov	r1, r2
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	01d2      	lsls	r2, r2, #7
 8004714:	440a      	add	r2, r1
 8004716:	3284      	adds	r2, #132	; 0x84
 8004718:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800471c:	f023 0307 	bic.w	r3, r3, #7
 8004720:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	69da      	ldr	r2, [r3, #28]
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	6a1b      	ldr	r3, [r3, #32]
 800472a:	68f9      	ldr	r1, [r7, #12]
 800472c:	6809      	ldr	r1, [r1, #0]
 800472e:	4608      	mov	r0, r1
 8004730:	6879      	ldr	r1, [r7, #4]
 8004732:	01c9      	lsls	r1, r1, #7
 8004734:	4401      	add	r1, r0
 8004736:	3184      	adds	r1, #132	; 0x84
 8004738:	4313      	orrs	r3, r2
 800473a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	461a      	mov	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	01db      	lsls	r3, r3, #7
 8004746:	4413      	add	r3, r2
 8004748:	3384      	adds	r3, #132	; 0x84
 800474a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	461a      	mov	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	01db      	lsls	r3, r3, #7
 8004756:	4413      	add	r3, r2
 8004758:	3384      	adds	r3, #132	; 0x84
 800475a:	461a      	mov	r2, r3
 800475c:	2300      	movs	r3, #0
 800475e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	461a      	mov	r2, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	01db      	lsls	r3, r3, #7
 800476a:	4413      	add	r3, r2
 800476c:	3384      	adds	r3, #132	; 0x84
 800476e:	461a      	mov	r2, r3
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004774:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d102      	bne.n	8004784 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800477e:	2304      	movs	r3, #4
 8004780:	61fb      	str	r3, [r7, #28]
 8004782:	e01b      	b.n	80047bc <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d102      	bne.n	8004792 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800478c:	2303      	movs	r3, #3
 800478e:	61fb      	str	r3, [r7, #28]
 8004790:	e014      	b.n	80047bc <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	2b04      	cmp	r3, #4
 8004798:	d00b      	beq.n	80047b2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d007      	beq.n	80047b2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80047a6:	2b03      	cmp	r3, #3
 80047a8:	d003      	beq.n	80047b2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80047ae:	2b07      	cmp	r3, #7
 80047b0:	d102      	bne.n	80047b8 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80047b2:	2302      	movs	r3, #2
 80047b4:	61fb      	str	r3, [r7, #28]
 80047b6:	e001      	b.n	80047bc <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80047b8:	2301      	movs	r3, #1
 80047ba:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	461a      	mov	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	01db      	lsls	r3, r3, #7
 80047c6:	4413      	add	r3, r2
 80047c8:	3384      	adds	r3, #132	; 0x84
 80047ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	6812      	ldr	r2, [r2, #0]
 80047d0:	4611      	mov	r1, r2
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	01d2      	lsls	r2, r2, #7
 80047d6:	440a      	add	r2, r1
 80047d8:	3284      	adds	r2, #132	; 0x84
 80047da:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80047de:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e4:	69fa      	ldr	r2, [r7, #28]
 80047e6:	fb02 f303 	mul.w	r3, r2, r3
 80047ea:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	6859      	ldr	r1, [r3, #4]
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	1acb      	subs	r3, r1, r3
 80047f6:	69f9      	ldr	r1, [r7, #28]
 80047f8:	fb01 f303 	mul.w	r3, r1, r3
 80047fc:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80047fe:	68f9      	ldr	r1, [r7, #12]
 8004800:	6809      	ldr	r1, [r1, #0]
 8004802:	4608      	mov	r0, r1
 8004804:	6879      	ldr	r1, [r7, #4]
 8004806:	01c9      	lsls	r1, r1, #7
 8004808:	4401      	add	r1, r0
 800480a:	3184      	adds	r1, #132	; 0x84
 800480c:	4313      	orrs	r3, r2
 800480e:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	461a      	mov	r2, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	01db      	lsls	r3, r3, #7
 800481a:	4413      	add	r3, r2
 800481c:	3384      	adds	r3, #132	; 0x84
 800481e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	6812      	ldr	r2, [r2, #0]
 8004824:	4611      	mov	r1, r2
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	01d2      	lsls	r2, r2, #7
 800482a:	440a      	add	r2, r1
 800482c:	3284      	adds	r2, #132	; 0x84
 800482e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004832:	f023 0307 	bic.w	r3, r3, #7
 8004836:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	461a      	mov	r2, r3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	01db      	lsls	r3, r3, #7
 8004842:	4413      	add	r3, r2
 8004844:	3384      	adds	r3, #132	; 0x84
 8004846:	461a      	mov	r2, r3
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	461a      	mov	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	01db      	lsls	r3, r3, #7
 8004858:	4413      	add	r3, r2
 800485a:	3384      	adds	r3, #132	; 0x84
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	6812      	ldr	r2, [r2, #0]
 8004862:	4611      	mov	r1, r2
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	01d2      	lsls	r2, r2, #7
 8004868:	440a      	add	r2, r1
 800486a:	3284      	adds	r2, #132	; 0x84
 800486c:	f043 0301 	orr.w	r3, r3, #1
 8004870:	6013      	str	r3, [r2, #0]
}
 8004872:	bf00      	nop
 8004874:	3724      	adds	r7, #36	; 0x24
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
	...

08004880 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b086      	sub	sp, #24
 8004884:	af02      	add	r7, sp, #8
 8004886:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004888:	2300      	movs	r3, #0
 800488a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800488c:	f7fe fa02 	bl	8002c94 <HAL_GetTick>
 8004890:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d102      	bne.n	800489e <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	73fb      	strb	r3, [r7, #15]
 800489c:	e092      	b.n	80049c4 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	f040 808b 	bne.w	80049c4 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f7fd fef6 	bl	80026a0 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 80048b4:	f241 3188 	movw	r1, #5000	; 0x1388
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 f88b 	bl	80049d4 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	689a      	ldr	r2, [r3, #8]
 80048c4:	4b42      	ldr	r3, [pc, #264]	; (80049d0 <HAL_OSPI_Init+0x150>)
 80048c6:	4013      	ands	r3, r2
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	68d1      	ldr	r1, [r2, #12]
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	6912      	ldr	r2, [r2, #16]
 80048d0:	3a01      	subs	r2, #1
 80048d2:	0412      	lsls	r2, r2, #16
 80048d4:	4311      	orrs	r1, r2
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	6952      	ldr	r2, [r2, #20]
 80048da:	3a01      	subs	r2, #1
 80048dc:	0212      	lsls	r2, r2, #8
 80048de:	4311      	orrs	r1, r2
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80048e4:	4311      	orrs	r1, r2
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	69d2      	ldr	r2, [r2, #28]
 80048ea:	4311      	orrs	r1, r2
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	6812      	ldr	r2, [r2, #0]
 80048f0:	430b      	orrs	r3, r1
 80048f2:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	0412      	lsls	r2, r2, #16
 80048fe:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	3b01      	subs	r3, #1
 8004910:	021a      	lsls	r2, r3, #8
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	430a      	orrs	r2, r1
 8004918:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800491e:	9300      	str	r3, [sp, #0]
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	2200      	movs	r2, #0
 8004924:	2120      	movs	r1, #32
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 fb98 	bl	800505c <OSPI_WaitFlagStateUntilTimeout>
 800492c:	4603      	mov	r3, r0
 800492e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004930:	7bfb      	ldrb	r3, [r7, #15]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d146      	bne.n	80049c4 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a1b      	ldr	r3, [r3, #32]
 8004944:	1e5a      	subs	r2, r3, #1
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	430a      	orrs	r2, r1
 800494c:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	689a      	ldr	r2, [r3, #8]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	430a      	orrs	r2, r1
 8004962:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800496c:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004978:	431a      	orrs	r2, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	430a      	orrs	r2, r1
 8004980:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f042 0201 	orr.w	r2, r2, #1
 8004992:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	699b      	ldr	r3, [r3, #24]
 8004998:	2b02      	cmp	r3, #2
 800499a:	d107      	bne.n	80049ac <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	689a      	ldr	r2, [r3, #8]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f042 0202 	orr.w	r2, r2, #2
 80049aa:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049b4:	d103      	bne.n	80049be <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2201      	movs	r2, #1
 80049ba:	645a      	str	r2, [r3, #68]	; 0x44
 80049bc:	e002      	b.n	80049c4 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2202      	movs	r2, #2
 80049c2:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 80049c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3710      	adds	r7, #16
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	f8e0f8f4 	.word	0xf8e0f8f4

080049d4 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	683a      	ldr	r2, [r7, #0]
 80049e2:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	370c      	adds	r7, #12
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
	...

080049f4 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b092      	sub	sp, #72	; 0x48
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a00:	2300      	movs	r3, #0
 8004a02:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8004a06:	2300      	movs	r3, #0
 8004a08:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a08      	ldr	r2, [pc, #32]	; (8004a34 <HAL_OSPIM_Config+0x40>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d105      	bne.n	8004a22 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8004a16:	2300      	movs	r3, #0
 8004a18:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8004a20:	e004      	b.n	8004a2c <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8004a22:	2301      	movs	r3, #1
 8004a24:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 8004a26:	2300      	movs	r3, #0
 8004a28:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8004a32:	e01f      	b.n	8004a74 <HAL_OSPIM_Config+0x80>
 8004a34:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8004a38:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	b2d8      	uxtb	r0, r3
 8004a40:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8004a44:	f107 0114 	add.w	r1, r7, #20
 8004a48:	4613      	mov	r3, r2
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	4413      	add	r3, r2
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	440b      	add	r3, r1
 8004a52:	4619      	mov	r1, r3
 8004a54:	f000 fb3a 	bl	80050cc <OSPIM_GetConfig>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d005      	beq.n	8004a6a <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2208      	movs	r2, #8
 8004a68:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8004a6a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004a6e:	3301      	adds	r3, #1
 8004a70:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8004a74:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d9dd      	bls.n	8004a38 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8004a7c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	f040 82de 	bne.w	8005042 <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8004a86:	4bc6      	ldr	r3, [pc, #792]	; (8004da0 <HAL_OSPIM_Config+0x3ac>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00b      	beq.n	8004aaa <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8004a92:	4bc3      	ldr	r3, [pc, #780]	; (8004da0 <HAL_OSPIM_Config+0x3ac>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4ac2      	ldr	r2, [pc, #776]	; (8004da0 <HAL_OSPIM_Config+0x3ac>)
 8004a98:	f023 0301 	bic.w	r3, r3, #1
 8004a9c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8004a9e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004aa2:	f043 0301 	orr.w	r3, r3, #1
 8004aa6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8004aaa:	4bbe      	ldr	r3, [pc, #760]	; (8004da4 <HAL_OSPIM_Config+0x3b0>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00b      	beq.n	8004ace <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8004ab6:	4bbb      	ldr	r3, [pc, #748]	; (8004da4 <HAL_OSPIM_Config+0x3b0>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4aba      	ldr	r2, [pc, #744]	; (8004da4 <HAL_OSPIM_Config+0x3b0>)
 8004abc:	f023 0301 	bic.w	r3, r3, #1
 8004ac0:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8004ac2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004ac6:	f043 0302 	orr.w	r3, r3, #2
 8004aca:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8004ace:	49b6      	ldr	r1, [pc, #728]	; (8004da8 <HAL_OSPIM_Config+0x3b4>)
 8004ad0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	4413      	add	r3, r2
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	3348      	adds	r3, #72	; 0x48
 8004adc:	443b      	add	r3, r7
 8004ade:	3b2c      	subs	r3, #44	; 0x2c
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	440b      	add	r3, r1
 8004ae8:	6859      	ldr	r1, [r3, #4]
 8004aea:	48af      	ldr	r0, [pc, #700]	; (8004da8 <HAL_OSPIM_Config+0x3b4>)
 8004aec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004aee:	4613      	mov	r3, r2
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	4413      	add	r3, r2
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	3348      	adds	r3, #72	; 0x48
 8004af8:	443b      	add	r3, r7
 8004afa:	3b2c      	subs	r3, #44	; 0x2c
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	3b01      	subs	r3, #1
 8004b00:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	4403      	add	r3, r0
 8004b08:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 8004b0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	4413      	add	r3, r2
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	3348      	adds	r3, #72	; 0x48
 8004b16:	443b      	add	r3, r7
 8004b18:	3b34      	subs	r3, #52	; 0x34
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	f000 80a1 	beq.w	8004c64 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8004b22:	49a1      	ldr	r1, [pc, #644]	; (8004da8 <HAL_OSPIM_Config+0x3b4>)
 8004b24:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b26:	4613      	mov	r3, r2
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	4413      	add	r3, r2
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	3348      	adds	r3, #72	; 0x48
 8004b30:	443b      	add	r3, r7
 8004b32:	3b34      	subs	r3, #52	; 0x34
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	3b01      	subs	r3, #1
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	440b      	add	r3, r1
 8004b3c:	6859      	ldr	r1, [r3, #4]
 8004b3e:	489a      	ldr	r0, [pc, #616]	; (8004da8 <HAL_OSPIM_Config+0x3b4>)
 8004b40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b42:	4613      	mov	r3, r2
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	4413      	add	r3, r2
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	3348      	adds	r3, #72	; 0x48
 8004b4c:	443b      	add	r3, r7
 8004b4e:	3b34      	subs	r3, #52	; 0x34
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	3b01      	subs	r3, #1
 8004b54:	f021 0201 	bic.w	r2, r1, #1
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	4403      	add	r3, r0
 8004b5c:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8004b5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b60:	4613      	mov	r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	4413      	add	r3, r2
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	3348      	adds	r3, #72	; 0x48
 8004b6a:	443b      	add	r3, r7
 8004b6c:	3b30      	subs	r3, #48	; 0x30
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d01d      	beq.n	8004bb0 <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8004b74:	498c      	ldr	r1, [pc, #560]	; (8004da8 <HAL_OSPIM_Config+0x3b4>)
 8004b76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b78:	4613      	mov	r3, r2
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	4413      	add	r3, r2
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	3348      	adds	r3, #72	; 0x48
 8004b82:	443b      	add	r3, r7
 8004b84:	3b30      	subs	r3, #48	; 0x30
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	440b      	add	r3, r1
 8004b8e:	6859      	ldr	r1, [r3, #4]
 8004b90:	4885      	ldr	r0, [pc, #532]	; (8004da8 <HAL_OSPIM_Config+0x3b4>)
 8004b92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b94:	4613      	mov	r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	4413      	add	r3, r2
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	3348      	adds	r3, #72	; 0x48
 8004b9e:	443b      	add	r3, r7
 8004ba0:	3b30      	subs	r3, #48	; 0x30
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	3b01      	subs	r3, #1
 8004ba6:	f021 0210 	bic.w	r2, r1, #16
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	4403      	add	r3, r0
 8004bae:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004bb0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	4413      	add	r3, r2
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	3348      	adds	r3, #72	; 0x48
 8004bbc:	443b      	add	r3, r7
 8004bbe:	3b28      	subs	r3, #40	; 0x28
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d021      	beq.n	8004c0a <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8004bc6:	4978      	ldr	r1, [pc, #480]	; (8004da8 <HAL_OSPIM_Config+0x3b4>)
 8004bc8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004bca:	4613      	mov	r3, r2
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	4413      	add	r3, r2
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	3348      	adds	r3, #72	; 0x48
 8004bd4:	443b      	add	r3, r7
 8004bd6:	3b28      	subs	r3, #40	; 0x28
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	3b01      	subs	r3, #1
 8004bdc:	f003 0301 	and.w	r3, r3, #1
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	440b      	add	r3, r1
 8004be4:	6859      	ldr	r1, [r3, #4]
 8004be6:	4870      	ldr	r0, [pc, #448]	; (8004da8 <HAL_OSPIM_Config+0x3b4>)
 8004be8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004bea:	4613      	mov	r3, r2
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	4413      	add	r3, r2
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	3348      	adds	r3, #72	; 0x48
 8004bf4:	443b      	add	r3, r7
 8004bf6:	3b28      	subs	r3, #40	; 0x28
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	f003 0301 	and.w	r3, r3, #1
 8004c00:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	4403      	add	r3, r0
 8004c08:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004c0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	4413      	add	r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	3348      	adds	r3, #72	; 0x48
 8004c16:	443b      	add	r3, r7
 8004c18:	3b24      	subs	r3, #36	; 0x24
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d021      	beq.n	8004c64 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8004c20:	4961      	ldr	r1, [pc, #388]	; (8004da8 <HAL_OSPIM_Config+0x3b4>)
 8004c22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c24:	4613      	mov	r3, r2
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	4413      	add	r3, r2
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	3348      	adds	r3, #72	; 0x48
 8004c2e:	443b      	add	r3, r7
 8004c30:	3b24      	subs	r3, #36	; 0x24
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	3b01      	subs	r3, #1
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	440b      	add	r3, r1
 8004c3e:	6859      	ldr	r1, [r3, #4]
 8004c40:	4859      	ldr	r0, [pc, #356]	; (8004da8 <HAL_OSPIM_Config+0x3b4>)
 8004c42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c44:	4613      	mov	r3, r2
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	4413      	add	r3, r2
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	3348      	adds	r3, #72	; 0x48
 8004c4e:	443b      	add	r3, r7
 8004c50:	3b24      	subs	r3, #36	; 0x24
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	3b01      	subs	r3, #1
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	4403      	add	r3, r0
 8004c62:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	6819      	ldr	r1, [r3, #0]
 8004c68:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	4413      	add	r3, r2
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	3348      	adds	r3, #72	; 0x48
 8004c76:	443b      	add	r3, r7
 8004c78:	3b34      	subs	r3, #52	; 0x34
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4299      	cmp	r1, r3
 8004c7e:	d038      	beq.n	8004cf2 <HAL_OSPIM_Config+0x2fe>
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	6859      	ldr	r1, [r3, #4]
 8004c84:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004c88:	4613      	mov	r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	4413      	add	r3, r2
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	3348      	adds	r3, #72	; 0x48
 8004c92:	443b      	add	r3, r7
 8004c94:	3b30      	subs	r3, #48	; 0x30
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4299      	cmp	r1, r3
 8004c9a:	d02a      	beq.n	8004cf2 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	6899      	ldr	r1, [r3, #8]
 8004ca0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	4413      	add	r3, r2
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	3348      	adds	r3, #72	; 0x48
 8004cae:	443b      	add	r3, r7
 8004cb0:	3b2c      	subs	r3, #44	; 0x2c
 8004cb2:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8004cb4:	4299      	cmp	r1, r3
 8004cb6:	d01c      	beq.n	8004cf2 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	68d9      	ldr	r1, [r3, #12]
 8004cbc:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	4413      	add	r3, r2
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	3348      	adds	r3, #72	; 0x48
 8004cca:	443b      	add	r3, r7
 8004ccc:	3b28      	subs	r3, #40	; 0x28
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4299      	cmp	r1, r3
 8004cd2:	d00e      	beq.n	8004cf2 <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	6919      	ldr	r1, [r3, #16]
 8004cd8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004cdc:	4613      	mov	r3, r2
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	4413      	add	r3, r2
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	3348      	adds	r3, #72	; 0x48
 8004ce6:	443b      	add	r3, r7
 8004ce8:	3b24      	subs	r3, #36	; 0x24
 8004cea:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004cec:	4299      	cmp	r1, r3
 8004cee:	f040 80d3 	bne.w	8004e98 <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8004cf2:	492d      	ldr	r1, [pc, #180]	; (8004da8 <HAL_OSPIM_Config+0x3b4>)
 8004cf4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	4413      	add	r3, r2
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	3348      	adds	r3, #72	; 0x48
 8004d02:	443b      	add	r3, r7
 8004d04:	3b34      	subs	r3, #52	; 0x34
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	440b      	add	r3, r1
 8004d0e:	6859      	ldr	r1, [r3, #4]
 8004d10:	4825      	ldr	r0, [pc, #148]	; (8004da8 <HAL_OSPIM_Config+0x3b4>)
 8004d12:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004d16:	4613      	mov	r3, r2
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	4413      	add	r3, r2
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	3348      	adds	r3, #72	; 0x48
 8004d20:	443b      	add	r3, r7
 8004d22:	3b34      	subs	r3, #52	; 0x34
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	3b01      	subs	r3, #1
 8004d28:	f021 0201 	bic.w	r2, r1, #1
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	4403      	add	r3, r0
 8004d30:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8004d32:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004d36:	4613      	mov	r3, r2
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	4413      	add	r3, r2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	3348      	adds	r3, #72	; 0x48
 8004d40:	443b      	add	r3, r7
 8004d42:	3b30      	subs	r3, #48	; 0x30
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d01f      	beq.n	8004d8a <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8004d4a:	4917      	ldr	r1, [pc, #92]	; (8004da8 <HAL_OSPIM_Config+0x3b4>)
 8004d4c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004d50:	4613      	mov	r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	4413      	add	r3, r2
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	3348      	adds	r3, #72	; 0x48
 8004d5a:	443b      	add	r3, r7
 8004d5c:	3b30      	subs	r3, #48	; 0x30
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	3b01      	subs	r3, #1
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	440b      	add	r3, r1
 8004d66:	6859      	ldr	r1, [r3, #4]
 8004d68:	480f      	ldr	r0, [pc, #60]	; (8004da8 <HAL_OSPIM_Config+0x3b4>)
 8004d6a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004d6e:	4613      	mov	r3, r2
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	4413      	add	r3, r2
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	3348      	adds	r3, #72	; 0x48
 8004d78:	443b      	add	r3, r7
 8004d7a:	3b30      	subs	r3, #48	; 0x30
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	f021 0210 	bic.w	r2, r1, #16
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	4403      	add	r3, r0
 8004d88:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8004d8a:	4907      	ldr	r1, [pc, #28]	; (8004da8 <HAL_OSPIM_Config+0x3b4>)
 8004d8c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004d90:	4613      	mov	r3, r2
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	4413      	add	r3, r2
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	3348      	adds	r3, #72	; 0x48
 8004d9a:	443b      	add	r3, r7
 8004d9c:	3b2c      	subs	r3, #44	; 0x2c
 8004d9e:	e005      	b.n	8004dac <HAL_OSPIM_Config+0x3b8>
 8004da0:	a0001000 	.word	0xa0001000
 8004da4:	a0001400 	.word	0xa0001400
 8004da8:	50061c00 	.word	0x50061c00
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	3b01      	subs	r3, #1
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	440b      	add	r3, r1
 8004db4:	6859      	ldr	r1, [r3, #4]
 8004db6:	48a6      	ldr	r0, [pc, #664]	; (8005050 <HAL_OSPIM_Config+0x65c>)
 8004db8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	4413      	add	r3, r2
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	3348      	adds	r3, #72	; 0x48
 8004dc6:	443b      	add	r3, r7
 8004dc8:	3b2c      	subs	r3, #44	; 0x2c
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	3b01      	subs	r3, #1
 8004dce:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	4403      	add	r3, r0
 8004dd6:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004dd8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004ddc:	4613      	mov	r3, r2
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	4413      	add	r3, r2
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	3348      	adds	r3, #72	; 0x48
 8004de6:	443b      	add	r3, r7
 8004de8:	3b28      	subs	r3, #40	; 0x28
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d023      	beq.n	8004e38 <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004df0:	4997      	ldr	r1, [pc, #604]	; (8005050 <HAL_OSPIM_Config+0x65c>)
 8004df2:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004df6:	4613      	mov	r3, r2
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	4413      	add	r3, r2
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	3348      	adds	r3, #72	; 0x48
 8004e00:	443b      	add	r3, r7
 8004e02:	3b28      	subs	r3, #40	; 0x28
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	3b01      	subs	r3, #1
 8004e08:	f003 0301 	and.w	r3, r3, #1
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	440b      	add	r3, r1
 8004e10:	6859      	ldr	r1, [r3, #4]
 8004e12:	488f      	ldr	r0, [pc, #572]	; (8005050 <HAL_OSPIM_Config+0x65c>)
 8004e14:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004e18:	4613      	mov	r3, r2
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	4413      	add	r3, r2
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	3348      	adds	r3, #72	; 0x48
 8004e22:	443b      	add	r3, r7
 8004e24:	3b28      	subs	r3, #40	; 0x28
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	3b01      	subs	r3, #1
 8004e2a:	f003 0301 	and.w	r3, r3, #1
 8004e2e:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	4403      	add	r3, r0
 8004e36:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004e38:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	4413      	add	r3, r2
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	3348      	adds	r3, #72	; 0x48
 8004e46:	443b      	add	r3, r7
 8004e48:	3b24      	subs	r3, #36	; 0x24
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d023      	beq.n	8004e98 <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004e50:	497f      	ldr	r1, [pc, #508]	; (8005050 <HAL_OSPIM_Config+0x65c>)
 8004e52:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004e56:	4613      	mov	r3, r2
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	4413      	add	r3, r2
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	3348      	adds	r3, #72	; 0x48
 8004e60:	443b      	add	r3, r7
 8004e62:	3b24      	subs	r3, #36	; 0x24
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	3b01      	subs	r3, #1
 8004e68:	f003 0301 	and.w	r3, r3, #1
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	440b      	add	r3, r1
 8004e70:	6859      	ldr	r1, [r3, #4]
 8004e72:	4877      	ldr	r0, [pc, #476]	; (8005050 <HAL_OSPIM_Config+0x65c>)
 8004e74:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004e78:	4613      	mov	r3, r2
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	4413      	add	r3, r2
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	3348      	adds	r3, #72	; 0x48
 8004e82:	443b      	add	r3, r7
 8004e84:	3b24      	subs	r3, #36	; 0x24
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	3b01      	subs	r3, #1
 8004e8a:	f003 0301 	and.w	r3, r3, #1
 8004e8e:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	4403      	add	r3, r0
 8004e96:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8004e98:	4a6d      	ldr	r2, [pc, #436]	; (8005050 <HAL_OSPIM_Config+0x65c>)
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	4413      	add	r3, r2
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004eaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004eac:	025b      	lsls	r3, r3, #9
 8004eae:	431a      	orrs	r2, r3
 8004eb0:	4967      	ldr	r1, [pc, #412]	; (8005050 <HAL_OSPIM_Config+0x65c>)
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	440b      	add	r3, r1
 8004ec0:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8004ec2:	4a63      	ldr	r2, [pc, #396]	; (8005050 <HAL_OSPIM_Config+0x65c>)
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	4413      	add	r3, r2
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	f023 0203 	bic.w	r2, r3, #3
 8004ed4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ed6:	005b      	lsls	r3, r3, #1
 8004ed8:	431a      	orrs	r2, r3
 8004eda:	495d      	ldr	r1, [pc, #372]	; (8005050 <HAL_OSPIM_Config+0x65c>)
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	f042 0201 	orr.w	r2, r2, #1
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	440b      	add	r3, r1
 8004eea:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d014      	beq.n	8004f1e <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8004ef4:	4a56      	ldr	r2, [pc, #344]	; (8005050 <HAL_OSPIM_Config+0x65c>)
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	3b01      	subs	r3, #1
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	4413      	add	r3, r2
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004f06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f08:	015b      	lsls	r3, r3, #5
 8004f0a:	431a      	orrs	r2, r3
 8004f0c:	4950      	ldr	r1, [pc, #320]	; (8005050 <HAL_OSPIM_Config+0x65c>)
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	3b01      	subs	r3, #1
 8004f14:	f042 0210 	orr.w	r2, r2, #16
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	440b      	add	r3, r1
 8004f1c:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d019      	beq.n	8004f5e <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004f2a:	4a49      	ldr	r2, [pc, #292]	; (8005050 <HAL_OSPIM_Config+0x65c>)
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	3b01      	subs	r3, #1
 8004f32:	f003 0301 	and.w	r3, r3, #1
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	4413      	add	r3, r2
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004f40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f42:	049b      	lsls	r3, r3, #18
 8004f44:	431a      	orrs	r2, r3
 8004f46:	4942      	ldr	r1, [pc, #264]	; (8005050 <HAL_OSPIM_Config+0x65c>)
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	3b01      	subs	r3, #1
 8004f4e:	f003 0301 	and.w	r3, r3, #1
 8004f52:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	440b      	add	r3, r1
 8004f5a:	605a      	str	r2, [r3, #4]
 8004f5c:	e01c      	b.n	8004f98 <HAL_OSPIM_Config+0x5a4>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d018      	beq.n	8004f98 <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004f66:	4a3a      	ldr	r2, [pc, #232]	; (8005050 <HAL_OSPIM_Config+0x65c>)
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	f003 0301 	and.w	r3, r3, #1
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	4413      	add	r3, r2
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004f7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f7e:	069b      	lsls	r3, r3, #26
 8004f80:	431a      	orrs	r2, r3
 8004f82:	4933      	ldr	r1, [pc, #204]	; (8005050 <HAL_OSPIM_Config+0x65c>)
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	f003 0301 	and.w	r3, r3, #1
 8004f8e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	440b      	add	r3, r1
 8004f96:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d019      	beq.n	8004fd8 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004fa4:	4a2a      	ldr	r2, [pc, #168]	; (8005050 <HAL_OSPIM_Config+0x65c>)
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	3b01      	subs	r3, #1
 8004fac:	f003 0301 	and.w	r3, r3, #1
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	4413      	add	r3, r2
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004fba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fbc:	049b      	lsls	r3, r3, #18
 8004fbe:	431a      	orrs	r2, r3
 8004fc0:	4923      	ldr	r1, [pc, #140]	; (8005050 <HAL_OSPIM_Config+0x65c>)
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	f003 0301 	and.w	r3, r3, #1
 8004fcc:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	440b      	add	r3, r1
 8004fd4:	605a      	str	r2, [r3, #4]
 8004fd6:	e01c      	b.n	8005012 <HAL_OSPIM_Config+0x61e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	691b      	ldr	r3, [r3, #16]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d018      	beq.n	8005012 <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004fe0:	4a1b      	ldr	r2, [pc, #108]	; (8005050 <HAL_OSPIM_Config+0x65c>)
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	f003 0301 	and.w	r3, r3, #1
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	4413      	add	r3, r2
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004ff6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ff8:	069b      	lsls	r3, r3, #26
 8004ffa:	431a      	orrs	r2, r3
 8004ffc:	4914      	ldr	r1, [pc, #80]	; (8005050 <HAL_OSPIM_Config+0x65c>)
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	3b01      	subs	r3, #1
 8005004:	f003 0301 	and.w	r3, r3, #1
 8005008:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	440b      	add	r3, r1
 8005010:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8005012:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005016:	f003 0301 	and.w	r3, r3, #1
 800501a:	2b00      	cmp	r3, #0
 800501c:	d005      	beq.n	800502a <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800501e:	4b0d      	ldr	r3, [pc, #52]	; (8005054 <HAL_OSPIM_Config+0x660>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a0c      	ldr	r2, [pc, #48]	; (8005054 <HAL_OSPIM_Config+0x660>)
 8005024:	f043 0301 	orr.w	r3, r3, #1
 8005028:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 800502a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800502e:	f003 0302 	and.w	r3, r3, #2
 8005032:	2b00      	cmp	r3, #0
 8005034:	d005      	beq.n	8005042 <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8005036:	4b08      	ldr	r3, [pc, #32]	; (8005058 <HAL_OSPIM_Config+0x664>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a07      	ldr	r2, [pc, #28]	; (8005058 <HAL_OSPIM_Config+0x664>)
 800503c:	f043 0301 	orr.w	r3, r3, #1
 8005040:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8005042:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8005046:	4618      	mov	r0, r3
 8005048:	3748      	adds	r7, #72	; 0x48
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	50061c00 	.word	0x50061c00
 8005054:	a0001000 	.word	0xa0001000
 8005058:	a0001400 	.word	0xa0001400

0800505c <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b084      	sub	sp, #16
 8005060:	af00      	add	r7, sp, #0
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	603b      	str	r3, [r7, #0]
 8005068:	4613      	mov	r3, r2
 800506a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800506c:	e01a      	b.n	80050a4 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005074:	d016      	beq.n	80050a4 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005076:	f7fd fe0d 	bl	8002c94 <HAL_GetTick>
 800507a:	4602      	mov	r2, r0
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	69ba      	ldr	r2, [r7, #24]
 8005082:	429a      	cmp	r2, r3
 8005084:	d302      	bcc.n	800508c <OSPI_WaitFlagStateUntilTimeout+0x30>
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d10b      	bne.n	80050a4 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005092:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005098:	f043 0201 	orr.w	r2, r3, #1
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e00e      	b.n	80050c2 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	6a1a      	ldr	r2, [r3, #32]
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	4013      	ands	r3, r2
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	bf14      	ite	ne
 80050b2:	2301      	movne	r3, #1
 80050b4:	2300      	moveq	r3, #0
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	461a      	mov	r2, r3
 80050ba:	79fb      	ldrb	r3, [r7, #7]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d1d6      	bne.n	800506e <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3710      	adds	r7, #16
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
	...

080050cc <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b087      	sub	sp, #28
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	4603      	mov	r3, r0
 80050d4:	6039      	str	r1, [r7, #0]
 80050d6:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80050d8:	2300      	movs	r3, #0
 80050da:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 80050dc:	2300      	movs	r3, #0
 80050de:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 80050e0:	79fb      	ldrb	r3, [r7, #7]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d005      	beq.n	80050f2 <OSPIM_GetConfig+0x26>
 80050e6:	79fb      	ldrb	r3, [r7, #7]
 80050e8:	2b02      	cmp	r3, #2
 80050ea:	d802      	bhi.n	80050f2 <OSPIM_GetConfig+0x26>
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d102      	bne.n	80050f8 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	75fb      	strb	r3, [r7, #23]
 80050f6:	e08e      	b.n	8005216 <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	2200      	movs	r2, #0
 80050fc:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	2200      	movs	r2, #0
 8005102:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	2200      	movs	r2, #0
 8005108:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	2200      	movs	r2, #0
 800510e:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	2200      	movs	r2, #0
 8005114:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8005116:	79fb      	ldrb	r3, [r7, #7]
 8005118:	2b02      	cmp	r3, #2
 800511a:	d101      	bne.n	8005120 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 800511c:	4b41      	ldr	r3, [pc, #260]	; (8005224 <OSPIM_GetConfig+0x158>)
 800511e:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8005120:	2300      	movs	r3, #0
 8005122:	60fb      	str	r3, [r7, #12]
 8005124:	e074      	b.n	8005210 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 8005126:	4a40      	ldr	r2, [pc, #256]	; (8005228 <OSPIM_GetConfig+0x15c>)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	4413      	add	r3, r2
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	f003 0301 	and.w	r3, r3, #1
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00a      	beq.n	8005152 <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 800513c:	68ba      	ldr	r2, [r7, #8]
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	4053      	eors	r3, r2
 8005142:	f003 0302 	and.w	r3, r3, #2
 8005146:	2b00      	cmp	r3, #0
 8005148:	d103      	bne.n	8005152 <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	1c5a      	adds	r2, r3, #1
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	f003 0310 	and.w	r3, r3, #16
 8005158:	2b00      	cmp	r3, #0
 800515a:	d00a      	beq.n	8005172 <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 800515c:	68ba      	ldr	r2, [r7, #8]
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	4053      	eors	r3, r2
 8005162:	f003 0320 	and.w	r3, r3, #32
 8005166:	2b00      	cmp	r3, #0
 8005168:	d103      	bne.n	8005172 <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	1c5a      	adds	r2, r3, #1
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005178:	2b00      	cmp	r3, #0
 800517a:	d00a      	beq.n	8005192 <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 800517c:	68ba      	ldr	r2, [r7, #8]
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	4053      	eors	r3, r2
 8005182:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005186:	2b00      	cmp	r3, #0
 8005188:	d103      	bne.n	8005192 <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	1c5a      	adds	r2, r3, #1
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d018      	beq.n	80051ce <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 800519c:	68ba      	ldr	r2, [r7, #8]
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	4053      	eors	r3, r2
 80051a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d111      	bne.n	80051ce <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d106      	bne.n	80051c2 <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	3301      	adds	r3, #1
 80051b8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	60da      	str	r2, [r3, #12]
 80051c0:	e005      	b.n	80051ce <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	3301      	adds	r3, #1
 80051c6:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d018      	beq.n	800520a <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 80051d8:	68ba      	ldr	r2, [r7, #8]
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	4053      	eors	r3, r2
 80051de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d111      	bne.n	800520a <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d106      	bne.n	80051fe <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	3301      	adds	r3, #1
 80051f4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	611a      	str	r2, [r3, #16]
 80051fc:	e005      	b.n	800520a <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	3301      	adds	r3, #1
 8005202:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	3301      	adds	r3, #1
 800520e:	60fb      	str	r3, [r7, #12]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2b01      	cmp	r3, #1
 8005214:	d987      	bls.n	8005126 <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 8005216:	7dfb      	ldrb	r3, [r7, #23]
}
 8005218:	4618      	mov	r0, r3
 800521a:	371c      	adds	r7, #28
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr
 8005224:	04040222 	.word	0x04040222
 8005228:	50061c00 	.word	0x50061c00

0800522c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800522c:	b480      	push	{r7}
 800522e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005230:	4b0d      	ldr	r3, [pc, #52]	; (8005268 <HAL_PWREx_GetVoltageRange+0x3c>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005238:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800523c:	d102      	bne.n	8005244 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800523e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005242:	e00b      	b.n	800525c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8005244:	4b08      	ldr	r3, [pc, #32]	; (8005268 <HAL_PWREx_GetVoltageRange+0x3c>)
 8005246:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800524a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800524e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005252:	d102      	bne.n	800525a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8005254:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005258:	e000      	b.n	800525c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800525a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800525c:	4618      	mov	r0, r3
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	40007000 	.word	0x40007000

0800526c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800526c:	b480      	push	{r7}
 800526e:	b085      	sub	sp, #20
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d141      	bne.n	80052fe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800527a:	4b4b      	ldr	r3, [pc, #300]	; (80053a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005282:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005286:	d131      	bne.n	80052ec <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005288:	4b47      	ldr	r3, [pc, #284]	; (80053a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800528a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800528e:	4a46      	ldr	r2, [pc, #280]	; (80053a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005290:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005294:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005298:	4b43      	ldr	r3, [pc, #268]	; (80053a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80052a0:	4a41      	ldr	r2, [pc, #260]	; (80053a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80052a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80052a8:	4b40      	ldr	r3, [pc, #256]	; (80053ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2232      	movs	r2, #50	; 0x32
 80052ae:	fb02 f303 	mul.w	r3, r2, r3
 80052b2:	4a3f      	ldr	r2, [pc, #252]	; (80053b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80052b4:	fba2 2303 	umull	r2, r3, r2, r3
 80052b8:	0c9b      	lsrs	r3, r3, #18
 80052ba:	3301      	adds	r3, #1
 80052bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052be:	e002      	b.n	80052c6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	3b01      	subs	r3, #1
 80052c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052c6:	4b38      	ldr	r3, [pc, #224]	; (80053a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052c8:	695b      	ldr	r3, [r3, #20]
 80052ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052d2:	d102      	bne.n	80052da <HAL_PWREx_ControlVoltageScaling+0x6e>
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1f2      	bne.n	80052c0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80052da:	4b33      	ldr	r3, [pc, #204]	; (80053a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052dc:	695b      	ldr	r3, [r3, #20]
 80052de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052e6:	d158      	bne.n	800539a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80052e8:	2303      	movs	r3, #3
 80052ea:	e057      	b.n	800539c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80052ec:	4b2e      	ldr	r3, [pc, #184]	; (80053a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052f2:	4a2d      	ldr	r2, [pc, #180]	; (80053a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80052fc:	e04d      	b.n	800539a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005304:	d141      	bne.n	800538a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005306:	4b28      	ldr	r3, [pc, #160]	; (80053a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800530e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005312:	d131      	bne.n	8005378 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005314:	4b24      	ldr	r3, [pc, #144]	; (80053a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005316:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800531a:	4a23      	ldr	r2, [pc, #140]	; (80053a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800531c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005320:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005324:	4b20      	ldr	r3, [pc, #128]	; (80053a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800532c:	4a1e      	ldr	r2, [pc, #120]	; (80053a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800532e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005332:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005334:	4b1d      	ldr	r3, [pc, #116]	; (80053ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2232      	movs	r2, #50	; 0x32
 800533a:	fb02 f303 	mul.w	r3, r2, r3
 800533e:	4a1c      	ldr	r2, [pc, #112]	; (80053b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005340:	fba2 2303 	umull	r2, r3, r2, r3
 8005344:	0c9b      	lsrs	r3, r3, #18
 8005346:	3301      	adds	r3, #1
 8005348:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800534a:	e002      	b.n	8005352 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	3b01      	subs	r3, #1
 8005350:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005352:	4b15      	ldr	r3, [pc, #84]	; (80053a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800535a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800535e:	d102      	bne.n	8005366 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d1f2      	bne.n	800534c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005366:	4b10      	ldr	r3, [pc, #64]	; (80053a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005368:	695b      	ldr	r3, [r3, #20]
 800536a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800536e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005372:	d112      	bne.n	800539a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e011      	b.n	800539c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005378:	4b0b      	ldr	r3, [pc, #44]	; (80053a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800537a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800537e:	4a0a      	ldr	r2, [pc, #40]	; (80053a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005384:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005388:	e007      	b.n	800539a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800538a:	4b07      	ldr	r3, [pc, #28]	; (80053a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005392:	4a05      	ldr	r2, [pc, #20]	; (80053a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005394:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005398:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800539a:	2300      	movs	r3, #0
}
 800539c:	4618      	mov	r0, r3
 800539e:	3714      	adds	r7, #20
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr
 80053a8:	40007000 	.word	0x40007000
 80053ac:	20004b0c 	.word	0x20004b0c
 80053b0:	431bde83 	.word	0x431bde83

080053b4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80053b4:	b480      	push	{r7}
 80053b6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80053b8:	4b05      	ldr	r3, [pc, #20]	; (80053d0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	4a04      	ldr	r2, [pc, #16]	; (80053d0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80053be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80053c2:	6053      	str	r3, [r2, #4]
}
 80053c4:	bf00      	nop
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	40007000 	.word	0x40007000

080053d4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b088      	sub	sp, #32
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d102      	bne.n	80053e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	f000 bc08 	b.w	8005bf8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053e8:	4b96      	ldr	r3, [pc, #600]	; (8005644 <HAL_RCC_OscConfig+0x270>)
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	f003 030c 	and.w	r3, r3, #12
 80053f0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053f2:	4b94      	ldr	r3, [pc, #592]	; (8005644 <HAL_RCC_OscConfig+0x270>)
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	f003 0303 	and.w	r3, r3, #3
 80053fa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0310 	and.w	r3, r3, #16
 8005404:	2b00      	cmp	r3, #0
 8005406:	f000 80e4 	beq.w	80055d2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d007      	beq.n	8005420 <HAL_RCC_OscConfig+0x4c>
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	2b0c      	cmp	r3, #12
 8005414:	f040 808b 	bne.w	800552e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	2b01      	cmp	r3, #1
 800541c:	f040 8087 	bne.w	800552e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005420:	4b88      	ldr	r3, [pc, #544]	; (8005644 <HAL_RCC_OscConfig+0x270>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0302 	and.w	r3, r3, #2
 8005428:	2b00      	cmp	r3, #0
 800542a:	d005      	beq.n	8005438 <HAL_RCC_OscConfig+0x64>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	699b      	ldr	r3, [r3, #24]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d101      	bne.n	8005438 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e3df      	b.n	8005bf8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a1a      	ldr	r2, [r3, #32]
 800543c:	4b81      	ldr	r3, [pc, #516]	; (8005644 <HAL_RCC_OscConfig+0x270>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 0308 	and.w	r3, r3, #8
 8005444:	2b00      	cmp	r3, #0
 8005446:	d004      	beq.n	8005452 <HAL_RCC_OscConfig+0x7e>
 8005448:	4b7e      	ldr	r3, [pc, #504]	; (8005644 <HAL_RCC_OscConfig+0x270>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005450:	e005      	b.n	800545e <HAL_RCC_OscConfig+0x8a>
 8005452:	4b7c      	ldr	r3, [pc, #496]	; (8005644 <HAL_RCC_OscConfig+0x270>)
 8005454:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005458:	091b      	lsrs	r3, r3, #4
 800545a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800545e:	4293      	cmp	r3, r2
 8005460:	d223      	bcs.n	80054aa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a1b      	ldr	r3, [r3, #32]
 8005466:	4618      	mov	r0, r3
 8005468:	f000 fdcc 	bl	8006004 <RCC_SetFlashLatencyFromMSIRange>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d001      	beq.n	8005476 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e3c0      	b.n	8005bf8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005476:	4b73      	ldr	r3, [pc, #460]	; (8005644 <HAL_RCC_OscConfig+0x270>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a72      	ldr	r2, [pc, #456]	; (8005644 <HAL_RCC_OscConfig+0x270>)
 800547c:	f043 0308 	orr.w	r3, r3, #8
 8005480:	6013      	str	r3, [r2, #0]
 8005482:	4b70      	ldr	r3, [pc, #448]	; (8005644 <HAL_RCC_OscConfig+0x270>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a1b      	ldr	r3, [r3, #32]
 800548e:	496d      	ldr	r1, [pc, #436]	; (8005644 <HAL_RCC_OscConfig+0x270>)
 8005490:	4313      	orrs	r3, r2
 8005492:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005494:	4b6b      	ldr	r3, [pc, #428]	; (8005644 <HAL_RCC_OscConfig+0x270>)
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	69db      	ldr	r3, [r3, #28]
 80054a0:	021b      	lsls	r3, r3, #8
 80054a2:	4968      	ldr	r1, [pc, #416]	; (8005644 <HAL_RCC_OscConfig+0x270>)
 80054a4:	4313      	orrs	r3, r2
 80054a6:	604b      	str	r3, [r1, #4]
 80054a8:	e025      	b.n	80054f6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054aa:	4b66      	ldr	r3, [pc, #408]	; (8005644 <HAL_RCC_OscConfig+0x270>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a65      	ldr	r2, [pc, #404]	; (8005644 <HAL_RCC_OscConfig+0x270>)
 80054b0:	f043 0308 	orr.w	r3, r3, #8
 80054b4:	6013      	str	r3, [r2, #0]
 80054b6:	4b63      	ldr	r3, [pc, #396]	; (8005644 <HAL_RCC_OscConfig+0x270>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a1b      	ldr	r3, [r3, #32]
 80054c2:	4960      	ldr	r1, [pc, #384]	; (8005644 <HAL_RCC_OscConfig+0x270>)
 80054c4:	4313      	orrs	r3, r2
 80054c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054c8:	4b5e      	ldr	r3, [pc, #376]	; (8005644 <HAL_RCC_OscConfig+0x270>)
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	69db      	ldr	r3, [r3, #28]
 80054d4:	021b      	lsls	r3, r3, #8
 80054d6:	495b      	ldr	r1, [pc, #364]	; (8005644 <HAL_RCC_OscConfig+0x270>)
 80054d8:	4313      	orrs	r3, r2
 80054da:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d109      	bne.n	80054f6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	4618      	mov	r0, r3
 80054e8:	f000 fd8c 	bl	8006004 <RCC_SetFlashLatencyFromMSIRange>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d001      	beq.n	80054f6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e380      	b.n	8005bf8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80054f6:	f000 fcc1 	bl	8005e7c <HAL_RCC_GetSysClockFreq>
 80054fa:	4602      	mov	r2, r0
 80054fc:	4b51      	ldr	r3, [pc, #324]	; (8005644 <HAL_RCC_OscConfig+0x270>)
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	091b      	lsrs	r3, r3, #4
 8005502:	f003 030f 	and.w	r3, r3, #15
 8005506:	4950      	ldr	r1, [pc, #320]	; (8005648 <HAL_RCC_OscConfig+0x274>)
 8005508:	5ccb      	ldrb	r3, [r1, r3]
 800550a:	f003 031f 	and.w	r3, r3, #31
 800550e:	fa22 f303 	lsr.w	r3, r2, r3
 8005512:	4a4e      	ldr	r2, [pc, #312]	; (800564c <HAL_RCC_OscConfig+0x278>)
 8005514:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005516:	4b4e      	ldr	r3, [pc, #312]	; (8005650 <HAL_RCC_OscConfig+0x27c>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4618      	mov	r0, r3
 800551c:	f7fd fb6a 	bl	8002bf4 <HAL_InitTick>
 8005520:	4603      	mov	r3, r0
 8005522:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005524:	7bfb      	ldrb	r3, [r7, #15]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d052      	beq.n	80055d0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800552a:	7bfb      	ldrb	r3, [r7, #15]
 800552c:	e364      	b.n	8005bf8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	699b      	ldr	r3, [r3, #24]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d032      	beq.n	800559c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005536:	4b43      	ldr	r3, [pc, #268]	; (8005644 <HAL_RCC_OscConfig+0x270>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a42      	ldr	r2, [pc, #264]	; (8005644 <HAL_RCC_OscConfig+0x270>)
 800553c:	f043 0301 	orr.w	r3, r3, #1
 8005540:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005542:	f7fd fba7 	bl	8002c94 <HAL_GetTick>
 8005546:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005548:	e008      	b.n	800555c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800554a:	f7fd fba3 	bl	8002c94 <HAL_GetTick>
 800554e:	4602      	mov	r2, r0
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	2b02      	cmp	r3, #2
 8005556:	d901      	bls.n	800555c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005558:	2303      	movs	r3, #3
 800555a:	e34d      	b.n	8005bf8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800555c:	4b39      	ldr	r3, [pc, #228]	; (8005644 <HAL_RCC_OscConfig+0x270>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0302 	and.w	r3, r3, #2
 8005564:	2b00      	cmp	r3, #0
 8005566:	d0f0      	beq.n	800554a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005568:	4b36      	ldr	r3, [pc, #216]	; (8005644 <HAL_RCC_OscConfig+0x270>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a35      	ldr	r2, [pc, #212]	; (8005644 <HAL_RCC_OscConfig+0x270>)
 800556e:	f043 0308 	orr.w	r3, r3, #8
 8005572:	6013      	str	r3, [r2, #0]
 8005574:	4b33      	ldr	r3, [pc, #204]	; (8005644 <HAL_RCC_OscConfig+0x270>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a1b      	ldr	r3, [r3, #32]
 8005580:	4930      	ldr	r1, [pc, #192]	; (8005644 <HAL_RCC_OscConfig+0x270>)
 8005582:	4313      	orrs	r3, r2
 8005584:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005586:	4b2f      	ldr	r3, [pc, #188]	; (8005644 <HAL_RCC_OscConfig+0x270>)
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	69db      	ldr	r3, [r3, #28]
 8005592:	021b      	lsls	r3, r3, #8
 8005594:	492b      	ldr	r1, [pc, #172]	; (8005644 <HAL_RCC_OscConfig+0x270>)
 8005596:	4313      	orrs	r3, r2
 8005598:	604b      	str	r3, [r1, #4]
 800559a:	e01a      	b.n	80055d2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800559c:	4b29      	ldr	r3, [pc, #164]	; (8005644 <HAL_RCC_OscConfig+0x270>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a28      	ldr	r2, [pc, #160]	; (8005644 <HAL_RCC_OscConfig+0x270>)
 80055a2:	f023 0301 	bic.w	r3, r3, #1
 80055a6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80055a8:	f7fd fb74 	bl	8002c94 <HAL_GetTick>
 80055ac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80055ae:	e008      	b.n	80055c2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80055b0:	f7fd fb70 	bl	8002c94 <HAL_GetTick>
 80055b4:	4602      	mov	r2, r0
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d901      	bls.n	80055c2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	e31a      	b.n	8005bf8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80055c2:	4b20      	ldr	r3, [pc, #128]	; (8005644 <HAL_RCC_OscConfig+0x270>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 0302 	and.w	r3, r3, #2
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1f0      	bne.n	80055b0 <HAL_RCC_OscConfig+0x1dc>
 80055ce:	e000      	b.n	80055d2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80055d0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 0301 	and.w	r3, r3, #1
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d073      	beq.n	80056c6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	2b08      	cmp	r3, #8
 80055e2:	d005      	beq.n	80055f0 <HAL_RCC_OscConfig+0x21c>
 80055e4:	69bb      	ldr	r3, [r7, #24]
 80055e6:	2b0c      	cmp	r3, #12
 80055e8:	d10e      	bne.n	8005608 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	2b03      	cmp	r3, #3
 80055ee:	d10b      	bne.n	8005608 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055f0:	4b14      	ldr	r3, [pc, #80]	; (8005644 <HAL_RCC_OscConfig+0x270>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d063      	beq.n	80056c4 <HAL_RCC_OscConfig+0x2f0>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d15f      	bne.n	80056c4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e2f7      	b.n	8005bf8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005610:	d106      	bne.n	8005620 <HAL_RCC_OscConfig+0x24c>
 8005612:	4b0c      	ldr	r3, [pc, #48]	; (8005644 <HAL_RCC_OscConfig+0x270>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a0b      	ldr	r2, [pc, #44]	; (8005644 <HAL_RCC_OscConfig+0x270>)
 8005618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800561c:	6013      	str	r3, [r2, #0]
 800561e:	e025      	b.n	800566c <HAL_RCC_OscConfig+0x298>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005628:	d114      	bne.n	8005654 <HAL_RCC_OscConfig+0x280>
 800562a:	4b06      	ldr	r3, [pc, #24]	; (8005644 <HAL_RCC_OscConfig+0x270>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a05      	ldr	r2, [pc, #20]	; (8005644 <HAL_RCC_OscConfig+0x270>)
 8005630:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005634:	6013      	str	r3, [r2, #0]
 8005636:	4b03      	ldr	r3, [pc, #12]	; (8005644 <HAL_RCC_OscConfig+0x270>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a02      	ldr	r2, [pc, #8]	; (8005644 <HAL_RCC_OscConfig+0x270>)
 800563c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005640:	6013      	str	r3, [r2, #0]
 8005642:	e013      	b.n	800566c <HAL_RCC_OscConfig+0x298>
 8005644:	40021000 	.word	0x40021000
 8005648:	08009240 	.word	0x08009240
 800564c:	20004b0c 	.word	0x20004b0c
 8005650:	20004b10 	.word	0x20004b10
 8005654:	4ba0      	ldr	r3, [pc, #640]	; (80058d8 <HAL_RCC_OscConfig+0x504>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a9f      	ldr	r2, [pc, #636]	; (80058d8 <HAL_RCC_OscConfig+0x504>)
 800565a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800565e:	6013      	str	r3, [r2, #0]
 8005660:	4b9d      	ldr	r3, [pc, #628]	; (80058d8 <HAL_RCC_OscConfig+0x504>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a9c      	ldr	r2, [pc, #624]	; (80058d8 <HAL_RCC_OscConfig+0x504>)
 8005666:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800566a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d013      	beq.n	800569c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005674:	f7fd fb0e 	bl	8002c94 <HAL_GetTick>
 8005678:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800567a:	e008      	b.n	800568e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800567c:	f7fd fb0a 	bl	8002c94 <HAL_GetTick>
 8005680:	4602      	mov	r2, r0
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	2b64      	cmp	r3, #100	; 0x64
 8005688:	d901      	bls.n	800568e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e2b4      	b.n	8005bf8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800568e:	4b92      	ldr	r3, [pc, #584]	; (80058d8 <HAL_RCC_OscConfig+0x504>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d0f0      	beq.n	800567c <HAL_RCC_OscConfig+0x2a8>
 800569a:	e014      	b.n	80056c6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800569c:	f7fd fafa 	bl	8002c94 <HAL_GetTick>
 80056a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80056a2:	e008      	b.n	80056b6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056a4:	f7fd faf6 	bl	8002c94 <HAL_GetTick>
 80056a8:	4602      	mov	r2, r0
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	2b64      	cmp	r3, #100	; 0x64
 80056b0:	d901      	bls.n	80056b6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80056b2:	2303      	movs	r3, #3
 80056b4:	e2a0      	b.n	8005bf8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80056b6:	4b88      	ldr	r3, [pc, #544]	; (80058d8 <HAL_RCC_OscConfig+0x504>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d1f0      	bne.n	80056a4 <HAL_RCC_OscConfig+0x2d0>
 80056c2:	e000      	b.n	80056c6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 0302 	and.w	r3, r3, #2
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d060      	beq.n	8005794 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80056d2:	69bb      	ldr	r3, [r7, #24]
 80056d4:	2b04      	cmp	r3, #4
 80056d6:	d005      	beq.n	80056e4 <HAL_RCC_OscConfig+0x310>
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	2b0c      	cmp	r3, #12
 80056dc:	d119      	bne.n	8005712 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d116      	bne.n	8005712 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056e4:	4b7c      	ldr	r3, [pc, #496]	; (80058d8 <HAL_RCC_OscConfig+0x504>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d005      	beq.n	80056fc <HAL_RCC_OscConfig+0x328>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d101      	bne.n	80056fc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	e27d      	b.n	8005bf8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056fc:	4b76      	ldr	r3, [pc, #472]	; (80058d8 <HAL_RCC_OscConfig+0x504>)
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	691b      	ldr	r3, [r3, #16]
 8005708:	061b      	lsls	r3, r3, #24
 800570a:	4973      	ldr	r1, [pc, #460]	; (80058d8 <HAL_RCC_OscConfig+0x504>)
 800570c:	4313      	orrs	r3, r2
 800570e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005710:	e040      	b.n	8005794 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d023      	beq.n	8005762 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800571a:	4b6f      	ldr	r3, [pc, #444]	; (80058d8 <HAL_RCC_OscConfig+0x504>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a6e      	ldr	r2, [pc, #440]	; (80058d8 <HAL_RCC_OscConfig+0x504>)
 8005720:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005724:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005726:	f7fd fab5 	bl	8002c94 <HAL_GetTick>
 800572a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800572c:	e008      	b.n	8005740 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800572e:	f7fd fab1 	bl	8002c94 <HAL_GetTick>
 8005732:	4602      	mov	r2, r0
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	2b02      	cmp	r3, #2
 800573a:	d901      	bls.n	8005740 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800573c:	2303      	movs	r3, #3
 800573e:	e25b      	b.n	8005bf8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005740:	4b65      	ldr	r3, [pc, #404]	; (80058d8 <HAL_RCC_OscConfig+0x504>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005748:	2b00      	cmp	r3, #0
 800574a:	d0f0      	beq.n	800572e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800574c:	4b62      	ldr	r3, [pc, #392]	; (80058d8 <HAL_RCC_OscConfig+0x504>)
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	691b      	ldr	r3, [r3, #16]
 8005758:	061b      	lsls	r3, r3, #24
 800575a:	495f      	ldr	r1, [pc, #380]	; (80058d8 <HAL_RCC_OscConfig+0x504>)
 800575c:	4313      	orrs	r3, r2
 800575e:	604b      	str	r3, [r1, #4]
 8005760:	e018      	b.n	8005794 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005762:	4b5d      	ldr	r3, [pc, #372]	; (80058d8 <HAL_RCC_OscConfig+0x504>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a5c      	ldr	r2, [pc, #368]	; (80058d8 <HAL_RCC_OscConfig+0x504>)
 8005768:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800576c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800576e:	f7fd fa91 	bl	8002c94 <HAL_GetTick>
 8005772:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005774:	e008      	b.n	8005788 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005776:	f7fd fa8d 	bl	8002c94 <HAL_GetTick>
 800577a:	4602      	mov	r2, r0
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	2b02      	cmp	r3, #2
 8005782:	d901      	bls.n	8005788 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005784:	2303      	movs	r3, #3
 8005786:	e237      	b.n	8005bf8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005788:	4b53      	ldr	r3, [pc, #332]	; (80058d8 <HAL_RCC_OscConfig+0x504>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005790:	2b00      	cmp	r3, #0
 8005792:	d1f0      	bne.n	8005776 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0308 	and.w	r3, r3, #8
 800579c:	2b00      	cmp	r3, #0
 800579e:	d03c      	beq.n	800581a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	695b      	ldr	r3, [r3, #20]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d01c      	beq.n	80057e2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057a8:	4b4b      	ldr	r3, [pc, #300]	; (80058d8 <HAL_RCC_OscConfig+0x504>)
 80057aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057ae:	4a4a      	ldr	r2, [pc, #296]	; (80058d8 <HAL_RCC_OscConfig+0x504>)
 80057b0:	f043 0301 	orr.w	r3, r3, #1
 80057b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057b8:	f7fd fa6c 	bl	8002c94 <HAL_GetTick>
 80057bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80057be:	e008      	b.n	80057d2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057c0:	f7fd fa68 	bl	8002c94 <HAL_GetTick>
 80057c4:	4602      	mov	r2, r0
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	2b02      	cmp	r3, #2
 80057cc:	d901      	bls.n	80057d2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80057ce:	2303      	movs	r3, #3
 80057d0:	e212      	b.n	8005bf8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80057d2:	4b41      	ldr	r3, [pc, #260]	; (80058d8 <HAL_RCC_OscConfig+0x504>)
 80057d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057d8:	f003 0302 	and.w	r3, r3, #2
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d0ef      	beq.n	80057c0 <HAL_RCC_OscConfig+0x3ec>
 80057e0:	e01b      	b.n	800581a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057e2:	4b3d      	ldr	r3, [pc, #244]	; (80058d8 <HAL_RCC_OscConfig+0x504>)
 80057e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057e8:	4a3b      	ldr	r2, [pc, #236]	; (80058d8 <HAL_RCC_OscConfig+0x504>)
 80057ea:	f023 0301 	bic.w	r3, r3, #1
 80057ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057f2:	f7fd fa4f 	bl	8002c94 <HAL_GetTick>
 80057f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80057f8:	e008      	b.n	800580c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057fa:	f7fd fa4b 	bl	8002c94 <HAL_GetTick>
 80057fe:	4602      	mov	r2, r0
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	1ad3      	subs	r3, r2, r3
 8005804:	2b02      	cmp	r3, #2
 8005806:	d901      	bls.n	800580c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005808:	2303      	movs	r3, #3
 800580a:	e1f5      	b.n	8005bf8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800580c:	4b32      	ldr	r3, [pc, #200]	; (80058d8 <HAL_RCC_OscConfig+0x504>)
 800580e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005812:	f003 0302 	and.w	r3, r3, #2
 8005816:	2b00      	cmp	r3, #0
 8005818:	d1ef      	bne.n	80057fa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 0304 	and.w	r3, r3, #4
 8005822:	2b00      	cmp	r3, #0
 8005824:	f000 80a6 	beq.w	8005974 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005828:	2300      	movs	r3, #0
 800582a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800582c:	4b2a      	ldr	r3, [pc, #168]	; (80058d8 <HAL_RCC_OscConfig+0x504>)
 800582e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005834:	2b00      	cmp	r3, #0
 8005836:	d10d      	bne.n	8005854 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005838:	4b27      	ldr	r3, [pc, #156]	; (80058d8 <HAL_RCC_OscConfig+0x504>)
 800583a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800583c:	4a26      	ldr	r2, [pc, #152]	; (80058d8 <HAL_RCC_OscConfig+0x504>)
 800583e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005842:	6593      	str	r3, [r2, #88]	; 0x58
 8005844:	4b24      	ldr	r3, [pc, #144]	; (80058d8 <HAL_RCC_OscConfig+0x504>)
 8005846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800584c:	60bb      	str	r3, [r7, #8]
 800584e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005850:	2301      	movs	r3, #1
 8005852:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005854:	4b21      	ldr	r3, [pc, #132]	; (80058dc <HAL_RCC_OscConfig+0x508>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800585c:	2b00      	cmp	r3, #0
 800585e:	d118      	bne.n	8005892 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005860:	4b1e      	ldr	r3, [pc, #120]	; (80058dc <HAL_RCC_OscConfig+0x508>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a1d      	ldr	r2, [pc, #116]	; (80058dc <HAL_RCC_OscConfig+0x508>)
 8005866:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800586a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800586c:	f7fd fa12 	bl	8002c94 <HAL_GetTick>
 8005870:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005872:	e008      	b.n	8005886 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005874:	f7fd fa0e 	bl	8002c94 <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	2b02      	cmp	r3, #2
 8005880:	d901      	bls.n	8005886 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	e1b8      	b.n	8005bf8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005886:	4b15      	ldr	r3, [pc, #84]	; (80058dc <HAL_RCC_OscConfig+0x508>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800588e:	2b00      	cmp	r3, #0
 8005890:	d0f0      	beq.n	8005874 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	2b01      	cmp	r3, #1
 8005898:	d108      	bne.n	80058ac <HAL_RCC_OscConfig+0x4d8>
 800589a:	4b0f      	ldr	r3, [pc, #60]	; (80058d8 <HAL_RCC_OscConfig+0x504>)
 800589c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058a0:	4a0d      	ldr	r2, [pc, #52]	; (80058d8 <HAL_RCC_OscConfig+0x504>)
 80058a2:	f043 0301 	orr.w	r3, r3, #1
 80058a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80058aa:	e029      	b.n	8005900 <HAL_RCC_OscConfig+0x52c>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	2b05      	cmp	r3, #5
 80058b2:	d115      	bne.n	80058e0 <HAL_RCC_OscConfig+0x50c>
 80058b4:	4b08      	ldr	r3, [pc, #32]	; (80058d8 <HAL_RCC_OscConfig+0x504>)
 80058b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ba:	4a07      	ldr	r2, [pc, #28]	; (80058d8 <HAL_RCC_OscConfig+0x504>)
 80058bc:	f043 0304 	orr.w	r3, r3, #4
 80058c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80058c4:	4b04      	ldr	r3, [pc, #16]	; (80058d8 <HAL_RCC_OscConfig+0x504>)
 80058c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ca:	4a03      	ldr	r2, [pc, #12]	; (80058d8 <HAL_RCC_OscConfig+0x504>)
 80058cc:	f043 0301 	orr.w	r3, r3, #1
 80058d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80058d4:	e014      	b.n	8005900 <HAL_RCC_OscConfig+0x52c>
 80058d6:	bf00      	nop
 80058d8:	40021000 	.word	0x40021000
 80058dc:	40007000 	.word	0x40007000
 80058e0:	4b9d      	ldr	r3, [pc, #628]	; (8005b58 <HAL_RCC_OscConfig+0x784>)
 80058e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058e6:	4a9c      	ldr	r2, [pc, #624]	; (8005b58 <HAL_RCC_OscConfig+0x784>)
 80058e8:	f023 0301 	bic.w	r3, r3, #1
 80058ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80058f0:	4b99      	ldr	r3, [pc, #612]	; (8005b58 <HAL_RCC_OscConfig+0x784>)
 80058f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058f6:	4a98      	ldr	r2, [pc, #608]	; (8005b58 <HAL_RCC_OscConfig+0x784>)
 80058f8:	f023 0304 	bic.w	r3, r3, #4
 80058fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d016      	beq.n	8005936 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005908:	f7fd f9c4 	bl	8002c94 <HAL_GetTick>
 800590c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800590e:	e00a      	b.n	8005926 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005910:	f7fd f9c0 	bl	8002c94 <HAL_GetTick>
 8005914:	4602      	mov	r2, r0
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	1ad3      	subs	r3, r2, r3
 800591a:	f241 3288 	movw	r2, #5000	; 0x1388
 800591e:	4293      	cmp	r3, r2
 8005920:	d901      	bls.n	8005926 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005922:	2303      	movs	r3, #3
 8005924:	e168      	b.n	8005bf8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005926:	4b8c      	ldr	r3, [pc, #560]	; (8005b58 <HAL_RCC_OscConfig+0x784>)
 8005928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800592c:	f003 0302 	and.w	r3, r3, #2
 8005930:	2b00      	cmp	r3, #0
 8005932:	d0ed      	beq.n	8005910 <HAL_RCC_OscConfig+0x53c>
 8005934:	e015      	b.n	8005962 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005936:	f7fd f9ad 	bl	8002c94 <HAL_GetTick>
 800593a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800593c:	e00a      	b.n	8005954 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800593e:	f7fd f9a9 	bl	8002c94 <HAL_GetTick>
 8005942:	4602      	mov	r2, r0
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	f241 3288 	movw	r2, #5000	; 0x1388
 800594c:	4293      	cmp	r3, r2
 800594e:	d901      	bls.n	8005954 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005950:	2303      	movs	r3, #3
 8005952:	e151      	b.n	8005bf8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005954:	4b80      	ldr	r3, [pc, #512]	; (8005b58 <HAL_RCC_OscConfig+0x784>)
 8005956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800595a:	f003 0302 	and.w	r3, r3, #2
 800595e:	2b00      	cmp	r3, #0
 8005960:	d1ed      	bne.n	800593e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005962:	7ffb      	ldrb	r3, [r7, #31]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d105      	bne.n	8005974 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005968:	4b7b      	ldr	r3, [pc, #492]	; (8005b58 <HAL_RCC_OscConfig+0x784>)
 800596a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800596c:	4a7a      	ldr	r2, [pc, #488]	; (8005b58 <HAL_RCC_OscConfig+0x784>)
 800596e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005972:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 0320 	and.w	r3, r3, #32
 800597c:	2b00      	cmp	r3, #0
 800597e:	d03c      	beq.n	80059fa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005984:	2b00      	cmp	r3, #0
 8005986:	d01c      	beq.n	80059c2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005988:	4b73      	ldr	r3, [pc, #460]	; (8005b58 <HAL_RCC_OscConfig+0x784>)
 800598a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800598e:	4a72      	ldr	r2, [pc, #456]	; (8005b58 <HAL_RCC_OscConfig+0x784>)
 8005990:	f043 0301 	orr.w	r3, r3, #1
 8005994:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005998:	f7fd f97c 	bl	8002c94 <HAL_GetTick>
 800599c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800599e:	e008      	b.n	80059b2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80059a0:	f7fd f978 	bl	8002c94 <HAL_GetTick>
 80059a4:	4602      	mov	r2, r0
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	d901      	bls.n	80059b2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e122      	b.n	8005bf8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80059b2:	4b69      	ldr	r3, [pc, #420]	; (8005b58 <HAL_RCC_OscConfig+0x784>)
 80059b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059b8:	f003 0302 	and.w	r3, r3, #2
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d0ef      	beq.n	80059a0 <HAL_RCC_OscConfig+0x5cc>
 80059c0:	e01b      	b.n	80059fa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80059c2:	4b65      	ldr	r3, [pc, #404]	; (8005b58 <HAL_RCC_OscConfig+0x784>)
 80059c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059c8:	4a63      	ldr	r2, [pc, #396]	; (8005b58 <HAL_RCC_OscConfig+0x784>)
 80059ca:	f023 0301 	bic.w	r3, r3, #1
 80059ce:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059d2:	f7fd f95f 	bl	8002c94 <HAL_GetTick>
 80059d6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80059d8:	e008      	b.n	80059ec <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80059da:	f7fd f95b 	bl	8002c94 <HAL_GetTick>
 80059de:	4602      	mov	r2, r0
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	2b02      	cmp	r3, #2
 80059e6:	d901      	bls.n	80059ec <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80059e8:	2303      	movs	r3, #3
 80059ea:	e105      	b.n	8005bf8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80059ec:	4b5a      	ldr	r3, [pc, #360]	; (8005b58 <HAL_RCC_OscConfig+0x784>)
 80059ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059f2:	f003 0302 	and.w	r3, r3, #2
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d1ef      	bne.n	80059da <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	f000 80f9 	beq.w	8005bf6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a08:	2b02      	cmp	r3, #2
 8005a0a:	f040 80cf 	bne.w	8005bac <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005a0e:	4b52      	ldr	r3, [pc, #328]	; (8005b58 <HAL_RCC_OscConfig+0x784>)
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	f003 0203 	and.w	r2, r3, #3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d12c      	bne.n	8005a7c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a2c:	3b01      	subs	r3, #1
 8005a2e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d123      	bne.n	8005a7c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a3e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d11b      	bne.n	8005a7c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a4e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d113      	bne.n	8005a7c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a5e:	085b      	lsrs	r3, r3, #1
 8005a60:	3b01      	subs	r3, #1
 8005a62:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d109      	bne.n	8005a7c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a72:	085b      	lsrs	r3, r3, #1
 8005a74:	3b01      	subs	r3, #1
 8005a76:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d071      	beq.n	8005b60 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005a7c:	69bb      	ldr	r3, [r7, #24]
 8005a7e:	2b0c      	cmp	r3, #12
 8005a80:	d068      	beq.n	8005b54 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005a82:	4b35      	ldr	r3, [pc, #212]	; (8005b58 <HAL_RCC_OscConfig+0x784>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d105      	bne.n	8005a9a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005a8e:	4b32      	ldr	r3, [pc, #200]	; (8005b58 <HAL_RCC_OscConfig+0x784>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d001      	beq.n	8005a9e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e0ac      	b.n	8005bf8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005a9e:	4b2e      	ldr	r3, [pc, #184]	; (8005b58 <HAL_RCC_OscConfig+0x784>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a2d      	ldr	r2, [pc, #180]	; (8005b58 <HAL_RCC_OscConfig+0x784>)
 8005aa4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005aa8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005aaa:	f7fd f8f3 	bl	8002c94 <HAL_GetTick>
 8005aae:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ab0:	e008      	b.n	8005ac4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ab2:	f7fd f8ef 	bl	8002c94 <HAL_GetTick>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	1ad3      	subs	r3, r2, r3
 8005abc:	2b02      	cmp	r3, #2
 8005abe:	d901      	bls.n	8005ac4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005ac0:	2303      	movs	r3, #3
 8005ac2:	e099      	b.n	8005bf8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ac4:	4b24      	ldr	r3, [pc, #144]	; (8005b58 <HAL_RCC_OscConfig+0x784>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d1f0      	bne.n	8005ab2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ad0:	4b21      	ldr	r3, [pc, #132]	; (8005b58 <HAL_RCC_OscConfig+0x784>)
 8005ad2:	68da      	ldr	r2, [r3, #12]
 8005ad4:	4b21      	ldr	r3, [pc, #132]	; (8005b5c <HAL_RCC_OscConfig+0x788>)
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005ae0:	3a01      	subs	r2, #1
 8005ae2:	0112      	lsls	r2, r2, #4
 8005ae4:	4311      	orrs	r1, r2
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005aea:	0212      	lsls	r2, r2, #8
 8005aec:	4311      	orrs	r1, r2
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005af2:	0852      	lsrs	r2, r2, #1
 8005af4:	3a01      	subs	r2, #1
 8005af6:	0552      	lsls	r2, r2, #21
 8005af8:	4311      	orrs	r1, r2
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005afe:	0852      	lsrs	r2, r2, #1
 8005b00:	3a01      	subs	r2, #1
 8005b02:	0652      	lsls	r2, r2, #25
 8005b04:	4311      	orrs	r1, r2
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b0a:	06d2      	lsls	r2, r2, #27
 8005b0c:	430a      	orrs	r2, r1
 8005b0e:	4912      	ldr	r1, [pc, #72]	; (8005b58 <HAL_RCC_OscConfig+0x784>)
 8005b10:	4313      	orrs	r3, r2
 8005b12:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005b14:	4b10      	ldr	r3, [pc, #64]	; (8005b58 <HAL_RCC_OscConfig+0x784>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a0f      	ldr	r2, [pc, #60]	; (8005b58 <HAL_RCC_OscConfig+0x784>)
 8005b1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b1e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b20:	4b0d      	ldr	r3, [pc, #52]	; (8005b58 <HAL_RCC_OscConfig+0x784>)
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	4a0c      	ldr	r2, [pc, #48]	; (8005b58 <HAL_RCC_OscConfig+0x784>)
 8005b26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b2a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005b2c:	f7fd f8b2 	bl	8002c94 <HAL_GetTick>
 8005b30:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b32:	e008      	b.n	8005b46 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b34:	f7fd f8ae 	bl	8002c94 <HAL_GetTick>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	1ad3      	subs	r3, r2, r3
 8005b3e:	2b02      	cmp	r3, #2
 8005b40:	d901      	bls.n	8005b46 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	e058      	b.n	8005bf8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b46:	4b04      	ldr	r3, [pc, #16]	; (8005b58 <HAL_RCC_OscConfig+0x784>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d0f0      	beq.n	8005b34 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005b52:	e050      	b.n	8005bf6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e04f      	b.n	8005bf8 <HAL_RCC_OscConfig+0x824>
 8005b58:	40021000 	.word	0x40021000
 8005b5c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b60:	4b27      	ldr	r3, [pc, #156]	; (8005c00 <HAL_RCC_OscConfig+0x82c>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d144      	bne.n	8005bf6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005b6c:	4b24      	ldr	r3, [pc, #144]	; (8005c00 <HAL_RCC_OscConfig+0x82c>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a23      	ldr	r2, [pc, #140]	; (8005c00 <HAL_RCC_OscConfig+0x82c>)
 8005b72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b76:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b78:	4b21      	ldr	r3, [pc, #132]	; (8005c00 <HAL_RCC_OscConfig+0x82c>)
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	4a20      	ldr	r2, [pc, #128]	; (8005c00 <HAL_RCC_OscConfig+0x82c>)
 8005b7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b82:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005b84:	f7fd f886 	bl	8002c94 <HAL_GetTick>
 8005b88:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b8a:	e008      	b.n	8005b9e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b8c:	f7fd f882 	bl	8002c94 <HAL_GetTick>
 8005b90:	4602      	mov	r2, r0
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	2b02      	cmp	r3, #2
 8005b98:	d901      	bls.n	8005b9e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	e02c      	b.n	8005bf8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b9e:	4b18      	ldr	r3, [pc, #96]	; (8005c00 <HAL_RCC_OscConfig+0x82c>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d0f0      	beq.n	8005b8c <HAL_RCC_OscConfig+0x7b8>
 8005baa:	e024      	b.n	8005bf6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	2b0c      	cmp	r3, #12
 8005bb0:	d01f      	beq.n	8005bf2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bb2:	4b13      	ldr	r3, [pc, #76]	; (8005c00 <HAL_RCC_OscConfig+0x82c>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a12      	ldr	r2, [pc, #72]	; (8005c00 <HAL_RCC_OscConfig+0x82c>)
 8005bb8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bbe:	f7fd f869 	bl	8002c94 <HAL_GetTick>
 8005bc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bc4:	e008      	b.n	8005bd8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bc6:	f7fd f865 	bl	8002c94 <HAL_GetTick>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	1ad3      	subs	r3, r2, r3
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d901      	bls.n	8005bd8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	e00f      	b.n	8005bf8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bd8:	4b09      	ldr	r3, [pc, #36]	; (8005c00 <HAL_RCC_OscConfig+0x82c>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d1f0      	bne.n	8005bc6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005be4:	4b06      	ldr	r3, [pc, #24]	; (8005c00 <HAL_RCC_OscConfig+0x82c>)
 8005be6:	68da      	ldr	r2, [r3, #12]
 8005be8:	4905      	ldr	r1, [pc, #20]	; (8005c00 <HAL_RCC_OscConfig+0x82c>)
 8005bea:	4b06      	ldr	r3, [pc, #24]	; (8005c04 <HAL_RCC_OscConfig+0x830>)
 8005bec:	4013      	ands	r3, r2
 8005bee:	60cb      	str	r3, [r1, #12]
 8005bf0:	e001      	b.n	8005bf6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e000      	b.n	8005bf8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8005bf6:	2300      	movs	r3, #0
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3720      	adds	r7, #32
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	40021000 	.word	0x40021000
 8005c04:	feeefffc 	.word	0xfeeefffc

08005c08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b086      	sub	sp, #24
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005c12:	2300      	movs	r3, #0
 8005c14:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d101      	bne.n	8005c20 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e11d      	b.n	8005e5c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c20:	4b90      	ldr	r3, [pc, #576]	; (8005e64 <HAL_RCC_ClockConfig+0x25c>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 030f 	and.w	r3, r3, #15
 8005c28:	683a      	ldr	r2, [r7, #0]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d910      	bls.n	8005c50 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c2e:	4b8d      	ldr	r3, [pc, #564]	; (8005e64 <HAL_RCC_ClockConfig+0x25c>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f023 020f 	bic.w	r2, r3, #15
 8005c36:	498b      	ldr	r1, [pc, #556]	; (8005e64 <HAL_RCC_ClockConfig+0x25c>)
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c3e:	4b89      	ldr	r3, [pc, #548]	; (8005e64 <HAL_RCC_ClockConfig+0x25c>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 030f 	and.w	r3, r3, #15
 8005c46:	683a      	ldr	r2, [r7, #0]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d001      	beq.n	8005c50 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e105      	b.n	8005e5c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 0302 	and.w	r3, r3, #2
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d010      	beq.n	8005c7e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	689a      	ldr	r2, [r3, #8]
 8005c60:	4b81      	ldr	r3, [pc, #516]	; (8005e68 <HAL_RCC_ClockConfig+0x260>)
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d908      	bls.n	8005c7e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c6c:	4b7e      	ldr	r3, [pc, #504]	; (8005e68 <HAL_RCC_ClockConfig+0x260>)
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	497b      	ldr	r1, [pc, #492]	; (8005e68 <HAL_RCC_ClockConfig+0x260>)
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 0301 	and.w	r3, r3, #1
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d079      	beq.n	8005d7e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	2b03      	cmp	r3, #3
 8005c90:	d11e      	bne.n	8005cd0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c92:	4b75      	ldr	r3, [pc, #468]	; (8005e68 <HAL_RCC_ClockConfig+0x260>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d101      	bne.n	8005ca2 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e0dc      	b.n	8005e5c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005ca2:	f000 fa09 	bl	80060b8 <RCC_GetSysClockFreqFromPLLSource>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	4a70      	ldr	r2, [pc, #448]	; (8005e6c <HAL_RCC_ClockConfig+0x264>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d946      	bls.n	8005d3c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005cae:	4b6e      	ldr	r3, [pc, #440]	; (8005e68 <HAL_RCC_ClockConfig+0x260>)
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d140      	bne.n	8005d3c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005cba:	4b6b      	ldr	r3, [pc, #428]	; (8005e68 <HAL_RCC_ClockConfig+0x260>)
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cc2:	4a69      	ldr	r2, [pc, #420]	; (8005e68 <HAL_RCC_ClockConfig+0x260>)
 8005cc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cc8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005cca:	2380      	movs	r3, #128	; 0x80
 8005ccc:	617b      	str	r3, [r7, #20]
 8005cce:	e035      	b.n	8005d3c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	2b02      	cmp	r3, #2
 8005cd6:	d107      	bne.n	8005ce8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005cd8:	4b63      	ldr	r3, [pc, #396]	; (8005e68 <HAL_RCC_ClockConfig+0x260>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d115      	bne.n	8005d10 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e0b9      	b.n	8005e5c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d107      	bne.n	8005d00 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005cf0:	4b5d      	ldr	r3, [pc, #372]	; (8005e68 <HAL_RCC_ClockConfig+0x260>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 0302 	and.w	r3, r3, #2
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d109      	bne.n	8005d10 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e0ad      	b.n	8005e5c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d00:	4b59      	ldr	r3, [pc, #356]	; (8005e68 <HAL_RCC_ClockConfig+0x260>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d101      	bne.n	8005d10 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e0a5      	b.n	8005e5c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005d10:	f000 f8b4 	bl	8005e7c <HAL_RCC_GetSysClockFreq>
 8005d14:	4603      	mov	r3, r0
 8005d16:	4a55      	ldr	r2, [pc, #340]	; (8005e6c <HAL_RCC_ClockConfig+0x264>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d90f      	bls.n	8005d3c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005d1c:	4b52      	ldr	r3, [pc, #328]	; (8005e68 <HAL_RCC_ClockConfig+0x260>)
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d109      	bne.n	8005d3c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005d28:	4b4f      	ldr	r3, [pc, #316]	; (8005e68 <HAL_RCC_ClockConfig+0x260>)
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d30:	4a4d      	ldr	r2, [pc, #308]	; (8005e68 <HAL_RCC_ClockConfig+0x260>)
 8005d32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d36:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005d38:	2380      	movs	r3, #128	; 0x80
 8005d3a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005d3c:	4b4a      	ldr	r3, [pc, #296]	; (8005e68 <HAL_RCC_ClockConfig+0x260>)
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	f023 0203 	bic.w	r2, r3, #3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	4947      	ldr	r1, [pc, #284]	; (8005e68 <HAL_RCC_ClockConfig+0x260>)
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d4e:	f7fc ffa1 	bl	8002c94 <HAL_GetTick>
 8005d52:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d54:	e00a      	b.n	8005d6c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d56:	f7fc ff9d 	bl	8002c94 <HAL_GetTick>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	1ad3      	subs	r3, r2, r3
 8005d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d901      	bls.n	8005d6c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005d68:	2303      	movs	r3, #3
 8005d6a:	e077      	b.n	8005e5c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d6c:	4b3e      	ldr	r3, [pc, #248]	; (8005e68 <HAL_RCC_ClockConfig+0x260>)
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	f003 020c 	and.w	r2, r3, #12
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d1eb      	bne.n	8005d56 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	2b80      	cmp	r3, #128	; 0x80
 8005d82:	d105      	bne.n	8005d90 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005d84:	4b38      	ldr	r3, [pc, #224]	; (8005e68 <HAL_RCC_ClockConfig+0x260>)
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	4a37      	ldr	r2, [pc, #220]	; (8005e68 <HAL_RCC_ClockConfig+0x260>)
 8005d8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d8e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 0302 	and.w	r3, r3, #2
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d010      	beq.n	8005dbe <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	689a      	ldr	r2, [r3, #8]
 8005da0:	4b31      	ldr	r3, [pc, #196]	; (8005e68 <HAL_RCC_ClockConfig+0x260>)
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d208      	bcs.n	8005dbe <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005dac:	4b2e      	ldr	r3, [pc, #184]	; (8005e68 <HAL_RCC_ClockConfig+0x260>)
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	492b      	ldr	r1, [pc, #172]	; (8005e68 <HAL_RCC_ClockConfig+0x260>)
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005dbe:	4b29      	ldr	r3, [pc, #164]	; (8005e64 <HAL_RCC_ClockConfig+0x25c>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 030f 	and.w	r3, r3, #15
 8005dc6:	683a      	ldr	r2, [r7, #0]
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d210      	bcs.n	8005dee <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dcc:	4b25      	ldr	r3, [pc, #148]	; (8005e64 <HAL_RCC_ClockConfig+0x25c>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f023 020f 	bic.w	r2, r3, #15
 8005dd4:	4923      	ldr	r1, [pc, #140]	; (8005e64 <HAL_RCC_ClockConfig+0x25c>)
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ddc:	4b21      	ldr	r3, [pc, #132]	; (8005e64 <HAL_RCC_ClockConfig+0x25c>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 030f 	and.w	r3, r3, #15
 8005de4:	683a      	ldr	r2, [r7, #0]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d001      	beq.n	8005dee <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e036      	b.n	8005e5c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 0304 	and.w	r3, r3, #4
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d008      	beq.n	8005e0c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005dfa:	4b1b      	ldr	r3, [pc, #108]	; (8005e68 <HAL_RCC_ClockConfig+0x260>)
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	4918      	ldr	r1, [pc, #96]	; (8005e68 <HAL_RCC_ClockConfig+0x260>)
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 0308 	and.w	r3, r3, #8
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d009      	beq.n	8005e2c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e18:	4b13      	ldr	r3, [pc, #76]	; (8005e68 <HAL_RCC_ClockConfig+0x260>)
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	00db      	lsls	r3, r3, #3
 8005e26:	4910      	ldr	r1, [pc, #64]	; (8005e68 <HAL_RCC_ClockConfig+0x260>)
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005e2c:	f000 f826 	bl	8005e7c <HAL_RCC_GetSysClockFreq>
 8005e30:	4602      	mov	r2, r0
 8005e32:	4b0d      	ldr	r3, [pc, #52]	; (8005e68 <HAL_RCC_ClockConfig+0x260>)
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	091b      	lsrs	r3, r3, #4
 8005e38:	f003 030f 	and.w	r3, r3, #15
 8005e3c:	490c      	ldr	r1, [pc, #48]	; (8005e70 <HAL_RCC_ClockConfig+0x268>)
 8005e3e:	5ccb      	ldrb	r3, [r1, r3]
 8005e40:	f003 031f 	and.w	r3, r3, #31
 8005e44:	fa22 f303 	lsr.w	r3, r2, r3
 8005e48:	4a0a      	ldr	r2, [pc, #40]	; (8005e74 <HAL_RCC_ClockConfig+0x26c>)
 8005e4a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005e4c:	4b0a      	ldr	r3, [pc, #40]	; (8005e78 <HAL_RCC_ClockConfig+0x270>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4618      	mov	r0, r3
 8005e52:	f7fc fecf 	bl	8002bf4 <HAL_InitTick>
 8005e56:	4603      	mov	r3, r0
 8005e58:	73fb      	strb	r3, [r7, #15]

  return status;
 8005e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3718      	adds	r7, #24
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	40022000 	.word	0x40022000
 8005e68:	40021000 	.word	0x40021000
 8005e6c:	04c4b400 	.word	0x04c4b400
 8005e70:	08009240 	.word	0x08009240
 8005e74:	20004b0c 	.word	0x20004b0c
 8005e78:	20004b10 	.word	0x20004b10

08005e7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b089      	sub	sp, #36	; 0x24
 8005e80:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005e82:	2300      	movs	r3, #0
 8005e84:	61fb      	str	r3, [r7, #28]
 8005e86:	2300      	movs	r3, #0
 8005e88:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e8a:	4b3e      	ldr	r3, [pc, #248]	; (8005f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	f003 030c 	and.w	r3, r3, #12
 8005e92:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e94:	4b3b      	ldr	r3, [pc, #236]	; (8005f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	f003 0303 	and.w	r3, r3, #3
 8005e9c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d005      	beq.n	8005eb0 <HAL_RCC_GetSysClockFreq+0x34>
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	2b0c      	cmp	r3, #12
 8005ea8:	d121      	bne.n	8005eee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d11e      	bne.n	8005eee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005eb0:	4b34      	ldr	r3, [pc, #208]	; (8005f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 0308 	and.w	r3, r3, #8
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d107      	bne.n	8005ecc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005ebc:	4b31      	ldr	r3, [pc, #196]	; (8005f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ebe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ec2:	0a1b      	lsrs	r3, r3, #8
 8005ec4:	f003 030f 	and.w	r3, r3, #15
 8005ec8:	61fb      	str	r3, [r7, #28]
 8005eca:	e005      	b.n	8005ed8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005ecc:	4b2d      	ldr	r3, [pc, #180]	; (8005f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	091b      	lsrs	r3, r3, #4
 8005ed2:	f003 030f 	and.w	r3, r3, #15
 8005ed6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005ed8:	4a2b      	ldr	r2, [pc, #172]	; (8005f88 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ee0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d10d      	bne.n	8005f04 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005eec:	e00a      	b.n	8005f04 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	2b04      	cmp	r3, #4
 8005ef2:	d102      	bne.n	8005efa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005ef4:	4b25      	ldr	r3, [pc, #148]	; (8005f8c <HAL_RCC_GetSysClockFreq+0x110>)
 8005ef6:	61bb      	str	r3, [r7, #24]
 8005ef8:	e004      	b.n	8005f04 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	2b08      	cmp	r3, #8
 8005efe:	d101      	bne.n	8005f04 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005f00:	4b23      	ldr	r3, [pc, #140]	; (8005f90 <HAL_RCC_GetSysClockFreq+0x114>)
 8005f02:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	2b0c      	cmp	r3, #12
 8005f08:	d134      	bne.n	8005f74 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005f0a:	4b1e      	ldr	r3, [pc, #120]	; (8005f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	f003 0303 	and.w	r3, r3, #3
 8005f12:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	2b02      	cmp	r3, #2
 8005f18:	d003      	beq.n	8005f22 <HAL_RCC_GetSysClockFreq+0xa6>
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	2b03      	cmp	r3, #3
 8005f1e:	d003      	beq.n	8005f28 <HAL_RCC_GetSysClockFreq+0xac>
 8005f20:	e005      	b.n	8005f2e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005f22:	4b1a      	ldr	r3, [pc, #104]	; (8005f8c <HAL_RCC_GetSysClockFreq+0x110>)
 8005f24:	617b      	str	r3, [r7, #20]
      break;
 8005f26:	e005      	b.n	8005f34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005f28:	4b19      	ldr	r3, [pc, #100]	; (8005f90 <HAL_RCC_GetSysClockFreq+0x114>)
 8005f2a:	617b      	str	r3, [r7, #20]
      break;
 8005f2c:	e002      	b.n	8005f34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	617b      	str	r3, [r7, #20]
      break;
 8005f32:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f34:	4b13      	ldr	r3, [pc, #76]	; (8005f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	091b      	lsrs	r3, r3, #4
 8005f3a:	f003 030f 	and.w	r3, r3, #15
 8005f3e:	3301      	adds	r3, #1
 8005f40:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005f42:	4b10      	ldr	r3, [pc, #64]	; (8005f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	0a1b      	lsrs	r3, r3, #8
 8005f48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f4c:	697a      	ldr	r2, [r7, #20]
 8005f4e:	fb03 f202 	mul.w	r2, r3, r2
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f58:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005f5a:	4b0a      	ldr	r3, [pc, #40]	; (8005f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	0e5b      	lsrs	r3, r3, #25
 8005f60:	f003 0303 	and.w	r3, r3, #3
 8005f64:	3301      	adds	r3, #1
 8005f66:	005b      	lsls	r3, r3, #1
 8005f68:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005f6a:	697a      	ldr	r2, [r7, #20]
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f72:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005f74:	69bb      	ldr	r3, [r7, #24]
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3724      	adds	r7, #36	; 0x24
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop
 8005f84:	40021000 	.word	0x40021000
 8005f88:	08009258 	.word	0x08009258
 8005f8c:	00f42400 	.word	0x00f42400
 8005f90:	007a1200 	.word	0x007a1200

08005f94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f94:	b480      	push	{r7}
 8005f96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f98:	4b03      	ldr	r3, [pc, #12]	; (8005fa8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr
 8005fa6:	bf00      	nop
 8005fa8:	20004b0c 	.word	0x20004b0c

08005fac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005fb0:	f7ff fff0 	bl	8005f94 <HAL_RCC_GetHCLKFreq>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	4b06      	ldr	r3, [pc, #24]	; (8005fd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	0a1b      	lsrs	r3, r3, #8
 8005fbc:	f003 0307 	and.w	r3, r3, #7
 8005fc0:	4904      	ldr	r1, [pc, #16]	; (8005fd4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005fc2:	5ccb      	ldrb	r3, [r1, r3]
 8005fc4:	f003 031f 	and.w	r3, r3, #31
 8005fc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	40021000 	.word	0x40021000
 8005fd4:	08009250 	.word	0x08009250

08005fd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005fdc:	f7ff ffda 	bl	8005f94 <HAL_RCC_GetHCLKFreq>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	4b06      	ldr	r3, [pc, #24]	; (8005ffc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	0adb      	lsrs	r3, r3, #11
 8005fe8:	f003 0307 	and.w	r3, r3, #7
 8005fec:	4904      	ldr	r1, [pc, #16]	; (8006000 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005fee:	5ccb      	ldrb	r3, [r1, r3]
 8005ff0:	f003 031f 	and.w	r3, r3, #31
 8005ff4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	bd80      	pop	{r7, pc}
 8005ffc:	40021000 	.word	0x40021000
 8006000:	08009250 	.word	0x08009250

08006004 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b086      	sub	sp, #24
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800600c:	2300      	movs	r3, #0
 800600e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006010:	4b27      	ldr	r3, [pc, #156]	; (80060b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006018:	2b00      	cmp	r3, #0
 800601a:	d003      	beq.n	8006024 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800601c:	f7ff f906 	bl	800522c <HAL_PWREx_GetVoltageRange>
 8006020:	6178      	str	r0, [r7, #20]
 8006022:	e014      	b.n	800604e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006024:	4b22      	ldr	r3, [pc, #136]	; (80060b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006028:	4a21      	ldr	r2, [pc, #132]	; (80060b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800602a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800602e:	6593      	str	r3, [r2, #88]	; 0x58
 8006030:	4b1f      	ldr	r3, [pc, #124]	; (80060b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006038:	60fb      	str	r3, [r7, #12]
 800603a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800603c:	f7ff f8f6 	bl	800522c <HAL_PWREx_GetVoltageRange>
 8006040:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006042:	4b1b      	ldr	r3, [pc, #108]	; (80060b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006046:	4a1a      	ldr	r2, [pc, #104]	; (80060b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006048:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800604c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006054:	d10b      	bne.n	800606e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2b80      	cmp	r3, #128	; 0x80
 800605a:	d913      	bls.n	8006084 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2ba0      	cmp	r3, #160	; 0xa0
 8006060:	d902      	bls.n	8006068 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006062:	2302      	movs	r3, #2
 8006064:	613b      	str	r3, [r7, #16]
 8006066:	e00d      	b.n	8006084 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006068:	2301      	movs	r3, #1
 800606a:	613b      	str	r3, [r7, #16]
 800606c:	e00a      	b.n	8006084 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2b7f      	cmp	r3, #127	; 0x7f
 8006072:	d902      	bls.n	800607a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8006074:	2302      	movs	r3, #2
 8006076:	613b      	str	r3, [r7, #16]
 8006078:	e004      	b.n	8006084 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2b70      	cmp	r3, #112	; 0x70
 800607e:	d101      	bne.n	8006084 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006080:	2301      	movs	r3, #1
 8006082:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006084:	4b0b      	ldr	r3, [pc, #44]	; (80060b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f023 020f 	bic.w	r2, r3, #15
 800608c:	4909      	ldr	r1, [pc, #36]	; (80060b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	4313      	orrs	r3, r2
 8006092:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006094:	4b07      	ldr	r3, [pc, #28]	; (80060b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 030f 	and.w	r3, r3, #15
 800609c:	693a      	ldr	r2, [r7, #16]
 800609e:	429a      	cmp	r2, r3
 80060a0:	d001      	beq.n	80060a6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e000      	b.n	80060a8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80060a6:	2300      	movs	r3, #0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3718      	adds	r7, #24
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	40021000 	.word	0x40021000
 80060b4:	40022000 	.word	0x40022000

080060b8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b087      	sub	sp, #28
 80060bc:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80060be:	4b2d      	ldr	r3, [pc, #180]	; (8006174 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	f003 0303 	and.w	r3, r3, #3
 80060c6:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2b03      	cmp	r3, #3
 80060cc:	d00b      	beq.n	80060e6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2b03      	cmp	r3, #3
 80060d2:	d825      	bhi.n	8006120 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d008      	beq.n	80060ec <RCC_GetSysClockFreqFromPLLSource+0x34>
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2b02      	cmp	r3, #2
 80060de:	d11f      	bne.n	8006120 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80060e0:	4b25      	ldr	r3, [pc, #148]	; (8006178 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80060e2:	613b      	str	r3, [r7, #16]
    break;
 80060e4:	e01f      	b.n	8006126 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80060e6:	4b25      	ldr	r3, [pc, #148]	; (800617c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80060e8:	613b      	str	r3, [r7, #16]
    break;
 80060ea:	e01c      	b.n	8006126 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80060ec:	4b21      	ldr	r3, [pc, #132]	; (8006174 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f003 0308 	and.w	r3, r3, #8
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d107      	bne.n	8006108 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80060f8:	4b1e      	ldr	r3, [pc, #120]	; (8006174 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80060fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060fe:	0a1b      	lsrs	r3, r3, #8
 8006100:	f003 030f 	and.w	r3, r3, #15
 8006104:	617b      	str	r3, [r7, #20]
 8006106:	e005      	b.n	8006114 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006108:	4b1a      	ldr	r3, [pc, #104]	; (8006174 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	091b      	lsrs	r3, r3, #4
 800610e:	f003 030f 	and.w	r3, r3, #15
 8006112:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8006114:	4a1a      	ldr	r2, [pc, #104]	; (8006180 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800611c:	613b      	str	r3, [r7, #16]
    break;
 800611e:	e002      	b.n	8006126 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8006120:	2300      	movs	r3, #0
 8006122:	613b      	str	r3, [r7, #16]
    break;
 8006124:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006126:	4b13      	ldr	r3, [pc, #76]	; (8006174 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	091b      	lsrs	r3, r3, #4
 800612c:	f003 030f 	and.w	r3, r3, #15
 8006130:	3301      	adds	r3, #1
 8006132:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006134:	4b0f      	ldr	r3, [pc, #60]	; (8006174 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	0a1b      	lsrs	r3, r3, #8
 800613a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800613e:	693a      	ldr	r2, [r7, #16]
 8006140:	fb03 f202 	mul.w	r2, r3, r2
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	fbb2 f3f3 	udiv	r3, r2, r3
 800614a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800614c:	4b09      	ldr	r3, [pc, #36]	; (8006174 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	0e5b      	lsrs	r3, r3, #25
 8006152:	f003 0303 	and.w	r3, r3, #3
 8006156:	3301      	adds	r3, #1
 8006158:	005b      	lsls	r3, r3, #1
 800615a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800615c:	693a      	ldr	r2, [r7, #16]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	fbb2 f3f3 	udiv	r3, r2, r3
 8006164:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8006166:	683b      	ldr	r3, [r7, #0]
}
 8006168:	4618      	mov	r0, r3
 800616a:	371c      	adds	r7, #28
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr
 8006174:	40021000 	.word	0x40021000
 8006178:	00f42400 	.word	0x00f42400
 800617c:	007a1200 	.word	0x007a1200
 8006180:	08009258 	.word	0x08009258

08006184 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b086      	sub	sp, #24
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800618c:	2300      	movs	r3, #0
 800618e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006190:	2300      	movs	r3, #0
 8006192:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800619c:	2b00      	cmp	r3, #0
 800619e:	d040      	beq.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061a4:	2b80      	cmp	r3, #128	; 0x80
 80061a6:	d02a      	beq.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80061a8:	2b80      	cmp	r3, #128	; 0x80
 80061aa:	d825      	bhi.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80061ac:	2b60      	cmp	r3, #96	; 0x60
 80061ae:	d026      	beq.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80061b0:	2b60      	cmp	r3, #96	; 0x60
 80061b2:	d821      	bhi.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80061b4:	2b40      	cmp	r3, #64	; 0x40
 80061b6:	d006      	beq.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80061b8:	2b40      	cmp	r3, #64	; 0x40
 80061ba:	d81d      	bhi.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d009      	beq.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80061c0:	2b20      	cmp	r3, #32
 80061c2:	d010      	beq.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80061c4:	e018      	b.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80061c6:	4b89      	ldr	r3, [pc, #548]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	4a88      	ldr	r2, [pc, #544]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80061cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061d0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80061d2:	e015      	b.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	3304      	adds	r3, #4
 80061d8:	2100      	movs	r1, #0
 80061da:	4618      	mov	r0, r3
 80061dc:	f000 fb62 	bl	80068a4 <RCCEx_PLLSAI1_Config>
 80061e0:	4603      	mov	r3, r0
 80061e2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80061e4:	e00c      	b.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	3320      	adds	r3, #32
 80061ea:	2100      	movs	r1, #0
 80061ec:	4618      	mov	r0, r3
 80061ee:	f000 fc4d 	bl	8006a8c <RCCEx_PLLSAI2_Config>
 80061f2:	4603      	mov	r3, r0
 80061f4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80061f6:	e003      	b.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	74fb      	strb	r3, [r7, #19]
      break;
 80061fc:	e000      	b.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80061fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006200:	7cfb      	ldrb	r3, [r7, #19]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d10b      	bne.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006206:	4b79      	ldr	r3, [pc, #484]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006208:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800620c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006214:	4975      	ldr	r1, [pc, #468]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006216:	4313      	orrs	r3, r2
 8006218:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800621c:	e001      	b.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800621e:	7cfb      	ldrb	r3, [r7, #19]
 8006220:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800622a:	2b00      	cmp	r3, #0
 800622c:	d047      	beq.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006232:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006236:	d030      	beq.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006238:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800623c:	d82a      	bhi.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800623e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006242:	d02a      	beq.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006244:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006248:	d824      	bhi.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800624a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800624e:	d008      	beq.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8006250:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006254:	d81e      	bhi.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00a      	beq.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800625a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800625e:	d010      	beq.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006260:	e018      	b.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006262:	4b62      	ldr	r3, [pc, #392]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	4a61      	ldr	r2, [pc, #388]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800626c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800626e:	e015      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	3304      	adds	r3, #4
 8006274:	2100      	movs	r1, #0
 8006276:	4618      	mov	r0, r3
 8006278:	f000 fb14 	bl	80068a4 <RCCEx_PLLSAI1_Config>
 800627c:	4603      	mov	r3, r0
 800627e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006280:	e00c      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	3320      	adds	r3, #32
 8006286:	2100      	movs	r1, #0
 8006288:	4618      	mov	r0, r3
 800628a:	f000 fbff 	bl	8006a8c <RCCEx_PLLSAI2_Config>
 800628e:	4603      	mov	r3, r0
 8006290:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006292:	e003      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	74fb      	strb	r3, [r7, #19]
      break;
 8006298:	e000      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800629a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800629c:	7cfb      	ldrb	r3, [r7, #19]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d10b      	bne.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80062a2:	4b52      	ldr	r3, [pc, #328]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80062a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062b0:	494e      	ldr	r1, [pc, #312]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062b2:	4313      	orrs	r3, r2
 80062b4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80062b8:	e001      	b.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062ba:	7cfb      	ldrb	r3, [r7, #19]
 80062bc:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	f000 809f 	beq.w	800640a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80062cc:	2300      	movs	r3, #0
 80062ce:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80062d0:	4b46      	ldr	r3, [pc, #280]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d101      	bne.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80062dc:	2301      	movs	r3, #1
 80062de:	e000      	b.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80062e0:	2300      	movs	r3, #0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d00d      	beq.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062e6:	4b41      	ldr	r3, [pc, #260]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062ea:	4a40      	ldr	r2, [pc, #256]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062f0:	6593      	str	r3, [r2, #88]	; 0x58
 80062f2:	4b3e      	ldr	r3, [pc, #248]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062fa:	60bb      	str	r3, [r7, #8]
 80062fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80062fe:	2301      	movs	r3, #1
 8006300:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006302:	4b3b      	ldr	r3, [pc, #236]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a3a      	ldr	r2, [pc, #232]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800630c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800630e:	f7fc fcc1 	bl	8002c94 <HAL_GetTick>
 8006312:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006314:	e009      	b.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006316:	f7fc fcbd 	bl	8002c94 <HAL_GetTick>
 800631a:	4602      	mov	r2, r0
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	1ad3      	subs	r3, r2, r3
 8006320:	2b02      	cmp	r3, #2
 8006322:	d902      	bls.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8006324:	2303      	movs	r3, #3
 8006326:	74fb      	strb	r3, [r7, #19]
        break;
 8006328:	e005      	b.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800632a:	4b31      	ldr	r3, [pc, #196]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006332:	2b00      	cmp	r3, #0
 8006334:	d0ef      	beq.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8006336:	7cfb      	ldrb	r3, [r7, #19]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d15b      	bne.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800633c:	4b2b      	ldr	r3, [pc, #172]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800633e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006342:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006346:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d01f      	beq.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006354:	697a      	ldr	r2, [r7, #20]
 8006356:	429a      	cmp	r2, r3
 8006358:	d019      	beq.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800635a:	4b24      	ldr	r3, [pc, #144]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800635c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006360:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006364:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006366:	4b21      	ldr	r3, [pc, #132]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800636c:	4a1f      	ldr	r2, [pc, #124]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800636e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006372:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006376:	4b1d      	ldr	r3, [pc, #116]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800637c:	4a1b      	ldr	r2, [pc, #108]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800637e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006382:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006386:	4a19      	ldr	r2, [pc, #100]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	f003 0301 	and.w	r3, r3, #1
 8006394:	2b00      	cmp	r3, #0
 8006396:	d016      	beq.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006398:	f7fc fc7c 	bl	8002c94 <HAL_GetTick>
 800639c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800639e:	e00b      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063a0:	f7fc fc78 	bl	8002c94 <HAL_GetTick>
 80063a4:	4602      	mov	r2, r0
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d902      	bls.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80063b2:	2303      	movs	r3, #3
 80063b4:	74fb      	strb	r3, [r7, #19]
            break;
 80063b6:	e006      	b.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063b8:	4b0c      	ldr	r3, [pc, #48]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80063ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063be:	f003 0302 	and.w	r3, r3, #2
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d0ec      	beq.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80063c6:	7cfb      	ldrb	r3, [r7, #19]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d10c      	bne.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80063cc:	4b07      	ldr	r3, [pc, #28]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80063ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80063dc:	4903      	ldr	r1, [pc, #12]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80063de:	4313      	orrs	r3, r2
 80063e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80063e4:	e008      	b.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80063e6:	7cfb      	ldrb	r3, [r7, #19]
 80063e8:	74bb      	strb	r3, [r7, #18]
 80063ea:	e005      	b.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80063ec:	40021000 	.word	0x40021000
 80063f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063f4:	7cfb      	ldrb	r3, [r7, #19]
 80063f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80063f8:	7c7b      	ldrb	r3, [r7, #17]
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d105      	bne.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063fe:	4ba0      	ldr	r3, [pc, #640]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006402:	4a9f      	ldr	r2, [pc, #636]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006404:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006408:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 0301 	and.w	r3, r3, #1
 8006412:	2b00      	cmp	r3, #0
 8006414:	d00a      	beq.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006416:	4b9a      	ldr	r3, [pc, #616]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800641c:	f023 0203 	bic.w	r2, r3, #3
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006424:	4996      	ldr	r1, [pc, #600]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006426:	4313      	orrs	r3, r2
 8006428:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 0302 	and.w	r3, r3, #2
 8006434:	2b00      	cmp	r3, #0
 8006436:	d00a      	beq.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006438:	4b91      	ldr	r3, [pc, #580]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800643a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800643e:	f023 020c 	bic.w	r2, r3, #12
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006446:	498e      	ldr	r1, [pc, #568]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006448:	4313      	orrs	r3, r2
 800644a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 0304 	and.w	r3, r3, #4
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00a      	beq.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800645a:	4b89      	ldr	r3, [pc, #548]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800645c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006460:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006468:	4985      	ldr	r1, [pc, #532]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800646a:	4313      	orrs	r3, r2
 800646c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 0308 	and.w	r3, r3, #8
 8006478:	2b00      	cmp	r3, #0
 800647a:	d00a      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800647c:	4b80      	ldr	r3, [pc, #512]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800647e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006482:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800648a:	497d      	ldr	r1, [pc, #500]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800648c:	4313      	orrs	r3, r2
 800648e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 0310 	and.w	r3, r3, #16
 800649a:	2b00      	cmp	r3, #0
 800649c:	d00a      	beq.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800649e:	4b78      	ldr	r3, [pc, #480]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064ac:	4974      	ldr	r1, [pc, #464]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064ae:	4313      	orrs	r3, r2
 80064b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f003 0320 	and.w	r3, r3, #32
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d00a      	beq.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80064c0:	4b6f      	ldr	r3, [pc, #444]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064ce:	496c      	ldr	r1, [pc, #432]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064d0:	4313      	orrs	r3, r2
 80064d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00a      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80064e2:	4b67      	ldr	r3, [pc, #412]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064f0:	4963      	ldr	r1, [pc, #396]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064f2:	4313      	orrs	r3, r2
 80064f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006500:	2b00      	cmp	r3, #0
 8006502:	d00a      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006504:	4b5e      	ldr	r3, [pc, #376]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800650a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006512:	495b      	ldr	r1, [pc, #364]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006514:	4313      	orrs	r3, r2
 8006516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00a      	beq.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006526:	4b56      	ldr	r3, [pc, #344]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800652c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006534:	4952      	ldr	r1, [pc, #328]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006536:	4313      	orrs	r3, r2
 8006538:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006544:	2b00      	cmp	r3, #0
 8006546:	d00a      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006548:	4b4d      	ldr	r3, [pc, #308]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800654a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800654e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006556:	494a      	ldr	r1, [pc, #296]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006558:	4313      	orrs	r3, r2
 800655a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00a      	beq.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800656a:	4b45      	ldr	r3, [pc, #276]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800656c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006570:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006578:	4941      	ldr	r1, [pc, #260]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800657a:	4313      	orrs	r3, r2
 800657c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006588:	2b00      	cmp	r3, #0
 800658a:	d00a      	beq.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800658c:	4b3c      	ldr	r3, [pc, #240]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800658e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006592:	f023 0203 	bic.w	r2, r3, #3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800659a:	4939      	ldr	r1, [pc, #228]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800659c:	4313      	orrs	r3, r2
 800659e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d028      	beq.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80065ae:	4b34      	ldr	r3, [pc, #208]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065b4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065bc:	4930      	ldr	r1, [pc, #192]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065be:	4313      	orrs	r3, r2
 80065c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065cc:	d106      	bne.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065ce:	4b2c      	ldr	r3, [pc, #176]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065d0:	68db      	ldr	r3, [r3, #12]
 80065d2:	4a2b      	ldr	r2, [pc, #172]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065d8:	60d3      	str	r3, [r2, #12]
 80065da:	e011      	b.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80065e4:	d10c      	bne.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	3304      	adds	r3, #4
 80065ea:	2101      	movs	r1, #1
 80065ec:	4618      	mov	r0, r3
 80065ee:	f000 f959 	bl	80068a4 <RCCEx_PLLSAI1_Config>
 80065f2:	4603      	mov	r3, r0
 80065f4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80065f6:	7cfb      	ldrb	r3, [r7, #19]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d001      	beq.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80065fc:	7cfb      	ldrb	r3, [r7, #19]
 80065fe:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006608:	2b00      	cmp	r3, #0
 800660a:	d04d      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006610:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006614:	d108      	bne.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8006616:	4b1a      	ldr	r3, [pc, #104]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006618:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800661c:	4a18      	ldr	r2, [pc, #96]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800661e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006622:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006626:	e012      	b.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006628:	4b15      	ldr	r3, [pc, #84]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800662a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800662e:	4a14      	ldr	r2, [pc, #80]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006630:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006634:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006638:	4b11      	ldr	r3, [pc, #68]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800663a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800663e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006646:	490e      	ldr	r1, [pc, #56]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006648:	4313      	orrs	r3, r2
 800664a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006652:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006656:	d106      	bne.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006658:	4b09      	ldr	r3, [pc, #36]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	4a08      	ldr	r2, [pc, #32]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800665e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006662:	60d3      	str	r3, [r2, #12]
 8006664:	e020      	b.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800666a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800666e:	d109      	bne.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006670:	4b03      	ldr	r3, [pc, #12]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	4a02      	ldr	r2, [pc, #8]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006676:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800667a:	60d3      	str	r3, [r2, #12]
 800667c:	e014      	b.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800667e:	bf00      	nop
 8006680:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006688:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800668c:	d10c      	bne.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	3304      	adds	r3, #4
 8006692:	2101      	movs	r1, #1
 8006694:	4618      	mov	r0, r3
 8006696:	f000 f905 	bl	80068a4 <RCCEx_PLLSAI1_Config>
 800669a:	4603      	mov	r3, r0
 800669c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800669e:	7cfb      	ldrb	r3, [r7, #19]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d001      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80066a4:	7cfb      	ldrb	r3, [r7, #19]
 80066a6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d028      	beq.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80066b4:	4b7a      	ldr	r3, [pc, #488]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80066b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066c2:	4977      	ldr	r1, [pc, #476]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80066c4:	4313      	orrs	r3, r2
 80066c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066d2:	d106      	bne.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066d4:	4b72      	ldr	r3, [pc, #456]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	4a71      	ldr	r2, [pc, #452]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80066da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80066de:	60d3      	str	r3, [r2, #12]
 80066e0:	e011      	b.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80066ea:	d10c      	bne.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	3304      	adds	r3, #4
 80066f0:	2101      	movs	r1, #1
 80066f2:	4618      	mov	r0, r3
 80066f4:	f000 f8d6 	bl	80068a4 <RCCEx_PLLSAI1_Config>
 80066f8:	4603      	mov	r3, r0
 80066fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80066fc:	7cfb      	ldrb	r3, [r7, #19]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d001      	beq.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8006702:	7cfb      	ldrb	r3, [r7, #19]
 8006704:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800670e:	2b00      	cmp	r3, #0
 8006710:	d01e      	beq.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006712:	4b63      	ldr	r3, [pc, #396]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006718:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006722:	495f      	ldr	r1, [pc, #380]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006724:	4313      	orrs	r3, r2
 8006726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006730:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006734:	d10c      	bne.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	3304      	adds	r3, #4
 800673a:	2102      	movs	r1, #2
 800673c:	4618      	mov	r0, r3
 800673e:	f000 f8b1 	bl	80068a4 <RCCEx_PLLSAI1_Config>
 8006742:	4603      	mov	r3, r0
 8006744:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006746:	7cfb      	ldrb	r3, [r7, #19]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d001      	beq.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800674c:	7cfb      	ldrb	r3, [r7, #19]
 800674e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006758:	2b00      	cmp	r3, #0
 800675a:	d00b      	beq.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800675c:	4b50      	ldr	r3, [pc, #320]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800675e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006762:	f023 0204 	bic.w	r2, r3, #4
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800676c:	494c      	ldr	r1, [pc, #304]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800676e:	4313      	orrs	r3, r2
 8006770:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800677c:	2b00      	cmp	r3, #0
 800677e:	d00b      	beq.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006780:	4b47      	ldr	r3, [pc, #284]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006782:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006786:	f023 0218 	bic.w	r2, r3, #24
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006790:	4943      	ldr	r1, [pc, #268]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006792:	4313      	orrs	r3, r2
 8006794:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d035      	beq.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80067a4:	4b3e      	ldr	r3, [pc, #248]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a3d      	ldr	r2, [pc, #244]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80067aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067b0:	f7fc fa70 	bl	8002c94 <HAL_GetTick>
 80067b4:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80067b6:	e009      	b.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80067b8:	f7fc fa6c 	bl	8002c94 <HAL_GetTick>
 80067bc:	4602      	mov	r2, r0
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	1ad3      	subs	r3, r2, r3
 80067c2:	2b02      	cmp	r3, #2
 80067c4:	d902      	bls.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 80067c6:	2303      	movs	r3, #3
 80067c8:	74fb      	strb	r3, [r7, #19]
        break;
 80067ca:	e005      	b.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80067cc:	4b34      	ldr	r3, [pc, #208]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d1ef      	bne.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 80067d8:	7cfb      	ldrb	r3, [r7, #19]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d113      	bne.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 80067de:	4b30      	ldr	r3, [pc, #192]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80067e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80067e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067ee:	492c      	ldr	r1, [pc, #176]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80067f0:	4313      	orrs	r3, r2
 80067f2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	3320      	adds	r3, #32
 80067fa:	2102      	movs	r1, #2
 80067fc:	4618      	mov	r0, r3
 80067fe:	f000 f945 	bl	8006a8c <RCCEx_PLLSAI2_Config>
 8006802:	4603      	mov	r3, r0
 8006804:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8006806:	7cfb      	ldrb	r3, [r7, #19]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d001      	beq.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 800680c:	7cfb      	ldrb	r3, [r7, #19]
 800680e:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006818:	2b00      	cmp	r3, #0
 800681a:	d01e      	beq.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800681c:	4b20      	ldr	r3, [pc, #128]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800681e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006822:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800682c:	491c      	ldr	r1, [pc, #112]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800682e:	4313      	orrs	r3, r2
 8006830:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800683a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800683e:	d10c      	bne.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	3320      	adds	r3, #32
 8006844:	2101      	movs	r1, #1
 8006846:	4618      	mov	r0, r3
 8006848:	f000 f920 	bl	8006a8c <RCCEx_PLLSAI2_Config>
 800684c:	4603      	mov	r3, r0
 800684e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006850:	7cfb      	ldrb	r3, [r7, #19]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d001      	beq.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 8006856:	7cfb      	ldrb	r3, [r7, #19]
 8006858:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006862:	2b00      	cmp	r3, #0
 8006864:	d017      	beq.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006866:	4b0e      	ldr	r3, [pc, #56]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006868:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800686c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006876:	490a      	ldr	r1, [pc, #40]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006878:	4313      	orrs	r3, r2
 800687a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006884:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006888:	d105      	bne.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800688a:	4b05      	ldr	r3, [pc, #20]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800688c:	68db      	ldr	r3, [r3, #12]
 800688e:	4a04      	ldr	r2, [pc, #16]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006890:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006894:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006896:	7cbb      	ldrb	r3, [r7, #18]
}
 8006898:	4618      	mov	r0, r3
 800689a:	3718      	adds	r7, #24
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}
 80068a0:	40021000 	.word	0x40021000

080068a4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80068ae:	2300      	movs	r3, #0
 80068b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80068b2:	4b72      	ldr	r3, [pc, #456]	; (8006a7c <RCCEx_PLLSAI1_Config+0x1d8>)
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	f003 0303 	and.w	r3, r3, #3
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d00e      	beq.n	80068dc <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80068be:	4b6f      	ldr	r3, [pc, #444]	; (8006a7c <RCCEx_PLLSAI1_Config+0x1d8>)
 80068c0:	68db      	ldr	r3, [r3, #12]
 80068c2:	f003 0203 	and.w	r2, r3, #3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d103      	bne.n	80068d6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
       ||
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d142      	bne.n	800695c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	73fb      	strb	r3, [r7, #15]
 80068da:	e03f      	b.n	800695c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2b03      	cmp	r3, #3
 80068e2:	d018      	beq.n	8006916 <RCCEx_PLLSAI1_Config+0x72>
 80068e4:	2b03      	cmp	r3, #3
 80068e6:	d825      	bhi.n	8006934 <RCCEx_PLLSAI1_Config+0x90>
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d002      	beq.n	80068f2 <RCCEx_PLLSAI1_Config+0x4e>
 80068ec:	2b02      	cmp	r3, #2
 80068ee:	d009      	beq.n	8006904 <RCCEx_PLLSAI1_Config+0x60>
 80068f0:	e020      	b.n	8006934 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80068f2:	4b62      	ldr	r3, [pc, #392]	; (8006a7c <RCCEx_PLLSAI1_Config+0x1d8>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 0302 	and.w	r3, r3, #2
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d11d      	bne.n	800693a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006902:	e01a      	b.n	800693a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006904:	4b5d      	ldr	r3, [pc, #372]	; (8006a7c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800690c:	2b00      	cmp	r3, #0
 800690e:	d116      	bne.n	800693e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006914:	e013      	b.n	800693e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006916:	4b59      	ldr	r3, [pc, #356]	; (8006a7c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800691e:	2b00      	cmp	r3, #0
 8006920:	d10f      	bne.n	8006942 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006922:	4b56      	ldr	r3, [pc, #344]	; (8006a7c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800692a:	2b00      	cmp	r3, #0
 800692c:	d109      	bne.n	8006942 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006932:	e006      	b.n	8006942 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006934:	2301      	movs	r3, #1
 8006936:	73fb      	strb	r3, [r7, #15]
      break;
 8006938:	e004      	b.n	8006944 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800693a:	bf00      	nop
 800693c:	e002      	b.n	8006944 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800693e:	bf00      	nop
 8006940:	e000      	b.n	8006944 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006942:	bf00      	nop
    }

    if(status == HAL_OK)
 8006944:	7bfb      	ldrb	r3, [r7, #15]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d108      	bne.n	800695c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800694a:	4b4c      	ldr	r3, [pc, #304]	; (8006a7c <RCCEx_PLLSAI1_Config+0x1d8>)
 800694c:	68db      	ldr	r3, [r3, #12]
 800694e:	f023 0203 	bic.w	r2, r3, #3
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4949      	ldr	r1, [pc, #292]	; (8006a7c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006958:	4313      	orrs	r3, r2
 800695a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800695c:	7bfb      	ldrb	r3, [r7, #15]
 800695e:	2b00      	cmp	r3, #0
 8006960:	f040 8086 	bne.w	8006a70 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006964:	4b45      	ldr	r3, [pc, #276]	; (8006a7c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a44      	ldr	r2, [pc, #272]	; (8006a7c <RCCEx_PLLSAI1_Config+0x1d8>)
 800696a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800696e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006970:	f7fc f990 	bl	8002c94 <HAL_GetTick>
 8006974:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006976:	e009      	b.n	800698c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006978:	f7fc f98c 	bl	8002c94 <HAL_GetTick>
 800697c:	4602      	mov	r2, r0
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	1ad3      	subs	r3, r2, r3
 8006982:	2b02      	cmp	r3, #2
 8006984:	d902      	bls.n	800698c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006986:	2303      	movs	r3, #3
 8006988:	73fb      	strb	r3, [r7, #15]
        break;
 800698a:	e005      	b.n	8006998 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800698c:	4b3b      	ldr	r3, [pc, #236]	; (8006a7c <RCCEx_PLLSAI1_Config+0x1d8>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006994:	2b00      	cmp	r3, #0
 8006996:	d1ef      	bne.n	8006978 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006998:	7bfb      	ldrb	r3, [r7, #15]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d168      	bne.n	8006a70 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d113      	bne.n	80069cc <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80069a4:	4b35      	ldr	r3, [pc, #212]	; (8006a7c <RCCEx_PLLSAI1_Config+0x1d8>)
 80069a6:	691a      	ldr	r2, [r3, #16]
 80069a8:	4b35      	ldr	r3, [pc, #212]	; (8006a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 80069aa:	4013      	ands	r3, r2
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	6892      	ldr	r2, [r2, #8]
 80069b0:	0211      	lsls	r1, r2, #8
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	68d2      	ldr	r2, [r2, #12]
 80069b6:	06d2      	lsls	r2, r2, #27
 80069b8:	4311      	orrs	r1, r2
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	6852      	ldr	r2, [r2, #4]
 80069be:	3a01      	subs	r2, #1
 80069c0:	0112      	lsls	r2, r2, #4
 80069c2:	430a      	orrs	r2, r1
 80069c4:	492d      	ldr	r1, [pc, #180]	; (8006a7c <RCCEx_PLLSAI1_Config+0x1d8>)
 80069c6:	4313      	orrs	r3, r2
 80069c8:	610b      	str	r3, [r1, #16]
 80069ca:	e02d      	b.n	8006a28 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d115      	bne.n	80069fe <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80069d2:	4b2a      	ldr	r3, [pc, #168]	; (8006a7c <RCCEx_PLLSAI1_Config+0x1d8>)
 80069d4:	691a      	ldr	r2, [r3, #16]
 80069d6:	4b2b      	ldr	r3, [pc, #172]	; (8006a84 <RCCEx_PLLSAI1_Config+0x1e0>)
 80069d8:	4013      	ands	r3, r2
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	6892      	ldr	r2, [r2, #8]
 80069de:	0211      	lsls	r1, r2, #8
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	6912      	ldr	r2, [r2, #16]
 80069e4:	0852      	lsrs	r2, r2, #1
 80069e6:	3a01      	subs	r2, #1
 80069e8:	0552      	lsls	r2, r2, #21
 80069ea:	4311      	orrs	r1, r2
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	6852      	ldr	r2, [r2, #4]
 80069f0:	3a01      	subs	r2, #1
 80069f2:	0112      	lsls	r2, r2, #4
 80069f4:	430a      	orrs	r2, r1
 80069f6:	4921      	ldr	r1, [pc, #132]	; (8006a7c <RCCEx_PLLSAI1_Config+0x1d8>)
 80069f8:	4313      	orrs	r3, r2
 80069fa:	610b      	str	r3, [r1, #16]
 80069fc:	e014      	b.n	8006a28 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80069fe:	4b1f      	ldr	r3, [pc, #124]	; (8006a7c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a00:	691a      	ldr	r2, [r3, #16]
 8006a02:	4b21      	ldr	r3, [pc, #132]	; (8006a88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a04:	4013      	ands	r3, r2
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	6892      	ldr	r2, [r2, #8]
 8006a0a:	0211      	lsls	r1, r2, #8
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	6952      	ldr	r2, [r2, #20]
 8006a10:	0852      	lsrs	r2, r2, #1
 8006a12:	3a01      	subs	r2, #1
 8006a14:	0652      	lsls	r2, r2, #25
 8006a16:	4311      	orrs	r1, r2
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	6852      	ldr	r2, [r2, #4]
 8006a1c:	3a01      	subs	r2, #1
 8006a1e:	0112      	lsls	r2, r2, #4
 8006a20:	430a      	orrs	r2, r1
 8006a22:	4916      	ldr	r1, [pc, #88]	; (8006a7c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a24:	4313      	orrs	r3, r2
 8006a26:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006a28:	4b14      	ldr	r3, [pc, #80]	; (8006a7c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a13      	ldr	r2, [pc, #76]	; (8006a7c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a2e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006a32:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a34:	f7fc f92e 	bl	8002c94 <HAL_GetTick>
 8006a38:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006a3a:	e009      	b.n	8006a50 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006a3c:	f7fc f92a 	bl	8002c94 <HAL_GetTick>
 8006a40:	4602      	mov	r2, r0
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	1ad3      	subs	r3, r2, r3
 8006a46:	2b02      	cmp	r3, #2
 8006a48:	d902      	bls.n	8006a50 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006a4a:	2303      	movs	r3, #3
 8006a4c:	73fb      	strb	r3, [r7, #15]
          break;
 8006a4e:	e005      	b.n	8006a5c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006a50:	4b0a      	ldr	r3, [pc, #40]	; (8006a7c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d0ef      	beq.n	8006a3c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006a5c:	7bfb      	ldrb	r3, [r7, #15]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d106      	bne.n	8006a70 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006a62:	4b06      	ldr	r3, [pc, #24]	; (8006a7c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a64:	691a      	ldr	r2, [r3, #16]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	699b      	ldr	r3, [r3, #24]
 8006a6a:	4904      	ldr	r1, [pc, #16]	; (8006a7c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3710      	adds	r7, #16
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	40021000 	.word	0x40021000
 8006a80:	07ff800f 	.word	0x07ff800f
 8006a84:	ff9f800f 	.word	0xff9f800f
 8006a88:	f9ff800f 	.word	0xf9ff800f

08006a8c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a96:	2300      	movs	r3, #0
 8006a98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006a9a:	4b72      	ldr	r3, [pc, #456]	; (8006c64 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a9c:	68db      	ldr	r3, [r3, #12]
 8006a9e:	f003 0303 	and.w	r3, r3, #3
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d00e      	beq.n	8006ac4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006aa6:	4b6f      	ldr	r3, [pc, #444]	; (8006c64 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006aa8:	68db      	ldr	r3, [r3, #12]
 8006aaa:	f003 0203 	and.w	r2, r3, #3
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d103      	bne.n	8006abe <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
       ||
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d142      	bne.n	8006b44 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	73fb      	strb	r3, [r7, #15]
 8006ac2:	e03f      	b.n	8006b44 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	2b03      	cmp	r3, #3
 8006aca:	d018      	beq.n	8006afe <RCCEx_PLLSAI2_Config+0x72>
 8006acc:	2b03      	cmp	r3, #3
 8006ace:	d825      	bhi.n	8006b1c <RCCEx_PLLSAI2_Config+0x90>
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d002      	beq.n	8006ada <RCCEx_PLLSAI2_Config+0x4e>
 8006ad4:	2b02      	cmp	r3, #2
 8006ad6:	d009      	beq.n	8006aec <RCCEx_PLLSAI2_Config+0x60>
 8006ad8:	e020      	b.n	8006b1c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006ada:	4b62      	ldr	r3, [pc, #392]	; (8006c64 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f003 0302 	and.w	r3, r3, #2
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d11d      	bne.n	8006b22 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006aea:	e01a      	b.n	8006b22 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006aec:	4b5d      	ldr	r3, [pc, #372]	; (8006c64 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d116      	bne.n	8006b26 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006afc:	e013      	b.n	8006b26 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006afe:	4b59      	ldr	r3, [pc, #356]	; (8006c64 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d10f      	bne.n	8006b2a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006b0a:	4b56      	ldr	r3, [pc, #344]	; (8006c64 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d109      	bne.n	8006b2a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006b1a:	e006      	b.n	8006b2a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	73fb      	strb	r3, [r7, #15]
      break;
 8006b20:	e004      	b.n	8006b2c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006b22:	bf00      	nop
 8006b24:	e002      	b.n	8006b2c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006b26:	bf00      	nop
 8006b28:	e000      	b.n	8006b2c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006b2a:	bf00      	nop
    }

    if(status == HAL_OK)
 8006b2c:	7bfb      	ldrb	r3, [r7, #15]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d108      	bne.n	8006b44 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006b32:	4b4c      	ldr	r3, [pc, #304]	; (8006c64 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b34:	68db      	ldr	r3, [r3, #12]
 8006b36:	f023 0203 	bic.w	r2, r3, #3
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4949      	ldr	r1, [pc, #292]	; (8006c64 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b40:	4313      	orrs	r3, r2
 8006b42:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006b44:	7bfb      	ldrb	r3, [r7, #15]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	f040 8086 	bne.w	8006c58 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006b4c:	4b45      	ldr	r3, [pc, #276]	; (8006c64 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a44      	ldr	r2, [pc, #272]	; (8006c64 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b58:	f7fc f89c 	bl	8002c94 <HAL_GetTick>
 8006b5c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006b5e:	e009      	b.n	8006b74 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006b60:	f7fc f898 	bl	8002c94 <HAL_GetTick>
 8006b64:	4602      	mov	r2, r0
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	1ad3      	subs	r3, r2, r3
 8006b6a:	2b02      	cmp	r3, #2
 8006b6c:	d902      	bls.n	8006b74 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006b6e:	2303      	movs	r3, #3
 8006b70:	73fb      	strb	r3, [r7, #15]
        break;
 8006b72:	e005      	b.n	8006b80 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006b74:	4b3b      	ldr	r3, [pc, #236]	; (8006c64 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d1ef      	bne.n	8006b60 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006b80:	7bfb      	ldrb	r3, [r7, #15]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d168      	bne.n	8006c58 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d113      	bne.n	8006bb4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006b8c:	4b35      	ldr	r3, [pc, #212]	; (8006c64 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b8e:	695a      	ldr	r2, [r3, #20]
 8006b90:	4b35      	ldr	r3, [pc, #212]	; (8006c68 <RCCEx_PLLSAI2_Config+0x1dc>)
 8006b92:	4013      	ands	r3, r2
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	6892      	ldr	r2, [r2, #8]
 8006b98:	0211      	lsls	r1, r2, #8
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	68d2      	ldr	r2, [r2, #12]
 8006b9e:	06d2      	lsls	r2, r2, #27
 8006ba0:	4311      	orrs	r1, r2
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	6852      	ldr	r2, [r2, #4]
 8006ba6:	3a01      	subs	r2, #1
 8006ba8:	0112      	lsls	r2, r2, #4
 8006baa:	430a      	orrs	r2, r1
 8006bac:	492d      	ldr	r1, [pc, #180]	; (8006c64 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	614b      	str	r3, [r1, #20]
 8006bb2:	e02d      	b.n	8006c10 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d115      	bne.n	8006be6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006bba:	4b2a      	ldr	r3, [pc, #168]	; (8006c64 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006bbc:	695a      	ldr	r2, [r3, #20]
 8006bbe:	4b2b      	ldr	r3, [pc, #172]	; (8006c6c <RCCEx_PLLSAI2_Config+0x1e0>)
 8006bc0:	4013      	ands	r3, r2
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	6892      	ldr	r2, [r2, #8]
 8006bc6:	0211      	lsls	r1, r2, #8
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	6912      	ldr	r2, [r2, #16]
 8006bcc:	0852      	lsrs	r2, r2, #1
 8006bce:	3a01      	subs	r2, #1
 8006bd0:	0552      	lsls	r2, r2, #21
 8006bd2:	4311      	orrs	r1, r2
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	6852      	ldr	r2, [r2, #4]
 8006bd8:	3a01      	subs	r2, #1
 8006bda:	0112      	lsls	r2, r2, #4
 8006bdc:	430a      	orrs	r2, r1
 8006bde:	4921      	ldr	r1, [pc, #132]	; (8006c64 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006be0:	4313      	orrs	r3, r2
 8006be2:	614b      	str	r3, [r1, #20]
 8006be4:	e014      	b.n	8006c10 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006be6:	4b1f      	ldr	r3, [pc, #124]	; (8006c64 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006be8:	695a      	ldr	r2, [r3, #20]
 8006bea:	4b21      	ldr	r3, [pc, #132]	; (8006c70 <RCCEx_PLLSAI2_Config+0x1e4>)
 8006bec:	4013      	ands	r3, r2
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	6892      	ldr	r2, [r2, #8]
 8006bf2:	0211      	lsls	r1, r2, #8
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	6952      	ldr	r2, [r2, #20]
 8006bf8:	0852      	lsrs	r2, r2, #1
 8006bfa:	3a01      	subs	r2, #1
 8006bfc:	0652      	lsls	r2, r2, #25
 8006bfe:	4311      	orrs	r1, r2
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	6852      	ldr	r2, [r2, #4]
 8006c04:	3a01      	subs	r2, #1
 8006c06:	0112      	lsls	r2, r2, #4
 8006c08:	430a      	orrs	r2, r1
 8006c0a:	4916      	ldr	r1, [pc, #88]	; (8006c64 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006c10:	4b14      	ldr	r3, [pc, #80]	; (8006c64 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a13      	ldr	r2, [pc, #76]	; (8006c64 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c1a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c1c:	f7fc f83a 	bl	8002c94 <HAL_GetTick>
 8006c20:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006c22:	e009      	b.n	8006c38 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006c24:	f7fc f836 	bl	8002c94 <HAL_GetTick>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	1ad3      	subs	r3, r2, r3
 8006c2e:	2b02      	cmp	r3, #2
 8006c30:	d902      	bls.n	8006c38 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006c32:	2303      	movs	r3, #3
 8006c34:	73fb      	strb	r3, [r7, #15]
          break;
 8006c36:	e005      	b.n	8006c44 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006c38:	4b0a      	ldr	r3, [pc, #40]	; (8006c64 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d0ef      	beq.n	8006c24 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006c44:	7bfb      	ldrb	r3, [r7, #15]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d106      	bne.n	8006c58 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006c4a:	4b06      	ldr	r3, [pc, #24]	; (8006c64 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c4c:	695a      	ldr	r2, [r3, #20]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	699b      	ldr	r3, [r3, #24]
 8006c52:	4904      	ldr	r1, [pc, #16]	; (8006c64 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c54:	4313      	orrs	r3, r2
 8006c56:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3710      	adds	r7, #16
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	bf00      	nop
 8006c64:	40021000 	.word	0x40021000
 8006c68:	07ff800f 	.word	0x07ff800f
 8006c6c:	ff9f800f 	.word	0xff9f800f
 8006c70:	f9ff800f 	.word	0xf9ff800f

08006c74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b084      	sub	sp, #16
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d101      	bne.n	8006c86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	e095      	b.n	8006db2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d108      	bne.n	8006ca0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c96:	d009      	beq.n	8006cac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	61da      	str	r2, [r3, #28]
 8006c9e:	e005      	b.n	8006cac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d106      	bne.n	8006ccc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f7fb fd78 	bl	80027bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2202      	movs	r2, #2
 8006cd0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ce2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006cec:	d902      	bls.n	8006cf4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	60fb      	str	r3, [r7, #12]
 8006cf2:	e002      	b.n	8006cfa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006cf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006cf8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	68db      	ldr	r3, [r3, #12]
 8006cfe:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006d02:	d007      	beq.n	8006d14 <HAL_SPI_Init+0xa0>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006d0c:	d002      	beq.n	8006d14 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006d24:	431a      	orrs	r2, r3
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	691b      	ldr	r3, [r3, #16]
 8006d2a:	f003 0302 	and.w	r3, r3, #2
 8006d2e:	431a      	orrs	r2, r3
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	695b      	ldr	r3, [r3, #20]
 8006d34:	f003 0301 	and.w	r3, r3, #1
 8006d38:	431a      	orrs	r2, r3
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	699b      	ldr	r3, [r3, #24]
 8006d3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d42:	431a      	orrs	r2, r3
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	69db      	ldr	r3, [r3, #28]
 8006d48:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d4c:	431a      	orrs	r2, r3
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a1b      	ldr	r3, [r3, #32]
 8006d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d56:	ea42 0103 	orr.w	r1, r2, r3
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d5e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	430a      	orrs	r2, r1
 8006d68:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	699b      	ldr	r3, [r3, #24]
 8006d6e:	0c1b      	lsrs	r3, r3, #16
 8006d70:	f003 0204 	and.w	r2, r3, #4
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d78:	f003 0310 	and.w	r3, r3, #16
 8006d7c:	431a      	orrs	r2, r3
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d82:	f003 0308 	and.w	r3, r3, #8
 8006d86:	431a      	orrs	r2, r3
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006d90:	ea42 0103 	orr.w	r1, r2, r3
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	430a      	orrs	r2, r1
 8006da0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2201      	movs	r2, #1
 8006dac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006db0:	2300      	movs	r3, #0
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3710      	adds	r7, #16
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}

08006dba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006dba:	b580      	push	{r7, lr}
 8006dbc:	b088      	sub	sp, #32
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	60f8      	str	r0, [r7, #12]
 8006dc2:	60b9      	str	r1, [r7, #8]
 8006dc4:	603b      	str	r3, [r7, #0]
 8006dc6:	4613      	mov	r3, r2
 8006dc8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d101      	bne.n	8006ddc <HAL_SPI_Transmit+0x22>
 8006dd8:	2302      	movs	r3, #2
 8006dda:	e15f      	b.n	800709c <HAL_SPI_Transmit+0x2e2>
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2201      	movs	r2, #1
 8006de0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006de4:	f7fb ff56 	bl	8002c94 <HAL_GetTick>
 8006de8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006dea:	88fb      	ldrh	r3, [r7, #6]
 8006dec:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d002      	beq.n	8006e00 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006dfa:	2302      	movs	r3, #2
 8006dfc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006dfe:	e148      	b.n	8007092 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d002      	beq.n	8006e0c <HAL_SPI_Transmit+0x52>
 8006e06:	88fb      	ldrh	r3, [r7, #6]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d102      	bne.n	8006e12 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006e10:	e13f      	b.n	8007092 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2203      	movs	r2, #3
 8006e16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	68ba      	ldr	r2, [r7, #8]
 8006e24:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	88fa      	ldrh	r2, [r7, #6]
 8006e2a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	88fa      	ldrh	r2, [r7, #6]
 8006e30:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2200      	movs	r2, #0
 8006e36:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2200      	movs	r2, #0
 8006e44:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2200      	movs	r2, #0
 8006e52:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e5c:	d10f      	bne.n	8006e7e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e6c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e7c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e88:	2b40      	cmp	r3, #64	; 0x40
 8006e8a:	d007      	beq.n	8006e9c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e9a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	68db      	ldr	r3, [r3, #12]
 8006ea0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006ea4:	d94f      	bls.n	8006f46 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d002      	beq.n	8006eb4 <HAL_SPI_Transmit+0xfa>
 8006eae:	8afb      	ldrh	r3, [r7, #22]
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d142      	bne.n	8006f3a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb8:	881a      	ldrh	r2, [r3, #0]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec4:	1c9a      	adds	r2, r3, #2
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	3b01      	subs	r3, #1
 8006ed2:	b29a      	uxth	r2, r3
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006ed8:	e02f      	b.n	8006f3a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	f003 0302 	and.w	r3, r3, #2
 8006ee4:	2b02      	cmp	r3, #2
 8006ee6:	d112      	bne.n	8006f0e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eec:	881a      	ldrh	r2, [r3, #0]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef8:	1c9a      	adds	r2, r3, #2
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	3b01      	subs	r3, #1
 8006f06:	b29a      	uxth	r2, r3
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006f0c:	e015      	b.n	8006f3a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f0e:	f7fb fec1 	bl	8002c94 <HAL_GetTick>
 8006f12:	4602      	mov	r2, r0
 8006f14:	69bb      	ldr	r3, [r7, #24]
 8006f16:	1ad3      	subs	r3, r2, r3
 8006f18:	683a      	ldr	r2, [r7, #0]
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d803      	bhi.n	8006f26 <HAL_SPI_Transmit+0x16c>
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f24:	d102      	bne.n	8006f2c <HAL_SPI_Transmit+0x172>
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d106      	bne.n	8006f3a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8006f2c:	2303      	movs	r3, #3
 8006f2e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2201      	movs	r2, #1
 8006f34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006f38:	e0ab      	b.n	8007092 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d1ca      	bne.n	8006eda <HAL_SPI_Transmit+0x120>
 8006f44:	e080      	b.n	8007048 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d002      	beq.n	8006f54 <HAL_SPI_Transmit+0x19a>
 8006f4e:	8afb      	ldrh	r3, [r7, #22]
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d174      	bne.n	800703e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d912      	bls.n	8006f84 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f62:	881a      	ldrh	r2, [r3, #0]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f6e:	1c9a      	adds	r2, r3, #2
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	3b02      	subs	r3, #2
 8006f7c:	b29a      	uxth	r2, r3
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006f82:	e05c      	b.n	800703e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	330c      	adds	r3, #12
 8006f8e:	7812      	ldrb	r2, [r2, #0]
 8006f90:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f96:	1c5a      	adds	r2, r3, #1
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	3b01      	subs	r3, #1
 8006fa4:	b29a      	uxth	r2, r3
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006faa:	e048      	b.n	800703e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	f003 0302 	and.w	r3, r3, #2
 8006fb6:	2b02      	cmp	r3, #2
 8006fb8:	d12b      	bne.n	8007012 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d912      	bls.n	8006fea <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc8:	881a      	ldrh	r2, [r3, #0]
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd4:	1c9a      	adds	r2, r3, #2
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	3b02      	subs	r3, #2
 8006fe2:	b29a      	uxth	r2, r3
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006fe8:	e029      	b.n	800703e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	330c      	adds	r3, #12
 8006ff4:	7812      	ldrb	r2, [r2, #0]
 8006ff6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ffc:	1c5a      	adds	r2, r3, #1
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007006:	b29b      	uxth	r3, r3
 8007008:	3b01      	subs	r3, #1
 800700a:	b29a      	uxth	r2, r3
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007010:	e015      	b.n	800703e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007012:	f7fb fe3f 	bl	8002c94 <HAL_GetTick>
 8007016:	4602      	mov	r2, r0
 8007018:	69bb      	ldr	r3, [r7, #24]
 800701a:	1ad3      	subs	r3, r2, r3
 800701c:	683a      	ldr	r2, [r7, #0]
 800701e:	429a      	cmp	r2, r3
 8007020:	d803      	bhi.n	800702a <HAL_SPI_Transmit+0x270>
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007028:	d102      	bne.n	8007030 <HAL_SPI_Transmit+0x276>
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d106      	bne.n	800703e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8007030:	2303      	movs	r3, #3
 8007032:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2201      	movs	r2, #1
 8007038:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800703c:	e029      	b.n	8007092 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007042:	b29b      	uxth	r3, r3
 8007044:	2b00      	cmp	r3, #0
 8007046:	d1b1      	bne.n	8006fac <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007048:	69ba      	ldr	r2, [r7, #24]
 800704a:	6839      	ldr	r1, [r7, #0]
 800704c:	68f8      	ldr	r0, [r7, #12]
 800704e:	f001 f8cb 	bl	80081e8 <SPI_EndRxTxTransaction>
 8007052:	4603      	mov	r3, r0
 8007054:	2b00      	cmp	r3, #0
 8007056:	d002      	beq.n	800705e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2220      	movs	r2, #32
 800705c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d10a      	bne.n	800707c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007066:	2300      	movs	r3, #0
 8007068:	613b      	str	r3, [r7, #16]
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	613b      	str	r3, [r7, #16]
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	613b      	str	r3, [r7, #16]
 800707a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007080:	2b00      	cmp	r3, #0
 8007082:	d002      	beq.n	800708a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8007084:	2301      	movs	r3, #1
 8007086:	77fb      	strb	r3, [r7, #31]
 8007088:	e003      	b.n	8007092 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2201      	movs	r2, #1
 800708e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2200      	movs	r2, #0
 8007096:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800709a:	7ffb      	ldrb	r3, [r7, #31]
}
 800709c:	4618      	mov	r0, r3
 800709e:	3720      	adds	r7, #32
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b088      	sub	sp, #32
 80070a8:	af02      	add	r7, sp, #8
 80070aa:	60f8      	str	r0, [r7, #12]
 80070ac:	60b9      	str	r1, [r7, #8]
 80070ae:	603b      	str	r3, [r7, #0]
 80070b0:	4613      	mov	r3, r2
 80070b2:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80070b4:	2300      	movs	r3, #0
 80070b6:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d002      	beq.n	80070ca <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80070c4:	2302      	movs	r3, #2
 80070c6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80070c8:	e11a      	b.n	8007300 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070d2:	d112      	bne.n	80070fa <HAL_SPI_Receive+0x56>
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d10e      	bne.n	80070fa <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2204      	movs	r2, #4
 80070e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80070e4:	88fa      	ldrh	r2, [r7, #6]
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	9300      	str	r3, [sp, #0]
 80070ea:	4613      	mov	r3, r2
 80070ec:	68ba      	ldr	r2, [r7, #8]
 80070ee:	68b9      	ldr	r1, [r7, #8]
 80070f0:	68f8      	ldr	r0, [r7, #12]
 80070f2:	f000 f90e 	bl	8007312 <HAL_SPI_TransmitReceive>
 80070f6:	4603      	mov	r3, r0
 80070f8:	e107      	b.n	800730a <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007100:	2b01      	cmp	r3, #1
 8007102:	d101      	bne.n	8007108 <HAL_SPI_Receive+0x64>
 8007104:	2302      	movs	r3, #2
 8007106:	e100      	b.n	800730a <HAL_SPI_Receive+0x266>
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2201      	movs	r2, #1
 800710c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007110:	f7fb fdc0 	bl	8002c94 <HAL_GetTick>
 8007114:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d002      	beq.n	8007122 <HAL_SPI_Receive+0x7e>
 800711c:	88fb      	ldrh	r3, [r7, #6]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d102      	bne.n	8007128 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007126:	e0eb      	b.n	8007300 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2204      	movs	r2, #4
 800712c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2200      	movs	r2, #0
 8007134:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	68ba      	ldr	r2, [r7, #8]
 800713a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	88fa      	ldrh	r2, [r7, #6]
 8007140:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	88fa      	ldrh	r2, [r7, #6]
 8007148:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2200      	movs	r2, #0
 8007150:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2200      	movs	r2, #0
 8007156:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2200      	movs	r2, #0
 800715c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2200      	movs	r2, #0
 8007162:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2200      	movs	r2, #0
 8007168:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	68db      	ldr	r3, [r3, #12]
 800716e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007172:	d908      	bls.n	8007186 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	685a      	ldr	r2, [r3, #4]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007182:	605a      	str	r2, [r3, #4]
 8007184:	e007      	b.n	8007196 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	685a      	ldr	r2, [r3, #4]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007194:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800719e:	d10f      	bne.n	80071c0 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071ae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80071be:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ca:	2b40      	cmp	r3, #64	; 0x40
 80071cc:	d007      	beq.n	80071de <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071dc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80071e6:	d86f      	bhi.n	80072c8 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80071e8:	e034      	b.n	8007254 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	f003 0301 	and.w	r3, r3, #1
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d117      	bne.n	8007228 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f103 020c 	add.w	r2, r3, #12
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007204:	7812      	ldrb	r2, [r2, #0]
 8007206:	b2d2      	uxtb	r2, r2
 8007208:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800720e:	1c5a      	adds	r2, r3, #1
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800721a:	b29b      	uxth	r3, r3
 800721c:	3b01      	subs	r3, #1
 800721e:	b29a      	uxth	r2, r3
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007226:	e015      	b.n	8007254 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007228:	f7fb fd34 	bl	8002c94 <HAL_GetTick>
 800722c:	4602      	mov	r2, r0
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	1ad3      	subs	r3, r2, r3
 8007232:	683a      	ldr	r2, [r7, #0]
 8007234:	429a      	cmp	r2, r3
 8007236:	d803      	bhi.n	8007240 <HAL_SPI_Receive+0x19c>
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800723e:	d102      	bne.n	8007246 <HAL_SPI_Receive+0x1a2>
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d106      	bne.n	8007254 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8007246:	2303      	movs	r3, #3
 8007248:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2201      	movs	r2, #1
 800724e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8007252:	e055      	b.n	8007300 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800725a:	b29b      	uxth	r3, r3
 800725c:	2b00      	cmp	r3, #0
 800725e:	d1c4      	bne.n	80071ea <HAL_SPI_Receive+0x146>
 8007260:	e038      	b.n	80072d4 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	f003 0301 	and.w	r3, r3, #1
 800726c:	2b01      	cmp	r3, #1
 800726e:	d115      	bne.n	800729c <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	68da      	ldr	r2, [r3, #12]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800727a:	b292      	uxth	r2, r2
 800727c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007282:	1c9a      	adds	r2, r3, #2
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800728e:	b29b      	uxth	r3, r3
 8007290:	3b01      	subs	r3, #1
 8007292:	b29a      	uxth	r2, r3
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800729a:	e015      	b.n	80072c8 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800729c:	f7fb fcfa 	bl	8002c94 <HAL_GetTick>
 80072a0:	4602      	mov	r2, r0
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	1ad3      	subs	r3, r2, r3
 80072a6:	683a      	ldr	r2, [r7, #0]
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d803      	bhi.n	80072b4 <HAL_SPI_Receive+0x210>
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072b2:	d102      	bne.n	80072ba <HAL_SPI_Receive+0x216>
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d106      	bne.n	80072c8 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 80072ba:	2303      	movs	r3, #3
 80072bc:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2201      	movs	r2, #1
 80072c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80072c6:	e01b      	b.n	8007300 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d1c6      	bne.n	8007262 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80072d4:	693a      	ldr	r2, [r7, #16]
 80072d6:	6839      	ldr	r1, [r7, #0]
 80072d8:	68f8      	ldr	r0, [r7, #12]
 80072da:	f000 ff2d 	bl	8008138 <SPI_EndRxTransaction>
 80072de:	4603      	mov	r3, r0
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d002      	beq.n	80072ea <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2220      	movs	r2, #32
 80072e8:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d002      	beq.n	80072f8 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 80072f2:	2301      	movs	r3, #1
 80072f4:	75fb      	strb	r3, [r7, #23]
 80072f6:	e003      	b.n	8007300 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2201      	movs	r2, #1
 80072fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2200      	movs	r2, #0
 8007304:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007308:	7dfb      	ldrb	r3, [r7, #23]
}
 800730a:	4618      	mov	r0, r3
 800730c:	3718      	adds	r7, #24
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}

08007312 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007312:	b580      	push	{r7, lr}
 8007314:	b08a      	sub	sp, #40	; 0x28
 8007316:	af00      	add	r7, sp, #0
 8007318:	60f8      	str	r0, [r7, #12]
 800731a:	60b9      	str	r1, [r7, #8]
 800731c:	607a      	str	r2, [r7, #4]
 800731e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007320:	2301      	movs	r3, #1
 8007322:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007324:	2300      	movs	r3, #0
 8007326:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007330:	2b01      	cmp	r3, #1
 8007332:	d101      	bne.n	8007338 <HAL_SPI_TransmitReceive+0x26>
 8007334:	2302      	movs	r3, #2
 8007336:	e20a      	b.n	800774e <HAL_SPI_TransmitReceive+0x43c>
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2201      	movs	r2, #1
 800733c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007340:	f7fb fca8 	bl	8002c94 <HAL_GetTick>
 8007344:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800734c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007354:	887b      	ldrh	r3, [r7, #2]
 8007356:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007358:	887b      	ldrh	r3, [r7, #2]
 800735a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800735c:	7efb      	ldrb	r3, [r7, #27]
 800735e:	2b01      	cmp	r3, #1
 8007360:	d00e      	beq.n	8007380 <HAL_SPI_TransmitReceive+0x6e>
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007368:	d106      	bne.n	8007378 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d102      	bne.n	8007378 <HAL_SPI_TransmitReceive+0x66>
 8007372:	7efb      	ldrb	r3, [r7, #27]
 8007374:	2b04      	cmp	r3, #4
 8007376:	d003      	beq.n	8007380 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007378:	2302      	movs	r3, #2
 800737a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800737e:	e1e0      	b.n	8007742 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d005      	beq.n	8007392 <HAL_SPI_TransmitReceive+0x80>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d002      	beq.n	8007392 <HAL_SPI_TransmitReceive+0x80>
 800738c:	887b      	ldrh	r3, [r7, #2]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d103      	bne.n	800739a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007392:	2301      	movs	r3, #1
 8007394:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007398:	e1d3      	b.n	8007742 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80073a0:	b2db      	uxtb	r3, r3
 80073a2:	2b04      	cmp	r3, #4
 80073a4:	d003      	beq.n	80073ae <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2205      	movs	r2, #5
 80073aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2200      	movs	r2, #0
 80073b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	887a      	ldrh	r2, [r7, #2]
 80073be:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	887a      	ldrh	r2, [r7, #2]
 80073c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	68ba      	ldr	r2, [r7, #8]
 80073ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	887a      	ldrh	r2, [r7, #2]
 80073d4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	887a      	ldrh	r2, [r7, #2]
 80073da:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2200      	movs	r2, #0
 80073e0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2200      	movs	r2, #0
 80073e6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	68db      	ldr	r3, [r3, #12]
 80073ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80073f0:	d802      	bhi.n	80073f8 <HAL_SPI_TransmitReceive+0xe6>
 80073f2:	8a3b      	ldrh	r3, [r7, #16]
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d908      	bls.n	800740a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	685a      	ldr	r2, [r3, #4]
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007406:	605a      	str	r2, [r3, #4]
 8007408:	e007      	b.n	800741a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	685a      	ldr	r2, [r3, #4]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007418:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007424:	2b40      	cmp	r3, #64	; 0x40
 8007426:	d007      	beq.n	8007438 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007436:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007440:	f240 8081 	bls.w	8007546 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d002      	beq.n	8007452 <HAL_SPI_TransmitReceive+0x140>
 800744c:	8a7b      	ldrh	r3, [r7, #18]
 800744e:	2b01      	cmp	r3, #1
 8007450:	d16d      	bne.n	800752e <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007456:	881a      	ldrh	r2, [r3, #0]
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007462:	1c9a      	adds	r2, r3, #2
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800746c:	b29b      	uxth	r3, r3
 800746e:	3b01      	subs	r3, #1
 8007470:	b29a      	uxth	r2, r3
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007476:	e05a      	b.n	800752e <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	f003 0302 	and.w	r3, r3, #2
 8007482:	2b02      	cmp	r3, #2
 8007484:	d11b      	bne.n	80074be <HAL_SPI_TransmitReceive+0x1ac>
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800748a:	b29b      	uxth	r3, r3
 800748c:	2b00      	cmp	r3, #0
 800748e:	d016      	beq.n	80074be <HAL_SPI_TransmitReceive+0x1ac>
 8007490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007492:	2b01      	cmp	r3, #1
 8007494:	d113      	bne.n	80074be <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800749a:	881a      	ldrh	r2, [r3, #0]
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a6:	1c9a      	adds	r2, r3, #2
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	3b01      	subs	r3, #1
 80074b4:	b29a      	uxth	r2, r3
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80074ba:	2300      	movs	r3, #0
 80074bc:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	f003 0301 	and.w	r3, r3, #1
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d11c      	bne.n	8007506 <HAL_SPI_TransmitReceive+0x1f4>
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d016      	beq.n	8007506 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	68da      	ldr	r2, [r3, #12]
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e2:	b292      	uxth	r2, r2
 80074e4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ea:	1c9a      	adds	r2, r3, #2
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	3b01      	subs	r3, #1
 80074fa:	b29a      	uxth	r2, r3
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007502:	2301      	movs	r3, #1
 8007504:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007506:	f7fb fbc5 	bl	8002c94 <HAL_GetTick>
 800750a:	4602      	mov	r2, r0
 800750c:	69fb      	ldr	r3, [r7, #28]
 800750e:	1ad3      	subs	r3, r2, r3
 8007510:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007512:	429a      	cmp	r2, r3
 8007514:	d80b      	bhi.n	800752e <HAL_SPI_TransmitReceive+0x21c>
 8007516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800751c:	d007      	beq.n	800752e <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800751e:	2303      	movs	r3, #3
 8007520:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2201      	movs	r2, #1
 8007528:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800752c:	e109      	b.n	8007742 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007532:	b29b      	uxth	r3, r3
 8007534:	2b00      	cmp	r3, #0
 8007536:	d19f      	bne.n	8007478 <HAL_SPI_TransmitReceive+0x166>
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800753e:	b29b      	uxth	r3, r3
 8007540:	2b00      	cmp	r3, #0
 8007542:	d199      	bne.n	8007478 <HAL_SPI_TransmitReceive+0x166>
 8007544:	e0e3      	b.n	800770e <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d003      	beq.n	8007556 <HAL_SPI_TransmitReceive+0x244>
 800754e:	8a7b      	ldrh	r3, [r7, #18]
 8007550:	2b01      	cmp	r3, #1
 8007552:	f040 80cf 	bne.w	80076f4 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800755a:	b29b      	uxth	r3, r3
 800755c:	2b01      	cmp	r3, #1
 800755e:	d912      	bls.n	8007586 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007564:	881a      	ldrh	r2, [r3, #0]
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007570:	1c9a      	adds	r2, r3, #2
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800757a:	b29b      	uxth	r3, r3
 800757c:	3b02      	subs	r3, #2
 800757e:	b29a      	uxth	r2, r3
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007584:	e0b6      	b.n	80076f4 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	330c      	adds	r3, #12
 8007590:	7812      	ldrb	r2, [r2, #0]
 8007592:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007598:	1c5a      	adds	r2, r3, #1
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	3b01      	subs	r3, #1
 80075a6:	b29a      	uxth	r2, r3
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075ac:	e0a2      	b.n	80076f4 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	689b      	ldr	r3, [r3, #8]
 80075b4:	f003 0302 	and.w	r3, r3, #2
 80075b8:	2b02      	cmp	r3, #2
 80075ba:	d134      	bne.n	8007626 <HAL_SPI_TransmitReceive+0x314>
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d02f      	beq.n	8007626 <HAL_SPI_TransmitReceive+0x314>
 80075c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d12c      	bne.n	8007626 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d912      	bls.n	80075fc <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075da:	881a      	ldrh	r2, [r3, #0]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e6:	1c9a      	adds	r2, r3, #2
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	3b02      	subs	r3, #2
 80075f4:	b29a      	uxth	r2, r3
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80075fa:	e012      	b.n	8007622 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	330c      	adds	r3, #12
 8007606:	7812      	ldrb	r2, [r2, #0]
 8007608:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800760e:	1c5a      	adds	r2, r3, #1
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007618:	b29b      	uxth	r3, r3
 800761a:	3b01      	subs	r3, #1
 800761c:	b29a      	uxth	r2, r3
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007622:	2300      	movs	r3, #0
 8007624:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	f003 0301 	and.w	r3, r3, #1
 8007630:	2b01      	cmp	r3, #1
 8007632:	d148      	bne.n	80076c6 <HAL_SPI_TransmitReceive+0x3b4>
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800763a:	b29b      	uxth	r3, r3
 800763c:	2b00      	cmp	r3, #0
 800763e:	d042      	beq.n	80076c6 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007646:	b29b      	uxth	r3, r3
 8007648:	2b01      	cmp	r3, #1
 800764a:	d923      	bls.n	8007694 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	68da      	ldr	r2, [r3, #12]
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007656:	b292      	uxth	r2, r2
 8007658:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800765e:	1c9a      	adds	r2, r3, #2
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800766a:	b29b      	uxth	r3, r3
 800766c:	3b02      	subs	r3, #2
 800766e:	b29a      	uxth	r2, r3
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800767c:	b29b      	uxth	r3, r3
 800767e:	2b01      	cmp	r3, #1
 8007680:	d81f      	bhi.n	80076c2 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	685a      	ldr	r2, [r3, #4]
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007690:	605a      	str	r2, [r3, #4]
 8007692:	e016      	b.n	80076c2 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f103 020c 	add.w	r2, r3, #12
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a0:	7812      	ldrb	r2, [r2, #0]
 80076a2:	b2d2      	uxtb	r2, r2
 80076a4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076aa:	1c5a      	adds	r2, r3, #1
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	3b01      	subs	r3, #1
 80076ba:	b29a      	uxth	r2, r3
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80076c2:	2301      	movs	r3, #1
 80076c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80076c6:	f7fb fae5 	bl	8002c94 <HAL_GetTick>
 80076ca:	4602      	mov	r2, r0
 80076cc:	69fb      	ldr	r3, [r7, #28]
 80076ce:	1ad3      	subs	r3, r2, r3
 80076d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d803      	bhi.n	80076de <HAL_SPI_TransmitReceive+0x3cc>
 80076d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076dc:	d102      	bne.n	80076e4 <HAL_SPI_TransmitReceive+0x3d2>
 80076de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d107      	bne.n	80076f4 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80076e4:	2303      	movs	r3, #3
 80076e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2201      	movs	r2, #1
 80076ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80076f2:	e026      	b.n	8007742 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	f47f af57 	bne.w	80075ae <HAL_SPI_TransmitReceive+0x29c>
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007706:	b29b      	uxth	r3, r3
 8007708:	2b00      	cmp	r3, #0
 800770a:	f47f af50 	bne.w	80075ae <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800770e:	69fa      	ldr	r2, [r7, #28]
 8007710:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007712:	68f8      	ldr	r0, [r7, #12]
 8007714:	f000 fd68 	bl	80081e8 <SPI_EndRxTxTransaction>
 8007718:	4603      	mov	r3, r0
 800771a:	2b00      	cmp	r3, #0
 800771c:	d005      	beq.n	800772a <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800771e:	2301      	movs	r3, #1
 8007720:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2220      	movs	r2, #32
 8007728:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800772e:	2b00      	cmp	r3, #0
 8007730:	d003      	beq.n	800773a <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007738:	e003      	b.n	8007742 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2201      	movs	r2, #1
 800773e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2200      	movs	r2, #0
 8007746:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800774a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800774e:	4618      	mov	r0, r3
 8007750:	3728      	adds	r7, #40	; 0x28
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
	...

08007758 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b086      	sub	sp, #24
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	4613      	mov	r3, r2
 8007764:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007766:	2300      	movs	r3, #0
 8007768:	75fb      	strb	r3, [r7, #23]


  if (hspi->State != HAL_SPI_STATE_READY)
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007770:	b2db      	uxtb	r3, r3
 8007772:	2b01      	cmp	r3, #1
 8007774:	d002      	beq.n	800777c <HAL_SPI_Receive_IT+0x24>
  {
    errorcode = HAL_BUSY;
 8007776:	2302      	movs	r3, #2
 8007778:	75fb      	strb	r3, [r7, #23]
    goto error;
 800777a:	e092      	b.n	80078a2 <HAL_SPI_Receive_IT+0x14a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d110      	bne.n	80077a6 <HAL_SPI_Receive_IT+0x4e>
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800778c:	d10b      	bne.n	80077a6 <HAL_SPI_Receive_IT+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2204      	movs	r2, #4
 8007792:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8007796:	88fb      	ldrh	r3, [r7, #6]
 8007798:	68ba      	ldr	r2, [r7, #8]
 800779a:	68b9      	ldr	r1, [r7, #8]
 800779c:	68f8      	ldr	r0, [r7, #12]
 800779e:	f000 f889 	bl	80078b4 <HAL_SPI_TransmitReceive_IT>
 80077a2:	4603      	mov	r3, r0
 80077a4:	e07e      	b.n	80078a4 <HAL_SPI_Receive_IT+0x14c>
  }


  if ((pData == NULL) || (Size == 0U))
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d002      	beq.n	80077b2 <HAL_SPI_Receive_IT+0x5a>
 80077ac:	88fb      	ldrh	r3, [r7, #6]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d102      	bne.n	80077b8 <HAL_SPI_Receive_IT+0x60>
  {
    errorcode = HAL_ERROR;
 80077b2:	2301      	movs	r3, #1
 80077b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80077b6:	e074      	b.n	80078a2 <HAL_SPI_Receive_IT+0x14a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d101      	bne.n	80077c6 <HAL_SPI_Receive_IT+0x6e>
 80077c2:	2302      	movs	r3, #2
 80077c4:	e06e      	b.n	80078a4 <HAL_SPI_Receive_IT+0x14c>
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2201      	movs	r2, #1
 80077ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2204      	movs	r2, #4
 80077d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2200      	movs	r2, #0
 80077da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	68ba      	ldr	r2, [r7, #8]
 80077e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	88fa      	ldrh	r2, [r7, #6]
 80077e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	88fa      	ldrh	r2, [r7, #6]
 80077ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2200      	movs	r2, #0
 80077f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2200      	movs	r2, #0
 80077fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2200      	movs	r2, #0
 8007802:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2200      	movs	r2, #0
 8007808:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	68db      	ldr	r3, [r3, #12]
 800780e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007812:	d90b      	bls.n	800782c <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	685a      	ldr	r2, [r3, #4]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007822:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	4a21      	ldr	r2, [pc, #132]	; (80078ac <HAL_SPI_Receive_IT+0x154>)
 8007828:	64da      	str	r2, [r3, #76]	; 0x4c
 800782a:	e00a      	b.n	8007842 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	685a      	ldr	r2, [r3, #4]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800783a:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	4a1c      	ldr	r2, [pc, #112]	; (80078b0 <HAL_SPI_Receive_IT+0x158>)
 8007840:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800784a:	d10f      	bne.n	800786c <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	681a      	ldr	r2, [r3, #0]
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800785a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	681a      	ldr	r2, [r3, #0]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800786a:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007876:	2b40      	cmp	r3, #64	; 0x40
 8007878:	d007      	beq.n	800788a <HAL_SPI_Receive_IT+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	681a      	ldr	r2, [r3, #0]
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007888:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2200      	movs	r2, #0
 800788e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	685a      	ldr	r2, [r3, #4]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80078a0:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 80078a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3718      	adds	r7, #24
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}
 80078ac:	08007eb1 	.word	0x08007eb1
 80078b0:	08007e61 	.word	0x08007e61

080078b4 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b087      	sub	sp, #28
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	60f8      	str	r0, [r7, #12]
 80078bc:	60b9      	str	r1, [r7, #8]
 80078be:	607a      	str	r2, [r7, #4]
 80078c0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80078c2:	2300      	movs	r3, #0
 80078c4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80078cc:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80078d4:	7dbb      	ldrb	r3, [r7, #22]
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d00d      	beq.n	80078f6 <HAL_SPI_TransmitReceive_IT+0x42>
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078e0:	d106      	bne.n	80078f0 <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	689b      	ldr	r3, [r3, #8]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d102      	bne.n	80078f0 <HAL_SPI_TransmitReceive_IT+0x3c>
 80078ea:	7dbb      	ldrb	r3, [r7, #22]
 80078ec:	2b04      	cmp	r3, #4
 80078ee:	d002      	beq.n	80078f6 <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 80078f0:	2302      	movs	r3, #2
 80078f2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80078f4:	e07d      	b.n	80079f2 <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d005      	beq.n	8007908 <HAL_SPI_TransmitReceive_IT+0x54>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d002      	beq.n	8007908 <HAL_SPI_TransmitReceive_IT+0x54>
 8007902:	887b      	ldrh	r3, [r7, #2]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d102      	bne.n	800790e <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 8007908:	2301      	movs	r3, #1
 800790a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800790c:	e071      	b.n	80079f2 <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007914:	2b01      	cmp	r3, #1
 8007916:	d101      	bne.n	800791c <HAL_SPI_TransmitReceive_IT+0x68>
 8007918:	2302      	movs	r3, #2
 800791a:	e06b      	b.n	80079f4 <HAL_SPI_TransmitReceive_IT+0x140>
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2201      	movs	r2, #1
 8007920:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800792a:	b2db      	uxtb	r3, r3
 800792c:	2b04      	cmp	r3, #4
 800792e:	d003      	beq.n	8007938 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2205      	movs	r2, #5
 8007934:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2200      	movs	r2, #0
 800793c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	68ba      	ldr	r2, [r7, #8]
 8007942:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	887a      	ldrh	r2, [r7, #2]
 8007948:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	887a      	ldrh	r2, [r7, #2]
 800794e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	687a      	ldr	r2, [r7, #4]
 8007954:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	887a      	ldrh	r2, [r7, #2]
 800795a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	887a      	ldrh	r2, [r7, #2]
 8007962:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	68db      	ldr	r3, [r3, #12]
 800796a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800796e:	d906      	bls.n	800797e <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	4a23      	ldr	r2, [pc, #140]	; (8007a00 <HAL_SPI_TransmitReceive_IT+0x14c>)
 8007974:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	4a22      	ldr	r2, [pc, #136]	; (8007a04 <HAL_SPI_TransmitReceive_IT+0x150>)
 800797a:	651a      	str	r2, [r3, #80]	; 0x50
 800797c:	e005      	b.n	800798a <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	4a21      	ldr	r2, [pc, #132]	; (8007a08 <HAL_SPI_TransmitReceive_IT+0x154>)
 8007982:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	4a21      	ldr	r2, [pc, #132]	; (8007a0c <HAL_SPI_TransmitReceive_IT+0x158>)
 8007988:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	68db      	ldr	r3, [r3, #12]
 800798e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007992:	d802      	bhi.n	800799a <HAL_SPI_TransmitReceive_IT+0xe6>
 8007994:	887b      	ldrh	r3, [r7, #2]
 8007996:	2b01      	cmp	r3, #1
 8007998:	d908      	bls.n	80079ac <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	685a      	ldr	r2, [r3, #4]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80079a8:	605a      	str	r2, [r3, #4]
 80079aa:	e007      	b.n	80079bc <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	685a      	ldr	r2, [r3, #4]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80079ba:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079c6:	2b40      	cmp	r3, #64	; 0x40
 80079c8:	d007      	beq.n	80079da <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	681a      	ldr	r2, [r3, #0]
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079d8:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2200      	movs	r2, #0
 80079de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	685a      	ldr	r2, [r3, #4]
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80079f0:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 80079f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	371c      	adds	r7, #28
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr
 8007a00:	08007d9b 	.word	0x08007d9b
 8007a04:	08007e01 	.word	0x08007e01
 8007a08:	08007c4b 	.word	0x08007c4b
 8007a0c:	08007d09 	.word	0x08007d09

08007a10 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b088      	sub	sp, #32
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007a28:	69bb      	ldr	r3, [r7, #24]
 8007a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d10e      	bne.n	8007a50 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007a32:	69bb      	ldr	r3, [r7, #24]
 8007a34:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d009      	beq.n	8007a50 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007a3c:	69fb      	ldr	r3, [r7, #28]
 8007a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d004      	beq.n	8007a50 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	4798      	blx	r3
    return;
 8007a4e:	e0ce      	b.n	8007bee <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007a50:	69bb      	ldr	r3, [r7, #24]
 8007a52:	f003 0302 	and.w	r3, r3, #2
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d009      	beq.n	8007a6e <HAL_SPI_IRQHandler+0x5e>
 8007a5a:	69fb      	ldr	r3, [r7, #28]
 8007a5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d004      	beq.n	8007a6e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	4798      	blx	r3
    return;
 8007a6c:	e0bf      	b.n	8007bee <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007a6e:	69bb      	ldr	r3, [r7, #24]
 8007a70:	f003 0320 	and.w	r3, r3, #32
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d10a      	bne.n	8007a8e <HAL_SPI_IRQHandler+0x7e>
 8007a78:	69bb      	ldr	r3, [r7, #24]
 8007a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d105      	bne.n	8007a8e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007a82:	69bb      	ldr	r3, [r7, #24]
 8007a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	f000 80b0 	beq.w	8007bee <HAL_SPI_IRQHandler+0x1de>
 8007a8e:	69fb      	ldr	r3, [r7, #28]
 8007a90:	f003 0320 	and.w	r3, r3, #32
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	f000 80aa 	beq.w	8007bee <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007a9a:	69bb      	ldr	r3, [r7, #24]
 8007a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d023      	beq.n	8007aec <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007aaa:	b2db      	uxtb	r3, r3
 8007aac:	2b03      	cmp	r3, #3
 8007aae:	d011      	beq.n	8007ad4 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ab4:	f043 0204 	orr.w	r2, r3, #4
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007abc:	2300      	movs	r3, #0
 8007abe:	617b      	str	r3, [r7, #20]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	68db      	ldr	r3, [r3, #12]
 8007ac6:	617b      	str	r3, [r7, #20]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	617b      	str	r3, [r7, #20]
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	e00b      	b.n	8007aec <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	613b      	str	r3, [r7, #16]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	68db      	ldr	r3, [r3, #12]
 8007ade:	613b      	str	r3, [r7, #16]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	613b      	str	r3, [r7, #16]
 8007ae8:	693b      	ldr	r3, [r7, #16]
        return;
 8007aea:	e080      	b.n	8007bee <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007aec:	69bb      	ldr	r3, [r7, #24]
 8007aee:	f003 0320 	and.w	r3, r3, #32
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d014      	beq.n	8007b20 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007afa:	f043 0201 	orr.w	r2, r3, #1
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007b02:	2300      	movs	r3, #0
 8007b04:	60fb      	str	r3, [r7, #12]
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	689b      	ldr	r3, [r3, #8]
 8007b0c:	60fb      	str	r3, [r7, #12]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b1c:	601a      	str	r2, [r3, #0]
 8007b1e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007b20:	69bb      	ldr	r3, [r7, #24]
 8007b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d00c      	beq.n	8007b44 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b2e:	f043 0208 	orr.w	r2, r3, #8
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007b36:	2300      	movs	r3, #0
 8007b38:	60bb      	str	r3, [r7, #8]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	60bb      	str	r3, [r7, #8]
 8007b42:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d04f      	beq.n	8007bec <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	685a      	ldr	r2, [r3, #4]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007b5a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007b64:	69fb      	ldr	r3, [r7, #28]
 8007b66:	f003 0302 	and.w	r3, r3, #2
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d104      	bne.n	8007b78 <HAL_SPI_IRQHandler+0x168>
 8007b6e:	69fb      	ldr	r3, [r7, #28]
 8007b70:	f003 0301 	and.w	r3, r3, #1
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d034      	beq.n	8007be2 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	685a      	ldr	r2, [r3, #4]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f022 0203 	bic.w	r2, r2, #3
 8007b86:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d011      	beq.n	8007bb4 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b94:	4a17      	ldr	r2, [pc, #92]	; (8007bf4 <HAL_SPI_IRQHandler+0x1e4>)
 8007b96:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f7fb f9ba 	bl	8002f16 <HAL_DMA_Abort_IT>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d005      	beq.n	8007bb4 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d016      	beq.n	8007bea <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bc0:	4a0c      	ldr	r2, [pc, #48]	; (8007bf4 <HAL_SPI_IRQHandler+0x1e4>)
 8007bc2:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f7fb f9a4 	bl	8002f16 <HAL_DMA_Abort_IT>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d00a      	beq.n	8007bea <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bd8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8007be0:	e003      	b.n	8007bea <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 f812 	bl	8007c0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007be8:	e000      	b.n	8007bec <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8007bea:	bf00      	nop
    return;
 8007bec:	bf00      	nop
  }
}
 8007bee:	3720      	adds	r7, #32
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}
 8007bf4:	08007c21 	.word	0x08007c21

08007bf8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b083      	sub	sp, #12
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007c00:	bf00      	nop
 8007c02:	370c      	adds	r7, #12
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007c14:	bf00      	nop
 8007c16:	370c      	adds	r7, #12
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr

08007c20 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b084      	sub	sp, #16
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c2c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2200      	movs	r2, #0
 8007c32:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007c3c:	68f8      	ldr	r0, [r7, #12]
 8007c3e:	f7ff ffe5 	bl	8007c0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007c42:	bf00      	nop
 8007c44:	3710      	adds	r7, #16
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}

08007c4a <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007c4a:	b580      	push	{r7, lr}
 8007c4c:	b082      	sub	sp, #8
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	2b01      	cmp	r3, #1
 8007c5c:	d923      	bls.n	8007ca6 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	68da      	ldr	r2, [r3, #12]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c68:	b292      	uxth	r2, r2
 8007c6a:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c70:	1c9a      	adds	r2, r3, #2
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	3b02      	subs	r3, #2
 8007c80:	b29a      	uxth	r2, r3
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007c8e:	b29b      	uxth	r3, r3
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d11f      	bne.n	8007cd4 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	685a      	ldr	r2, [r3, #4]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007ca2:	605a      	str	r2, [r3, #4]
 8007ca4:	e016      	b.n	8007cd4 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f103 020c 	add.w	r2, r3, #12
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb2:	7812      	ldrb	r2, [r2, #0]
 8007cb4:	b2d2      	uxtb	r2, r2
 8007cb6:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cbc:	1c5a      	adds	r2, r3, #1
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	3b01      	subs	r3, #1
 8007ccc:	b29a      	uxth	r2, r3
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d10f      	bne.n	8007d00 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	685a      	ldr	r2, [r3, #4]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007cee:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d102      	bne.n	8007d00 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f000 faba 	bl	8008274 <SPI_CloseRxTx_ISR>
    }
  }
}
 8007d00:	bf00      	nop
 8007d02:	3708      	adds	r7, #8
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b082      	sub	sp, #8
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d912      	bls.n	8007d40 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d1e:	881a      	ldrh	r2, [r3, #0]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d2a:	1c9a      	adds	r2, r3, #2
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d34:	b29b      	uxth	r3, r3
 8007d36:	3b02      	subs	r3, #2
 8007d38:	b29a      	uxth	r2, r3
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007d3e:	e012      	b.n	8007d66 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	330c      	adds	r3, #12
 8007d4a:	7812      	ldrb	r2, [r2, #0]
 8007d4c:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d52:	1c5a      	adds	r2, r3, #1
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	3b01      	subs	r3, #1
 8007d60:	b29a      	uxth	r2, r3
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d110      	bne.n	8007d92 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	685a      	ldr	r2, [r3, #4]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d7e:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d102      	bne.n	8007d92 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f000 fa71 	bl	8008274 <SPI_CloseRxTx_ISR>
    }
  }
}
 8007d92:	bf00      	nop
 8007d94:	3708      	adds	r7, #8
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}

08007d9a <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007d9a:	b580      	push	{r7, lr}
 8007d9c:	b082      	sub	sp, #8
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	68da      	ldr	r2, [r3, #12]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dac:	b292      	uxth	r2, r2
 8007dae:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db4:	1c9a      	adds	r2, r3, #2
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007dc0:	b29b      	uxth	r3, r3
 8007dc2:	3b01      	subs	r3, #1
 8007dc4:	b29a      	uxth	r2, r3
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d10f      	bne.n	8007df8 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	685a      	ldr	r2, [r3, #4]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007de6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d102      	bne.n	8007df8 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 fa3e 	bl	8008274 <SPI_CloseRxTx_ISR>
    }
  }
}
 8007df8:	bf00      	nop
 8007dfa:	3708      	adds	r7, #8
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b082      	sub	sp, #8
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e0c:	881a      	ldrh	r2, [r3, #0]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e18:	1c9a      	adds	r2, r3, #2
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e22:	b29b      	uxth	r3, r3
 8007e24:	3b01      	subs	r3, #1
 8007e26:	b29a      	uxth	r2, r3
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e30:	b29b      	uxth	r3, r3
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d110      	bne.n	8007e58 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	685a      	ldr	r2, [r3, #4]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e44:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d102      	bne.n	8007e58 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 fa0e 	bl	8008274 <SPI_CloseRxTx_ISR>
    }
  }
}
 8007e58:	bf00      	nop
 8007e5a:	3708      	adds	r7, #8
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b082      	sub	sp, #8
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f103 020c 	add.w	r2, r3, #12
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e74:	7812      	ldrb	r2, [r2, #0]
 8007e76:	b2d2      	uxtb	r2, r2
 8007e78:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e7e:	1c5a      	adds	r2, r3, #1
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	3b01      	subs	r3, #1
 8007e8e:	b29a      	uxth	r2, r3
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d102      	bne.n	8007ea8 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 fa28 	bl	80082f8 <SPI_CloseRx_ISR>
  }
}
 8007ea8:	bf00      	nop
 8007eaa:	3708      	adds	r7, #8
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b082      	sub	sp, #8
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	68da      	ldr	r2, [r3, #12]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ec2:	b292      	uxth	r2, r2
 8007ec4:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eca:	1c9a      	adds	r2, r3, #2
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	3b01      	subs	r3, #1
 8007eda:	b29a      	uxth	r2, r3
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d102      	bne.n	8007ef4 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 fa02 	bl	80082f8 <SPI_CloseRx_ISR>
  }
}
 8007ef4:	bf00      	nop
 8007ef6:	3708      	adds	r7, #8
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}

08007efc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b088      	sub	sp, #32
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	60f8      	str	r0, [r7, #12]
 8007f04:	60b9      	str	r1, [r7, #8]
 8007f06:	603b      	str	r3, [r7, #0]
 8007f08:	4613      	mov	r3, r2
 8007f0a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007f0c:	f7fa fec2 	bl	8002c94 <HAL_GetTick>
 8007f10:	4602      	mov	r2, r0
 8007f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f14:	1a9b      	subs	r3, r3, r2
 8007f16:	683a      	ldr	r2, [r7, #0]
 8007f18:	4413      	add	r3, r2
 8007f1a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007f1c:	f7fa feba 	bl	8002c94 <HAL_GetTick>
 8007f20:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007f22:	4b39      	ldr	r3, [pc, #228]	; (8008008 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	015b      	lsls	r3, r3, #5
 8007f28:	0d1b      	lsrs	r3, r3, #20
 8007f2a:	69fa      	ldr	r2, [r7, #28]
 8007f2c:	fb02 f303 	mul.w	r3, r2, r3
 8007f30:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f32:	e054      	b.n	8007fde <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f3a:	d050      	beq.n	8007fde <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007f3c:	f7fa feaa 	bl	8002c94 <HAL_GetTick>
 8007f40:	4602      	mov	r2, r0
 8007f42:	69bb      	ldr	r3, [r7, #24]
 8007f44:	1ad3      	subs	r3, r2, r3
 8007f46:	69fa      	ldr	r2, [r7, #28]
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	d902      	bls.n	8007f52 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007f4c:	69fb      	ldr	r3, [r7, #28]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d13d      	bne.n	8007fce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	685a      	ldr	r2, [r3, #4]
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007f60:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f6a:	d111      	bne.n	8007f90 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f74:	d004      	beq.n	8007f80 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f7e:	d107      	bne.n	8007f90 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	681a      	ldr	r2, [r3, #0]
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f8e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f98:	d10f      	bne.n	8007fba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	681a      	ldr	r2, [r3, #0]
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007fa8:	601a      	str	r2, [r3, #0]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	681a      	ldr	r2, [r3, #0]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007fb8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007fca:	2303      	movs	r3, #3
 8007fcc:	e017      	b.n	8007ffe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d101      	bne.n	8007fd8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	3b01      	subs	r3, #1
 8007fdc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	689a      	ldr	r2, [r3, #8]
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	4013      	ands	r3, r2
 8007fe8:	68ba      	ldr	r2, [r7, #8]
 8007fea:	429a      	cmp	r2, r3
 8007fec:	bf0c      	ite	eq
 8007fee:	2301      	moveq	r3, #1
 8007ff0:	2300      	movne	r3, #0
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	79fb      	ldrb	r3, [r7, #7]
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d19b      	bne.n	8007f34 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007ffc:	2300      	movs	r3, #0
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3720      	adds	r7, #32
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}
 8008006:	bf00      	nop
 8008008:	20004b0c 	.word	0x20004b0c

0800800c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b08a      	sub	sp, #40	; 0x28
 8008010:	af00      	add	r7, sp, #0
 8008012:	60f8      	str	r0, [r7, #12]
 8008014:	60b9      	str	r1, [r7, #8]
 8008016:	607a      	str	r2, [r7, #4]
 8008018:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800801a:	2300      	movs	r3, #0
 800801c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800801e:	f7fa fe39 	bl	8002c94 <HAL_GetTick>
 8008022:	4602      	mov	r2, r0
 8008024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008026:	1a9b      	subs	r3, r3, r2
 8008028:	683a      	ldr	r2, [r7, #0]
 800802a:	4413      	add	r3, r2
 800802c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800802e:	f7fa fe31 	bl	8002c94 <HAL_GetTick>
 8008032:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	330c      	adds	r3, #12
 800803a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800803c:	4b3d      	ldr	r3, [pc, #244]	; (8008134 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	4613      	mov	r3, r2
 8008042:	009b      	lsls	r3, r3, #2
 8008044:	4413      	add	r3, r2
 8008046:	00da      	lsls	r2, r3, #3
 8008048:	1ad3      	subs	r3, r2, r3
 800804a:	0d1b      	lsrs	r3, r3, #20
 800804c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800804e:	fb02 f303 	mul.w	r3, r2, r3
 8008052:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008054:	e060      	b.n	8008118 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800805c:	d107      	bne.n	800806e <SPI_WaitFifoStateUntilTimeout+0x62>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d104      	bne.n	800806e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008064:	69fb      	ldr	r3, [r7, #28]
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	b2db      	uxtb	r3, r3
 800806a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800806c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008074:	d050      	beq.n	8008118 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008076:	f7fa fe0d 	bl	8002c94 <HAL_GetTick>
 800807a:	4602      	mov	r2, r0
 800807c:	6a3b      	ldr	r3, [r7, #32]
 800807e:	1ad3      	subs	r3, r2, r3
 8008080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008082:	429a      	cmp	r2, r3
 8008084:	d902      	bls.n	800808c <SPI_WaitFifoStateUntilTimeout+0x80>
 8008086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008088:	2b00      	cmp	r3, #0
 800808a:	d13d      	bne.n	8008108 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	685a      	ldr	r2, [r3, #4]
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800809a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80080a4:	d111      	bne.n	80080ca <SPI_WaitFifoStateUntilTimeout+0xbe>
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	689b      	ldr	r3, [r3, #8]
 80080aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080ae:	d004      	beq.n	80080ba <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080b8:	d107      	bne.n	80080ca <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	681a      	ldr	r2, [r3, #0]
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080c8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080d2:	d10f      	bne.n	80080f4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	681a      	ldr	r2, [r3, #0]
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80080e2:	601a      	str	r2, [r3, #0]
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	681a      	ldr	r2, [r3, #0]
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80080f2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2201      	movs	r2, #1
 80080f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2200      	movs	r2, #0
 8008100:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008104:	2303      	movs	r3, #3
 8008106:	e010      	b.n	800812a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008108:	69bb      	ldr	r3, [r7, #24]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d101      	bne.n	8008112 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800810e:	2300      	movs	r3, #0
 8008110:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8008112:	69bb      	ldr	r3, [r7, #24]
 8008114:	3b01      	subs	r3, #1
 8008116:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	689a      	ldr	r2, [r3, #8]
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	4013      	ands	r3, r2
 8008122:	687a      	ldr	r2, [r7, #4]
 8008124:	429a      	cmp	r2, r3
 8008126:	d196      	bne.n	8008056 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008128:	2300      	movs	r3, #0
}
 800812a:	4618      	mov	r0, r3
 800812c:	3728      	adds	r7, #40	; 0x28
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
 8008132:	bf00      	nop
 8008134:	20004b0c 	.word	0x20004b0c

08008138 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b086      	sub	sp, #24
 800813c:	af02      	add	r7, sp, #8
 800813e:	60f8      	str	r0, [r7, #12]
 8008140:	60b9      	str	r1, [r7, #8]
 8008142:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800814c:	d111      	bne.n	8008172 <SPI_EndRxTransaction+0x3a>
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	689b      	ldr	r3, [r3, #8]
 8008152:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008156:	d004      	beq.n	8008162 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	689b      	ldr	r3, [r3, #8]
 800815c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008160:	d107      	bne.n	8008172 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	681a      	ldr	r2, [r3, #0]
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008170:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	9300      	str	r3, [sp, #0]
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	2200      	movs	r2, #0
 800817a:	2180      	movs	r1, #128	; 0x80
 800817c:	68f8      	ldr	r0, [r7, #12]
 800817e:	f7ff febd 	bl	8007efc <SPI_WaitFlagStateUntilTimeout>
 8008182:	4603      	mov	r3, r0
 8008184:	2b00      	cmp	r3, #0
 8008186:	d007      	beq.n	8008198 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800818c:	f043 0220 	orr.w	r2, r3, #32
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008194:	2303      	movs	r3, #3
 8008196:	e023      	b.n	80081e0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80081a0:	d11d      	bne.n	80081de <SPI_EndRxTransaction+0xa6>
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	689b      	ldr	r3, [r3, #8]
 80081a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081aa:	d004      	beq.n	80081b6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	689b      	ldr	r3, [r3, #8]
 80081b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081b4:	d113      	bne.n	80081de <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	9300      	str	r3, [sp, #0]
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	2200      	movs	r2, #0
 80081be:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80081c2:	68f8      	ldr	r0, [r7, #12]
 80081c4:	f7ff ff22 	bl	800800c <SPI_WaitFifoStateUntilTimeout>
 80081c8:	4603      	mov	r3, r0
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d007      	beq.n	80081de <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081d2:	f043 0220 	orr.w	r2, r3, #32
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80081da:	2303      	movs	r3, #3
 80081dc:	e000      	b.n	80081e0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80081de:	2300      	movs	r3, #0
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3710      	adds	r7, #16
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b086      	sub	sp, #24
 80081ec:	af02      	add	r7, sp, #8
 80081ee:	60f8      	str	r0, [r7, #12]
 80081f0:	60b9      	str	r1, [r7, #8]
 80081f2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	9300      	str	r3, [sp, #0]
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	2200      	movs	r2, #0
 80081fc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008200:	68f8      	ldr	r0, [r7, #12]
 8008202:	f7ff ff03 	bl	800800c <SPI_WaitFifoStateUntilTimeout>
 8008206:	4603      	mov	r3, r0
 8008208:	2b00      	cmp	r3, #0
 800820a:	d007      	beq.n	800821c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008210:	f043 0220 	orr.w	r2, r3, #32
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008218:	2303      	movs	r3, #3
 800821a:	e027      	b.n	800826c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	9300      	str	r3, [sp, #0]
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	2200      	movs	r2, #0
 8008224:	2180      	movs	r1, #128	; 0x80
 8008226:	68f8      	ldr	r0, [r7, #12]
 8008228:	f7ff fe68 	bl	8007efc <SPI_WaitFlagStateUntilTimeout>
 800822c:	4603      	mov	r3, r0
 800822e:	2b00      	cmp	r3, #0
 8008230:	d007      	beq.n	8008242 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008236:	f043 0220 	orr.w	r2, r3, #32
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800823e:	2303      	movs	r3, #3
 8008240:	e014      	b.n	800826c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	9300      	str	r3, [sp, #0]
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	2200      	movs	r2, #0
 800824a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800824e:	68f8      	ldr	r0, [r7, #12]
 8008250:	f7ff fedc 	bl	800800c <SPI_WaitFifoStateUntilTimeout>
 8008254:	4603      	mov	r3, r0
 8008256:	2b00      	cmp	r3, #0
 8008258:	d007      	beq.n	800826a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800825e:	f043 0220 	orr.w	r2, r3, #32
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008266:	2303      	movs	r3, #3
 8008268:	e000      	b.n	800826c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800826a:	2300      	movs	r3, #0
}
 800826c:	4618      	mov	r0, r3
 800826e:	3710      	adds	r7, #16
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b084      	sub	sp, #16
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800827c:	f7fa fd0a 	bl	8002c94 <HAL_GetTick>
 8008280:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	685a      	ldr	r2, [r3, #4]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f022 0220 	bic.w	r2, r2, #32
 8008290:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008292:	68fa      	ldr	r2, [r7, #12]
 8008294:	2164      	movs	r1, #100	; 0x64
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f7ff ffa6 	bl	80081e8 <SPI_EndRxTxTransaction>
 800829c:	4603      	mov	r3, r0
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d005      	beq.n	80082ae <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082a6:	f043 0220 	orr.w	r2, r3, #32
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d115      	bne.n	80082e2 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80082bc:	b2db      	uxtb	r3, r3
 80082be:	2b04      	cmp	r3, #4
 80082c0:	d107      	bne.n	80082d2 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2201      	movs	r2, #1
 80082c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f7f9 fb6c 	bl	80019a8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80082d0:	e00e      	b.n	80082f0 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2201      	movs	r2, #1
 80082d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f7ff fc8c 	bl	8007bf8 <HAL_SPI_TxRxCpltCallback>
}
 80082e0:	e006      	b.n	80082f0 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2201      	movs	r2, #1
 80082e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f7ff fc8e 	bl	8007c0c <HAL_SPI_ErrorCallback>
}
 80082f0:	bf00      	nop
 80082f2:	3710      	adds	r7, #16
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}

080082f8 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b082      	sub	sp, #8
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	685a      	ldr	r2, [r3, #4]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800830e:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8008310:	f7fa fcc0 	bl	8002c94 <HAL_GetTick>
 8008314:	4603      	mov	r3, r0
 8008316:	461a      	mov	r2, r3
 8008318:	2164      	movs	r1, #100	; 0x64
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f7ff ff0c 	bl	8008138 <SPI_EndRxTransaction>
 8008320:	4603      	mov	r3, r0
 8008322:	2b00      	cmp	r3, #0
 8008324:	d005      	beq.n	8008332 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800832a:	f043 0220 	orr.w	r2, r3, #32
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2201      	movs	r2, #1
 8008336:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800833e:	2b00      	cmp	r3, #0
 8008340:	d103      	bne.n	800834a <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f7f9 fb30 	bl	80019a8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8008348:	e002      	b.n	8008350 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f7ff fc5e 	bl	8007c0c <HAL_SPI_ErrorCallback>
}
 8008350:	bf00      	nop
 8008352:	3708      	adds	r7, #8
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b082      	sub	sp, #8
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d101      	bne.n	800836a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008366:	2301      	movs	r3, #1
 8008368:	e042      	b.n	80083f0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008370:	2b00      	cmp	r3, #0
 8008372:	d106      	bne.n	8008382 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2200      	movs	r2, #0
 8008378:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f7fa fb45 	bl	8002a0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2224      	movs	r2, #36	; 0x24
 8008386:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	681a      	ldr	r2, [r3, #0]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f022 0201 	bic.w	r2, r2, #1
 8008398:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d002      	beq.n	80083a8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 fbb4 	bl	8008b10 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f000 f8b5 	bl	8008518 <UART_SetConfig>
 80083ae:	4603      	mov	r3, r0
 80083b0:	2b01      	cmp	r3, #1
 80083b2:	d101      	bne.n	80083b8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80083b4:	2301      	movs	r3, #1
 80083b6:	e01b      	b.n	80083f0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	685a      	ldr	r2, [r3, #4]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80083c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	689a      	ldr	r2, [r3, #8]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80083d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	681a      	ldr	r2, [r3, #0]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f042 0201 	orr.w	r2, r2, #1
 80083e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 fc33 	bl	8008c54 <UART_CheckIdleState>
 80083ee:	4603      	mov	r3, r0
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3708      	adds	r7, #8
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b08a      	sub	sp, #40	; 0x28
 80083fc:	af02      	add	r7, sp, #8
 80083fe:	60f8      	str	r0, [r7, #12]
 8008400:	60b9      	str	r1, [r7, #8]
 8008402:	603b      	str	r3, [r7, #0]
 8008404:	4613      	mov	r3, r2
 8008406:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800840e:	2b20      	cmp	r3, #32
 8008410:	d17c      	bne.n	800850c <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d002      	beq.n	800841e <HAL_UART_Transmit+0x26>
 8008418:	88fb      	ldrh	r3, [r7, #6]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d101      	bne.n	8008422 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800841e:	2301      	movs	r3, #1
 8008420:	e075      	b.n	800850e <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2200      	movs	r2, #0
 8008426:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2221      	movs	r2, #33	; 0x21
 800842e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008432:	f7fa fc2f 	bl	8002c94 <HAL_GetTick>
 8008436:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	88fa      	ldrh	r2, [r7, #6]
 800843c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	88fa      	ldrh	r2, [r7, #6]
 8008444:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	689b      	ldr	r3, [r3, #8]
 800844c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008450:	d108      	bne.n	8008464 <HAL_UART_Transmit+0x6c>
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	691b      	ldr	r3, [r3, #16]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d104      	bne.n	8008464 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800845a:	2300      	movs	r3, #0
 800845c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	61bb      	str	r3, [r7, #24]
 8008462:	e003      	b.n	800846c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008468:	2300      	movs	r3, #0
 800846a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800846c:	e031      	b.n	80084d2 <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	9300      	str	r3, [sp, #0]
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	2200      	movs	r2, #0
 8008476:	2180      	movs	r1, #128	; 0x80
 8008478:	68f8      	ldr	r0, [r7, #12]
 800847a:	f000 fc95 	bl	8008da8 <UART_WaitOnFlagUntilTimeout>
 800847e:	4603      	mov	r3, r0
 8008480:	2b00      	cmp	r3, #0
 8008482:	d005      	beq.n	8008490 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2220      	movs	r2, #32
 8008488:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800848c:	2303      	movs	r3, #3
 800848e:	e03e      	b.n	800850e <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 8008490:	69fb      	ldr	r3, [r7, #28]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d10b      	bne.n	80084ae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008496:	69bb      	ldr	r3, [r7, #24]
 8008498:	881a      	ldrh	r2, [r3, #0]
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80084a2:	b292      	uxth	r2, r2
 80084a4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80084a6:	69bb      	ldr	r3, [r7, #24]
 80084a8:	3302      	adds	r3, #2
 80084aa:	61bb      	str	r3, [r7, #24]
 80084ac:	e008      	b.n	80084c0 <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80084ae:	69fb      	ldr	r3, [r7, #28]
 80084b0:	781a      	ldrb	r2, [r3, #0]
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	b292      	uxth	r2, r2
 80084b8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80084ba:	69fb      	ldr	r3, [r7, #28]
 80084bc:	3301      	adds	r3, #1
 80084be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80084c6:	b29b      	uxth	r3, r3
 80084c8:	3b01      	subs	r3, #1
 80084ca:	b29a      	uxth	r2, r3
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80084d8:	b29b      	uxth	r3, r3
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d1c7      	bne.n	800846e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	9300      	str	r3, [sp, #0]
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	2200      	movs	r2, #0
 80084e6:	2140      	movs	r1, #64	; 0x40
 80084e8:	68f8      	ldr	r0, [r7, #12]
 80084ea:	f000 fc5d 	bl	8008da8 <UART_WaitOnFlagUntilTimeout>
 80084ee:	4603      	mov	r3, r0
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d005      	beq.n	8008500 <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2220      	movs	r2, #32
 80084f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80084fc:	2303      	movs	r3, #3
 80084fe:	e006      	b.n	800850e <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2220      	movs	r2, #32
 8008504:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8008508:	2300      	movs	r3, #0
 800850a:	e000      	b.n	800850e <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 800850c:	2302      	movs	r3, #2
  }
}
 800850e:	4618      	mov	r0, r3
 8008510:	3720      	adds	r7, #32
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}
	...

08008518 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008518:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800851c:	b08c      	sub	sp, #48	; 0x30
 800851e:	af00      	add	r7, sp, #0
 8008520:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008522:	2300      	movs	r3, #0
 8008524:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	689a      	ldr	r2, [r3, #8]
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	691b      	ldr	r3, [r3, #16]
 8008530:	431a      	orrs	r2, r3
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	695b      	ldr	r3, [r3, #20]
 8008536:	431a      	orrs	r2, r3
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	69db      	ldr	r3, [r3, #28]
 800853c:	4313      	orrs	r3, r2
 800853e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	681a      	ldr	r2, [r3, #0]
 8008546:	4baa      	ldr	r3, [pc, #680]	; (80087f0 <UART_SetConfig+0x2d8>)
 8008548:	4013      	ands	r3, r2
 800854a:	697a      	ldr	r2, [r7, #20]
 800854c:	6812      	ldr	r2, [r2, #0]
 800854e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008550:	430b      	orrs	r3, r1
 8008552:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	68da      	ldr	r2, [r3, #12]
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	430a      	orrs	r2, r1
 8008568:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	699b      	ldr	r3, [r3, #24]
 800856e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a9f      	ldr	r2, [pc, #636]	; (80087f4 <UART_SetConfig+0x2dc>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d004      	beq.n	8008584 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	6a1b      	ldr	r3, [r3, #32]
 800857e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008580:	4313      	orrs	r3, r2
 8008582:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	689b      	ldr	r3, [r3, #8]
 800858a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800858e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008592:	697a      	ldr	r2, [r7, #20]
 8008594:	6812      	ldr	r2, [r2, #0]
 8008596:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008598:	430b      	orrs	r3, r1
 800859a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085a2:	f023 010f 	bic.w	r1, r3, #15
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	430a      	orrs	r2, r1
 80085b0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4a90      	ldr	r2, [pc, #576]	; (80087f8 <UART_SetConfig+0x2e0>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d125      	bne.n	8008608 <UART_SetConfig+0xf0>
 80085bc:	4b8f      	ldr	r3, [pc, #572]	; (80087fc <UART_SetConfig+0x2e4>)
 80085be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085c2:	f003 0303 	and.w	r3, r3, #3
 80085c6:	2b03      	cmp	r3, #3
 80085c8:	d81a      	bhi.n	8008600 <UART_SetConfig+0xe8>
 80085ca:	a201      	add	r2, pc, #4	; (adr r2, 80085d0 <UART_SetConfig+0xb8>)
 80085cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085d0:	080085e1 	.word	0x080085e1
 80085d4:	080085f1 	.word	0x080085f1
 80085d8:	080085e9 	.word	0x080085e9
 80085dc:	080085f9 	.word	0x080085f9
 80085e0:	2301      	movs	r3, #1
 80085e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085e6:	e116      	b.n	8008816 <UART_SetConfig+0x2fe>
 80085e8:	2302      	movs	r3, #2
 80085ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085ee:	e112      	b.n	8008816 <UART_SetConfig+0x2fe>
 80085f0:	2304      	movs	r3, #4
 80085f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085f6:	e10e      	b.n	8008816 <UART_SetConfig+0x2fe>
 80085f8:	2308      	movs	r3, #8
 80085fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085fe:	e10a      	b.n	8008816 <UART_SetConfig+0x2fe>
 8008600:	2310      	movs	r3, #16
 8008602:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008606:	e106      	b.n	8008816 <UART_SetConfig+0x2fe>
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a7c      	ldr	r2, [pc, #496]	; (8008800 <UART_SetConfig+0x2e8>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d138      	bne.n	8008684 <UART_SetConfig+0x16c>
 8008612:	4b7a      	ldr	r3, [pc, #488]	; (80087fc <UART_SetConfig+0x2e4>)
 8008614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008618:	f003 030c 	and.w	r3, r3, #12
 800861c:	2b0c      	cmp	r3, #12
 800861e:	d82d      	bhi.n	800867c <UART_SetConfig+0x164>
 8008620:	a201      	add	r2, pc, #4	; (adr r2, 8008628 <UART_SetConfig+0x110>)
 8008622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008626:	bf00      	nop
 8008628:	0800865d 	.word	0x0800865d
 800862c:	0800867d 	.word	0x0800867d
 8008630:	0800867d 	.word	0x0800867d
 8008634:	0800867d 	.word	0x0800867d
 8008638:	0800866d 	.word	0x0800866d
 800863c:	0800867d 	.word	0x0800867d
 8008640:	0800867d 	.word	0x0800867d
 8008644:	0800867d 	.word	0x0800867d
 8008648:	08008665 	.word	0x08008665
 800864c:	0800867d 	.word	0x0800867d
 8008650:	0800867d 	.word	0x0800867d
 8008654:	0800867d 	.word	0x0800867d
 8008658:	08008675 	.word	0x08008675
 800865c:	2300      	movs	r3, #0
 800865e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008662:	e0d8      	b.n	8008816 <UART_SetConfig+0x2fe>
 8008664:	2302      	movs	r3, #2
 8008666:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800866a:	e0d4      	b.n	8008816 <UART_SetConfig+0x2fe>
 800866c:	2304      	movs	r3, #4
 800866e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008672:	e0d0      	b.n	8008816 <UART_SetConfig+0x2fe>
 8008674:	2308      	movs	r3, #8
 8008676:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800867a:	e0cc      	b.n	8008816 <UART_SetConfig+0x2fe>
 800867c:	2310      	movs	r3, #16
 800867e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008682:	e0c8      	b.n	8008816 <UART_SetConfig+0x2fe>
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4a5e      	ldr	r2, [pc, #376]	; (8008804 <UART_SetConfig+0x2ec>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d125      	bne.n	80086da <UART_SetConfig+0x1c2>
 800868e:	4b5b      	ldr	r3, [pc, #364]	; (80087fc <UART_SetConfig+0x2e4>)
 8008690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008694:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008698:	2b30      	cmp	r3, #48	; 0x30
 800869a:	d016      	beq.n	80086ca <UART_SetConfig+0x1b2>
 800869c:	2b30      	cmp	r3, #48	; 0x30
 800869e:	d818      	bhi.n	80086d2 <UART_SetConfig+0x1ba>
 80086a0:	2b20      	cmp	r3, #32
 80086a2:	d00a      	beq.n	80086ba <UART_SetConfig+0x1a2>
 80086a4:	2b20      	cmp	r3, #32
 80086a6:	d814      	bhi.n	80086d2 <UART_SetConfig+0x1ba>
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d002      	beq.n	80086b2 <UART_SetConfig+0x19a>
 80086ac:	2b10      	cmp	r3, #16
 80086ae:	d008      	beq.n	80086c2 <UART_SetConfig+0x1aa>
 80086b0:	e00f      	b.n	80086d2 <UART_SetConfig+0x1ba>
 80086b2:	2300      	movs	r3, #0
 80086b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086b8:	e0ad      	b.n	8008816 <UART_SetConfig+0x2fe>
 80086ba:	2302      	movs	r3, #2
 80086bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086c0:	e0a9      	b.n	8008816 <UART_SetConfig+0x2fe>
 80086c2:	2304      	movs	r3, #4
 80086c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086c8:	e0a5      	b.n	8008816 <UART_SetConfig+0x2fe>
 80086ca:	2308      	movs	r3, #8
 80086cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086d0:	e0a1      	b.n	8008816 <UART_SetConfig+0x2fe>
 80086d2:	2310      	movs	r3, #16
 80086d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086d8:	e09d      	b.n	8008816 <UART_SetConfig+0x2fe>
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4a4a      	ldr	r2, [pc, #296]	; (8008808 <UART_SetConfig+0x2f0>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d125      	bne.n	8008730 <UART_SetConfig+0x218>
 80086e4:	4b45      	ldr	r3, [pc, #276]	; (80087fc <UART_SetConfig+0x2e4>)
 80086e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086ea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80086ee:	2bc0      	cmp	r3, #192	; 0xc0
 80086f0:	d016      	beq.n	8008720 <UART_SetConfig+0x208>
 80086f2:	2bc0      	cmp	r3, #192	; 0xc0
 80086f4:	d818      	bhi.n	8008728 <UART_SetConfig+0x210>
 80086f6:	2b80      	cmp	r3, #128	; 0x80
 80086f8:	d00a      	beq.n	8008710 <UART_SetConfig+0x1f8>
 80086fa:	2b80      	cmp	r3, #128	; 0x80
 80086fc:	d814      	bhi.n	8008728 <UART_SetConfig+0x210>
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d002      	beq.n	8008708 <UART_SetConfig+0x1f0>
 8008702:	2b40      	cmp	r3, #64	; 0x40
 8008704:	d008      	beq.n	8008718 <UART_SetConfig+0x200>
 8008706:	e00f      	b.n	8008728 <UART_SetConfig+0x210>
 8008708:	2300      	movs	r3, #0
 800870a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800870e:	e082      	b.n	8008816 <UART_SetConfig+0x2fe>
 8008710:	2302      	movs	r3, #2
 8008712:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008716:	e07e      	b.n	8008816 <UART_SetConfig+0x2fe>
 8008718:	2304      	movs	r3, #4
 800871a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800871e:	e07a      	b.n	8008816 <UART_SetConfig+0x2fe>
 8008720:	2308      	movs	r3, #8
 8008722:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008726:	e076      	b.n	8008816 <UART_SetConfig+0x2fe>
 8008728:	2310      	movs	r3, #16
 800872a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800872e:	e072      	b.n	8008816 <UART_SetConfig+0x2fe>
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4a35      	ldr	r2, [pc, #212]	; (800880c <UART_SetConfig+0x2f4>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d12a      	bne.n	8008790 <UART_SetConfig+0x278>
 800873a:	4b30      	ldr	r3, [pc, #192]	; (80087fc <UART_SetConfig+0x2e4>)
 800873c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008740:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008744:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008748:	d01a      	beq.n	8008780 <UART_SetConfig+0x268>
 800874a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800874e:	d81b      	bhi.n	8008788 <UART_SetConfig+0x270>
 8008750:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008754:	d00c      	beq.n	8008770 <UART_SetConfig+0x258>
 8008756:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800875a:	d815      	bhi.n	8008788 <UART_SetConfig+0x270>
 800875c:	2b00      	cmp	r3, #0
 800875e:	d003      	beq.n	8008768 <UART_SetConfig+0x250>
 8008760:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008764:	d008      	beq.n	8008778 <UART_SetConfig+0x260>
 8008766:	e00f      	b.n	8008788 <UART_SetConfig+0x270>
 8008768:	2300      	movs	r3, #0
 800876a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800876e:	e052      	b.n	8008816 <UART_SetConfig+0x2fe>
 8008770:	2302      	movs	r3, #2
 8008772:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008776:	e04e      	b.n	8008816 <UART_SetConfig+0x2fe>
 8008778:	2304      	movs	r3, #4
 800877a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800877e:	e04a      	b.n	8008816 <UART_SetConfig+0x2fe>
 8008780:	2308      	movs	r3, #8
 8008782:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008786:	e046      	b.n	8008816 <UART_SetConfig+0x2fe>
 8008788:	2310      	movs	r3, #16
 800878a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800878e:	e042      	b.n	8008816 <UART_SetConfig+0x2fe>
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a17      	ldr	r2, [pc, #92]	; (80087f4 <UART_SetConfig+0x2dc>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d13a      	bne.n	8008810 <UART_SetConfig+0x2f8>
 800879a:	4b18      	ldr	r3, [pc, #96]	; (80087fc <UART_SetConfig+0x2e4>)
 800879c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80087a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80087a8:	d01a      	beq.n	80087e0 <UART_SetConfig+0x2c8>
 80087aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80087ae:	d81b      	bhi.n	80087e8 <UART_SetConfig+0x2d0>
 80087b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087b4:	d00c      	beq.n	80087d0 <UART_SetConfig+0x2b8>
 80087b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087ba:	d815      	bhi.n	80087e8 <UART_SetConfig+0x2d0>
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d003      	beq.n	80087c8 <UART_SetConfig+0x2b0>
 80087c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087c4:	d008      	beq.n	80087d8 <UART_SetConfig+0x2c0>
 80087c6:	e00f      	b.n	80087e8 <UART_SetConfig+0x2d0>
 80087c8:	2300      	movs	r3, #0
 80087ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087ce:	e022      	b.n	8008816 <UART_SetConfig+0x2fe>
 80087d0:	2302      	movs	r3, #2
 80087d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087d6:	e01e      	b.n	8008816 <UART_SetConfig+0x2fe>
 80087d8:	2304      	movs	r3, #4
 80087da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087de:	e01a      	b.n	8008816 <UART_SetConfig+0x2fe>
 80087e0:	2308      	movs	r3, #8
 80087e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087e6:	e016      	b.n	8008816 <UART_SetConfig+0x2fe>
 80087e8:	2310      	movs	r3, #16
 80087ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087ee:	e012      	b.n	8008816 <UART_SetConfig+0x2fe>
 80087f0:	cfff69f3 	.word	0xcfff69f3
 80087f4:	40008000 	.word	0x40008000
 80087f8:	40013800 	.word	0x40013800
 80087fc:	40021000 	.word	0x40021000
 8008800:	40004400 	.word	0x40004400
 8008804:	40004800 	.word	0x40004800
 8008808:	40004c00 	.word	0x40004c00
 800880c:	40005000 	.word	0x40005000
 8008810:	2310      	movs	r3, #16
 8008812:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4aae      	ldr	r2, [pc, #696]	; (8008ad4 <UART_SetConfig+0x5bc>)
 800881c:	4293      	cmp	r3, r2
 800881e:	f040 8097 	bne.w	8008950 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008822:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008826:	2b08      	cmp	r3, #8
 8008828:	d823      	bhi.n	8008872 <UART_SetConfig+0x35a>
 800882a:	a201      	add	r2, pc, #4	; (adr r2, 8008830 <UART_SetConfig+0x318>)
 800882c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008830:	08008855 	.word	0x08008855
 8008834:	08008873 	.word	0x08008873
 8008838:	0800885d 	.word	0x0800885d
 800883c:	08008873 	.word	0x08008873
 8008840:	08008863 	.word	0x08008863
 8008844:	08008873 	.word	0x08008873
 8008848:	08008873 	.word	0x08008873
 800884c:	08008873 	.word	0x08008873
 8008850:	0800886b 	.word	0x0800886b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008854:	f7fd fbaa 	bl	8005fac <HAL_RCC_GetPCLK1Freq>
 8008858:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800885a:	e010      	b.n	800887e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800885c:	4b9e      	ldr	r3, [pc, #632]	; (8008ad8 <UART_SetConfig+0x5c0>)
 800885e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008860:	e00d      	b.n	800887e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008862:	f7fd fb0b 	bl	8005e7c <HAL_RCC_GetSysClockFreq>
 8008866:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008868:	e009      	b.n	800887e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800886a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800886e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008870:	e005      	b.n	800887e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008872:	2300      	movs	r3, #0
 8008874:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008876:	2301      	movs	r3, #1
 8008878:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800887c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800887e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008880:	2b00      	cmp	r3, #0
 8008882:	f000 8130 	beq.w	8008ae6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800888a:	4a94      	ldr	r2, [pc, #592]	; (8008adc <UART_SetConfig+0x5c4>)
 800888c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008890:	461a      	mov	r2, r3
 8008892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008894:	fbb3 f3f2 	udiv	r3, r3, r2
 8008898:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	685a      	ldr	r2, [r3, #4]
 800889e:	4613      	mov	r3, r2
 80088a0:	005b      	lsls	r3, r3, #1
 80088a2:	4413      	add	r3, r2
 80088a4:	69ba      	ldr	r2, [r7, #24]
 80088a6:	429a      	cmp	r2, r3
 80088a8:	d305      	bcc.n	80088b6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80088b0:	69ba      	ldr	r2, [r7, #24]
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d903      	bls.n	80088be <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80088b6:	2301      	movs	r3, #1
 80088b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80088bc:	e113      	b.n	8008ae6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c0:	2200      	movs	r2, #0
 80088c2:	60bb      	str	r3, [r7, #8]
 80088c4:	60fa      	str	r2, [r7, #12]
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ca:	4a84      	ldr	r2, [pc, #528]	; (8008adc <UART_SetConfig+0x5c4>)
 80088cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088d0:	b29b      	uxth	r3, r3
 80088d2:	2200      	movs	r2, #0
 80088d4:	603b      	str	r3, [r7, #0]
 80088d6:	607a      	str	r2, [r7, #4]
 80088d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088dc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80088e0:	f7f7 fc8c 	bl	80001fc <__aeabi_uldivmod>
 80088e4:	4602      	mov	r2, r0
 80088e6:	460b      	mov	r3, r1
 80088e8:	4610      	mov	r0, r2
 80088ea:	4619      	mov	r1, r3
 80088ec:	f04f 0200 	mov.w	r2, #0
 80088f0:	f04f 0300 	mov.w	r3, #0
 80088f4:	020b      	lsls	r3, r1, #8
 80088f6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80088fa:	0202      	lsls	r2, r0, #8
 80088fc:	6979      	ldr	r1, [r7, #20]
 80088fe:	6849      	ldr	r1, [r1, #4]
 8008900:	0849      	lsrs	r1, r1, #1
 8008902:	2000      	movs	r0, #0
 8008904:	460c      	mov	r4, r1
 8008906:	4605      	mov	r5, r0
 8008908:	eb12 0804 	adds.w	r8, r2, r4
 800890c:	eb43 0905 	adc.w	r9, r3, r5
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	2200      	movs	r2, #0
 8008916:	469a      	mov	sl, r3
 8008918:	4693      	mov	fp, r2
 800891a:	4652      	mov	r2, sl
 800891c:	465b      	mov	r3, fp
 800891e:	4640      	mov	r0, r8
 8008920:	4649      	mov	r1, r9
 8008922:	f7f7 fc6b 	bl	80001fc <__aeabi_uldivmod>
 8008926:	4602      	mov	r2, r0
 8008928:	460b      	mov	r3, r1
 800892a:	4613      	mov	r3, r2
 800892c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800892e:	6a3b      	ldr	r3, [r7, #32]
 8008930:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008934:	d308      	bcc.n	8008948 <UART_SetConfig+0x430>
 8008936:	6a3b      	ldr	r3, [r7, #32]
 8008938:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800893c:	d204      	bcs.n	8008948 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	6a3a      	ldr	r2, [r7, #32]
 8008944:	60da      	str	r2, [r3, #12]
 8008946:	e0ce      	b.n	8008ae6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008948:	2301      	movs	r3, #1
 800894a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800894e:	e0ca      	b.n	8008ae6 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	69db      	ldr	r3, [r3, #28]
 8008954:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008958:	d166      	bne.n	8008a28 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800895a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800895e:	2b08      	cmp	r3, #8
 8008960:	d827      	bhi.n	80089b2 <UART_SetConfig+0x49a>
 8008962:	a201      	add	r2, pc, #4	; (adr r2, 8008968 <UART_SetConfig+0x450>)
 8008964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008968:	0800898d 	.word	0x0800898d
 800896c:	08008995 	.word	0x08008995
 8008970:	0800899d 	.word	0x0800899d
 8008974:	080089b3 	.word	0x080089b3
 8008978:	080089a3 	.word	0x080089a3
 800897c:	080089b3 	.word	0x080089b3
 8008980:	080089b3 	.word	0x080089b3
 8008984:	080089b3 	.word	0x080089b3
 8008988:	080089ab 	.word	0x080089ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800898c:	f7fd fb0e 	bl	8005fac <HAL_RCC_GetPCLK1Freq>
 8008990:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008992:	e014      	b.n	80089be <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008994:	f7fd fb20 	bl	8005fd8 <HAL_RCC_GetPCLK2Freq>
 8008998:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800899a:	e010      	b.n	80089be <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800899c:	4b4e      	ldr	r3, [pc, #312]	; (8008ad8 <UART_SetConfig+0x5c0>)
 800899e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80089a0:	e00d      	b.n	80089be <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80089a2:	f7fd fa6b 	bl	8005e7c <HAL_RCC_GetSysClockFreq>
 80089a6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80089a8:	e009      	b.n	80089be <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80089b0:	e005      	b.n	80089be <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80089b2:	2300      	movs	r3, #0
 80089b4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80089b6:	2301      	movs	r3, #1
 80089b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80089bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80089be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	f000 8090 	beq.w	8008ae6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ca:	4a44      	ldr	r2, [pc, #272]	; (8008adc <UART_SetConfig+0x5c4>)
 80089cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089d0:	461a      	mov	r2, r3
 80089d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80089d8:	005a      	lsls	r2, r3, #1
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	685b      	ldr	r3, [r3, #4]
 80089de:	085b      	lsrs	r3, r3, #1
 80089e0:	441a      	add	r2, r3
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	685b      	ldr	r3, [r3, #4]
 80089e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80089ea:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80089ec:	6a3b      	ldr	r3, [r7, #32]
 80089ee:	2b0f      	cmp	r3, #15
 80089f0:	d916      	bls.n	8008a20 <UART_SetConfig+0x508>
 80089f2:	6a3b      	ldr	r3, [r7, #32]
 80089f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089f8:	d212      	bcs.n	8008a20 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80089fa:	6a3b      	ldr	r3, [r7, #32]
 80089fc:	b29b      	uxth	r3, r3
 80089fe:	f023 030f 	bic.w	r3, r3, #15
 8008a02:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008a04:	6a3b      	ldr	r3, [r7, #32]
 8008a06:	085b      	lsrs	r3, r3, #1
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	f003 0307 	and.w	r3, r3, #7
 8008a0e:	b29a      	uxth	r2, r3
 8008a10:	8bfb      	ldrh	r3, [r7, #30]
 8008a12:	4313      	orrs	r3, r2
 8008a14:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	8bfa      	ldrh	r2, [r7, #30]
 8008a1c:	60da      	str	r2, [r3, #12]
 8008a1e:	e062      	b.n	8008ae6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008a20:	2301      	movs	r3, #1
 8008a22:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008a26:	e05e      	b.n	8008ae6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008a28:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008a2c:	2b08      	cmp	r3, #8
 8008a2e:	d828      	bhi.n	8008a82 <UART_SetConfig+0x56a>
 8008a30:	a201      	add	r2, pc, #4	; (adr r2, 8008a38 <UART_SetConfig+0x520>)
 8008a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a36:	bf00      	nop
 8008a38:	08008a5d 	.word	0x08008a5d
 8008a3c:	08008a65 	.word	0x08008a65
 8008a40:	08008a6d 	.word	0x08008a6d
 8008a44:	08008a83 	.word	0x08008a83
 8008a48:	08008a73 	.word	0x08008a73
 8008a4c:	08008a83 	.word	0x08008a83
 8008a50:	08008a83 	.word	0x08008a83
 8008a54:	08008a83 	.word	0x08008a83
 8008a58:	08008a7b 	.word	0x08008a7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a5c:	f7fd faa6 	bl	8005fac <HAL_RCC_GetPCLK1Freq>
 8008a60:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a62:	e014      	b.n	8008a8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a64:	f7fd fab8 	bl	8005fd8 <HAL_RCC_GetPCLK2Freq>
 8008a68:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a6a:	e010      	b.n	8008a8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a6c:	4b1a      	ldr	r3, [pc, #104]	; (8008ad8 <UART_SetConfig+0x5c0>)
 8008a6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008a70:	e00d      	b.n	8008a8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a72:	f7fd fa03 	bl	8005e7c <HAL_RCC_GetSysClockFreq>
 8008a76:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a78:	e009      	b.n	8008a8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a7e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008a80:	e005      	b.n	8008a8e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008a82:	2300      	movs	r3, #0
 8008a84:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008a86:	2301      	movs	r3, #1
 8008a88:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008a8c:	bf00      	nop
    }

    if (pclk != 0U)
 8008a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d028      	beq.n	8008ae6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a98:	4a10      	ldr	r2, [pc, #64]	; (8008adc <UART_SetConfig+0x5c4>)
 8008a9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa2:	fbb3 f2f2 	udiv	r2, r3, r2
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	085b      	lsrs	r3, r3, #1
 8008aac:	441a      	add	r2, r3
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ab6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ab8:	6a3b      	ldr	r3, [r7, #32]
 8008aba:	2b0f      	cmp	r3, #15
 8008abc:	d910      	bls.n	8008ae0 <UART_SetConfig+0x5c8>
 8008abe:	6a3b      	ldr	r3, [r7, #32]
 8008ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ac4:	d20c      	bcs.n	8008ae0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008ac6:	6a3b      	ldr	r3, [r7, #32]
 8008ac8:	b29a      	uxth	r2, r3
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	60da      	str	r2, [r3, #12]
 8008ad0:	e009      	b.n	8008ae6 <UART_SetConfig+0x5ce>
 8008ad2:	bf00      	nop
 8008ad4:	40008000 	.word	0x40008000
 8008ad8:	00f42400 	.word	0x00f42400
 8008adc:	08009288 	.word	0x08009288
      }
      else
      {
        ret = HAL_ERROR;
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	2201      	movs	r2, #1
 8008aea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	2201      	movs	r2, #1
 8008af2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	2200      	movs	r2, #0
 8008afa:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	2200      	movs	r2, #0
 8008b00:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008b02:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3730      	adds	r7, #48	; 0x30
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008b10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b083      	sub	sp, #12
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b1c:	f003 0308 	and.w	r3, r3, #8
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d00a      	beq.n	8008b3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	430a      	orrs	r2, r1
 8008b38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b3e:	f003 0301 	and.w	r3, r3, #1
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d00a      	beq.n	8008b5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	430a      	orrs	r2, r1
 8008b5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b60:	f003 0302 	and.w	r3, r3, #2
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d00a      	beq.n	8008b7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	430a      	orrs	r2, r1
 8008b7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b82:	f003 0304 	and.w	r3, r3, #4
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d00a      	beq.n	8008ba0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	430a      	orrs	r2, r1
 8008b9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ba4:	f003 0310 	and.w	r3, r3, #16
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d00a      	beq.n	8008bc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	689b      	ldr	r3, [r3, #8]
 8008bb2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	430a      	orrs	r2, r1
 8008bc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bc6:	f003 0320 	and.w	r3, r3, #32
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d00a      	beq.n	8008be4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	689b      	ldr	r3, [r3, #8]
 8008bd4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	430a      	orrs	r2, r1
 8008be2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d01a      	beq.n	8008c26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	430a      	orrs	r2, r1
 8008c04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c0e:	d10a      	bne.n	8008c26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	430a      	orrs	r2, r1
 8008c24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d00a      	beq.n	8008c48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	430a      	orrs	r2, r1
 8008c46:	605a      	str	r2, [r3, #4]
  }
}
 8008c48:	bf00      	nop
 8008c4a:	370c      	adds	r7, #12
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr

08008c54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b098      	sub	sp, #96	; 0x60
 8008c58:	af02      	add	r7, sp, #8
 8008c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008c64:	f7fa f816 	bl	8002c94 <HAL_GetTick>
 8008c68:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f003 0308 	and.w	r3, r3, #8
 8008c74:	2b08      	cmp	r3, #8
 8008c76:	d12f      	bne.n	8008cd8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c7c:	9300      	str	r3, [sp, #0]
 8008c7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c80:	2200      	movs	r2, #0
 8008c82:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 f88e 	bl	8008da8 <UART_WaitOnFlagUntilTimeout>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d022      	beq.n	8008cd8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c9a:	e853 3f00 	ldrex	r3, [r3]
 8008c9e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ca2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ca6:	653b      	str	r3, [r7, #80]	; 0x50
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	461a      	mov	r2, r3
 8008cae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cb0:	647b      	str	r3, [r7, #68]	; 0x44
 8008cb2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cb4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008cb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008cb8:	e841 2300 	strex	r3, r2, [r1]
 8008cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008cbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d1e6      	bne.n	8008c92 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2220      	movs	r2, #32
 8008cc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008cd4:	2303      	movs	r3, #3
 8008cd6:	e063      	b.n	8008da0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f003 0304 	and.w	r3, r3, #4
 8008ce2:	2b04      	cmp	r3, #4
 8008ce4:	d149      	bne.n	8008d7a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ce6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008cea:	9300      	str	r3, [sp, #0]
 8008cec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008cee:	2200      	movs	r2, #0
 8008cf0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f000 f857 	bl	8008da8 <UART_WaitOnFlagUntilTimeout>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d03c      	beq.n	8008d7a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d08:	e853 3f00 	ldrex	r3, [r3]
 8008d0c:	623b      	str	r3, [r7, #32]
   return(result);
 8008d0e:	6a3b      	ldr	r3, [r7, #32]
 8008d10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d1e:	633b      	str	r3, [r7, #48]	; 0x30
 8008d20:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008d24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d26:	e841 2300 	strex	r3, r2, [r1]
 8008d2a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d1e6      	bne.n	8008d00 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	3308      	adds	r3, #8
 8008d38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	e853 3f00 	ldrex	r3, [r3]
 8008d40:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	f023 0301 	bic.w	r3, r3, #1
 8008d48:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	3308      	adds	r3, #8
 8008d50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d52:	61fa      	str	r2, [r7, #28]
 8008d54:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d56:	69b9      	ldr	r1, [r7, #24]
 8008d58:	69fa      	ldr	r2, [r7, #28]
 8008d5a:	e841 2300 	strex	r3, r2, [r1]
 8008d5e:	617b      	str	r3, [r7, #20]
   return(result);
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d1e5      	bne.n	8008d32 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2220      	movs	r2, #32
 8008d6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2200      	movs	r2, #0
 8008d72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d76:	2303      	movs	r3, #3
 8008d78:	e012      	b.n	8008da0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2220      	movs	r2, #32
 8008d7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2220      	movs	r2, #32
 8008d86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2200      	movs	r2, #0
 8008d94:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008d9e:	2300      	movs	r3, #0
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	3758      	adds	r7, #88	; 0x58
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}

08008da8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b084      	sub	sp, #16
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	60f8      	str	r0, [r7, #12]
 8008db0:	60b9      	str	r1, [r7, #8]
 8008db2:	603b      	str	r3, [r7, #0]
 8008db4:	4613      	mov	r3, r2
 8008db6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008db8:	e049      	b.n	8008e4e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008dba:	69bb      	ldr	r3, [r7, #24]
 8008dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dc0:	d045      	beq.n	8008e4e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008dc2:	f7f9 ff67 	bl	8002c94 <HAL_GetTick>
 8008dc6:	4602      	mov	r2, r0
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	1ad3      	subs	r3, r2, r3
 8008dcc:	69ba      	ldr	r2, [r7, #24]
 8008dce:	429a      	cmp	r2, r3
 8008dd0:	d302      	bcc.n	8008dd8 <UART_WaitOnFlagUntilTimeout+0x30>
 8008dd2:	69bb      	ldr	r3, [r7, #24]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d101      	bne.n	8008ddc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008dd8:	2303      	movs	r3, #3
 8008dda:	e048      	b.n	8008e6e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f003 0304 	and.w	r3, r3, #4
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d031      	beq.n	8008e4e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	69db      	ldr	r3, [r3, #28]
 8008df0:	f003 0308 	and.w	r3, r3, #8
 8008df4:	2b08      	cmp	r3, #8
 8008df6:	d110      	bne.n	8008e1a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	2208      	movs	r2, #8
 8008dfe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008e00:	68f8      	ldr	r0, [r7, #12]
 8008e02:	f000 f838 	bl	8008e76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	2208      	movs	r2, #8
 8008e0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	2200      	movs	r2, #0
 8008e12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8008e16:	2301      	movs	r3, #1
 8008e18:	e029      	b.n	8008e6e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	69db      	ldr	r3, [r3, #28]
 8008e20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e28:	d111      	bne.n	8008e4e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008e32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008e34:	68f8      	ldr	r0, [r7, #12]
 8008e36:	f000 f81e 	bl	8008e76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	2220      	movs	r2, #32
 8008e3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	2200      	movs	r2, #0
 8008e46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008e4a:	2303      	movs	r3, #3
 8008e4c:	e00f      	b.n	8008e6e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	69da      	ldr	r2, [r3, #28]
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	4013      	ands	r3, r2
 8008e58:	68ba      	ldr	r2, [r7, #8]
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	bf0c      	ite	eq
 8008e5e:	2301      	moveq	r3, #1
 8008e60:	2300      	movne	r3, #0
 8008e62:	b2db      	uxtb	r3, r3
 8008e64:	461a      	mov	r2, r3
 8008e66:	79fb      	ldrb	r3, [r7, #7]
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d0a6      	beq.n	8008dba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008e6c:	2300      	movs	r3, #0
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3710      	adds	r7, #16
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}

08008e76 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e76:	b480      	push	{r7}
 8008e78:	b095      	sub	sp, #84	; 0x54
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e86:	e853 3f00 	ldrex	r3, [r3]
 8008e8a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	461a      	mov	r2, r3
 8008e9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e9c:	643b      	str	r3, [r7, #64]	; 0x40
 8008e9e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ea0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008ea2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008ea4:	e841 2300 	strex	r3, r2, [r1]
 8008ea8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d1e6      	bne.n	8008e7e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	3308      	adds	r3, #8
 8008eb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eb8:	6a3b      	ldr	r3, [r7, #32]
 8008eba:	e853 3f00 	ldrex	r3, [r3]
 8008ebe:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ec0:	69fb      	ldr	r3, [r7, #28]
 8008ec2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ec6:	f023 0301 	bic.w	r3, r3, #1
 8008eca:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	3308      	adds	r3, #8
 8008ed2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ed4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008ed6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ed8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008eda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008edc:	e841 2300 	strex	r3, r2, [r1]
 8008ee0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d1e3      	bne.n	8008eb0 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008eec:	2b01      	cmp	r3, #1
 8008eee:	d118      	bne.n	8008f22 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	e853 3f00 	ldrex	r3, [r3]
 8008efc:	60bb      	str	r3, [r7, #8]
   return(result);
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	f023 0310 	bic.w	r3, r3, #16
 8008f04:	647b      	str	r3, [r7, #68]	; 0x44
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f0e:	61bb      	str	r3, [r7, #24]
 8008f10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f12:	6979      	ldr	r1, [r7, #20]
 8008f14:	69ba      	ldr	r2, [r7, #24]
 8008f16:	e841 2300 	strex	r3, r2, [r1]
 8008f1a:	613b      	str	r3, [r7, #16]
   return(result);
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d1e6      	bne.n	8008ef0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2220      	movs	r2, #32
 8008f26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2200      	movs	r2, #0
 8008f34:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008f36:	bf00      	nop
 8008f38:	3754      	adds	r7, #84	; 0x54
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f40:	4770      	bx	lr

08008f42 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008f42:	b480      	push	{r7}
 8008f44:	b085      	sub	sp, #20
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	d101      	bne.n	8008f58 <HAL_UARTEx_DisableFifoMode+0x16>
 8008f54:	2302      	movs	r3, #2
 8008f56:	e027      	b.n	8008fa8 <HAL_UARTEx_DisableFifoMode+0x66>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2224      	movs	r2, #36	; 0x24
 8008f64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	681a      	ldr	r2, [r3, #0]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f022 0201 	bic.w	r2, r2, #1
 8008f7e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008f86:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	68fa      	ldr	r2, [r7, #12]
 8008f94:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2220      	movs	r2, #32
 8008f9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008fa6:	2300      	movs	r3, #0
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3714      	adds	r7, #20
 8008fac:	46bd      	mov	sp, r7
 8008fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb2:	4770      	bx	lr

08008fb4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b084      	sub	sp, #16
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
 8008fbc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d101      	bne.n	8008fcc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008fc8:	2302      	movs	r3, #2
 8008fca:	e02d      	b.n	8009028 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2201      	movs	r2, #1
 8008fd0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2224      	movs	r2, #36	; 0x24
 8008fd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	681a      	ldr	r2, [r3, #0]
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f022 0201 	bic.w	r2, r2, #1
 8008ff2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	689b      	ldr	r3, [r3, #8]
 8008ffa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	683a      	ldr	r2, [r7, #0]
 8009004:	430a      	orrs	r2, r1
 8009006:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f000 f84f 	bl	80090ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	68fa      	ldr	r2, [r7, #12]
 8009014:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2220      	movs	r2, #32
 800901a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2200      	movs	r2, #0
 8009022:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009026:	2300      	movs	r3, #0
}
 8009028:	4618      	mov	r0, r3
 800902a:	3710      	adds	r7, #16
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}

08009030 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b084      	sub	sp, #16
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
 8009038:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009040:	2b01      	cmp	r3, #1
 8009042:	d101      	bne.n	8009048 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009044:	2302      	movs	r3, #2
 8009046:	e02d      	b.n	80090a4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2201      	movs	r2, #1
 800904c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2224      	movs	r2, #36	; 0x24
 8009054:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	681a      	ldr	r2, [r3, #0]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f022 0201 	bic.w	r2, r2, #1
 800906e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	689b      	ldr	r3, [r3, #8]
 8009076:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	683a      	ldr	r2, [r7, #0]
 8009080:	430a      	orrs	r2, r1
 8009082:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f000 f811 	bl	80090ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	68fa      	ldr	r2, [r7, #12]
 8009090:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2220      	movs	r2, #32
 8009096:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2200      	movs	r2, #0
 800909e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80090a2:	2300      	movs	r3, #0
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3710      	adds	r7, #16
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}

080090ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b085      	sub	sp, #20
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d108      	bne.n	80090ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2201      	movs	r2, #1
 80090c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2201      	movs	r2, #1
 80090c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80090cc:	e031      	b.n	8009132 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80090ce:	2308      	movs	r3, #8
 80090d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80090d2:	2308      	movs	r3, #8
 80090d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	689b      	ldr	r3, [r3, #8]
 80090dc:	0e5b      	lsrs	r3, r3, #25
 80090de:	b2db      	uxtb	r3, r3
 80090e0:	f003 0307 	and.w	r3, r3, #7
 80090e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	689b      	ldr	r3, [r3, #8]
 80090ec:	0f5b      	lsrs	r3, r3, #29
 80090ee:	b2db      	uxtb	r3, r3
 80090f0:	f003 0307 	and.w	r3, r3, #7
 80090f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80090f6:	7bbb      	ldrb	r3, [r7, #14]
 80090f8:	7b3a      	ldrb	r2, [r7, #12]
 80090fa:	4911      	ldr	r1, [pc, #68]	; (8009140 <UARTEx_SetNbDataToProcess+0x94>)
 80090fc:	5c8a      	ldrb	r2, [r1, r2]
 80090fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009102:	7b3a      	ldrb	r2, [r7, #12]
 8009104:	490f      	ldr	r1, [pc, #60]	; (8009144 <UARTEx_SetNbDataToProcess+0x98>)
 8009106:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009108:	fb93 f3f2 	sdiv	r3, r3, r2
 800910c:	b29a      	uxth	r2, r3
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009114:	7bfb      	ldrb	r3, [r7, #15]
 8009116:	7b7a      	ldrb	r2, [r7, #13]
 8009118:	4909      	ldr	r1, [pc, #36]	; (8009140 <UARTEx_SetNbDataToProcess+0x94>)
 800911a:	5c8a      	ldrb	r2, [r1, r2]
 800911c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009120:	7b7a      	ldrb	r2, [r7, #13]
 8009122:	4908      	ldr	r1, [pc, #32]	; (8009144 <UARTEx_SetNbDataToProcess+0x98>)
 8009124:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009126:	fb93 f3f2 	sdiv	r3, r3, r2
 800912a:	b29a      	uxth	r2, r3
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009132:	bf00      	nop
 8009134:	3714      	adds	r7, #20
 8009136:	46bd      	mov	sp, r7
 8009138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913c:	4770      	bx	lr
 800913e:	bf00      	nop
 8009140:	080092a0 	.word	0x080092a0
 8009144:	080092a8 	.word	0x080092a8

08009148 <memset>:
 8009148:	4402      	add	r2, r0
 800914a:	4603      	mov	r3, r0
 800914c:	4293      	cmp	r3, r2
 800914e:	d100      	bne.n	8009152 <memset+0xa>
 8009150:	4770      	bx	lr
 8009152:	f803 1b01 	strb.w	r1, [r3], #1
 8009156:	e7f9      	b.n	800914c <memset+0x4>

08009158 <__libc_init_array>:
 8009158:	b570      	push	{r4, r5, r6, lr}
 800915a:	4d0d      	ldr	r5, [pc, #52]	; (8009190 <__libc_init_array+0x38>)
 800915c:	4c0d      	ldr	r4, [pc, #52]	; (8009194 <__libc_init_array+0x3c>)
 800915e:	1b64      	subs	r4, r4, r5
 8009160:	10a4      	asrs	r4, r4, #2
 8009162:	2600      	movs	r6, #0
 8009164:	42a6      	cmp	r6, r4
 8009166:	d109      	bne.n	800917c <__libc_init_array+0x24>
 8009168:	4d0b      	ldr	r5, [pc, #44]	; (8009198 <__libc_init_array+0x40>)
 800916a:	4c0c      	ldr	r4, [pc, #48]	; (800919c <__libc_init_array+0x44>)
 800916c:	f000 f818 	bl	80091a0 <_init>
 8009170:	1b64      	subs	r4, r4, r5
 8009172:	10a4      	asrs	r4, r4, #2
 8009174:	2600      	movs	r6, #0
 8009176:	42a6      	cmp	r6, r4
 8009178:	d105      	bne.n	8009186 <__libc_init_array+0x2e>
 800917a:	bd70      	pop	{r4, r5, r6, pc}
 800917c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009180:	4798      	blx	r3
 8009182:	3601      	adds	r6, #1
 8009184:	e7ee      	b.n	8009164 <__libc_init_array+0xc>
 8009186:	f855 3b04 	ldr.w	r3, [r5], #4
 800918a:	4798      	blx	r3
 800918c:	3601      	adds	r6, #1
 800918e:	e7f2      	b.n	8009176 <__libc_init_array+0x1e>
 8009190:	080092b8 	.word	0x080092b8
 8009194:	080092b8 	.word	0x080092b8
 8009198:	080092b8 	.word	0x080092b8
 800919c:	080092bc 	.word	0x080092bc

080091a0 <_init>:
 80091a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091a2:	bf00      	nop
 80091a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091a6:	bc08      	pop	{r3}
 80091a8:	469e      	mov	lr, r3
 80091aa:	4770      	bx	lr

080091ac <_fini>:
 80091ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ae:	bf00      	nop
 80091b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091b2:	bc08      	pop	{r3}
 80091b4:	469e      	mov	lr, r3
 80091b6:	4770      	bx	lr
