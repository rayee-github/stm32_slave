
slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f30  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  080090ec  080090ec  000190ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091e4  080091e4  00024b18  2**0
                  CONTENTS
  4 .ARM          00000008  080091e4  080091e4  000191e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080091ec  080091ec  00024b18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091ec  080091ec  000191ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080091f0  080091f0  000191f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00004b18  20000000  080091f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000067a8  20004b18  0800dd0c  00024b18  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000b2c0  0800dd0c  0002b2c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00024b18  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00024b48  2**0
                  CONTENTS, READONLY
 13 .debug_info   000199b3  00000000  00000000  00024b8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d56  00000000  00000000  0003e53e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001470  00000000  00000000  00041298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001005  00000000  00000000  00042708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00031a75  00000000  00000000  0004370d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001acda  00000000  00000000  00075182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0012af95  00000000  00000000  0008fe5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000057d4  00000000  00000000  001badf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  001c05c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20004b18 	.word	0x20004b18
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080090d4 	.word	0x080090d4

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20004b1c 	.word	0x20004b1c
 80001f8:	080090d4 	.word	0x080090d4

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b970 	b.w	80004f4 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	460d      	mov	r5, r1
 8000234:	4604      	mov	r4, r0
 8000236:	460f      	mov	r7, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14a      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023c:	428a      	cmp	r2, r1
 800023e:	4694      	mov	ip, r2
 8000240:	d965      	bls.n	800030e <__udivmoddi4+0xe2>
 8000242:	fab2 f382 	clz	r3, r2
 8000246:	b143      	cbz	r3, 800025a <__udivmoddi4+0x2e>
 8000248:	fa02 fc03 	lsl.w	ip, r2, r3
 800024c:	f1c3 0220 	rsb	r2, r3, #32
 8000250:	409f      	lsls	r7, r3
 8000252:	fa20 f202 	lsr.w	r2, r0, r2
 8000256:	4317      	orrs	r7, r2
 8000258:	409c      	lsls	r4, r3
 800025a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800025e:	fa1f f58c 	uxth.w	r5, ip
 8000262:	fbb7 f1fe 	udiv	r1, r7, lr
 8000266:	0c22      	lsrs	r2, r4, #16
 8000268:	fb0e 7711 	mls	r7, lr, r1, r7
 800026c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000270:	fb01 f005 	mul.w	r0, r1, r5
 8000274:	4290      	cmp	r0, r2
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x62>
 8000278:	eb1c 0202 	adds.w	r2, ip, r2
 800027c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000280:	f080 811c 	bcs.w	80004bc <__udivmoddi4+0x290>
 8000284:	4290      	cmp	r0, r2
 8000286:	f240 8119 	bls.w	80004bc <__udivmoddi4+0x290>
 800028a:	3902      	subs	r1, #2
 800028c:	4462      	add	r2, ip
 800028e:	1a12      	subs	r2, r2, r0
 8000290:	b2a4      	uxth	r4, r4
 8000292:	fbb2 f0fe 	udiv	r0, r2, lr
 8000296:	fb0e 2210 	mls	r2, lr, r0, r2
 800029a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800029e:	fb00 f505 	mul.w	r5, r0, r5
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x90>
 80002a6:	eb1c 0404 	adds.w	r4, ip, r4
 80002aa:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ae:	f080 8107 	bcs.w	80004c0 <__udivmoddi4+0x294>
 80002b2:	42a5      	cmp	r5, r4
 80002b4:	f240 8104 	bls.w	80004c0 <__udivmoddi4+0x294>
 80002b8:	4464      	add	r4, ip
 80002ba:	3802      	subs	r0, #2
 80002bc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c0:	1b64      	subs	r4, r4, r5
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11e      	cbz	r6, 80002ce <__udivmoddi4+0xa2>
 80002c6:	40dc      	lsrs	r4, r3
 80002c8:	2300      	movs	r3, #0
 80002ca:	e9c6 4300 	strd	r4, r3, [r6]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0xbc>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80ed 	beq.w	80004b6 <__udivmoddi4+0x28a>
 80002dc:	2100      	movs	r1, #0
 80002de:	e9c6 0500 	strd	r0, r5, [r6]
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	d149      	bne.n	8000384 <__udivmoddi4+0x158>
 80002f0:	42ab      	cmp	r3, r5
 80002f2:	d302      	bcc.n	80002fa <__udivmoddi4+0xce>
 80002f4:	4282      	cmp	r2, r0
 80002f6:	f200 80f8 	bhi.w	80004ea <__udivmoddi4+0x2be>
 80002fa:	1a84      	subs	r4, r0, r2
 80002fc:	eb65 0203 	sbc.w	r2, r5, r3
 8000300:	2001      	movs	r0, #1
 8000302:	4617      	mov	r7, r2
 8000304:	2e00      	cmp	r6, #0
 8000306:	d0e2      	beq.n	80002ce <__udivmoddi4+0xa2>
 8000308:	e9c6 4700 	strd	r4, r7, [r6]
 800030c:	e7df      	b.n	80002ce <__udivmoddi4+0xa2>
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xe6>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f382 	clz	r3, r2
 8000316:	2b00      	cmp	r3, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x210>
 800031c:	1a8a      	subs	r2, r1, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f fe8c 	uxth.w	lr, ip
 8000326:	2101      	movs	r1, #1
 8000328:	fbb2 f5f7 	udiv	r5, r2, r7
 800032c:	fb07 2015 	mls	r0, r7, r5, r2
 8000330:	0c22      	lsrs	r2, r4, #16
 8000332:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000336:	fb0e f005 	mul.w	r0, lr, r5
 800033a:	4290      	cmp	r0, r2
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x124>
 800033e:	eb1c 0202 	adds.w	r2, ip, r2
 8000342:	f105 38ff 	add.w	r8, r5, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4290      	cmp	r0, r2
 800034a:	f200 80cb 	bhi.w	80004e4 <__udivmoddi4+0x2b8>
 800034e:	4645      	mov	r5, r8
 8000350:	1a12      	subs	r2, r2, r0
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb2 f0f7 	udiv	r0, r2, r7
 8000358:	fb07 2210 	mls	r2, r7, r0, r2
 800035c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000360:	fb0e fe00 	mul.w	lr, lr, r0
 8000364:	45a6      	cmp	lr, r4
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x14e>
 8000368:	eb1c 0404 	adds.w	r4, ip, r4
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x14c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f200 80bb 	bhi.w	80004ee <__udivmoddi4+0x2c2>
 8000378:	4610      	mov	r0, r2
 800037a:	eba4 040e 	sub.w	r4, r4, lr
 800037e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000382:	e79f      	b.n	80002c4 <__udivmoddi4+0x98>
 8000384:	f1c1 0720 	rsb	r7, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 fc07 	lsr.w	ip, r2, r7
 800038e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000392:	fa05 f401 	lsl.w	r4, r5, r1
 8000396:	fa20 f307 	lsr.w	r3, r0, r7
 800039a:	40fd      	lsrs	r5, r7
 800039c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a0:	4323      	orrs	r3, r4
 80003a2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	fb09 5518 	mls	r5, r9, r8, r5
 80003ae:	0c1c      	lsrs	r4, r3, #16
 80003b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b4:	fb08 f50e 	mul.w	r5, r8, lr
 80003b8:	42a5      	cmp	r5, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	fa00 f001 	lsl.w	r0, r0, r1
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003cc:	f080 8088 	bcs.w	80004e0 <__udivmoddi4+0x2b4>
 80003d0:	42a5      	cmp	r5, r4
 80003d2:	f240 8085 	bls.w	80004e0 <__udivmoddi4+0x2b4>
 80003d6:	f1a8 0802 	sub.w	r8, r8, #2
 80003da:	4464      	add	r4, ip
 80003dc:	1b64      	subs	r4, r4, r5
 80003de:	b29d      	uxth	r5, r3
 80003e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e4:	fb09 4413 	mls	r4, r9, r3, r4
 80003e8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003ec:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003fc:	d26c      	bcs.n	80004d8 <__udivmoddi4+0x2ac>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	d96a      	bls.n	80004d8 <__udivmoddi4+0x2ac>
 8000402:	3b02      	subs	r3, #2
 8000404:	4464      	add	r4, ip
 8000406:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800040a:	fba3 9502 	umull	r9, r5, r3, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	42ac      	cmp	r4, r5
 8000414:	46c8      	mov	r8, r9
 8000416:	46ae      	mov	lr, r5
 8000418:	d356      	bcc.n	80004c8 <__udivmoddi4+0x29c>
 800041a:	d053      	beq.n	80004c4 <__udivmoddi4+0x298>
 800041c:	b156      	cbz	r6, 8000434 <__udivmoddi4+0x208>
 800041e:	ebb0 0208 	subs.w	r2, r0, r8
 8000422:	eb64 040e 	sbc.w	r4, r4, lr
 8000426:	fa04 f707 	lsl.w	r7, r4, r7
 800042a:	40ca      	lsrs	r2, r1
 800042c:	40cc      	lsrs	r4, r1
 800042e:	4317      	orrs	r7, r2
 8000430:	e9c6 7400 	strd	r7, r4, [r6]
 8000434:	4618      	mov	r0, r3
 8000436:	2100      	movs	r1, #0
 8000438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043c:	f1c3 0120 	rsb	r1, r3, #32
 8000440:	fa02 fc03 	lsl.w	ip, r2, r3
 8000444:	fa20 f201 	lsr.w	r2, r0, r1
 8000448:	fa25 f101 	lsr.w	r1, r5, r1
 800044c:	409d      	lsls	r5, r3
 800044e:	432a      	orrs	r2, r5
 8000450:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000454:	fa1f fe8c 	uxth.w	lr, ip
 8000458:	fbb1 f0f7 	udiv	r0, r1, r7
 800045c:	fb07 1510 	mls	r5, r7, r0, r1
 8000460:	0c11      	lsrs	r1, r2, #16
 8000462:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000466:	fb00 f50e 	mul.w	r5, r0, lr
 800046a:	428d      	cmp	r5, r1
 800046c:	fa04 f403 	lsl.w	r4, r4, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x258>
 8000472:	eb1c 0101 	adds.w	r1, ip, r1
 8000476:	f100 38ff 	add.w	r8, r0, #4294967295
 800047a:	d22f      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 800047c:	428d      	cmp	r5, r1
 800047e:	d92d      	bls.n	80004dc <__udivmoddi4+0x2b0>
 8000480:	3802      	subs	r0, #2
 8000482:	4461      	add	r1, ip
 8000484:	1b49      	subs	r1, r1, r5
 8000486:	b292      	uxth	r2, r2
 8000488:	fbb1 f5f7 	udiv	r5, r1, r7
 800048c:	fb07 1115 	mls	r1, r7, r5, r1
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	fb05 f10e 	mul.w	r1, r5, lr
 8000498:	4291      	cmp	r1, r2
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x282>
 800049c:	eb1c 0202 	adds.w	r2, ip, r2
 80004a0:	f105 38ff 	add.w	r8, r5, #4294967295
 80004a4:	d216      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 80004a6:	4291      	cmp	r1, r2
 80004a8:	d914      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 80004aa:	3d02      	subs	r5, #2
 80004ac:	4462      	add	r2, ip
 80004ae:	1a52      	subs	r2, r2, r1
 80004b0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004b4:	e738      	b.n	8000328 <__udivmoddi4+0xfc>
 80004b6:	4631      	mov	r1, r6
 80004b8:	4630      	mov	r0, r6
 80004ba:	e708      	b.n	80002ce <__udivmoddi4+0xa2>
 80004bc:	4639      	mov	r1, r7
 80004be:	e6e6      	b.n	800028e <__udivmoddi4+0x62>
 80004c0:	4610      	mov	r0, r2
 80004c2:	e6fb      	b.n	80002bc <__udivmoddi4+0x90>
 80004c4:	4548      	cmp	r0, r9
 80004c6:	d2a9      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c8:	ebb9 0802 	subs.w	r8, r9, r2
 80004cc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d0:	3b01      	subs	r3, #1
 80004d2:	e7a3      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d4:	4645      	mov	r5, r8
 80004d6:	e7ea      	b.n	80004ae <__udivmoddi4+0x282>
 80004d8:	462b      	mov	r3, r5
 80004da:	e794      	b.n	8000406 <__udivmoddi4+0x1da>
 80004dc:	4640      	mov	r0, r8
 80004de:	e7d1      	b.n	8000484 <__udivmoddi4+0x258>
 80004e0:	46d0      	mov	r8, sl
 80004e2:	e77b      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e4:	3d02      	subs	r5, #2
 80004e6:	4462      	add	r2, ip
 80004e8:	e732      	b.n	8000350 <__udivmoddi4+0x124>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e70a      	b.n	8000304 <__udivmoddi4+0xd8>
 80004ee:	4464      	add	r4, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e742      	b.n	800037a <__udivmoddi4+0x14e>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fe:	f002 faf3 	bl	8002ae8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000502:	f000 f939 	bl	8000778 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000506:	f000 fcc3 	bl	8000e90 <MX_GPIO_Init>
  MX_I2C1_Init();
 800050a:	f000 fa6f 	bl	80009ec <MX_I2C1_Init>
  MX_I2C2_Init();
 800050e:	f000 faad 	bl	8000a6c <MX_I2C2_Init>
  MX_OCTOSPI2_Init();
 8000512:	f000 fb6b 	bl	8000bec <MX_OCTOSPI2_Init>
  MX_SPI1_Init();
 8000516:	f000 fbbf 	bl	8000c98 <MX_SPI1_Init>
  MX_SPI2_Init();
 800051a:	f000 fbfb 	bl	8000d14 <MX_SPI2_Init>
  MX_SPI3_Init();
 800051e:	f000 fc33 	bl	8000d88 <MX_SPI3_Init>
  MX_UART4_Init();
 8000522:	f000 fc69 	bl	8000df8 <MX_UART4_Init>
  MX_DSIHOST_DSI_Init();
 8000526:	f000 f975 	bl	8000814 <MX_DSIHOST_DSI_Init>
  MX_LTDC_Init();
 800052a:	f000 fadf 	bl	8000aec <MX_LTDC_Init>
  /* USER CODE BEGIN 2 */
  mipi_config();
 800052e:	f000 fe0f 	bl	8001150 <mipi_config>
  HAL_UART_Transmit(&huart4, "slave start", 11, 1000);
 8000532:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000536:	220b      	movs	r2, #11
 8000538:	4981      	ldr	r1, [pc, #516]	; (8000740 <main+0x248>)
 800053a:	4882      	ldr	r0, [pc, #520]	; (8000744 <main+0x24c>)
 800053c:	f007 fef6 	bl	800832c <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int frame_buf_count = 0;
 8000540:	2300      	movs	r3, #0
 8000542:	60fb      	str	r3, [r7, #12]

	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4) == GPIO_PIN_SET) //switch = 00
 8000544:	2101      	movs	r1, #1
 8000546:	4880      	ldr	r0, [pc, #512]	; (8000748 <main+0x250>)
 8000548:	f003 fd14 	bl	8003f74 <HAL_GPIO_ReadPin>
 800054c:	4603      	mov	r3, r0
 800054e:	2b01      	cmp	r3, #1
 8000550:	d10a      	bne.n	8000568 <main+0x70>
 8000552:	2110      	movs	r1, #16
 8000554:	487d      	ldr	r0, [pc, #500]	; (800074c <main+0x254>)
 8000556:	f003 fd0d 	bl	8003f74 <HAL_GPIO_ReadPin>
 800055a:	4603      	mov	r3, r0
 800055c:	2b01      	cmp	r3, #1
 800055e:	d103      	bne.n	8000568 <main+0x70>
	{
		BOARD_NUMBER = 2;
 8000560:	4b7b      	ldr	r3, [pc, #492]	; (8000750 <main+0x258>)
 8000562:	2202      	movs	r2, #2
 8000564:	701a      	strb	r2, [r3, #0]
 8000566:	e034      	b.n	80005d2 <main+0xda>
	}
	else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4) == GPIO_PIN_RESET) //switch = 01
 8000568:	2101      	movs	r1, #1
 800056a:	4877      	ldr	r0, [pc, #476]	; (8000748 <main+0x250>)
 800056c:	f003 fd02 	bl	8003f74 <HAL_GPIO_ReadPin>
 8000570:	4603      	mov	r3, r0
 8000572:	2b01      	cmp	r3, #1
 8000574:	d10a      	bne.n	800058c <main+0x94>
 8000576:	2110      	movs	r1, #16
 8000578:	4874      	ldr	r0, [pc, #464]	; (800074c <main+0x254>)
 800057a:	f003 fcfb 	bl	8003f74 <HAL_GPIO_ReadPin>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d103      	bne.n	800058c <main+0x94>
	{
		BOARD_NUMBER = 2;
 8000584:	4b72      	ldr	r3, [pc, #456]	; (8000750 <main+0x258>)
 8000586:	2202      	movs	r2, #2
 8000588:	701a      	strb	r2, [r3, #0]
 800058a:	e022      	b.n	80005d2 <main+0xda>
	}
	else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4) == GPIO_PIN_SET) //switch = 10
 800058c:	2101      	movs	r1, #1
 800058e:	486e      	ldr	r0, [pc, #440]	; (8000748 <main+0x250>)
 8000590:	f003 fcf0 	bl	8003f74 <HAL_GPIO_ReadPin>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d10a      	bne.n	80005b0 <main+0xb8>
 800059a:	2110      	movs	r1, #16
 800059c:	486b      	ldr	r0, [pc, #428]	; (800074c <main+0x254>)
 800059e:	f003 fce9 	bl	8003f74 <HAL_GPIO_ReadPin>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b01      	cmp	r3, #1
 80005a6:	d103      	bne.n	80005b0 <main+0xb8>
	{
		BOARD_NUMBER = 3;
 80005a8:	4b69      	ldr	r3, [pc, #420]	; (8000750 <main+0x258>)
 80005aa:	2203      	movs	r2, #3
 80005ac:	701a      	strb	r2, [r3, #0]
 80005ae:	e010      	b.n	80005d2 <main+0xda>
	}
	else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4) == GPIO_PIN_RESET) //switch = 11
 80005b0:	2101      	movs	r1, #1
 80005b2:	4865      	ldr	r0, [pc, #404]	; (8000748 <main+0x250>)
 80005b4:	f003 fcde 	bl	8003f74 <HAL_GPIO_ReadPin>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d109      	bne.n	80005d2 <main+0xda>
 80005be:	2110      	movs	r1, #16
 80005c0:	4862      	ldr	r0, [pc, #392]	; (800074c <main+0x254>)
 80005c2:	f003 fcd7 	bl	8003f74 <HAL_GPIO_ReadPin>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d102      	bne.n	80005d2 <main+0xda>
	{
		BOARD_NUMBER = 4;
 80005cc:	4b60      	ldr	r3, [pc, #384]	; (8000750 <main+0x258>)
 80005ce:	2204      	movs	r2, #4
 80005d0:	701a      	strb	r2, [r3, #0]
	}

    __HAL_SPI_ENABLE(&hspi1);
 80005d2:	4b60      	ldr	r3, [pc, #384]	; (8000754 <main+0x25c>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	681a      	ldr	r2, [r3, #0]
 80005d8:	4b5e      	ldr	r3, [pc, #376]	; (8000754 <main+0x25c>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80005e0:	601a      	str	r2, [r3, #0]
    __HAL_SPI_ENABLE(&hspi3);
 80005e2:	4b5d      	ldr	r3, [pc, #372]	; (8000758 <main+0x260>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	681a      	ldr	r2, [r3, #0]
 80005e8:	4b5b      	ldr	r3, [pc, #364]	; (8000758 <main+0x260>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80005f0:	601a      	str	r2, [r3, #0]
	HAL_SPI_Receive_IT(&hspi3, &spi3_buf, 2);
 80005f2:	2202      	movs	r2, #2
 80005f4:	4959      	ldr	r1, [pc, #356]	; (800075c <main+0x264>)
 80005f6:	4858      	ldr	r0, [pc, #352]	; (8000758 <main+0x260>)
 80005f8:	f007 f848 	bl	800768c <HAL_SPI_Receive_IT>
			//HAL_Delay(1);
		}
		HAL_UART_Transmit(&huart4, "off ", 4, 1000);
		HAL_Delay(1000);*/

		if(play_mode == 0)
 80005fc:	4b58      	ldr	r3, [pc, #352]	; (8000760 <main+0x268>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d142      	bne.n	800068a <main+0x192>
		{
			read_flash_page(&frame_buf_flash, display_image_number);
 8000604:	4b57      	ldr	r3, [pc, #348]	; (8000764 <main+0x26c>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	4619      	mov	r1, r3
 800060a:	4857      	ldr	r0, [pc, #348]	; (8000768 <main+0x270>)
 800060c:	f001 fd80 	bl	8002110 <read_flash_page>
			frame_buf_count = 0;
 8000610:	2300      	movs	r3, #0
 8000612:	60fb      	str	r3, [r7, #12]
			for (int i = 0; i < 6400;  i += 4)
 8000614:	2300      	movs	r3, #0
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	e032      	b.n	8000680 <main+0x188>
			{
				image_80x80_rgb888[frame_buf_count] = frame_buf_flash[i+1];
 800061a:	68bb      	ldr	r3, [r7, #8]
 800061c:	3301      	adds	r3, #1
 800061e:	4a52      	ldr	r2, [pc, #328]	; (8000768 <main+0x270>)
 8000620:	5cd1      	ldrb	r1, [r2, r3]
 8000622:	4a52      	ldr	r2, [pc, #328]	; (800076c <main+0x274>)
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	4413      	add	r3, r2
 8000628:	460a      	mov	r2, r1
 800062a:	701a      	strb	r2, [r3, #0]
				frame_buf_count += 2;
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	3302      	adds	r3, #2
 8000630:	60fb      	str	r3, [r7, #12]
				image_80x80_rgb888[frame_buf_count] = frame_buf_flash[i];
 8000632:	4a4d      	ldr	r2, [pc, #308]	; (8000768 <main+0x270>)
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	4413      	add	r3, r2
 8000638:	7819      	ldrb	r1, [r3, #0]
 800063a:	4a4c      	ldr	r2, [pc, #304]	; (800076c <main+0x274>)
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	4413      	add	r3, r2
 8000640:	460a      	mov	r2, r1
 8000642:	701a      	strb	r2, [r3, #0]
				frame_buf_count += 4;
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	3304      	adds	r3, #4
 8000648:	60fb      	str	r3, [r7, #12]
				image_80x80_rgb888[frame_buf_count] = frame_buf_flash[i+2];
 800064a:	68bb      	ldr	r3, [r7, #8]
 800064c:	3302      	adds	r3, #2
 800064e:	4a46      	ldr	r2, [pc, #280]	; (8000768 <main+0x270>)
 8000650:	5cd1      	ldrb	r1, [r2, r3]
 8000652:	4a46      	ldr	r2, [pc, #280]	; (800076c <main+0x274>)
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	4413      	add	r3, r2
 8000658:	460a      	mov	r2, r1
 800065a:	701a      	strb	r2, [r3, #0]
				frame_buf_count += 4;
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	3304      	adds	r3, #4
 8000660:	60fb      	str	r3, [r7, #12]
				image_80x80_rgb888[frame_buf_count] = frame_buf_flash[i+3];
 8000662:	68bb      	ldr	r3, [r7, #8]
 8000664:	3303      	adds	r3, #3
 8000666:	4a40      	ldr	r2, [pc, #256]	; (8000768 <main+0x270>)
 8000668:	5cd1      	ldrb	r1, [r2, r3]
 800066a:	4a40      	ldr	r2, [pc, #256]	; (800076c <main+0x274>)
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	4413      	add	r3, r2
 8000670:	460a      	mov	r2, r1
 8000672:	701a      	strb	r2, [r3, #0]
				frame_buf_count += 2;
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	3302      	adds	r3, #2
 8000678:	60fb      	str	r3, [r7, #12]
			for (int i = 0; i < 6400;  i += 4)
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	3304      	adds	r3, #4
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	f5b3 5fc8 	cmp.w	r3, #6400	; 0x1900
 8000686:	dbc8      	blt.n	800061a <main+0x122>
 8000688:	e056      	b.n	8000738 <main+0x240>
			}
		}
		else if(play_mode == 1)
 800068a:	4b35      	ldr	r3, [pc, #212]	; (8000760 <main+0x268>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d152      	bne.n	8000738 <main+0x240>
		{
			for(int i=0; i<total_image_in_flash; i++)
 8000692:	2300      	movs	r3, #0
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	e049      	b.n	800072c <main+0x234>
			{
				read_flash_page(&frame_buf_flash, i);
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	b2db      	uxtb	r3, r3
 800069c:	4619      	mov	r1, r3
 800069e:	4832      	ldr	r0, [pc, #200]	; (8000768 <main+0x270>)
 80006a0:	f001 fd36 	bl	8002110 <read_flash_page>
				frame_buf_count = 0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	60fb      	str	r3, [r7, #12]
				for (int i = 0; i < 6400;  i += 4)
 80006a8:	2300      	movs	r3, #0
 80006aa:	603b      	str	r3, [r7, #0]
 80006ac:	e032      	b.n	8000714 <main+0x21c>
				{
					image_80x80_rgb888[frame_buf_count] = frame_buf_flash[i+1];
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	3301      	adds	r3, #1
 80006b2:	4a2d      	ldr	r2, [pc, #180]	; (8000768 <main+0x270>)
 80006b4:	5cd1      	ldrb	r1, [r2, r3]
 80006b6:	4a2d      	ldr	r2, [pc, #180]	; (800076c <main+0x274>)
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	4413      	add	r3, r2
 80006bc:	460a      	mov	r2, r1
 80006be:	701a      	strb	r2, [r3, #0]
					frame_buf_count += 2;
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	3302      	adds	r3, #2
 80006c4:	60fb      	str	r3, [r7, #12]
					image_80x80_rgb888[frame_buf_count] = frame_buf_flash[i];
 80006c6:	4a28      	ldr	r2, [pc, #160]	; (8000768 <main+0x270>)
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	4413      	add	r3, r2
 80006cc:	7819      	ldrb	r1, [r3, #0]
 80006ce:	4a27      	ldr	r2, [pc, #156]	; (800076c <main+0x274>)
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	4413      	add	r3, r2
 80006d4:	460a      	mov	r2, r1
 80006d6:	701a      	strb	r2, [r3, #0]
					frame_buf_count += 4;
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	3304      	adds	r3, #4
 80006dc:	60fb      	str	r3, [r7, #12]
					image_80x80_rgb888[frame_buf_count] = frame_buf_flash[i+2];
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	3302      	adds	r3, #2
 80006e2:	4a21      	ldr	r2, [pc, #132]	; (8000768 <main+0x270>)
 80006e4:	5cd1      	ldrb	r1, [r2, r3]
 80006e6:	4a21      	ldr	r2, [pc, #132]	; (800076c <main+0x274>)
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	4413      	add	r3, r2
 80006ec:	460a      	mov	r2, r1
 80006ee:	701a      	strb	r2, [r3, #0]
					frame_buf_count += 4;
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	3304      	adds	r3, #4
 80006f4:	60fb      	str	r3, [r7, #12]
					image_80x80_rgb888[frame_buf_count] = frame_buf_flash[i+3];
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	3303      	adds	r3, #3
 80006fa:	4a1b      	ldr	r2, [pc, #108]	; (8000768 <main+0x270>)
 80006fc:	5cd1      	ldrb	r1, [r2, r3]
 80006fe:	4a1b      	ldr	r2, [pc, #108]	; (800076c <main+0x274>)
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	4413      	add	r3, r2
 8000704:	460a      	mov	r2, r1
 8000706:	701a      	strb	r2, [r3, #0]
					frame_buf_count += 2;
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	3302      	adds	r3, #2
 800070c:	60fb      	str	r3, [r7, #12]
				for (int i = 0; i < 6400;  i += 4)
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	3304      	adds	r3, #4
 8000712:	603b      	str	r3, [r7, #0]
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	f5b3 5fc8 	cmp.w	r3, #6400	; 0x1900
 800071a:	dbc8      	blt.n	80006ae <main+0x1b6>
				}
				HAL_Delay(frame_rate);
 800071c:	4b14      	ldr	r3, [pc, #80]	; (8000770 <main+0x278>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4618      	mov	r0, r3
 8000722:	f002 fa5d 	bl	8002be0 <HAL_Delay>
			for(int i=0; i<total_image_in_flash; i++)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	3301      	adds	r3, #1
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	4b11      	ldr	r3, [pc, #68]	; (8000774 <main+0x27c>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	461a      	mov	r2, r3
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	4293      	cmp	r3, r2
 8000736:	dbaf      	blt.n	8000698 <main+0x1a0>
			}

		}
		HAL_Delay(10);
 8000738:	200a      	movs	r0, #10
 800073a:	f002 fa51 	bl	8002be0 <HAL_Delay>
		if(play_mode == 0)
 800073e:	e75d      	b.n	80005fc <main+0x104>
 8000740:	080090ec 	.word	0x080090ec
 8000744:	20004e1c 	.word	0x20004e1c
 8000748:	48000400 	.word	0x48000400
 800074c:	48000800 	.word	0x48000800
 8000750:	20000000 	.word	0x20000000
 8000754:	20004cf0 	.word	0x20004cf0
 8000758:	20004db8 	.word	0x20004db8
 800075c:	20004eb0 	.word	0x20004eb0
 8000760:	2000b2b4 	.word	0x2000b2b4
 8000764:	2000b2b5 	.word	0x2000b2b5
 8000768:	200099b4 	.word	0x200099b4
 800076c:	2000000c 	.word	0x2000000c
 8000770:	20000004 	.word	0x20000004
 8000774:	20000008 	.word	0x20000008

08000778 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b096      	sub	sp, #88	; 0x58
 800077c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077e:	f107 0314 	add.w	r3, r7, #20
 8000782:	2244      	movs	r2, #68	; 0x44
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f008 fc78 	bl	800907c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800078c:	463b      	mov	r3, r7
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
 8000798:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800079a:	2000      	movs	r0, #0
 800079c:	f004 fd00 	bl	80051a0 <HAL_PWREx_ControlVoltageScaling>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0x32>
  {
    Error_Handler();
 80007a6:	f001 fdd1 	bl	800234c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007aa:	2301      	movs	r3, #1
 80007ac:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007b2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b4:	2302      	movs	r3, #2
 80007b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007b8:	2303      	movs	r3, #3
 80007ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007bc:	2301      	movs	r3, #1
 80007be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 80007c0:	231e      	movs	r3, #30
 80007c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007c4:	2302      	movs	r3, #2
 80007c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007c8:	2302      	movs	r3, #2
 80007ca:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007cc:	2302      	movs	r3, #2
 80007ce:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	4618      	mov	r0, r3
 80007d6:	f004 fd97 	bl	8005308 <HAL_RCC_OscConfig>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80007e0:	f001 fdb4 	bl	800234c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e4:	230f      	movs	r3, #15
 80007e6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e8:	2303      	movs	r3, #3
 80007ea:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ec:	2300      	movs	r3, #0
 80007ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007f0:	2300      	movs	r3, #0
 80007f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007f4:	2300      	movs	r3, #0
 80007f6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007f8:	463b      	mov	r3, r7
 80007fa:	2105      	movs	r1, #5
 80007fc:	4618      	mov	r0, r3
 80007fe:	f005 f99d 	bl	8005b3c <HAL_RCC_ClockConfig>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000808:	f001 fda0 	bl	800234c <Error_Handler>
  }
}
 800080c:	bf00      	nop
 800080e:	3758      	adds	r7, #88	; 0x58
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b0ae      	sub	sp, #184	; 0xb8
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 800081a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000826:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800082a:	2224      	movs	r2, #36	; 0x24
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f008 fc24 	bl	800907c <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000834:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	611a      	str	r2, [r3, #16]
 8000844:	615a      	str	r2, [r3, #20]
  DSI_VidCfgTypeDef VidCfg = {0};
 8000846:	1d3b      	adds	r3, r7, #4
 8000848:	226c      	movs	r2, #108	; 0x6c
 800084a:	2100      	movs	r1, #0
 800084c:	4618      	mov	r0, r3
 800084e:	f008 fc15 	bl	800907c <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8000852:	4b64      	ldr	r3, [pc, #400]	; (80009e4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000854:	4a64      	ldr	r2, [pc, #400]	; (80009e8 <MX_DSIHOST_DSI_Init+0x1d4>)
 8000856:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000858:	4b62      	ldr	r3, [pc, #392]	; (80009e4 <MX_DSIHOST_DSI_Init+0x1d0>)
 800085a:	2200      	movs	r2, #0
 800085c:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 2;
 800085e:	4b61      	ldr	r3, [pc, #388]	; (80009e4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000860:	2202      	movs	r2, #2
 8000862:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 8000864:	4b5f      	ldr	r3, [pc, #380]	; (80009e4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 50;
 800086a:	2332      	movs	r3, #50	; 0x32
 800086c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 8000870:	2301      	movs	r3, #1
 8000872:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 8000876:	2301      	movs	r3, #1
 8000878:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 800087c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000880:	4619      	mov	r1, r3
 8000882:	4858      	ldr	r0, [pc, #352]	; (80009e4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000884:	f002 fb88 	bl	8002f98 <HAL_DSI_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_DSIHOST_DSI_Init+0x7e>
  {
    Error_Handler();
 800088e:	f001 fd5d 	bl	800234c <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8000892:	2301      	movs	r3, #1
 8000894:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000898:	2300      	movs	r3, #0
 800089a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.HighSpeedReadTimeout = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.LowPowerReadTimeout = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  HostTimeouts.HighSpeedWriteTimeout = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 80008b6:	2300      	movs	r3, #0
 80008b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  HostTimeouts.LowPowerWriteTimeout = 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HostTimeouts.BTATimeout = 0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 80008c8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80008cc:	4619      	mov	r1, r3
 80008ce:	4845      	ldr	r0, [pc, #276]	; (80009e4 <MX_DSIHOST_DSI_Init+0x1d0>)
 80008d0:	f002 ffd5 	bl	800387e <HAL_DSI_ConfigHostTimeouts>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_DSIHOST_DSI_Init+0xca>
  {
    Error_Handler();
 80008da:	f001 fd37 	bl	800234c <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 19;
 80008de:	2313      	movs	r3, #19
 80008e0:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.ClockLaneLP2HSTime = 15;
 80008e2:	230f      	movs	r3, #15
 80008e4:	677b      	str	r3, [r7, #116]	; 0x74
  PhyTimings.DataLaneHS2LPTime = 9;
 80008e6:	2309      	movs	r3, #9
 80008e8:	67bb      	str	r3, [r7, #120]	; 0x78
  PhyTimings.DataLaneLP2HSTime = 10;
 80008ea:	230a      	movs	r3, #10
 80008ec:	67fb      	str	r3, [r7, #124]	; 0x7c
  PhyTimings.DataLaneMaxReadTime = 0;
 80008ee:	2300      	movs	r3, #0
 80008f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PhyTimings.StopWaitTime = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 80008fa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80008fe:	4619      	mov	r1, r3
 8000900:	4838      	ldr	r0, [pc, #224]	; (80009e4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000902:	f002 ff52 	bl	80037aa <HAL_DSI_ConfigPhyTimer>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_DSIHOST_DSI_Init+0xfc>
  {
    Error_Handler();
 800090c:	f001 fd1e 	bl	800234c <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000910:	f242 7110 	movw	r1, #10000	; 0x2710
 8000914:	4833      	ldr	r0, [pc, #204]	; (80009e4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000916:	f003 f96e 	bl	8003bf6 <HAL_DSI_SetLowPowerRXFilter>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_DSIHOST_DSI_Init+0x110>
  {
    Error_Handler();
 8000920:	f001 fd14 	bl	800234c <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000924:	2100      	movs	r1, #0
 8000926:	482f      	ldr	r0, [pc, #188]	; (80009e4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000928:	f002 fc52 	bl	80031d0 <HAL_DSI_ConfigErrorMonitor>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_DSIHOST_DSI_Init+0x122>
  {
    Error_Handler();
 8000932:	f001 fd0b 	bl	800234c <Error_Handler>
  }
  VidCfg.VirtualChannelID = 0;
 8000936:	2300      	movs	r3, #0
 8000938:	607b      	str	r3, [r7, #4]
  VidCfg.ColorCoding = DSI_RGB888;
 800093a:	2305      	movs	r3, #5
 800093c:	60bb      	str	r3, [r7, #8]
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
  VidCfg.Mode = DSI_VID_MODE_NB_EVENTS;
 8000942:	2301      	movs	r3, #1
 8000944:	613b      	str	r3, [r7, #16]
  VidCfg.PacketSize = 80;
 8000946:	2350      	movs	r3, #80	; 0x50
 8000948:	617b      	str	r3, [r7, #20]
  VidCfg.NumberOfChunks = 1;
 800094a:	2301      	movs	r3, #1
 800094c:	61bb      	str	r3, [r7, #24]
  VidCfg.NullPacketSize = 0;
 800094e:	2300      	movs	r3, #0
 8000950:	61fb      	str	r3, [r7, #28]
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8000952:	2300      	movs	r3, #0
 8000954:	623b      	str	r3, [r7, #32]
  VidCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000956:	2300      	movs	r3, #0
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 800095a:	2300      	movs	r3, #0
 800095c:	62bb      	str	r3, [r7, #40]	; 0x28
  VidCfg.HorizontalSyncActive = 252;
 800095e:	23fc      	movs	r3, #252	; 0xfc
 8000960:	62fb      	str	r3, [r7, #44]	; 0x2c
  VidCfg.HorizontalBackPorch = 252;
 8000962:	23fc      	movs	r3, #252	; 0xfc
 8000964:	633b      	str	r3, [r7, #48]	; 0x30
  VidCfg.HorizontalLine = 836;
 8000966:	f44f 7351 	mov.w	r3, #836	; 0x344
 800096a:	637b      	str	r3, [r7, #52]	; 0x34
  VidCfg.VerticalSyncActive = 8;
 800096c:	2308      	movs	r3, #8
 800096e:	63bb      	str	r3, [r7, #56]	; 0x38
  VidCfg.VerticalBackPorch = 8;
 8000970:	2308      	movs	r3, #8
 8000972:	63fb      	str	r3, [r7, #60]	; 0x3c
  VidCfg.VerticalFrontPorch = 8;
 8000974:	2308      	movs	r3, #8
 8000976:	643b      	str	r3, [r7, #64]	; 0x40
  VidCfg.VerticalActive = 80;
 8000978:	2350      	movs	r3, #80	; 0x50
 800097a:	647b      	str	r3, [r7, #68]	; 0x44
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 800097c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000980:	64bb      	str	r3, [r7, #72]	; 0x48
  VidCfg.LPLargestPacketSize = 28;
 8000982:	231c      	movs	r3, #28
 8000984:	64fb      	str	r3, [r7, #76]	; 0x4c
  VidCfg.LPVACTLargestPacketSize = 80;
 8000986:	2350      	movs	r3, #80	; 0x50
 8000988:	653b      	str	r3, [r7, #80]	; 0x50
  VidCfg.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;
 800098a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800098e:	657b      	str	r3, [r7, #84]	; 0x54
  VidCfg.LPHorizontalBackPorchEnable = DSI_LP_HBP_ENABLE;
 8000990:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000994:	65bb      	str	r3, [r7, #88]	; 0x58
  VidCfg.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;
 8000996:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800099a:	65fb      	str	r3, [r7, #92]	; 0x5c
  VidCfg.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;
 800099c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009a0:	663b      	str	r3, [r7, #96]	; 0x60
  VidCfg.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;
 80009a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009a6:	667b      	str	r3, [r7, #100]	; 0x64
  VidCfg.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE;
 80009a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009ac:	66bb      	str	r3, [r7, #104]	; 0x68
  VidCfg.FrameBTAAcknowledgeEnable = DSI_FBTAA_DISABLE;
 80009ae:	2300      	movs	r3, #0
 80009b0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_DSI_ConfigVideoMode(&hdsi, &VidCfg) != HAL_OK)
 80009b2:	1d3b      	adds	r3, r7, #4
 80009b4:	4619      	mov	r1, r3
 80009b6:	480b      	ldr	r0, [pc, #44]	; (80009e4 <MX_DSIHOST_DSI_Init+0x1d0>)
 80009b8:	f002 fcef 	bl	800339a <HAL_DSI_ConfigVideoMode>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_DSIHOST_DSI_Init+0x1b2>
  {
    Error_Handler();
 80009c2:	f001 fcc3 	bl	800234c <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 80009c6:	2100      	movs	r1, #0
 80009c8:	4806      	ldr	r0, [pc, #24]	; (80009e4 <MX_DSIHOST_DSI_Init+0x1d0>)
 80009ca:	f002 fcbe 	bl	800334a <HAL_DSI_SetGenericVCID>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_DSIHOST_DSI_Init+0x1c4>
  {
    Error_Handler();
 80009d4:	f001 fcba 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */
	LCD_PowerOn();
 80009d8:	f000 fe74 	bl	80016c4 <LCD_PowerOn>
  /* USER CODE END DSIHOST_Init 2 */

}
 80009dc:	bf00      	nop
 80009de:	37b8      	adds	r7, #184	; 0xb8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	20004b34 	.word	0x20004b34
 80009e8:	40016c00 	.word	0x40016c00

080009ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009f0:	4b1b      	ldr	r3, [pc, #108]	; (8000a60 <MX_I2C1_Init+0x74>)
 80009f2:	4a1c      	ldr	r2, [pc, #112]	; (8000a64 <MX_I2C1_Init+0x78>)
 80009f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 80009f6:	4b1a      	ldr	r3, [pc, #104]	; (8000a60 <MX_I2C1_Init+0x74>)
 80009f8:	4a1b      	ldr	r2, [pc, #108]	; (8000a68 <MX_I2C1_Init+0x7c>)
 80009fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009fc:	4b18      	ldr	r3, [pc, #96]	; (8000a60 <MX_I2C1_Init+0x74>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a02:	4b17      	ldr	r3, [pc, #92]	; (8000a60 <MX_I2C1_Init+0x74>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a08:	4b15      	ldr	r3, [pc, #84]	; (8000a60 <MX_I2C1_Init+0x74>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a0e:	4b14      	ldr	r3, [pc, #80]	; (8000a60 <MX_I2C1_Init+0x74>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a14:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <MX_I2C1_Init+0x74>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a1a:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <MX_I2C1_Init+0x74>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a20:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <MX_I2C1_Init+0x74>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a26:	480e      	ldr	r0, [pc, #56]	; (8000a60 <MX_I2C1_Init+0x74>)
 8000a28:	f003 faec 	bl	8004004 <HAL_I2C_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a32:	f001 fc8b 	bl	800234c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a36:	2100      	movs	r1, #0
 8000a38:	4809      	ldr	r0, [pc, #36]	; (8000a60 <MX_I2C1_Init+0x74>)
 8000a3a:	f003 fb7e 	bl	800413a <HAL_I2CEx_ConfigAnalogFilter>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a44:	f001 fc82 	bl	800234c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a48:	2100      	movs	r1, #0
 8000a4a:	4805      	ldr	r0, [pc, #20]	; (8000a60 <MX_I2C1_Init+0x74>)
 8000a4c:	f003 fbc0 	bl	80041d0 <HAL_I2CEx_ConfigDigitalFilter>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a56:	f001 fc79 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20004b50 	.word	0x20004b50
 8000a64:	40005400 	.word	0x40005400
 8000a68:	307075b1 	.word	0x307075b1

08000a6c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a70:	4b1b      	ldr	r3, [pc, #108]	; (8000ae0 <MX_I2C2_Init+0x74>)
 8000a72:	4a1c      	ldr	r2, [pc, #112]	; (8000ae4 <MX_I2C2_Init+0x78>)
 8000a74:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8000a76:	4b1a      	ldr	r3, [pc, #104]	; (8000ae0 <MX_I2C2_Init+0x74>)
 8000a78:	4a1b      	ldr	r2, [pc, #108]	; (8000ae8 <MX_I2C2_Init+0x7c>)
 8000a7a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a7c:	4b18      	ldr	r3, [pc, #96]	; (8000ae0 <MX_I2C2_Init+0x74>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a82:	4b17      	ldr	r3, [pc, #92]	; (8000ae0 <MX_I2C2_Init+0x74>)
 8000a84:	2201      	movs	r2, #1
 8000a86:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a88:	4b15      	ldr	r3, [pc, #84]	; (8000ae0 <MX_I2C2_Init+0x74>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a8e:	4b14      	ldr	r3, [pc, #80]	; (8000ae0 <MX_I2C2_Init+0x74>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a94:	4b12      	ldr	r3, [pc, #72]	; (8000ae0 <MX_I2C2_Init+0x74>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a9a:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <MX_I2C2_Init+0x74>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aa0:	4b0f      	ldr	r3, [pc, #60]	; (8000ae0 <MX_I2C2_Init+0x74>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000aa6:	480e      	ldr	r0, [pc, #56]	; (8000ae0 <MX_I2C2_Init+0x74>)
 8000aa8:	f003 faac 	bl	8004004 <HAL_I2C_Init>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000ab2:	f001 fc4b 	bl	800234c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	4809      	ldr	r0, [pc, #36]	; (8000ae0 <MX_I2C2_Init+0x74>)
 8000aba:	f003 fb3e 	bl	800413a <HAL_I2CEx_ConfigAnalogFilter>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000ac4:	f001 fc42 	bl	800234c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4805      	ldr	r0, [pc, #20]	; (8000ae0 <MX_I2C2_Init+0x74>)
 8000acc:	f003 fb80 	bl	80041d0 <HAL_I2CEx_ConfigDigitalFilter>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000ad6:	f001 fc39 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20004ba4 	.word	0x20004ba4
 8000ae4:	40005800 	.word	0x40005800
 8000ae8:	307075b1 	.word	0x307075b1

08000aec <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08e      	sub	sp, #56	; 0x38
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000af2:	1d3b      	adds	r3, r7, #4
 8000af4:	2234      	movs	r2, #52	; 0x34
 8000af6:	2100      	movs	r1, #0
 8000af8:	4618      	mov	r0, r3
 8000afa:	f008 fabf 	bl	800907c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000afe:	4b38      	ldr	r3, [pc, #224]	; (8000be0 <MX_LTDC_Init+0xf4>)
 8000b00:	4a38      	ldr	r2, [pc, #224]	; (8000be4 <MX_LTDC_Init+0xf8>)
 8000b02:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000b04:	4b36      	ldr	r3, [pc, #216]	; (8000be0 <MX_LTDC_Init+0xf4>)
 8000b06:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000b0a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8000b0c:	4b34      	ldr	r3, [pc, #208]	; (8000be0 <MX_LTDC_Init+0xf4>)
 8000b0e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b12:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b14:	4b32      	ldr	r3, [pc, #200]	; (8000be0 <MX_LTDC_Init+0xf4>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000b1a:	4b31      	ldr	r3, [pc, #196]	; (8000be0 <MX_LTDC_Init+0xf4>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 251;
 8000b20:	4b2f      	ldr	r3, [pc, #188]	; (8000be0 <MX_LTDC_Init+0xf4>)
 8000b22:	22fb      	movs	r2, #251	; 0xfb
 8000b24:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 7;
 8000b26:	4b2e      	ldr	r3, [pc, #184]	; (8000be0 <MX_LTDC_Init+0xf4>)
 8000b28:	2207      	movs	r2, #7
 8000b2a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 503;
 8000b2c:	4b2c      	ldr	r3, [pc, #176]	; (8000be0 <MX_LTDC_Init+0xf4>)
 8000b2e:	f240 12f7 	movw	r2, #503	; 0x1f7
 8000b32:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 15;
 8000b34:	4b2a      	ldr	r3, [pc, #168]	; (8000be0 <MX_LTDC_Init+0xf4>)
 8000b36:	220f      	movs	r2, #15
 8000b38:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 583;
 8000b3a:	4b29      	ldr	r3, [pc, #164]	; (8000be0 <MX_LTDC_Init+0xf4>)
 8000b3c:	f240 2247 	movw	r2, #583	; 0x247
 8000b40:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 95;
 8000b42:	4b27      	ldr	r3, [pc, #156]	; (8000be0 <MX_LTDC_Init+0xf4>)
 8000b44:	225f      	movs	r2, #95	; 0x5f
 8000b46:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 835;
 8000b48:	4b25      	ldr	r3, [pc, #148]	; (8000be0 <MX_LTDC_Init+0xf4>)
 8000b4a:	f240 3243 	movw	r2, #835	; 0x343
 8000b4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 97;
 8000b50:	4b23      	ldr	r3, [pc, #140]	; (8000be0 <MX_LTDC_Init+0xf4>)
 8000b52:	2261      	movs	r2, #97	; 0x61
 8000b54:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 255;
 8000b56:	4b22      	ldr	r3, [pc, #136]	; (8000be0 <MX_LTDC_Init+0xf4>)
 8000b58:	22ff      	movs	r2, #255	; 0xff
 8000b5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 255;
 8000b5e:	4b20      	ldr	r3, [pc, #128]	; (8000be0 <MX_LTDC_Init+0xf4>)
 8000b60:	22ff      	movs	r2, #255	; 0xff
 8000b62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 255;
 8000b66:	4b1e      	ldr	r3, [pc, #120]	; (8000be0 <MX_LTDC_Init+0xf4>)
 8000b68:	22ff      	movs	r2, #255	; 0xff
 8000b6a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b6e:	481c      	ldr	r0, [pc, #112]	; (8000be0 <MX_LTDC_Init+0xf4>)
 8000b70:	f003 fb7a 	bl	8004268 <HAL_LTDC_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_LTDC_Init+0x92>
  {
    Error_Handler();
 8000b7a:	f001 fbe7 	bl	800234c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 80;
 8000b82:	2350      	movs	r3, #80	; 0x50
 8000b84:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 80;
 8000b8a:	2350      	movs	r3, #80	; 0x50
 8000b8c:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000b92:	23ff      	movs	r3, #255	; 0xff
 8000b94:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000b9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b9e:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000ba0:	2305      	movs	r3, #5
 8000ba2:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = (uint32_t *)image_80x80_rgb888;
 8000ba4:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <MX_LTDC_Init+0xfc>)
 8000ba6:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 80;
 8000ba8:	2350      	movs	r3, #80	; 0x50
 8000baa:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 80;
 8000bac:	2350      	movs	r3, #80	; 0x50
 8000bae:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 255;
 8000bb0:	23ff      	movs	r3, #255	; 0xff
 8000bb2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 255;
 8000bb6:	23ff      	movs	r3, #255	; 0xff
 8000bb8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 255;
 8000bbc:	23ff      	movs	r3, #255	; 0xff
 8000bbe:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000bc2:	1d3b      	adds	r3, r7, #4
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4805      	ldr	r0, [pc, #20]	; (8000be0 <MX_LTDC_Init+0xf4>)
 8000bca:	f003 fc1d 	bl	8004408 <HAL_LTDC_ConfigLayer>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 8000bd4:	f001 fbba 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */
  //(uint32_t *)image_80x80_rgb888;
  /* USER CODE END LTDC_Init 2 */

}
 8000bd8:	bf00      	nop
 8000bda:	3738      	adds	r7, #56	; 0x38
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20004bf8 	.word	0x20004bf8
 8000be4:	40016800 	.word	0x40016800
 8000be8:	2000000c 	.word	0x2000000c

08000bec <MX_OCTOSPI2_Init>:
  * @brief OCTOSPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI2_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI2_Init 0 */

  /* USER CODE END OCTOSPI2_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 8000bf2:	1d3b      	adds	r3, r7, #4
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI2_Init 1 */

  /* USER CODE END OCTOSPI2_Init 1 */
  /* OCTOSPI2 parameter configuration*/
  hospi2.Instance = OCTOSPI2;
 8000c00:	4b22      	ldr	r3, [pc, #136]	; (8000c8c <MX_OCTOSPI2_Init+0xa0>)
 8000c02:	4a23      	ldr	r2, [pc, #140]	; (8000c90 <MX_OCTOSPI2_Init+0xa4>)
 8000c04:	601a      	str	r2, [r3, #0]
  hospi2.Init.FifoThreshold = 1;
 8000c06:	4b21      	ldr	r3, [pc, #132]	; (8000c8c <MX_OCTOSPI2_Init+0xa0>)
 8000c08:	2201      	movs	r2, #1
 8000c0a:	605a      	str	r2, [r3, #4]
  hospi2.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000c0c:	4b1f      	ldr	r3, [pc, #124]	; (8000c8c <MX_OCTOSPI2_Init+0xa0>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
  hospi2.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8000c12:	4b1e      	ldr	r3, [pc, #120]	; (8000c8c <MX_OCTOSPI2_Init+0xa0>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	60da      	str	r2, [r3, #12]
  hospi2.Init.DeviceSize = 32;
 8000c18:	4b1c      	ldr	r3, [pc, #112]	; (8000c8c <MX_OCTOSPI2_Init+0xa0>)
 8000c1a:	2220      	movs	r2, #32
 8000c1c:	611a      	str	r2, [r3, #16]
  hospi2.Init.ChipSelectHighTime = 1;
 8000c1e:	4b1b      	ldr	r3, [pc, #108]	; (8000c8c <MX_OCTOSPI2_Init+0xa0>)
 8000c20:	2201      	movs	r2, #1
 8000c22:	615a      	str	r2, [r3, #20]
  hospi2.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000c24:	4b19      	ldr	r3, [pc, #100]	; (8000c8c <MX_OCTOSPI2_Init+0xa0>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	619a      	str	r2, [r3, #24]
  hospi2.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000c2a:	4b18      	ldr	r3, [pc, #96]	; (8000c8c <MX_OCTOSPI2_Init+0xa0>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	61da      	str	r2, [r3, #28]
  hospi2.Init.ClockPrescaler = 1;
 8000c30:	4b16      	ldr	r3, [pc, #88]	; (8000c8c <MX_OCTOSPI2_Init+0xa0>)
 8000c32:	2201      	movs	r2, #1
 8000c34:	621a      	str	r2, [r3, #32]
  hospi2.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000c36:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <MX_OCTOSPI2_Init+0xa0>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	625a      	str	r2, [r3, #36]	; 0x24
  hospi2.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000c3c:	4b13      	ldr	r3, [pc, #76]	; (8000c8c <MX_OCTOSPI2_Init+0xa0>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	629a      	str	r2, [r3, #40]	; 0x28
  hospi2.Init.ChipSelectBoundary = 0;
 8000c42:	4b12      	ldr	r3, [pc, #72]	; (8000c8c <MX_OCTOSPI2_Init+0xa0>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi2.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000c48:	4b10      	ldr	r3, [pc, #64]	; (8000c8c <MX_OCTOSPI2_Init+0xa0>)
 8000c4a:	2208      	movs	r2, #8
 8000c4c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 8000c4e:	480f      	ldr	r0, [pc, #60]	; (8000c8c <MX_OCTOSPI2_Init+0xa0>)
 8000c50:	f003 fdb0 	bl	80047b4 <HAL_OSPI_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_OCTOSPI2_Init+0x72>
  {
    Error_Handler();
 8000c5a:	f001 fb77 	bl	800234c <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 2;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 2;
 8000c62:	2302      	movs	r3, #2
 8000c64:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 8000c66:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <MX_OCTOSPI2_Init+0xa8>)
 8000c68:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi2, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000c6a:	1d3b      	adds	r3, r7, #4
 8000c6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c70:	4619      	mov	r1, r3
 8000c72:	4806      	ldr	r0, [pc, #24]	; (8000c8c <MX_OCTOSPI2_Init+0xa0>)
 8000c74:	f003 fe58 	bl	8004928 <HAL_OSPIM_Config>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_OCTOSPI2_Init+0x96>
  {
    Error_Handler();
 8000c7e:	f001 fb65 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI2_Init 2 */

  /* USER CODE END OCTOSPI2_Init 2 */

}
 8000c82:	bf00      	nop
 8000c84:	3718      	adds	r7, #24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20004ca0 	.word	0x20004ca0
 8000c90:	a0001400 	.word	0xa0001400
 8000c94:	00010002 	.word	0x00010002

08000c98 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c9c:	4b1b      	ldr	r3, [pc, #108]	; (8000d0c <MX_SPI1_Init+0x74>)
 8000c9e:	4a1c      	ldr	r2, [pc, #112]	; (8000d10 <MX_SPI1_Init+0x78>)
 8000ca0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ca2:	4b1a      	ldr	r3, [pc, #104]	; (8000d0c <MX_SPI1_Init+0x74>)
 8000ca4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ca8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000caa:	4b18      	ldr	r3, [pc, #96]	; (8000d0c <MX_SPI1_Init+0x74>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cb0:	4b16      	ldr	r3, [pc, #88]	; (8000d0c <MX_SPI1_Init+0x74>)
 8000cb2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000cb6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cb8:	4b14      	ldr	r3, [pc, #80]	; (8000d0c <MX_SPI1_Init+0x74>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cbe:	4b13      	ldr	r3, [pc, #76]	; (8000d0c <MX_SPI1_Init+0x74>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000cc4:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <MX_SPI1_Init+0x74>)
 8000cc6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000cca:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000ccc:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <MX_SPI1_Init+0x74>)
 8000cce:	2220      	movs	r2, #32
 8000cd0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <MX_SPI1_Init+0x74>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cd8:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <MX_SPI1_Init+0x74>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cde:	4b0b      	ldr	r3, [pc, #44]	; (8000d0c <MX_SPI1_Init+0x74>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ce4:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <MX_SPI1_Init+0x74>)
 8000ce6:	2207      	movs	r2, #7
 8000ce8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000cea:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <MX_SPI1_Init+0x74>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <MX_SPI1_Init+0x74>)
 8000cf2:	2208      	movs	r2, #8
 8000cf4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cf6:	4805      	ldr	r0, [pc, #20]	; (8000d0c <MX_SPI1_Init+0x74>)
 8000cf8:	f005 ff56 	bl	8006ba8 <HAL_SPI_Init>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000d02:	f001 fb23 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20004cf0 	.word	0x20004cf0
 8000d10:	40013000 	.word	0x40013000

08000d14 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000d18:	4b19      	ldr	r3, [pc, #100]	; (8000d80 <MX_SPI2_Init+0x6c>)
 8000d1a:	4a1a      	ldr	r2, [pc, #104]	; (8000d84 <MX_SPI2_Init+0x70>)
 8000d1c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000d1e:	4b18      	ldr	r3, [pc, #96]	; (8000d80 <MX_SPI2_Init+0x6c>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d24:	4b16      	ldr	r3, [pc, #88]	; (8000d80 <MX_SPI2_Init+0x6c>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d2a:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <MX_SPI2_Init+0x6c>)
 8000d2c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000d30:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d32:	4b13      	ldr	r3, [pc, #76]	; (8000d80 <MX_SPI2_Init+0x6c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d38:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <MX_SPI2_Init+0x6c>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d3e:	4b10      	ldr	r3, [pc, #64]	; (8000d80 <MX_SPI2_Init+0x6c>)
 8000d40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d44:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d46:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <MX_SPI2_Init+0x6c>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d4c:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <MX_SPI2_Init+0x6c>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d52:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <MX_SPI2_Init+0x6c>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000d58:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <MX_SPI2_Init+0x6c>)
 8000d5a:	2207      	movs	r2, #7
 8000d5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d5e:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <MX_SPI2_Init+0x6c>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <MX_SPI2_Init+0x6c>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d6a:	4805      	ldr	r0, [pc, #20]	; (8000d80 <MX_SPI2_Init+0x6c>)
 8000d6c:	f005 ff1c 	bl	8006ba8 <HAL_SPI_Init>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_SPI2_Init+0x66>
  {
    Error_Handler();
 8000d76:	f001 fae9 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20004d54 	.word	0x20004d54
 8000d84:	40003800 	.word	0x40003800

08000d88 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000d8c:	4b18      	ldr	r3, [pc, #96]	; (8000df0 <MX_SPI3_Init+0x68>)
 8000d8e:	4a19      	ldr	r2, [pc, #100]	; (8000df4 <MX_SPI3_Init+0x6c>)
 8000d90:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8000d92:	4b17      	ldr	r3, [pc, #92]	; (8000df0 <MX_SPI3_Init+0x68>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000d98:	4b15      	ldr	r3, [pc, #84]	; (8000df0 <MX_SPI3_Init+0x68>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d9e:	4b14      	ldr	r3, [pc, #80]	; (8000df0 <MX_SPI3_Init+0x68>)
 8000da0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000da4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000da6:	4b12      	ldr	r3, [pc, #72]	; (8000df0 <MX_SPI3_Init+0x68>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dac:	4b10      	ldr	r3, [pc, #64]	; (8000df0 <MX_SPI3_Init+0x68>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 8000db2:	4b0f      	ldr	r3, [pc, #60]	; (8000df0 <MX_SPI3_Init+0x68>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000db8:	4b0d      	ldr	r3, [pc, #52]	; (8000df0 <MX_SPI3_Init+0x68>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dbe:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <MX_SPI3_Init+0x68>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dc4:	4b0a      	ldr	r3, [pc, #40]	; (8000df0 <MX_SPI3_Init+0x68>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000dca:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <MX_SPI3_Init+0x68>)
 8000dcc:	2207      	movs	r2, #7
 8000dce:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000dd0:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <MX_SPI3_Init+0x68>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000dd6:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <MX_SPI3_Init+0x68>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000ddc:	4804      	ldr	r0, [pc, #16]	; (8000df0 <MX_SPI3_Init+0x68>)
 8000dde:	f005 fee3 	bl	8006ba8 <HAL_SPI_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_SPI3_Init+0x64>
  {
    Error_Handler();
 8000de8:	f001 fab0 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000dec:	bf00      	nop
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	20004db8 	.word	0x20004db8
 8000df4:	40003c00 	.word	0x40003c00

08000df8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000dfc:	4b22      	ldr	r3, [pc, #136]	; (8000e88 <MX_UART4_Init+0x90>)
 8000dfe:	4a23      	ldr	r2, [pc, #140]	; (8000e8c <MX_UART4_Init+0x94>)
 8000e00:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000e02:	4b21      	ldr	r3, [pc, #132]	; (8000e88 <MX_UART4_Init+0x90>)
 8000e04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e08:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000e0a:	4b1f      	ldr	r3, [pc, #124]	; (8000e88 <MX_UART4_Init+0x90>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000e10:	4b1d      	ldr	r3, [pc, #116]	; (8000e88 <MX_UART4_Init+0x90>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000e16:	4b1c      	ldr	r3, [pc, #112]	; (8000e88 <MX_UART4_Init+0x90>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000e1c:	4b1a      	ldr	r3, [pc, #104]	; (8000e88 <MX_UART4_Init+0x90>)
 8000e1e:	220c      	movs	r2, #12
 8000e20:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e22:	4b19      	ldr	r3, [pc, #100]	; (8000e88 <MX_UART4_Init+0x90>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e28:	4b17      	ldr	r3, [pc, #92]	; (8000e88 <MX_UART4_Init+0x90>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e2e:	4b16      	ldr	r3, [pc, #88]	; (8000e88 <MX_UART4_Init+0x90>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e34:	4b14      	ldr	r3, [pc, #80]	; (8000e88 <MX_UART4_Init+0x90>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e3a:	4b13      	ldr	r3, [pc, #76]	; (8000e88 <MX_UART4_Init+0x90>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000e40:	4811      	ldr	r0, [pc, #68]	; (8000e88 <MX_UART4_Init+0x90>)
 8000e42:	f007 fa23 	bl	800828c <HAL_UART_Init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000e4c:	f001 fa7e 	bl	800234c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e50:	2100      	movs	r1, #0
 8000e52:	480d      	ldr	r0, [pc, #52]	; (8000e88 <MX_UART4_Init+0x90>)
 8000e54:	f008 f848 	bl	8008ee8 <HAL_UARTEx_SetTxFifoThreshold>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000e5e:	f001 fa75 	bl	800234c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e62:	2100      	movs	r1, #0
 8000e64:	4808      	ldr	r0, [pc, #32]	; (8000e88 <MX_UART4_Init+0x90>)
 8000e66:	f008 f87d 	bl	8008f64 <HAL_UARTEx_SetRxFifoThreshold>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000e70:	f001 fa6c 	bl	800234c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000e74:	4804      	ldr	r0, [pc, #16]	; (8000e88 <MX_UART4_Init+0x90>)
 8000e76:	f007 fffe 	bl	8008e76 <HAL_UARTEx_DisableFifoMode>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000e80:	f001 fa64 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000e84:	bf00      	nop
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20004e1c 	.word	0x20004e1c
 8000e8c:	40004c00 	.word	0x40004c00

08000e90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08e      	sub	sp, #56	; 0x38
 8000e94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	60da      	str	r2, [r3, #12]
 8000ea4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea6:	4ba4      	ldr	r3, [pc, #656]	; (8001138 <MX_GPIO_Init+0x2a8>)
 8000ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eaa:	4aa3      	ldr	r2, [pc, #652]	; (8001138 <MX_GPIO_Init+0x2a8>)
 8000eac:	f043 0302 	orr.w	r3, r3, #2
 8000eb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eb2:	4ba1      	ldr	r3, [pc, #644]	; (8001138 <MX_GPIO_Init+0x2a8>)
 8000eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb6:	f003 0302 	and.w	r3, r3, #2
 8000eba:	623b      	str	r3, [r7, #32]
 8000ebc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ebe:	4b9e      	ldr	r3, [pc, #632]	; (8001138 <MX_GPIO_Init+0x2a8>)
 8000ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec2:	4a9d      	ldr	r2, [pc, #628]	; (8001138 <MX_GPIO_Init+0x2a8>)
 8000ec4:	f043 0308 	orr.w	r3, r3, #8
 8000ec8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eca:	4b9b      	ldr	r3, [pc, #620]	; (8001138 <MX_GPIO_Init+0x2a8>)
 8000ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ece:	f003 0308 	and.w	r3, r3, #8
 8000ed2:	61fb      	str	r3, [r7, #28]
 8000ed4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ed6:	4b98      	ldr	r3, [pc, #608]	; (8001138 <MX_GPIO_Init+0x2a8>)
 8000ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eda:	4a97      	ldr	r2, [pc, #604]	; (8001138 <MX_GPIO_Init+0x2a8>)
 8000edc:	f043 0304 	orr.w	r3, r3, #4
 8000ee0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ee2:	4b95      	ldr	r3, [pc, #596]	; (8001138 <MX_GPIO_Init+0x2a8>)
 8000ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee6:	f003 0304 	and.w	r3, r3, #4
 8000eea:	61bb      	str	r3, [r7, #24]
 8000eec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eee:	4b92      	ldr	r3, [pc, #584]	; (8001138 <MX_GPIO_Init+0x2a8>)
 8000ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef2:	4a91      	ldr	r2, [pc, #580]	; (8001138 <MX_GPIO_Init+0x2a8>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000efa:	4b8f      	ldr	r3, [pc, #572]	; (8001138 <MX_GPIO_Init+0x2a8>)
 8000efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	617b      	str	r3, [r7, #20]
 8000f04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f06:	4b8c      	ldr	r3, [pc, #560]	; (8001138 <MX_GPIO_Init+0x2a8>)
 8000f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0a:	4a8b      	ldr	r2, [pc, #556]	; (8001138 <MX_GPIO_Init+0x2a8>)
 8000f0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f12:	4b89      	ldr	r3, [pc, #548]	; (8001138 <MX_GPIO_Init+0x2a8>)
 8000f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f1a:	613b      	str	r3, [r7, #16]
 8000f1c:	693b      	ldr	r3, [r7, #16]
  HAL_PWREx_EnableVddIO2();
 8000f1e:	f004 f9e3 	bl	80052e8 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f22:	4b85      	ldr	r3, [pc, #532]	; (8001138 <MX_GPIO_Init+0x2a8>)
 8000f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f26:	4a84      	ldr	r2, [pc, #528]	; (8001138 <MX_GPIO_Init+0x2a8>)
 8000f28:	f043 0320 	orr.w	r3, r3, #32
 8000f2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f2e:	4b82      	ldr	r3, [pc, #520]	; (8001138 <MX_GPIO_Init+0x2a8>)
 8000f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f32:	f003 0320 	and.w	r3, r3, #32
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f3a:	4b7f      	ldr	r3, [pc, #508]	; (8001138 <MX_GPIO_Init+0x2a8>)
 8000f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3e:	4a7e      	ldr	r2, [pc, #504]	; (8001138 <MX_GPIO_Init+0x2a8>)
 8000f40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f46:	4b7c      	ldr	r3, [pc, #496]	; (8001138 <MX_GPIO_Init+0x2a8>)
 8000f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f4e:	60bb      	str	r3, [r7, #8]
 8000f50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f52:	4b79      	ldr	r3, [pc, #484]	; (8001138 <MX_GPIO_Init+0x2a8>)
 8000f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f56:	4a78      	ldr	r2, [pc, #480]	; (8001138 <MX_GPIO_Init+0x2a8>)
 8000f58:	f043 0310 	orr.w	r3, r3, #16
 8000f5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f5e:	4b76      	ldr	r3, [pc, #472]	; (8001138 <MX_GPIO_Init+0x2a8>)
 8000f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f62:	f003 0310 	and.w	r3, r3, #16
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(flash_cs_GPIO_Port, flash_cs_Pin, GPIO_PIN_SET);
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f70:	4872      	ldr	r0, [pc, #456]	; (800113c <MX_GPIO_Init+0x2ac>)
 8000f72:	f003 f817 	bl	8003fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, flash_mosi_Pin|flash_clk_Pin|GPIO_PIN_14, GPIO_PIN_RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	f44f 418a 	mov.w	r1, #17664	; 0x4500
 8000f7c:	4870      	ldr	r0, [pc, #448]	; (8001140 <MX_GPIO_Init+0x2b0>)
 8000f7e:	f003 f811 	bl	8003fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 8000f82:	2200      	movs	r2, #0
 8000f84:	21a0      	movs	r1, #160	; 0xa0
 8000f86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f8a:	f003 f80b 	bl	8003fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f94:	486b      	ldr	r0, [pc, #428]	; (8001144 <MX_GPIO_Init+0x2b4>)
 8000f96:	f003 f805 	bl	8003fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000fa0:	4869      	ldr	r0, [pc, #420]	; (8001148 <MX_GPIO_Init+0x2b8>)
 8000fa2:	f002 ffff 	bl	8003fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fac:	4865      	ldr	r0, [pc, #404]	; (8001144 <MX_GPIO_Init+0x2b4>)
 8000fae:	f002 fff9 	bl	8003fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : flash_cs_Pin */
  GPIO_InitStruct.Pin = flash_cs_Pin;
 8000fb2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(flash_cs_GPIO_Port, &GPIO_InitStruct);
 8000fc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc8:	4619      	mov	r1, r3
 8000fca:	485c      	ldr	r0, [pc, #368]	; (800113c <MX_GPIO_Init+0x2ac>)
 8000fcc:	f002 fe40 	bl	8003c50 <HAL_GPIO_Init>

  /*Configure GPIO pins : flash_mosi_Pin flash_clk_Pin */
  GPIO_InitStruct.Pin = flash_mosi_Pin|flash_clk_Pin;
 8000fd0:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000fd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000fe2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4855      	ldr	r0, [pc, #340]	; (8001140 <MX_GPIO_Init+0x2b0>)
 8000fea:	f002 fe31 	bl	8003c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : flash_miso_Pin */
  GPIO_InitStruct.Pin = flash_miso_Pin;
 8000fee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ff2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(flash_miso_GPIO_Port, &GPIO_InitStruct);
 8000ffc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001000:	4619      	mov	r1, r3
 8001002:	484f      	ldr	r0, [pc, #316]	; (8001140 <MX_GPIO_Init+0x2b0>)
 8001004:	f002 fe24 	bl	8003c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001008:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800100c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800100e:	2300      	movs	r3, #0
 8001010:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001016:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800101a:	4619      	mov	r1, r3
 800101c:	484b      	ldr	r0, [pc, #300]	; (800114c <MX_GPIO_Init+0x2bc>)
 800101e:	f002 fe17 	bl	8003c50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 8001022:	2318      	movs	r3, #24
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001026:	2300      	movs	r3, #0
 8001028:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001032:	4619      	mov	r1, r3
 8001034:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001038:	f002 fe0a 	bl	8003c50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800103c:	23a0      	movs	r3, #160	; 0xa0
 800103e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001040:	2301      	movs	r3, #1
 8001042:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001048:	2300      	movs	r3, #0
 800104a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001050:	4619      	mov	r1, r3
 8001052:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001056:	f002 fdfb 	bl	8003c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800105a:	2310      	movs	r3, #16
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800105e:	2300      	movs	r3, #0
 8001060:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001066:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800106a:	4619      	mov	r1, r3
 800106c:	4833      	ldr	r0, [pc, #204]	; (800113c <MX_GPIO_Init+0x2ac>)
 800106e:	f002 fdef 	bl	8003c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001072:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001076:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001078:	2301      	movs	r3, #1
 800107a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001080:	2300      	movs	r3, #0
 8001082:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001084:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001088:	4619      	mov	r1, r3
 800108a:	482e      	ldr	r0, [pc, #184]	; (8001144 <MX_GPIO_Init+0x2b4>)
 800108c:	f002 fde0 	bl	8003c50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001090:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001094:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001096:	2301      	movs	r3, #1
 8001098:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109e:	2300      	movs	r3, #0
 80010a0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a6:	4619      	mov	r1, r3
 80010a8:	4827      	ldr	r0, [pc, #156]	; (8001148 <MX_GPIO_Init+0x2b8>)
 80010aa:	f002 fdd1 	bl	8003c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010ae:	2301      	movs	r3, #1
 80010b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010b2:	2300      	movs	r3, #0
 80010b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010be:	4619      	mov	r1, r3
 80010c0:	4821      	ldr	r0, [pc, #132]	; (8001148 <MX_GPIO_Init+0x2b8>)
 80010c2:	f002 fdc5 	bl	8003c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80010c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010cc:	2301      	movs	r3, #1
 80010ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d4:	2300      	movs	r3, #0
 80010d6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010dc:	4619      	mov	r1, r3
 80010de:	4818      	ldr	r0, [pc, #96]	; (8001140 <MX_GPIO_Init+0x2b0>)
 80010e0:	f002 fdb6 	bl	8003c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80010e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010ea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010f0:	2302      	movs	r3, #2
 80010f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f8:	4619      	mov	r1, r3
 80010fa:	4812      	ldr	r0, [pc, #72]	; (8001144 <MX_GPIO_Init+0x2b4>)
 80010fc:	f002 fda8 	bl	8003c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001100:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001104:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001106:	2301      	movs	r3, #1
 8001108:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800110a:	2301      	movs	r3, #1
 800110c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110e:	2303      	movs	r3, #3
 8001110:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001112:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001116:	4619      	mov	r1, r3
 8001118:	480a      	ldr	r0, [pc, #40]	; (8001144 <MX_GPIO_Init+0x2b4>)
 800111a:	f002 fd99 	bl	8003c50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 800111e:	2200      	movs	r2, #0
 8001120:	2103      	movs	r1, #3
 8001122:	2028      	movs	r0, #40	; 0x28
 8001124:	f001 fe5b 	bl	8002dde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001128:	2028      	movs	r0, #40	; 0x28
 800112a:	f001 fe74 	bl	8002e16 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800112e:	bf00      	nop
 8001130:	3738      	adds	r7, #56	; 0x38
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40021000 	.word	0x40021000
 800113c:	48000800 	.word	0x48000800
 8001140:	48001400 	.word	0x48001400
 8001144:	48001000 	.word	0x48001000
 8001148:	48000400 	.word	0x48000400
 800114c:	48000c00 	.word	0x48000c00

08001150 <mipi_config>:

/* USER CODE BEGIN 4 */
void mipi_config() {
 8001150:	b590      	push	{r4, r7, lr}
 8001152:	b0af      	sub	sp, #188	; 0xbc
 8001154:	af02      	add	r7, sp, #8
	if (HAL_DSI_Start(&hdsi) != HAL_OK) {
 8001156:	48c4      	ldr	r0, [pc, #784]	; (8001468 <mipi_config+0x318>)
 8001158:	f002 fc57 	bl	8003a0a <HAL_DSI_Start>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <mipi_config+0x16>
		Error_Handler();
 8001162:	f001 f8f3 	bl	800234c <Error_Handler>
	}
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xF0, 0xC3);
 8001166:	23c3      	movs	r3, #195	; 0xc3
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	23f0      	movs	r3, #240	; 0xf0
 800116c:	2215      	movs	r2, #21
 800116e:	2100      	movs	r1, #0
 8001170:	48bd      	ldr	r0, [pc, #756]	; (8001468 <mipi_config+0x318>)
 8001172:	f002 fc86 	bl	8003a82 <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xF0, 0x96);
 8001176:	2396      	movs	r3, #150	; 0x96
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	23f0      	movs	r3, #240	; 0xf0
 800117c:	2215      	movs	r2, #21
 800117e:	2100      	movs	r1, #0
 8001180:	48b9      	ldr	r0, [pc, #740]	; (8001468 <mipi_config+0x318>)
 8001182:	f002 fc7e 	bl	8003a82 <HAL_DSI_ShortWrite>
	uint8_t cmd3[7] = { 0x00, 0x77, 0x1F, 0x04, 0x2A, 0x80, 0x33 };
 8001186:	4ab9      	ldr	r2, [pc, #740]	; (800146c <mipi_config+0x31c>)
 8001188:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800118c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001190:	6018      	str	r0, [r3, #0]
 8001192:	3304      	adds	r3, #4
 8001194:	8019      	strh	r1, [r3, #0]
 8001196:	3302      	adds	r3, #2
 8001198:	0c0a      	lsrs	r2, r1, #16
 800119a:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 8, 0xE7, cmd3);
 800119c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80011a0:	9301      	str	r3, [sp, #4]
 80011a2:	23e7      	movs	r3, #231	; 0xe7
 80011a4:	9300      	str	r3, [sp, #0]
 80011a6:	2308      	movs	r3, #8
 80011a8:	2239      	movs	r2, #57	; 0x39
 80011aa:	2100      	movs	r1, #0
 80011ac:	48ae      	ldr	r0, [pc, #696]	; (8001468 <mipi_config+0x318>)
 80011ae:	f002 fc8a 	bl	8003ac6 <HAL_DSI_LongWrite>
	uint8_t cmd4[3] = { 0xC0, 0x68, 0xE0 };
 80011b2:	4aaf      	ldr	r2, [pc, #700]	; (8001470 <mipi_config+0x320>)
 80011b4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011b8:	6812      	ldr	r2, [r2, #0]
 80011ba:	4611      	mov	r1, r2
 80011bc:	8019      	strh	r1, [r3, #0]
 80011be:	3302      	adds	r3, #2
 80011c0:	0c12      	lsrs	r2, r2, #16
 80011c2:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, 0xA4, cmd4);
 80011c4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011c8:	9301      	str	r3, [sp, #4]
 80011ca:	23a4      	movs	r3, #164	; 0xa4
 80011cc:	9300      	str	r3, [sp, #0]
 80011ce:	2304      	movs	r3, #4
 80011d0:	2239      	movs	r2, #57	; 0x39
 80011d2:	2100      	movs	r1, #0
 80011d4:	48a4      	ldr	r0, [pc, #656]	; (8001468 <mipi_config+0x318>)
 80011d6:	f002 fc76 	bl	8003ac6 <HAL_DSI_LongWrite>
	uint8_t cmd5[4] = { 0x42, 0x05, 0x24, 0x03 };
 80011da:	4ba6      	ldr	r3, [pc, #664]	; (8001474 <mipi_config+0x324>)
 80011dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC3, cmd5);
 80011e0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80011e4:	9301      	str	r3, [sp, #4]
 80011e6:	23c3      	movs	r3, #195	; 0xc3
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	2305      	movs	r3, #5
 80011ec:	2239      	movs	r2, #57	; 0x39
 80011ee:	2100      	movs	r1, #0
 80011f0:	489d      	ldr	r0, [pc, #628]	; (8001468 <mipi_config+0x318>)
 80011f2:	f002 fc68 	bl	8003ac6 <HAL_DSI_LongWrite>
	uint8_t cmd6[4] = { 0x42, 0x05, 0x24, 0x03 };
 80011f6:	4b9f      	ldr	r3, [pc, #636]	; (8001474 <mipi_config+0x324>)
 80011f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC4, cmd6);
 80011fc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001200:	9301      	str	r3, [sp, #4]
 8001202:	23c4      	movs	r3, #196	; 0xc4
 8001204:	9300      	str	r3, [sp, #0]
 8001206:	2305      	movs	r3, #5
 8001208:	2239      	movs	r2, #57	; 0x39
 800120a:	2100      	movs	r1, #0
 800120c:	4896      	ldr	r0, [pc, #600]	; (8001468 <mipi_config+0x318>)
 800120e:	f002 fc5a 	bl	8003ac6 <HAL_DSI_LongWrite>
	uint8_t cmd7[12] = { 0x0F, 0xF5, 0x10, 0x13, 0x22, 0x25, 0x10, 0x55, 0x55,
 8001212:	4a99      	ldr	r2, [pc, #612]	; (8001478 <mipi_config+0x328>)
 8001214:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001218:	ca07      	ldmia	r2, {r0, r1, r2}
 800121a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x55, 0x55, 0x55 };
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 13, 0xE5, cmd7);
 800121e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001222:	9301      	str	r3, [sp, #4]
 8001224:	23e5      	movs	r3, #229	; 0xe5
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	230d      	movs	r3, #13
 800122a:	2239      	movs	r2, #57	; 0x39
 800122c:	2100      	movs	r1, #0
 800122e:	488e      	ldr	r0, [pc, #568]	; (8001468 <mipi_config+0x318>)
 8001230:	f002 fc49 	bl	8003ac6 <HAL_DSI_LongWrite>
	uint8_t cmd8[12] = { 0x0F, 0xF5, 0x10, 0x13, 0x22, 0x25, 0x10, 0x55, 0x55,
 8001234:	4a90      	ldr	r2, [pc, #576]	; (8001478 <mipi_config+0x328>)
 8001236:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800123a:	ca07      	ldmia	r2, {r0, r1, r2}
 800123c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x55, 0x55, 0x55 };
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 13, 0xE6, cmd8);
 8001240:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001244:	9301      	str	r3, [sp, #4]
 8001246:	23e6      	movs	r3, #230	; 0xe6
 8001248:	9300      	str	r3, [sp, #0]
 800124a:	230d      	movs	r3, #13
 800124c:	2239      	movs	r2, #57	; 0x39
 800124e:	2100      	movs	r1, #0
 8001250:	4885      	ldr	r0, [pc, #532]	; (8001468 <mipi_config+0x318>)
 8001252:	f002 fc38 	bl	8003ac6 <HAL_DSI_LongWrite>
	uint8_t cmd9[7] = { 0x00, 0x55, 0x00, 0x00, 0x00, 0x49, 0x22 };
 8001256:	4a89      	ldr	r2, [pc, #548]	; (800147c <mipi_config+0x32c>)
 8001258:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800125c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001260:	6018      	str	r0, [r3, #0]
 8001262:	3304      	adds	r3, #4
 8001264:	8019      	strh	r1, [r3, #0]
 8001266:	3302      	adds	r3, #2
 8001268:	0c0a      	lsrs	r2, r1, #16
 800126a:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 8, 0xEC, cmd9);
 800126c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001270:	9301      	str	r3, [sp, #4]
 8001272:	23ec      	movs	r3, #236	; 0xec
 8001274:	9300      	str	r3, [sp, #0]
 8001276:	2308      	movs	r3, #8
 8001278:	2239      	movs	r2, #57	; 0x39
 800127a:	2100      	movs	r1, #0
 800127c:	487a      	ldr	r0, [pc, #488]	; (8001468 <mipi_config+0x318>)
 800127e:	f002 fc22 	bl	8003ac6 <HAL_DSI_LongWrite>
	uint8_t cmd10[4] = { 0x88, 0x05, 0x0F, 0x18 };
 8001282:	4b7f      	ldr	r3, [pc, #508]	; (8001480 <mipi_config+0x330>)
 8001284:	67bb      	str	r3, [r7, #120]	; 0x78
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC1, cmd10);
 8001286:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800128a:	9301      	str	r3, [sp, #4]
 800128c:	23c1      	movs	r3, #193	; 0xc1
 800128e:	9300      	str	r3, [sp, #0]
 8001290:	2305      	movs	r3, #5
 8001292:	2239      	movs	r2, #57	; 0x39
 8001294:	2100      	movs	r1, #0
 8001296:	4874      	ldr	r0, [pc, #464]	; (8001468 <mipi_config+0x318>)
 8001298:	f002 fc15 	bl	8003ac6 <HAL_DSI_LongWrite>
	uint8_t cmd11[4] = { 0x88, 0x05, 0x0F, 0x18 };
 800129c:	4b78      	ldr	r3, [pc, #480]	; (8001480 <mipi_config+0x330>)
 800129e:	677b      	str	r3, [r7, #116]	; 0x74
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC2, cmd11);
 80012a0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80012a4:	9301      	str	r3, [sp, #4]
 80012a6:	23c2      	movs	r3, #194	; 0xc2
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	2305      	movs	r3, #5
 80012ac:	2239      	movs	r2, #57	; 0x39
 80012ae:	2100      	movs	r1, #0
 80012b0:	486d      	ldr	r0, [pc, #436]	; (8001468 <mipi_config+0x318>)
 80012b2:	f002 fc08 	bl	8003ac6 <HAL_DSI_LongWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x36, 0x00);
 80012b6:	2300      	movs	r3, #0
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	2336      	movs	r3, #54	; 0x36
 80012bc:	2215      	movs	r2, #21
 80012be:	2100      	movs	r1, #0
 80012c0:	4869      	ldr	r0, [pc, #420]	; (8001468 <mipi_config+0x318>)
 80012c2:	f002 fbde 	bl	8003a82 <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x3A, 0x07);
 80012c6:	2307      	movs	r3, #7
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	233a      	movs	r3, #58	; 0x3a
 80012cc:	2215      	movs	r2, #21
 80012ce:	2100      	movs	r1, #0
 80012d0:	4865      	ldr	r0, [pc, #404]	; (8001468 <mipi_config+0x318>)
 80012d2:	f002 fbd6 	bl	8003a82 <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xC5, 0xBE);
 80012d6:	23be      	movs	r3, #190	; 0xbe
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	23c5      	movs	r3, #197	; 0xc5
 80012dc:	2215      	movs	r2, #21
 80012de:	2100      	movs	r1, #0
 80012e0:	4861      	ldr	r0, [pc, #388]	; (8001468 <mipi_config+0x318>)
 80012e2:	f002 fbce 	bl	8003a82 <HAL_DSI_ShortWrite>
	uint8_t cmd15[14] = { 0xC0, 0x01, 0x04, 0x0B, 0x0B, 0x29, 0x41, 0x55, 0x55,
 80012e6:	4b67      	ldr	r3, [pc, #412]	; (8001484 <mipi_config+0x334>)
 80012e8:	f107 0464 	add.w	r4, r7, #100	; 0x64
 80012ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012ee:	c407      	stmia	r4!, {r0, r1, r2}
 80012f0:	8023      	strh	r3, [r4, #0]
			0x3D, 0x19, 0x18, 0x24, 0x27 };
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 15, 0xE0, cmd15);
 80012f2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80012f6:	9301      	str	r3, [sp, #4]
 80012f8:	23e0      	movs	r3, #224	; 0xe0
 80012fa:	9300      	str	r3, [sp, #0]
 80012fc:	230f      	movs	r3, #15
 80012fe:	2239      	movs	r2, #57	; 0x39
 8001300:	2100      	movs	r1, #0
 8001302:	4859      	ldr	r0, [pc, #356]	; (8001468 <mipi_config+0x318>)
 8001304:	f002 fbdf 	bl	8003ac6 <HAL_DSI_LongWrite>
	uint8_t cmd16[14] = { 0xC0, 0x01, 0x05, 0x0B, 0x0C, 0x29, 0x42, 0x55, 0x56,
 8001308:	4b5f      	ldr	r3, [pc, #380]	; (8001488 <mipi_config+0x338>)
 800130a:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800130e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001310:	c407      	stmia	r4!, {r0, r1, r2}
 8001312:	8023      	strh	r3, [r4, #0]
			0x3E, 0x1A, 0x18, 0x24, 0x28 };
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 15, 0xE1, cmd16);
 8001314:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001318:	9301      	str	r3, [sp, #4]
 800131a:	23e1      	movs	r3, #225	; 0xe1
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	230f      	movs	r3, #15
 8001320:	2239      	movs	r2, #57	; 0x39
 8001322:	2100      	movs	r1, #0
 8001324:	4850      	ldr	r0, [pc, #320]	; (8001468 <mipi_config+0x318>)
 8001326:	f002 fbce 	bl	8003ac6 <HAL_DSI_LongWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xB2, 0x10);
 800132a:	2310      	movs	r3, #16
 800132c:	9300      	str	r3, [sp, #0]
 800132e:	23b2      	movs	r3, #178	; 0xb2
 8001330:	2215      	movs	r2, #21
 8001332:	2100      	movs	r1, #0
 8001334:	484c      	ldr	r0, [pc, #304]	; (8001468 <mipi_config+0x318>)
 8001336:	f002 fba4 	bl	8003a82 <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xB3, 0x01);
 800133a:	2301      	movs	r3, #1
 800133c:	9300      	str	r3, [sp, #0]
 800133e:	23b3      	movs	r3, #179	; 0xb3
 8001340:	2215      	movs	r2, #21
 8001342:	2100      	movs	r1, #0
 8001344:	4848      	ldr	r0, [pc, #288]	; (8001468 <mipi_config+0x318>)
 8001346:	f002 fb9c 	bl	8003a82 <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xB4, 0x01);
 800134a:	2301      	movs	r3, #1
 800134c:	9300      	str	r3, [sp, #0]
 800134e:	23b4      	movs	r3, #180	; 0xb4
 8001350:	2215      	movs	r2, #21
 8001352:	2100      	movs	r1, #0
 8001354:	4844      	ldr	r0, [pc, #272]	; (8001468 <mipi_config+0x318>)
 8001356:	f002 fb94 	bl	8003a82 <HAL_DSI_ShortWrite>
	uint8_t cmd20[2] = { 0x27, 0x09 };
 800135a:	f640 1327 	movw	r3, #2343	; 0x927
 800135e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 3, 0xB6, cmd20);
 8001362:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001366:	9301      	str	r3, [sp, #4]
 8001368:	23b6      	movs	r3, #182	; 0xb6
 800136a:	9300      	str	r3, [sp, #0]
 800136c:	2303      	movs	r3, #3
 800136e:	2239      	movs	r2, #57	; 0x39
 8001370:	2100      	movs	r1, #0
 8001372:	483d      	ldr	r0, [pc, #244]	; (8001468 <mipi_config+0x318>)
 8001374:	f002 fba7 	bl	8003ac6 <HAL_DSI_LongWrite>
	uint8_t cmd21[4] = { 0x00, 0x54, 0x00, 0x54 };
 8001378:	f04f 2354 	mov.w	r3, #1409307648	; 0x54005400
 800137c:	64fb      	str	r3, [r7, #76]	; 0x4c
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xB5, cmd21);
 800137e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001382:	9301      	str	r3, [sp, #4]
 8001384:	23b5      	movs	r3, #181	; 0xb5
 8001386:	9300      	str	r3, [sp, #0]
 8001388:	2305      	movs	r3, #5
 800138a:	2239      	movs	r2, #57	; 0x39
 800138c:	2100      	movs	r1, #0
 800138e:	4836      	ldr	r0, [pc, #216]	; (8001468 <mipi_config+0x318>)
 8001390:	f002 fb99 	bl	8003ac6 <HAL_DSI_LongWrite>
	uint8_t cmd22[9] = { 0x20, 0x12, 0x40, 0x00, 0x00, 0x2F, 0x2A, 0x0A, 0x00 };
 8001394:	4a3d      	ldr	r2, [pc, #244]	; (800148c <mipi_config+0x33c>)
 8001396:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800139a:	ca07      	ldmia	r2, {r0, r1, r2}
 800139c:	c303      	stmia	r3!, {r0, r1}
 800139e:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 10, 0xA5, cmd22);
 80013a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013a4:	9301      	str	r3, [sp, #4]
 80013a6:	23a5      	movs	r3, #165	; 0xa5
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	230a      	movs	r3, #10
 80013ac:	2239      	movs	r2, #57	; 0x39
 80013ae:	2100      	movs	r1, #0
 80013b0:	482d      	ldr	r0, [pc, #180]	; (8001468 <mipi_config+0x318>)
 80013b2:	f002 fb88 	bl	8003ac6 <HAL_DSI_LongWrite>
	uint8_t cmd23[9] = { 0x20, 0x12, 0x40, 0x00, 0x00, 0x2F, 0x2A, 0x0A, 0x00 };
 80013b6:	4a35      	ldr	r2, [pc, #212]	; (800148c <mipi_config+0x33c>)
 80013b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80013bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80013be:	c303      	stmia	r3!, {r0, r1}
 80013c0:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 10, 0xA6, cmd23);
 80013c2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80013c6:	9301      	str	r3, [sp, #4]
 80013c8:	23a6      	movs	r3, #166	; 0xa6
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	230a      	movs	r3, #10
 80013ce:	2239      	movs	r2, #57	; 0x39
 80013d0:	2100      	movs	r1, #0
 80013d2:	4825      	ldr	r0, [pc, #148]	; (8001468 <mipi_config+0x318>)
 80013d4:	f002 fb77 	bl	8003ac6 <HAL_DSI_LongWrite>
	uint8_t cmd24[7] = { 0x58, 0x0A, 0x21, 0x00, 0x20, 0x01, 0x00 };
 80013d8:	4a2d      	ldr	r2, [pc, #180]	; (8001490 <mipi_config+0x340>)
 80013da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013e2:	6018      	str	r0, [r3, #0]
 80013e4:	3304      	adds	r3, #4
 80013e6:	8019      	strh	r1, [r3, #0]
 80013e8:	3302      	adds	r3, #2
 80013ea:	0c0a      	lsrs	r2, r1, #16
 80013ec:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 8, 0xBA, cmd24);
 80013ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013f2:	9301      	str	r3, [sp, #4]
 80013f4:	23ba      	movs	r3, #186	; 0xba
 80013f6:	9300      	str	r3, [sp, #0]
 80013f8:	2308      	movs	r3, #8
 80013fa:	2239      	movs	r2, #57	; 0x39
 80013fc:	2100      	movs	r1, #0
 80013fe:	481a      	ldr	r0, [pc, #104]	; (8001468 <mipi_config+0x318>)
 8001400:	f002 fb61 	bl	8003ac6 <HAL_DSI_LongWrite>
	uint8_t cmd25[8] = { 0x00, 0x45, 0x00, 0x1F, 0x15, 0x87, 0x07, 0x04 };
 8001404:	4a23      	ldr	r2, [pc, #140]	; (8001494 <mipi_config+0x344>)
 8001406:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800140a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800140e:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 9, 0xBB, cmd25);
 8001412:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001416:	9301      	str	r3, [sp, #4]
 8001418:	23bb      	movs	r3, #187	; 0xbb
 800141a:	9300      	str	r3, [sp, #0]
 800141c:	2309      	movs	r3, #9
 800141e:	2239      	movs	r2, #57	; 0x39
 8001420:	2100      	movs	r1, #0
 8001422:	4811      	ldr	r0, [pc, #68]	; (8001468 <mipi_config+0x318>)
 8001424:	f002 fb4f 	bl	8003ac6 <HAL_DSI_LongWrite>
	uint8_t cmd26[8] = { 0x00, 0x45, 0x00, 0x1F, 0x15, 0x87, 0x07, 0x04 };
 8001428:	4a1a      	ldr	r2, [pc, #104]	; (8001494 <mipi_config+0x344>)
 800142a:	f107 031c 	add.w	r3, r7, #28
 800142e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001432:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 9, 0xBC, cmd26);
 8001436:	f107 031c 	add.w	r3, r7, #28
 800143a:	9301      	str	r3, [sp, #4]
 800143c:	23bc      	movs	r3, #188	; 0xbc
 800143e:	9300      	str	r3, [sp, #0]
 8001440:	2309      	movs	r3, #9
 8001442:	2239      	movs	r2, #57	; 0x39
 8001444:	2100      	movs	r1, #0
 8001446:	4808      	ldr	r0, [pc, #32]	; (8001468 <mipi_config+0x318>)
 8001448:	f002 fb3d 	bl	8003ac6 <HAL_DSI_LongWrite>
	uint8_t cmd27[11] = { 0x11, 0x77, 0xFF, 0xFF, 0x25, 0x34, 0x43, 0x52, 0xFF,
 800144c:	4a12      	ldr	r2, [pc, #72]	; (8001498 <mipi_config+0x348>)
 800144e:	f107 0310 	add.w	r3, r7, #16
 8001452:	ca07      	ldmia	r2, {r0, r1, r2}
 8001454:	c303      	stmia	r3!, {r0, r1}
 8001456:	801a      	strh	r2, [r3, #0]
 8001458:	3302      	adds	r3, #2
 800145a:	0c12      	lsrs	r2, r2, #16
 800145c:	701a      	strb	r2, [r3, #0]
			0xFF, 0xF9 };
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 12, 0xBD, cmd27);
 800145e:	f107 0310 	add.w	r3, r7, #16
 8001462:	9301      	str	r3, [sp, #4]
 8001464:	e01a      	b.n	800149c <mipi_config+0x34c>
 8001466:	bf00      	nop
 8001468:	20004b34 	.word	0x20004b34
 800146c:	080090f8 	.word	0x080090f8
 8001470:	08009100 	.word	0x08009100
 8001474:	03240542 	.word	0x03240542
 8001478:	08009104 	.word	0x08009104
 800147c:	08009110 	.word	0x08009110
 8001480:	180f0588 	.word	0x180f0588
 8001484:	08009118 	.word	0x08009118
 8001488:	08009128 	.word	0x08009128
 800148c:	08009138 	.word	0x08009138
 8001490:	08009144 	.word	0x08009144
 8001494:	0800914c 	.word	0x0800914c
 8001498:	08009154 	.word	0x08009154
 800149c:	23bd      	movs	r3, #189	; 0xbd
 800149e:	9300      	str	r3, [sp, #0]
 80014a0:	230c      	movs	r3, #12
 80014a2:	2239      	movs	r2, #57	; 0x39
 80014a4:	2100      	movs	r1, #0
 80014a6:	482d      	ldr	r0, [pc, #180]	; (800155c <mipi_config+0x40c>)
 80014a8:	f002 fb0d 	bl	8003ac6 <HAL_DSI_LongWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xED, 0xC3);
 80014ac:	23c3      	movs	r3, #195	; 0xc3
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	23ed      	movs	r3, #237	; 0xed
 80014b2:	2215      	movs	r2, #21
 80014b4:	2100      	movs	r1, #0
 80014b6:	4829      	ldr	r0, [pc, #164]	; (800155c <mipi_config+0x40c>)
 80014b8:	f002 fae3 	bl	8003a82 <HAL_DSI_ShortWrite>
	uint8_t cmd29[3] = { 0x40, 0x0F, 0x00 };
 80014bc:	4a28      	ldr	r2, [pc, #160]	; (8001560 <mipi_config+0x410>)
 80014be:	f107 030c 	add.w	r3, r7, #12
 80014c2:	6812      	ldr	r2, [r2, #0]
 80014c4:	4611      	mov	r1, r2
 80014c6:	8019      	strh	r1, [r3, #0]
 80014c8:	3302      	adds	r3, #2
 80014ca:	0c12      	lsrs	r2, r2, #16
 80014cc:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, 0xE4, cmd29);
 80014ce:	f107 030c 	add.w	r3, r7, #12
 80014d2:	9301      	str	r3, [sp, #4]
 80014d4:	23e4      	movs	r3, #228	; 0xe4
 80014d6:	9300      	str	r3, [sp, #0]
 80014d8:	2304      	movs	r3, #4
 80014da:	2239      	movs	r2, #57	; 0x39
 80014dc:	2100      	movs	r1, #0
 80014de:	481f      	ldr	r0, [pc, #124]	; (800155c <mipi_config+0x40c>)
 80014e0:	f002 faf1 	bl	8003ac6 <HAL_DSI_LongWrite>
	uint8_t cmd30[9] = { 0x90, 0x00, 0x3F, 0x10, 0x3F, 0x35, 0x7F, 0x7F, 0x25 };
 80014e4:	4a1f      	ldr	r2, [pc, #124]	; (8001564 <mipi_config+0x414>)
 80014e6:	463b      	mov	r3, r7
 80014e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80014ea:	c303      	stmia	r3!, {r0, r1}
 80014ec:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 10, 0xCC, cmd30);
 80014ee:	463b      	mov	r3, r7
 80014f0:	9301      	str	r3, [sp, #4]
 80014f2:	23cc      	movs	r3, #204	; 0xcc
 80014f4:	9300      	str	r3, [sp, #0]
 80014f6:	230a      	movs	r3, #10
 80014f8:	2239      	movs	r2, #57	; 0x39
 80014fa:	2100      	movs	r1, #0
 80014fc:	4817      	ldr	r0, [pc, #92]	; (800155c <mipi_config+0x40c>)
 80014fe:	f002 fae2 	bl	8003ac6 <HAL_DSI_LongWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x35, 0x00);
 8001502:	2300      	movs	r3, #0
 8001504:	9300      	str	r3, [sp, #0]
 8001506:	2335      	movs	r3, #53	; 0x35
 8001508:	2215      	movs	r2, #21
 800150a:	2100      	movs	r1, #0
 800150c:	4813      	ldr	r0, [pc, #76]	; (800155c <mipi_config+0x40c>)
 800150e:	f002 fab8 	bl	8003a82 <HAL_DSI_ShortWrite>
	HAL_Delay(0);
 8001512:	2000      	movs	r0, #0
 8001514:	f001 fb64 	bl	8002be0 <HAL_Delay>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, 0x11, 0x00);
 8001518:	2300      	movs	r3, #0
 800151a:	9300      	str	r3, [sp, #0]
 800151c:	2311      	movs	r3, #17
 800151e:	2205      	movs	r2, #5
 8001520:	2100      	movs	r1, #0
 8001522:	480e      	ldr	r0, [pc, #56]	; (800155c <mipi_config+0x40c>)
 8001524:	f002 faad 	bl	8003a82 <HAL_DSI_ShortWrite>
	HAL_Delay(120);
 8001528:	2078      	movs	r0, #120	; 0x78
 800152a:	f001 fb59 	bl	8002be0 <HAL_Delay>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, 0x29, 0x00);
 800152e:	2300      	movs	r3, #0
 8001530:	9300      	str	r3, [sp, #0]
 8001532:	2329      	movs	r3, #41	; 0x29
 8001534:	2205      	movs	r2, #5
 8001536:	2100      	movs	r1, #0
 8001538:	4808      	ldr	r0, [pc, #32]	; (800155c <mipi_config+0x40c>)
 800153a:	f002 faa2 	bl	8003a82 <HAL_DSI_ShortWrite>
	HAL_Delay(120);
 800153e:	2078      	movs	r0, #120	; 0x78
 8001540:	f001 fb4e 	bl	8002be0 <HAL_Delay>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x35, 0x00);
 8001544:	2300      	movs	r3, #0
 8001546:	9300      	str	r3, [sp, #0]
 8001548:	2335      	movs	r3, #53	; 0x35
 800154a:	2215      	movs	r2, #21
 800154c:	2100      	movs	r1, #0
 800154e:	4803      	ldr	r0, [pc, #12]	; (800155c <mipi_config+0x40c>)
 8001550:	f002 fa97 	bl	8003a82 <HAL_DSI_ShortWrite>
}
 8001554:	bf00      	nop
 8001556:	37b4      	adds	r7, #180	; 0xb4
 8001558:	46bd      	mov	sp, r7
 800155a:	bd90      	pop	{r4, r7, pc}
 800155c:	20004b34 	.word	0x20004b34
 8001560:	08009160 	.word	0x08009160
 8001564:	08009164 	.word	0x08009164

08001568 <SPI_master2slave>:

void SPI_master2slave(char * buf, char * frame_buf) {
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&hspi1, &buf[0], 1, 1000);
 8001572:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001576:	2201      	movs	r2, #1
 8001578:	6879      	ldr	r1, [r7, #4]
 800157a:	4811      	ldr	r0, [pc, #68]	; (80015c0 <SPI_master2slave+0x58>)
 800157c:	f005 fbb7 	bl	8006cee <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &buf[1], 1, 1000);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	1c59      	adds	r1, r3, #1
 8001584:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001588:	2201      	movs	r2, #1
 800158a:	480d      	ldr	r0, [pc, #52]	; (80015c0 <SPI_master2slave+0x58>)
 800158c:	f005 fbaf 	bl	8006cee <HAL_SPI_Transmit>
	for(int i=0; i< 6400; i++)
 8001590:	2300      	movs	r3, #0
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	e00b      	b.n	80015ae <SPI_master2slave+0x46>
	{
		if (HAL_SPI_Transmit(&hspi1, &frame_buf[i], 1, 1000) == HAL_OK) {
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	683a      	ldr	r2, [r7, #0]
 800159a:	18d1      	adds	r1, r2, r3
 800159c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015a0:	2201      	movs	r2, #1
 80015a2:	4807      	ldr	r0, [pc, #28]	; (80015c0 <SPI_master2slave+0x58>)
 80015a4:	f005 fba3 	bl	8006cee <HAL_SPI_Transmit>
	for(int i=0; i< 6400; i++)
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	3301      	adds	r3, #1
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f5b3 5fc8 	cmp.w	r3, #6400	; 0x1900
 80015b4:	dbef      	blt.n	8001596 <SPI_master2slave+0x2e>
			//HAL_UART_Transmit(&huart4, "SPI_master2slave", 16, 1000);
		}
	}
}
 80015b6:	bf00      	nop
 80015b8:	bf00      	nop
 80015ba:	3710      	adds	r7, #16
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	20004cf0 	.word	0x20004cf0

080015c4 <Write_Registers_data>:

void Write_Registers_data() {
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
	uint8_t length[1] = { 0 };
 80015ca:	2300      	movs	r3, #0
 80015cc:	733b      	strb	r3, [r7, #12]
	uint8_t Register_Address[1] = { 0 };
 80015ce:	2300      	movs	r3, #0
 80015d0:	723b      	strb	r3, [r7, #8]
	uint8_t data[1] = { 0 };
 80015d2:	2300      	movs	r3, #0
 80015d4:	713b      	strb	r3, [r7, #4]

	__HAL_SPI_ENABLE(&hspi3);
 80015d6:	4b3a      	ldr	r3, [pc, #232]	; (80016c0 <Write_Registers_data+0xfc>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	4b38      	ldr	r3, [pc, #224]	; (80016c0 <Write_Registers_data+0xfc>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015e4:	601a      	str	r2, [r3, #0]
	HAL_SPI_Receive(&hspi3, (uint8_t *)length, 1, 20);
 80015e6:	f107 010c 	add.w	r1, r7, #12
 80015ea:	2314      	movs	r3, #20
 80015ec:	2201      	movs	r2, #1
 80015ee:	4834      	ldr	r0, [pc, #208]	; (80016c0 <Write_Registers_data+0xfc>)
 80015f0:	f005 fcf2 	bl	8006fd8 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi3, (uint8_t *)Register_Address, 1, 20);
 80015f4:	f107 0108 	add.w	r1, r7, #8
 80015f8:	2314      	movs	r3, #20
 80015fa:	2201      	movs	r2, #1
 80015fc:	4830      	ldr	r0, [pc, #192]	; (80016c0 <Write_Registers_data+0xfc>)
 80015fe:	f005 fceb 	bl	8006fd8 <HAL_SPI_Receive>
	switch (Register_Address[0]) {
 8001602:	7a3b      	ldrb	r3, [r7, #8]
 8001604:	2b13      	cmp	r3, #19
 8001606:	d856      	bhi.n	80016b6 <Write_Registers_data+0xf2>
 8001608:	a201      	add	r2, pc, #4	; (adr r2, 8001610 <Write_Registers_data+0x4c>)
 800160a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800160e:	bf00      	nop
 8001610:	080016b1 	.word	0x080016b1
 8001614:	080016b1 	.word	0x080016b1
 8001618:	080016b1 	.word	0x080016b1
 800161c:	080016b1 	.word	0x080016b1
 8001620:	080016b1 	.word	0x080016b1
 8001624:	080016b1 	.word	0x080016b1
 8001628:	080016b1 	.word	0x080016b1
 800162c:	080016b1 	.word	0x080016b1
 8001630:	080016b1 	.word	0x080016b1
 8001634:	080016b1 	.word	0x080016b1
 8001638:	080016b1 	.word	0x080016b1
 800163c:	080016b1 	.word	0x080016b1
 8001640:	080016b1 	.word	0x080016b1
 8001644:	080016b1 	.word	0x080016b1
 8001648:	080016b1 	.word	0x080016b1
 800164c:	080016b1 	.word	0x080016b1
 8001650:	08001661 	.word	0x08001661
 8001654:	080016b7 	.word	0x080016b7
 8001658:	080016b7 	.word	0x080016b7
 800165c:	080016b1 	.word	0x080016b1
	case 14: //Day of Version
		break;
	case 15: //Month of Version
		break;
	case 16: //Control A
		HAL_SPI_Receive_IT(&hspi3, data, 1);
 8001660:	1d3b      	adds	r3, r7, #4
 8001662:	2201      	movs	r2, #1
 8001664:	4619      	mov	r1, r3
 8001666:	4816      	ldr	r0, [pc, #88]	; (80016c0 <Write_Registers_data+0xfc>)
 8001668:	f006 f810 	bl	800768c <HAL_SPI_Receive_IT>
		HAL_NVIC_SetPriority(SPI3_IRQn, 1, 0);
 800166c:	2200      	movs	r2, #0
 800166e:	2101      	movs	r1, #1
 8001670:	2033      	movs	r0, #51	; 0x33
 8001672:	f001 fbb4 	bl	8002dde <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001676:	2033      	movs	r0, #51	; 0x33
 8001678:	f001 fbcd 	bl	8002e16 <HAL_NVIC_EnableIRQ>
		__HAL_SPI_ENABLE(&hspi3);
 800167c:	4b10      	ldr	r3, [pc, #64]	; (80016c0 <Write_Registers_data+0xfc>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <Write_Registers_data+0xfc>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800168a:	601a      	str	r2, [r3, #0]

		switch (data[0] & 0b00000011) {
 800168c:	793b      	ldrb	r3, [r7, #4]
 800168e:	f003 0303 	and.w	r3, r3, #3
 8001692:	2b03      	cmp	r3, #3
 8001694:	d80e      	bhi.n	80016b4 <Write_Registers_data+0xf0>
 8001696:	a201      	add	r2, pc, #4	; (adr r2, 800169c <Write_Registers_data+0xd8>)
 8001698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800169c:	080016ad 	.word	0x080016ad
 80016a0:	080016ad 	.word	0x080016ad
 80016a4:	080016ad 	.word	0x080016ad
 80016a8:	080016ad 	.word	0x080016ad
		case 0b00000000:  //Display content of frame buffer (0)
			break;
 80016ac:	bf00      	nop
		case 0b00000010:  //Display SPI input content
			break;
		case 0b00000011:  //Display Flash content
			break;
		}
		break;
 80016ae:	e001      	b.n	80016b4 <Write_Registers_data+0xf0>
		break;
 80016b0:	bf00      	nop
 80016b2:	e000      	b.n	80016b6 <Write_Registers_data+0xf2>
		break;
 80016b4:	bf00      	nop
	case 19: //Status
		break;
	}
}
 80016b6:	bf00      	nop
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20004db8 	.word	0x20004db8

080016c4 <LCD_PowerOn>:
		}
	}*/
}

static void LCD_PowerOn(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
	/* Activate XRES active low */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 80016c8:	2200      	movs	r2, #0
 80016ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016ce:	4808      	ldr	r0, [pc, #32]	; (80016f0 <LCD_PowerOn+0x2c>)
 80016d0:	f002 fc68 	bl	8003fa4 <HAL_GPIO_WritePin>

	HAL_Delay(20); /* wait 20 ms */
 80016d4:	2014      	movs	r0, #20
 80016d6:	f001 fa83 	bl	8002be0 <HAL_Delay>

	/* Desactivate XRES */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 80016da:	2201      	movs	r2, #1
 80016dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016e0:	4803      	ldr	r0, [pc, #12]	; (80016f0 <LCD_PowerOn+0x2c>)
 80016e2:	f002 fc5f 	bl	8003fa4 <HAL_GPIO_WritePin>

	/* Wait for 10ms after releasing XRES before sending commands */
	HAL_Delay(120);
 80016e6:	2078      	movs	r0, #120	; 0x78
 80016e8:	f001 fa7a 	bl	8002be0 <HAL_Delay>
}
 80016ec:	bf00      	nop
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	48001000 	.word	0x48001000

080016f4 <delay_us>:

void delay_us(int time)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
	int i = 0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	60fb      	str	r3, [r7, #12]
	while (time--)
 8001700:	e007      	b.n	8001712 <delay_us+0x1e>
	{
		i = 13;
 8001702:	230d      	movs	r3, #13
 8001704:	60fb      	str	r3, [r7, #12]
		while (i--)
 8001706:	bf00      	nop
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	1e5a      	subs	r2, r3, #1
 800170c:	60fa      	str	r2, [r7, #12]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d1fa      	bne.n	8001708 <delay_us+0x14>
	while (time--)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	1e5a      	subs	r2, r3, #1
 8001716:	607a      	str	r2, [r7, #4]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d1f2      	bne.n	8001702 <delay_us+0xe>
			;
	}
}
 800171c:	bf00      	nop
 800171e:	bf00      	nop
 8001720:	3714      	adds	r7, #20
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <delay_100ns>:

void delay_100ns(int time)
{
 800172a:	b480      	push	{r7}
 800172c:	b085      	sub	sp, #20
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
	int i = 0;
 8001732:	2300      	movs	r3, #0
 8001734:	60fb      	str	r3, [r7, #12]
	while (time--)
 8001736:	e007      	b.n	8001748 <delay_100ns+0x1e>
	{
		i = 1;
 8001738:	2301      	movs	r3, #1
 800173a:	60fb      	str	r3, [r7, #12]
		while (i--)
 800173c:	bf00      	nop
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	1e5a      	subs	r2, r3, #1
 8001742:	60fa      	str	r2, [r7, #12]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d1fa      	bne.n	800173e <delay_100ns+0x14>
	while (time--)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	1e5a      	subs	r2, r3, #1
 800174c:	607a      	str	r2, [r7, #4]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1f2      	bne.n	8001738 <delay_100ns+0xe>
			;
	}
}
 8001752:	bf00      	nop
 8001754:	bf00      	nop
 8001756:	3714      	adds	r7, #20
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <HAL_GPIO_EXTI_Callback>:

int button_count=0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_12)
 800176a:	88fb      	ldrh	r3, [r7, #6]
 800176c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001770:	d15b      	bne.n	800182a <HAL_GPIO_EXTI_Callback+0xca>
	{
		button_count++;
 8001772:	4b2f      	ldr	r3, [pc, #188]	; (8001830 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	3301      	adds	r3, #1
 8001778:	4a2d      	ldr	r2, [pc, #180]	; (8001830 <HAL_GPIO_EXTI_Callback+0xd0>)
 800177a:	6013      	str	r3, [r2, #0]
		delay_us(50000);
 800177c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001780:	f7ff ffb8 	bl	80016f4 <delay_us>
		for(int i=0; i<200; i++)
 8001784:	2300      	movs	r3, #0
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	e02e      	b.n	80017e8 <HAL_GPIO_EXTI_Callback+0x88>
		{
			if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12) == GPIO_PIN_RESET)
 800178a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800178e:	4829      	ldr	r0, [pc, #164]	; (8001834 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001790:	f002 fbf0 	bl	8003f74 <HAL_GPIO_ReadPin>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d11a      	bne.n	80017d0 <HAL_GPIO_EXTI_Callback+0x70>
			{
				if(button_count<50 && play_mode==0)
 800179a:	4b25      	ldr	r3, [pc, #148]	; (8001830 <HAL_GPIO_EXTI_Callback+0xd0>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2b31      	cmp	r3, #49	; 0x31
 80017a0:	dc12      	bgt.n	80017c8 <HAL_GPIO_EXTI_Callback+0x68>
 80017a2:	4b25      	ldr	r3, [pc, #148]	; (8001838 <HAL_GPIO_EXTI_Callback+0xd8>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d10e      	bne.n	80017c8 <HAL_GPIO_EXTI_Callback+0x68>
				{
					display_image_number++;
 80017aa:	4b24      	ldr	r3, [pc, #144]	; (800183c <HAL_GPIO_EXTI_Callback+0xdc>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	3301      	adds	r3, #1
 80017b0:	b2da      	uxtb	r2, r3
 80017b2:	4b22      	ldr	r3, [pc, #136]	; (800183c <HAL_GPIO_EXTI_Callback+0xdc>)
 80017b4:	701a      	strb	r2, [r3, #0]
					if(display_image_number >= total_image_in_flash)
 80017b6:	4b21      	ldr	r3, [pc, #132]	; (800183c <HAL_GPIO_EXTI_Callback+0xdc>)
 80017b8:	781a      	ldrb	r2, [r3, #0]
 80017ba:	4b21      	ldr	r3, [pc, #132]	; (8001840 <HAL_GPIO_EXTI_Callback+0xe0>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	429a      	cmp	r2, r3
 80017c0:	d302      	bcc.n	80017c8 <HAL_GPIO_EXTI_Callback+0x68>
						display_image_number = 0;
 80017c2:	4b1e      	ldr	r3, [pc, #120]	; (800183c <HAL_GPIO_EXTI_Callback+0xdc>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	701a      	strb	r2, [r3, #0]
				}
				button_count = 0;
 80017c8:	4b19      	ldr	r3, [pc, #100]	; (8001830 <HAL_GPIO_EXTI_Callback+0xd0>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]
				return;
 80017ce:	e02c      	b.n	800182a <HAL_GPIO_EXTI_Callback+0xca>
			}
			button_count++;
 80017d0:	4b17      	ldr	r3, [pc, #92]	; (8001830 <HAL_GPIO_EXTI_Callback+0xd0>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	3301      	adds	r3, #1
 80017d6:	4a16      	ldr	r2, [pc, #88]	; (8001830 <HAL_GPIO_EXTI_Callback+0xd0>)
 80017d8:	6013      	str	r3, [r2, #0]
			delay_us(10000);
 80017da:	f242 7010 	movw	r0, #10000	; 0x2710
 80017de:	f7ff ff89 	bl	80016f4 <delay_us>
		for(int i=0; i<200; i++)
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	3301      	adds	r3, #1
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2bc7      	cmp	r3, #199	; 0xc7
 80017ec:	ddcd      	ble.n	800178a <HAL_GPIO_EXTI_Callback+0x2a>
		}
		if(play_mode==1)
 80017ee:	4b12      	ldr	r3, [pc, #72]	; (8001838 <HAL_GPIO_EXTI_Callback+0xd8>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d109      	bne.n	800180a <HAL_GPIO_EXTI_Callback+0xaa>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80017f6:	2200      	movs	r2, #0
 80017f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017fc:	4811      	ldr	r0, [pc, #68]	; (8001844 <HAL_GPIO_EXTI_Callback+0xe4>)
 80017fe:	f002 fbd1 	bl	8003fa4 <HAL_GPIO_WritePin>
			play_mode = 0;
 8001802:	4b0d      	ldr	r3, [pc, #52]	; (8001838 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001804:	2200      	movs	r2, #0
 8001806:	701a      	strb	r2, [r3, #0]
 8001808:	e00c      	b.n	8001824 <HAL_GPIO_EXTI_Callback+0xc4>
		}
		else if(play_mode==0)
 800180a:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <HAL_GPIO_EXTI_Callback+0xd8>)
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d108      	bne.n	8001824 <HAL_GPIO_EXTI_Callback+0xc4>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001812:	2201      	movs	r2, #1
 8001814:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001818:	480a      	ldr	r0, [pc, #40]	; (8001844 <HAL_GPIO_EXTI_Callback+0xe4>)
 800181a:	f002 fbc3 	bl	8003fa4 <HAL_GPIO_WritePin>
			play_mode = 1;
 800181e:	4b06      	ldr	r3, [pc, #24]	; (8001838 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001820:	2201      	movs	r2, #1
 8001822:	701a      	strb	r2, [r3, #0]
		}
		button_count = 0;
 8001824:	4b02      	ldr	r3, [pc, #8]	; (8001830 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
	}
}
 800182a:	3710      	adds	r7, #16
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	2000b2b8 	.word	0x2000b2b8
 8001834:	48001000 	.word	0x48001000
 8001838:	2000b2b4 	.word	0x2000b2b4
 800183c:	2000b2b5 	.word	0x2000b2b5
 8001840:	20000008 	.word	0x20000008
 8001844:	48000400 	.word	0x48000400

08001848 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef * hspi)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
	// USB command: Type and command
	switch (spi3_buf[0] & 0b11000000) {
 8001850:	4bbb      	ldr	r3, [pc, #748]	; (8001b40 <HAL_SPI_RxCpltCallback+0x2f8>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001858:	2bc0      	cmp	r3, #192	; 0xc0
 800185a:	f000 8208 	beq.w	8001c6e <HAL_SPI_RxCpltCallback+0x426>
 800185e:	2bc0      	cmp	r3, #192	; 0xc0
 8001860:	f300 834a 	bgt.w	8001ef8 <HAL_SPI_RxCpltCallback+0x6b0>
 8001864:	2b80      	cmp	r3, #128	; 0x80
 8001866:	f000 81f6 	beq.w	8001c56 <HAL_SPI_RxCpltCallback+0x40e>
 800186a:	2b80      	cmp	r3, #128	; 0x80
 800186c:	f300 8344 	bgt.w	8001ef8 <HAL_SPI_RxCpltCallback+0x6b0>
 8001870:	2b00      	cmp	r3, #0
 8001872:	d003      	beq.n	800187c <HAL_SPI_RxCpltCallback+0x34>
 8001874:	2b40      	cmp	r3, #64	; 0x40
 8001876:	f000 8183 	beq.w	8001b80 <HAL_SPI_RxCpltCallback+0x338>
 800187a:	e33d      	b.n	8001ef8 <HAL_SPI_RxCpltCallback+0x6b0>
	case 0b00000000:  //Chain SPI functions
		switch (spi3_buf[0] & 0b00111000) {
 800187c:	4bb0      	ldr	r3, [pc, #704]	; (8001b40 <HAL_SPI_RxCpltCallback+0x2f8>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001884:	2b38      	cmp	r3, #56	; 0x38
 8001886:	f200 8330 	bhi.w	8001eea <HAL_SPI_RxCpltCallback+0x6a2>
 800188a:	a201      	add	r2, pc, #4	; (adr r2, 8001890 <HAL_SPI_RxCpltCallback+0x48>)
 800188c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001890:	08001975 	.word	0x08001975
 8001894:	08001eeb 	.word	0x08001eeb
 8001898:	08001eeb 	.word	0x08001eeb
 800189c:	08001eeb 	.word	0x08001eeb
 80018a0:	08001eeb 	.word	0x08001eeb
 80018a4:	08001eeb 	.word	0x08001eeb
 80018a8:	08001eeb 	.word	0x08001eeb
 80018ac:	08001eeb 	.word	0x08001eeb
 80018b0:	08001a6b 	.word	0x08001a6b
 80018b4:	08001eeb 	.word	0x08001eeb
 80018b8:	08001eeb 	.word	0x08001eeb
 80018bc:	08001eeb 	.word	0x08001eeb
 80018c0:	08001eeb 	.word	0x08001eeb
 80018c4:	08001eeb 	.word	0x08001eeb
 80018c8:	08001eeb 	.word	0x08001eeb
 80018cc:	08001eeb 	.word	0x08001eeb
 80018d0:	08001b77 	.word	0x08001b77
 80018d4:	08001eeb 	.word	0x08001eeb
 80018d8:	08001eeb 	.word	0x08001eeb
 80018dc:	08001eeb 	.word	0x08001eeb
 80018e0:	08001eeb 	.word	0x08001eeb
 80018e4:	08001eeb 	.word	0x08001eeb
 80018e8:	08001eeb 	.word	0x08001eeb
 80018ec:	08001eeb 	.word	0x08001eeb
 80018f0:	08001b7d 	.word	0x08001b7d
 80018f4:	08001eeb 	.word	0x08001eeb
 80018f8:	08001eeb 	.word	0x08001eeb
 80018fc:	08001eeb 	.word	0x08001eeb
 8001900:	08001eeb 	.word	0x08001eeb
 8001904:	08001eeb 	.word	0x08001eeb
 8001908:	08001eeb 	.word	0x08001eeb
 800190c:	08001eeb 	.word	0x08001eeb
 8001910:	08001b7d 	.word	0x08001b7d
 8001914:	08001eeb 	.word	0x08001eeb
 8001918:	08001eeb 	.word	0x08001eeb
 800191c:	08001eeb 	.word	0x08001eeb
 8001920:	08001eeb 	.word	0x08001eeb
 8001924:	08001eeb 	.word	0x08001eeb
 8001928:	08001eeb 	.word	0x08001eeb
 800192c:	08001eeb 	.word	0x08001eeb
 8001930:	08001b7d 	.word	0x08001b7d
 8001934:	08001eeb 	.word	0x08001eeb
 8001938:	08001eeb 	.word	0x08001eeb
 800193c:	08001eeb 	.word	0x08001eeb
 8001940:	08001eeb 	.word	0x08001eeb
 8001944:	08001eeb 	.word	0x08001eeb
 8001948:	08001eeb 	.word	0x08001eeb
 800194c:	08001eeb 	.word	0x08001eeb
 8001950:	08001b7d 	.word	0x08001b7d
 8001954:	08001eeb 	.word	0x08001eeb
 8001958:	08001eeb 	.word	0x08001eeb
 800195c:	08001eeb 	.word	0x08001eeb
 8001960:	08001eeb 	.word	0x08001eeb
 8001964:	08001eeb 	.word	0x08001eeb
 8001968:	08001eeb 	.word	0x08001eeb
 800196c:	08001eeb 	.word	0x08001eeb
 8001970:	08001b7d 	.word	0x08001b7d
		case 0b00000000: //Write content of full frame buffer to fram buffer (0)
			switch (spi3_buf[0] & 0b00000111) {
 8001974:	4b72      	ldr	r3, [pc, #456]	; (8001b40 <HAL_SPI_RxCpltCallback+0x2f8>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	f003 0307 	and.w	r3, r3, #7
 800197c:	2b03      	cmp	r3, #3
 800197e:	d865      	bhi.n	8001a4c <HAL_SPI_RxCpltCallback+0x204>
 8001980:	a201      	add	r2, pc, #4	; (adr r2, 8001988 <HAL_SPI_RxCpltCallback+0x140>)
 8001982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001986:	bf00      	nop
 8001988:	08001a67 	.word	0x08001a67
 800198c:	08001999 	.word	0x08001999
 8001990:	080019d5 	.word	0x080019d5
 8001994:	08001a11 	.word	0x08001a11
			case 0b00000000: //Command for DIP switch ID = 00
				break;
			case 0b00000001: //Command for DIP switch ID = 01
				if(BOARD_NUMBER==2)
 8001998:	4b6a      	ldr	r3, [pc, #424]	; (8001b44 <HAL_SPI_RxCpltCallback+0x2fc>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b02      	cmp	r3, #2
 800199e:	d10c      	bne.n	80019ba <HAL_SPI_RxCpltCallback+0x172>
				{
					HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_0, 6400, 1000);
 80019a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019a4:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 80019a8:	4967      	ldr	r1, [pc, #412]	; (8001b48 <HAL_SPI_RxCpltCallback+0x300>)
 80019aa:	4868      	ldr	r0, [pc, #416]	; (8001b4c <HAL_SPI_RxCpltCallback+0x304>)
 80019ac:	f005 fb14 	bl	8006fd8 <HAL_SPI_Receive>
					SPI_master2slave(&spi3_buf, &frame_buf_0);
 80019b0:	4965      	ldr	r1, [pc, #404]	; (8001b48 <HAL_SPI_RxCpltCallback+0x300>)
 80019b2:	4863      	ldr	r0, [pc, #396]	; (8001b40 <HAL_SPI_RxCpltCallback+0x2f8>)
 80019b4:	f7ff fdd8 	bl	8001568 <SPI_master2slave>
				else
				{
					HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
					SPI_master2slave(&spi3_buf, &frame_buf_tmp);
				}
				break;
 80019b8:	e056      	b.n	8001a68 <HAL_SPI_RxCpltCallback+0x220>
					HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
 80019ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019be:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 80019c2:	4963      	ldr	r1, [pc, #396]	; (8001b50 <HAL_SPI_RxCpltCallback+0x308>)
 80019c4:	4861      	ldr	r0, [pc, #388]	; (8001b4c <HAL_SPI_RxCpltCallback+0x304>)
 80019c6:	f005 fb07 	bl	8006fd8 <HAL_SPI_Receive>
					SPI_master2slave(&spi3_buf, &frame_buf_tmp);
 80019ca:	4961      	ldr	r1, [pc, #388]	; (8001b50 <HAL_SPI_RxCpltCallback+0x308>)
 80019cc:	485c      	ldr	r0, [pc, #368]	; (8001b40 <HAL_SPI_RxCpltCallback+0x2f8>)
 80019ce:	f7ff fdcb 	bl	8001568 <SPI_master2slave>
				break;
 80019d2:	e049      	b.n	8001a68 <HAL_SPI_RxCpltCallback+0x220>
			case 0b00000010: //Command for DIP switch ID = 10
				if(BOARD_NUMBER==3)
 80019d4:	4b5b      	ldr	r3, [pc, #364]	; (8001b44 <HAL_SPI_RxCpltCallback+0x2fc>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b03      	cmp	r3, #3
 80019da:	d10c      	bne.n	80019f6 <HAL_SPI_RxCpltCallback+0x1ae>
				{
					HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_0, 6400, 1000);
 80019dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019e0:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 80019e4:	4958      	ldr	r1, [pc, #352]	; (8001b48 <HAL_SPI_RxCpltCallback+0x300>)
 80019e6:	4859      	ldr	r0, [pc, #356]	; (8001b4c <HAL_SPI_RxCpltCallback+0x304>)
 80019e8:	f005 faf6 	bl	8006fd8 <HAL_SPI_Receive>
					SPI_master2slave(&spi3_buf, &frame_buf_0);
 80019ec:	4956      	ldr	r1, [pc, #344]	; (8001b48 <HAL_SPI_RxCpltCallback+0x300>)
 80019ee:	4854      	ldr	r0, [pc, #336]	; (8001b40 <HAL_SPI_RxCpltCallback+0x2f8>)
 80019f0:	f7ff fdba 	bl	8001568 <SPI_master2slave>
				else
				{
					HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
					SPI_master2slave(&spi3_buf, &frame_buf_tmp);
				}
				break;
 80019f4:	e038      	b.n	8001a68 <HAL_SPI_RxCpltCallback+0x220>
					HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
 80019f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019fa:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 80019fe:	4954      	ldr	r1, [pc, #336]	; (8001b50 <HAL_SPI_RxCpltCallback+0x308>)
 8001a00:	4852      	ldr	r0, [pc, #328]	; (8001b4c <HAL_SPI_RxCpltCallback+0x304>)
 8001a02:	f005 fae9 	bl	8006fd8 <HAL_SPI_Receive>
					SPI_master2slave(&spi3_buf, &frame_buf_tmp);
 8001a06:	4952      	ldr	r1, [pc, #328]	; (8001b50 <HAL_SPI_RxCpltCallback+0x308>)
 8001a08:	484d      	ldr	r0, [pc, #308]	; (8001b40 <HAL_SPI_RxCpltCallback+0x2f8>)
 8001a0a:	f7ff fdad 	bl	8001568 <SPI_master2slave>
				break;
 8001a0e:	e02b      	b.n	8001a68 <HAL_SPI_RxCpltCallback+0x220>
			case 0b00000011: //Command for DIP switch ID = 11
				if(BOARD_NUMBER==4)
 8001a10:	4b4c      	ldr	r3, [pc, #304]	; (8001b44 <HAL_SPI_RxCpltCallback+0x2fc>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b04      	cmp	r3, #4
 8001a16:	d10c      	bne.n	8001a32 <HAL_SPI_RxCpltCallback+0x1ea>
				{
					HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_0, 6400, 1000);
 8001a18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a1c:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001a20:	4949      	ldr	r1, [pc, #292]	; (8001b48 <HAL_SPI_RxCpltCallback+0x300>)
 8001a22:	484a      	ldr	r0, [pc, #296]	; (8001b4c <HAL_SPI_RxCpltCallback+0x304>)
 8001a24:	f005 fad8 	bl	8006fd8 <HAL_SPI_Receive>
					SPI_master2slave(&spi3_buf, &frame_buf_0);
 8001a28:	4947      	ldr	r1, [pc, #284]	; (8001b48 <HAL_SPI_RxCpltCallback+0x300>)
 8001a2a:	4845      	ldr	r0, [pc, #276]	; (8001b40 <HAL_SPI_RxCpltCallback+0x2f8>)
 8001a2c:	f7ff fd9c 	bl	8001568 <SPI_master2slave>
				else
				{
					HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
					SPI_master2slave(&spi3_buf, &frame_buf_tmp);
				}
				break;
 8001a30:	e01a      	b.n	8001a68 <HAL_SPI_RxCpltCallback+0x220>
					HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
 8001a32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a36:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001a3a:	4945      	ldr	r1, [pc, #276]	; (8001b50 <HAL_SPI_RxCpltCallback+0x308>)
 8001a3c:	4843      	ldr	r0, [pc, #268]	; (8001b4c <HAL_SPI_RxCpltCallback+0x304>)
 8001a3e:	f005 facb 	bl	8006fd8 <HAL_SPI_Receive>
					SPI_master2slave(&spi3_buf, &frame_buf_tmp);
 8001a42:	4943      	ldr	r1, [pc, #268]	; (8001b50 <HAL_SPI_RxCpltCallback+0x308>)
 8001a44:	483e      	ldr	r0, [pc, #248]	; (8001b40 <HAL_SPI_RxCpltCallback+0x2f8>)
 8001a46:	f7ff fd8f 	bl	8001568 <SPI_master2slave>
				break;
 8001a4a:	e00d      	b.n	8001a68 <HAL_SPI_RxCpltCallback+0x220>
			default: //Broadcast to every board
				HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_0, 6400, 1000);
 8001a4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a50:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001a54:	493c      	ldr	r1, [pc, #240]	; (8001b48 <HAL_SPI_RxCpltCallback+0x300>)
 8001a56:	483d      	ldr	r0, [pc, #244]	; (8001b4c <HAL_SPI_RxCpltCallback+0x304>)
 8001a58:	f005 fabe 	bl	8006fd8 <HAL_SPI_Receive>
				SPI_master2slave(&spi3_buf, &frame_buf_0);
 8001a5c:	493a      	ldr	r1, [pc, #232]	; (8001b48 <HAL_SPI_RxCpltCallback+0x300>)
 8001a5e:	4838      	ldr	r0, [pc, #224]	; (8001b40 <HAL_SPI_RxCpltCallback+0x2f8>)
 8001a60:	f7ff fd82 	bl	8001568 <SPI_master2slave>
				break;
 8001a64:	e000      	b.n	8001a68 <HAL_SPI_RxCpltCallback+0x220>
				break;
 8001a66:	bf00      	nop
			}
			break;
 8001a68:	e089      	b.n	8001b7e <HAL_SPI_RxCpltCallback+0x336>
		case 0b00001000: //Write content of full frame buffer to fram buffer (1)
			switch (spi3_buf[0] & 0b00000111) {
 8001a6a:	4b35      	ldr	r3, [pc, #212]	; (8001b40 <HAL_SPI_RxCpltCallback+0x2f8>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	2b03      	cmp	r3, #3
 8001a74:	d870      	bhi.n	8001b58 <HAL_SPI_RxCpltCallback+0x310>
 8001a76:	a201      	add	r2, pc, #4	; (adr r2, 8001a7c <HAL_SPI_RxCpltCallback+0x234>)
 8001a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a7c:	08001b73 	.word	0x08001b73
 8001a80:	08001a8d 	.word	0x08001a8d
 8001a84:	08001ac9 	.word	0x08001ac9
 8001a88:	08001b05 	.word	0x08001b05
			case 0b00000000: //Command for DIP switch ID = 00
				break;
			case 0b00000001: //Command for DIP switch ID = 01
				if(BOARD_NUMBER==2)
 8001a8c:	4b2d      	ldr	r3, [pc, #180]	; (8001b44 <HAL_SPI_RxCpltCallback+0x2fc>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d10c      	bne.n	8001aae <HAL_SPI_RxCpltCallback+0x266>
				{
					HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_1, 6400, 1000);
 8001a94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a98:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001a9c:	492d      	ldr	r1, [pc, #180]	; (8001b54 <HAL_SPI_RxCpltCallback+0x30c>)
 8001a9e:	482b      	ldr	r0, [pc, #172]	; (8001b4c <HAL_SPI_RxCpltCallback+0x304>)
 8001aa0:	f005 fa9a 	bl	8006fd8 <HAL_SPI_Receive>
					SPI_master2slave(&spi3_buf, &frame_buf_1);
 8001aa4:	492b      	ldr	r1, [pc, #172]	; (8001b54 <HAL_SPI_RxCpltCallback+0x30c>)
 8001aa6:	4826      	ldr	r0, [pc, #152]	; (8001b40 <HAL_SPI_RxCpltCallback+0x2f8>)
 8001aa8:	f7ff fd5e 	bl	8001568 <SPI_master2slave>
				else
				{
					HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
					SPI_master2slave(&spi3_buf, &frame_buf_tmp);
				}
				break;
 8001aac:	e062      	b.n	8001b74 <HAL_SPI_RxCpltCallback+0x32c>
					HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
 8001aae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ab2:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001ab6:	4926      	ldr	r1, [pc, #152]	; (8001b50 <HAL_SPI_RxCpltCallback+0x308>)
 8001ab8:	4824      	ldr	r0, [pc, #144]	; (8001b4c <HAL_SPI_RxCpltCallback+0x304>)
 8001aba:	f005 fa8d 	bl	8006fd8 <HAL_SPI_Receive>
					SPI_master2slave(&spi3_buf, &frame_buf_tmp);
 8001abe:	4924      	ldr	r1, [pc, #144]	; (8001b50 <HAL_SPI_RxCpltCallback+0x308>)
 8001ac0:	481f      	ldr	r0, [pc, #124]	; (8001b40 <HAL_SPI_RxCpltCallback+0x2f8>)
 8001ac2:	f7ff fd51 	bl	8001568 <SPI_master2slave>
				break;
 8001ac6:	e055      	b.n	8001b74 <HAL_SPI_RxCpltCallback+0x32c>
			case 0b00000010: //Command for DIP switch ID = 10
				if(BOARD_NUMBER==3)
 8001ac8:	4b1e      	ldr	r3, [pc, #120]	; (8001b44 <HAL_SPI_RxCpltCallback+0x2fc>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	2b03      	cmp	r3, #3
 8001ace:	d10c      	bne.n	8001aea <HAL_SPI_RxCpltCallback+0x2a2>
				{
					HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_1, 6400, 1000);
 8001ad0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ad4:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001ad8:	491e      	ldr	r1, [pc, #120]	; (8001b54 <HAL_SPI_RxCpltCallback+0x30c>)
 8001ada:	481c      	ldr	r0, [pc, #112]	; (8001b4c <HAL_SPI_RxCpltCallback+0x304>)
 8001adc:	f005 fa7c 	bl	8006fd8 <HAL_SPI_Receive>
					SPI_master2slave(&spi3_buf, &frame_buf_1);
 8001ae0:	491c      	ldr	r1, [pc, #112]	; (8001b54 <HAL_SPI_RxCpltCallback+0x30c>)
 8001ae2:	4817      	ldr	r0, [pc, #92]	; (8001b40 <HAL_SPI_RxCpltCallback+0x2f8>)
 8001ae4:	f7ff fd40 	bl	8001568 <SPI_master2slave>
				else
				{
					HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
					SPI_master2slave(&spi3_buf, &frame_buf_tmp);
				}
				break;
 8001ae8:	e044      	b.n	8001b74 <HAL_SPI_RxCpltCallback+0x32c>
					HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
 8001aea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aee:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001af2:	4917      	ldr	r1, [pc, #92]	; (8001b50 <HAL_SPI_RxCpltCallback+0x308>)
 8001af4:	4815      	ldr	r0, [pc, #84]	; (8001b4c <HAL_SPI_RxCpltCallback+0x304>)
 8001af6:	f005 fa6f 	bl	8006fd8 <HAL_SPI_Receive>
					SPI_master2slave(&spi3_buf, &frame_buf_tmp);
 8001afa:	4915      	ldr	r1, [pc, #84]	; (8001b50 <HAL_SPI_RxCpltCallback+0x308>)
 8001afc:	4810      	ldr	r0, [pc, #64]	; (8001b40 <HAL_SPI_RxCpltCallback+0x2f8>)
 8001afe:	f7ff fd33 	bl	8001568 <SPI_master2slave>
				break;
 8001b02:	e037      	b.n	8001b74 <HAL_SPI_RxCpltCallback+0x32c>
			case 0b00000011: //Command for DIP switch ID = 11
				if(BOARD_NUMBER==4)
 8001b04:	4b0f      	ldr	r3, [pc, #60]	; (8001b44 <HAL_SPI_RxCpltCallback+0x2fc>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b04      	cmp	r3, #4
 8001b0a:	d10c      	bne.n	8001b26 <HAL_SPI_RxCpltCallback+0x2de>
				{
					HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_1, 6400, 1000);
 8001b0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b10:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001b14:	490f      	ldr	r1, [pc, #60]	; (8001b54 <HAL_SPI_RxCpltCallback+0x30c>)
 8001b16:	480d      	ldr	r0, [pc, #52]	; (8001b4c <HAL_SPI_RxCpltCallback+0x304>)
 8001b18:	f005 fa5e 	bl	8006fd8 <HAL_SPI_Receive>
					SPI_master2slave(&spi3_buf, &frame_buf_1);
 8001b1c:	490d      	ldr	r1, [pc, #52]	; (8001b54 <HAL_SPI_RxCpltCallback+0x30c>)
 8001b1e:	4808      	ldr	r0, [pc, #32]	; (8001b40 <HAL_SPI_RxCpltCallback+0x2f8>)
 8001b20:	f7ff fd22 	bl	8001568 <SPI_master2slave>
				else
				{
					HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
					SPI_master2slave(&spi3_buf, &frame_buf_tmp);
				}
				break;
 8001b24:	e026      	b.n	8001b74 <HAL_SPI_RxCpltCallback+0x32c>
					HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
 8001b26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b2a:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001b2e:	4908      	ldr	r1, [pc, #32]	; (8001b50 <HAL_SPI_RxCpltCallback+0x308>)
 8001b30:	4806      	ldr	r0, [pc, #24]	; (8001b4c <HAL_SPI_RxCpltCallback+0x304>)
 8001b32:	f005 fa51 	bl	8006fd8 <HAL_SPI_Receive>
					SPI_master2slave(&spi3_buf, &frame_buf_tmp);
 8001b36:	4906      	ldr	r1, [pc, #24]	; (8001b50 <HAL_SPI_RxCpltCallback+0x308>)
 8001b38:	4801      	ldr	r0, [pc, #4]	; (8001b40 <HAL_SPI_RxCpltCallback+0x2f8>)
 8001b3a:	f7ff fd15 	bl	8001568 <SPI_master2slave>
				break;
 8001b3e:	e019      	b.n	8001b74 <HAL_SPI_RxCpltCallback+0x32c>
 8001b40:	20004eb0 	.word	0x20004eb0
 8001b44:	20000000 	.word	0x20000000
 8001b48:	200067b4 	.word	0x200067b4
 8001b4c:	20004db8 	.word	0x20004db8
 8001b50:	20004eb4 	.word	0x20004eb4
 8001b54:	200080b4 	.word	0x200080b4
			default: //Broadcast to every board
				HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_1, 6400, 1000);
 8001b58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b5c:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001b60:	49bd      	ldr	r1, [pc, #756]	; (8001e58 <HAL_SPI_RxCpltCallback+0x610>)
 8001b62:	48be      	ldr	r0, [pc, #760]	; (8001e5c <HAL_SPI_RxCpltCallback+0x614>)
 8001b64:	f005 fa38 	bl	8006fd8 <HAL_SPI_Receive>
				SPI_master2slave(&spi3_buf, &frame_buf_1);
 8001b68:	49bb      	ldr	r1, [pc, #748]	; (8001e58 <HAL_SPI_RxCpltCallback+0x610>)
 8001b6a:	48bd      	ldr	r0, [pc, #756]	; (8001e60 <HAL_SPI_RxCpltCallback+0x618>)
 8001b6c:	f7ff fcfc 	bl	8001568 <SPI_master2slave>
				break;
 8001b70:	e000      	b.n	8001b74 <HAL_SPI_RxCpltCallback+0x32c>
				break;
 8001b72:	bf00      	nop
			}
			break;
 8001b74:	e003      	b.n	8001b7e <HAL_SPI_RxCpltCallback+0x336>
		case 0b00010000: //Write Registers data
			Write_Registers_data();
 8001b76:	f7ff fd25 	bl	80015c4 <Write_Registers_data>
			break;
 8001b7a:	e000      	b.n	8001b7e <HAL_SPI_RxCpltCallback+0x336>
		case 0b00011000: //Write partial content of frame buffer
			break;
 8001b7c:	bf00      	nop
		case 0b00110000: //Read Registers data
			break;
		case 0b00111000: //Read partial content of frame buffer
			break;
		}
		break;
 8001b7e:	e1b4      	b.n	8001eea <HAL_SPI_RxCpltCallback+0x6a2>
	case 0b01000000:  //Master SPI functions
		switch (spi3_buf[0] & 0b00111000) {
 8001b80:	4bb7      	ldr	r3, [pc, #732]	; (8001e60 <HAL_SPI_RxCpltCallback+0x618>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b88:	2b28      	cmp	r3, #40	; 0x28
 8001b8a:	f200 81b0 	bhi.w	8001eee <HAL_SPI_RxCpltCallback+0x6a6>
 8001b8e:	a201      	add	r2, pc, #4	; (adr r2, 8001b94 <HAL_SPI_RxCpltCallback+0x34c>)
 8001b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b94:	08001c39 	.word	0x08001c39
 8001b98:	08001eef 	.word	0x08001eef
 8001b9c:	08001eef 	.word	0x08001eef
 8001ba0:	08001eef 	.word	0x08001eef
 8001ba4:	08001eef 	.word	0x08001eef
 8001ba8:	08001eef 	.word	0x08001eef
 8001bac:	08001eef 	.word	0x08001eef
 8001bb0:	08001eef 	.word	0x08001eef
 8001bb4:	08001c53 	.word	0x08001c53
 8001bb8:	08001eef 	.word	0x08001eef
 8001bbc:	08001eef 	.word	0x08001eef
 8001bc0:	08001eef 	.word	0x08001eef
 8001bc4:	08001eef 	.word	0x08001eef
 8001bc8:	08001eef 	.word	0x08001eef
 8001bcc:	08001eef 	.word	0x08001eef
 8001bd0:	08001eef 	.word	0x08001eef
 8001bd4:	08001c53 	.word	0x08001c53
 8001bd8:	08001eef 	.word	0x08001eef
 8001bdc:	08001eef 	.word	0x08001eef
 8001be0:	08001eef 	.word	0x08001eef
 8001be4:	08001eef 	.word	0x08001eef
 8001be8:	08001eef 	.word	0x08001eef
 8001bec:	08001eef 	.word	0x08001eef
 8001bf0:	08001eef 	.word	0x08001eef
 8001bf4:	08001c53 	.word	0x08001c53
 8001bf8:	08001eef 	.word	0x08001eef
 8001bfc:	08001eef 	.word	0x08001eef
 8001c00:	08001eef 	.word	0x08001eef
 8001c04:	08001eef 	.word	0x08001eef
 8001c08:	08001eef 	.word	0x08001eef
 8001c0c:	08001eef 	.word	0x08001eef
 8001c10:	08001eef 	.word	0x08001eef
 8001c14:	08001c53 	.word	0x08001c53
 8001c18:	08001eef 	.word	0x08001eef
 8001c1c:	08001eef 	.word	0x08001eef
 8001c20:	08001eef 	.word	0x08001eef
 8001c24:	08001eef 	.word	0x08001eef
 8001c28:	08001eef 	.word	0x08001eef
 8001c2c:	08001eef 	.word	0x08001eef
 8001c30:	08001eef 	.word	0x08001eef
 8001c34:	08001c53 	.word	0x08001c53
		case 0b00000000: //Start SPI write data
			HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_0, 6400, 1000);
 8001c38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c3c:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001c40:	4988      	ldr	r1, [pc, #544]	; (8001e64 <HAL_SPI_RxCpltCallback+0x61c>)
 8001c42:	4886      	ldr	r0, [pc, #536]	; (8001e5c <HAL_SPI_RxCpltCallback+0x614>)
 8001c44:	f005 f9c8 	bl	8006fd8 <HAL_SPI_Receive>
			SPI_master2slave(&spi3_buf, &frame_buf_0);
 8001c48:	4986      	ldr	r1, [pc, #536]	; (8001e64 <HAL_SPI_RxCpltCallback+0x61c>)
 8001c4a:	4885      	ldr	r0, [pc, #532]	; (8001e60 <HAL_SPI_RxCpltCallback+0x618>)
 8001c4c:	f7ff fc8c 	bl	8001568 <SPI_master2slave>
			break;
 8001c50:	e000      	b.n	8001c54 <HAL_SPI_RxCpltCallback+0x40c>
		case 0b00001000: //Continuous write SPI data
			break;
 8001c52:	bf00      	nop
		case 0b00100000: //Continuous Read SPI data
			break;
		case 0b00101000: //End SPI Read data
			break;
		}
		break;
 8001c54:	e14b      	b.n	8001eee <HAL_SPI_RxCpltCallback+0x6a6>
	case 0b10000000:  //I2C command
		switch (spi3_buf[0] & 0b00111000) {
 8001c56:	4b82      	ldr	r3, [pc, #520]	; (8001e60 <HAL_SPI_RxCpltCallback+0x618>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d003      	beq.n	8001c6a <HAL_SPI_RxCpltCallback+0x422>
 8001c62:	2b20      	cmp	r3, #32
 8001c64:	f040 8145 	bne.w	8001ef2 <HAL_SPI_RxCpltCallback+0x6aa>
		case 0b00000000: //I2C Write Data
			break;
		case 0b00100000: //I2C Read Data
			break;
 8001c68:	e000      	b.n	8001c6c <HAL_SPI_RxCpltCallback+0x424>
			break;
 8001c6a:	bf00      	nop
		}
		break;
 8001c6c:	e141      	b.n	8001ef2 <HAL_SPI_RxCpltCallback+0x6aa>
	case 0b11000000:  //SPI flash function & Slave SPI
		switch (spi3_buf[0] & 0b00111000) {
 8001c6e:	4b7c      	ldr	r3, [pc, #496]	; (8001e60 <HAL_SPI_RxCpltCallback+0x618>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c76:	2b20      	cmp	r3, #32
 8001c78:	f000 8135 	beq.w	8001ee6 <HAL_SPI_RxCpltCallback+0x69e>
 8001c7c:	2b20      	cmp	r3, #32
 8001c7e:	f300 813a 	bgt.w	8001ef6 <HAL_SPI_RxCpltCallback+0x6ae>
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d003      	beq.n	8001c8e <HAL_SPI_RxCpltCallback+0x446>
 8001c86:	2b08      	cmp	r3, #8
 8001c88:	f000 8089 	beq.w	8001d9e <HAL_SPI_RxCpltCallback+0x556>
			}
			break;
		case 0b00100000: //Display Data by Slave SPI
			break;
		}
		break;
 8001c8c:	e133      	b.n	8001ef6 <HAL_SPI_RxCpltCallback+0x6ae>
			switch (spi3_buf[0] & 0b00000111) {
 8001c8e:	4b74      	ldr	r3, [pc, #464]	; (8001e60 <HAL_SPI_RxCpltCallback+0x618>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	2b03      	cmp	r3, #3
 8001c98:	d86b      	bhi.n	8001d72 <HAL_SPI_RxCpltCallback+0x52a>
 8001c9a:	a201      	add	r2, pc, #4	; (adr r2, 8001ca0 <HAL_SPI_RxCpltCallback+0x458>)
 8001c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ca0:	08001d9b 	.word	0x08001d9b
 8001ca4:	08001cb1 	.word	0x08001cb1
 8001ca8:	08001cfb 	.word	0x08001cfb
 8001cac:	08001d29 	.word	0x08001d29
				if(BOARD_NUMBER==2)
 8001cb0:	4b6d      	ldr	r3, [pc, #436]	; (8001e68 <HAL_SPI_RxCpltCallback+0x620>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d113      	bne.n	8001ce0 <HAL_SPI_RxCpltCallback+0x498>
					HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
 8001cb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cbc:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001cc0:	496a      	ldr	r1, [pc, #424]	; (8001e6c <HAL_SPI_RxCpltCallback+0x624>)
 8001cc2:	4866      	ldr	r0, [pc, #408]	; (8001e5c <HAL_SPI_RxCpltCallback+0x614>)
 8001cc4:	f005 f988 	bl	8006fd8 <HAL_SPI_Receive>
					SPI_master2slave(&spi3_buf, &frame_buf_tmp);
 8001cc8:	4968      	ldr	r1, [pc, #416]	; (8001e6c <HAL_SPI_RxCpltCallback+0x624>)
 8001cca:	4865      	ldr	r0, [pc, #404]	; (8001e60 <HAL_SPI_RxCpltCallback+0x618>)
 8001ccc:	f7ff fc4c 	bl	8001568 <SPI_master2slave>
					erase_flash_sector(0);
 8001cd0:	2000      	movs	r0, #0
 8001cd2:	f000 fa75 	bl	80021c0 <erase_flash_sector>
					write_flash_page(&frame_buf_tmp, 0);
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	4864      	ldr	r0, [pc, #400]	; (8001e6c <HAL_SPI_RxCpltCallback+0x624>)
 8001cda:	f000 f99f 	bl	800201c <write_flash_page>
				break;
 8001cde:	e05d      	b.n	8001d9c <HAL_SPI_RxCpltCallback+0x554>
					HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
 8001ce0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ce4:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001ce8:	4960      	ldr	r1, [pc, #384]	; (8001e6c <HAL_SPI_RxCpltCallback+0x624>)
 8001cea:	485c      	ldr	r0, [pc, #368]	; (8001e5c <HAL_SPI_RxCpltCallback+0x614>)
 8001cec:	f005 f974 	bl	8006fd8 <HAL_SPI_Receive>
					SPI_master2slave(&spi3_buf, &frame_buf_tmp);
 8001cf0:	495e      	ldr	r1, [pc, #376]	; (8001e6c <HAL_SPI_RxCpltCallback+0x624>)
 8001cf2:	485b      	ldr	r0, [pc, #364]	; (8001e60 <HAL_SPI_RxCpltCallback+0x618>)
 8001cf4:	f7ff fc38 	bl	8001568 <SPI_master2slave>
				break;
 8001cf8:	e050      	b.n	8001d9c <HAL_SPI_RxCpltCallback+0x554>
				if(BOARD_NUMBER=3)
 8001cfa:	4b5b      	ldr	r3, [pc, #364]	; (8001e68 <HAL_SPI_RxCpltCallback+0x620>)
 8001cfc:	2203      	movs	r2, #3
 8001cfe:	701a      	strb	r2, [r3, #0]
					HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
 8001d00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d04:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001d08:	4958      	ldr	r1, [pc, #352]	; (8001e6c <HAL_SPI_RxCpltCallback+0x624>)
 8001d0a:	4854      	ldr	r0, [pc, #336]	; (8001e5c <HAL_SPI_RxCpltCallback+0x614>)
 8001d0c:	f005 f964 	bl	8006fd8 <HAL_SPI_Receive>
					SPI_master2slave(&spi3_buf, &frame_buf_tmp);
 8001d10:	4956      	ldr	r1, [pc, #344]	; (8001e6c <HAL_SPI_RxCpltCallback+0x624>)
 8001d12:	4853      	ldr	r0, [pc, #332]	; (8001e60 <HAL_SPI_RxCpltCallback+0x618>)
 8001d14:	f7ff fc28 	bl	8001568 <SPI_master2slave>
					erase_flash_sector(0);
 8001d18:	2000      	movs	r0, #0
 8001d1a:	f000 fa51 	bl	80021c0 <erase_flash_sector>
					write_flash_page(&frame_buf_tmp, 0);
 8001d1e:	2100      	movs	r1, #0
 8001d20:	4852      	ldr	r0, [pc, #328]	; (8001e6c <HAL_SPI_RxCpltCallback+0x624>)
 8001d22:	f000 f97b 	bl	800201c <write_flash_page>
				break;
 8001d26:	e039      	b.n	8001d9c <HAL_SPI_RxCpltCallback+0x554>
				if(BOARD_NUMBER==4)
 8001d28:	4b4f      	ldr	r3, [pc, #316]	; (8001e68 <HAL_SPI_RxCpltCallback+0x620>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	2b04      	cmp	r3, #4
 8001d2e:	d113      	bne.n	8001d58 <HAL_SPI_RxCpltCallback+0x510>
					HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
 8001d30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d34:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001d38:	494c      	ldr	r1, [pc, #304]	; (8001e6c <HAL_SPI_RxCpltCallback+0x624>)
 8001d3a:	4848      	ldr	r0, [pc, #288]	; (8001e5c <HAL_SPI_RxCpltCallback+0x614>)
 8001d3c:	f005 f94c 	bl	8006fd8 <HAL_SPI_Receive>
					SPI_master2slave(&spi3_buf, &frame_buf_tmp);
 8001d40:	494a      	ldr	r1, [pc, #296]	; (8001e6c <HAL_SPI_RxCpltCallback+0x624>)
 8001d42:	4847      	ldr	r0, [pc, #284]	; (8001e60 <HAL_SPI_RxCpltCallback+0x618>)
 8001d44:	f7ff fc10 	bl	8001568 <SPI_master2slave>
					erase_flash_sector(0);
 8001d48:	2000      	movs	r0, #0
 8001d4a:	f000 fa39 	bl	80021c0 <erase_flash_sector>
					write_flash_page(&frame_buf_tmp, 0);
 8001d4e:	2100      	movs	r1, #0
 8001d50:	4846      	ldr	r0, [pc, #280]	; (8001e6c <HAL_SPI_RxCpltCallback+0x624>)
 8001d52:	f000 f963 	bl	800201c <write_flash_page>
				break;
 8001d56:	e021      	b.n	8001d9c <HAL_SPI_RxCpltCallback+0x554>
					HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
 8001d58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d5c:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001d60:	4942      	ldr	r1, [pc, #264]	; (8001e6c <HAL_SPI_RxCpltCallback+0x624>)
 8001d62:	483e      	ldr	r0, [pc, #248]	; (8001e5c <HAL_SPI_RxCpltCallback+0x614>)
 8001d64:	f005 f938 	bl	8006fd8 <HAL_SPI_Receive>
					SPI_master2slave(&spi3_buf, &frame_buf_tmp);
 8001d68:	4940      	ldr	r1, [pc, #256]	; (8001e6c <HAL_SPI_RxCpltCallback+0x624>)
 8001d6a:	483d      	ldr	r0, [pc, #244]	; (8001e60 <HAL_SPI_RxCpltCallback+0x618>)
 8001d6c:	f7ff fbfc 	bl	8001568 <SPI_master2slave>
				break;
 8001d70:	e014      	b.n	8001d9c <HAL_SPI_RxCpltCallback+0x554>
				HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
 8001d72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d76:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001d7a:	493c      	ldr	r1, [pc, #240]	; (8001e6c <HAL_SPI_RxCpltCallback+0x624>)
 8001d7c:	4837      	ldr	r0, [pc, #220]	; (8001e5c <HAL_SPI_RxCpltCallback+0x614>)
 8001d7e:	f005 f92b 	bl	8006fd8 <HAL_SPI_Receive>
				SPI_master2slave(&spi3_buf, &frame_buf_tmp);
 8001d82:	493a      	ldr	r1, [pc, #232]	; (8001e6c <HAL_SPI_RxCpltCallback+0x624>)
 8001d84:	4836      	ldr	r0, [pc, #216]	; (8001e60 <HAL_SPI_RxCpltCallback+0x618>)
 8001d86:	f7ff fbef 	bl	8001568 <SPI_master2slave>
				erase_flash_sector(0);
 8001d8a:	2000      	movs	r0, #0
 8001d8c:	f000 fa18 	bl	80021c0 <erase_flash_sector>
				write_flash_page(&frame_buf_tmp, 0);
 8001d90:	2100      	movs	r1, #0
 8001d92:	4836      	ldr	r0, [pc, #216]	; (8001e6c <HAL_SPI_RxCpltCallback+0x624>)
 8001d94:	f000 f942 	bl	800201c <write_flash_page>
				break;
 8001d98:	e000      	b.n	8001d9c <HAL_SPI_RxCpltCallback+0x554>
				break;
 8001d9a:	bf00      	nop
			break;
 8001d9c:	e0a4      	b.n	8001ee8 <HAL_SPI_RxCpltCallback+0x6a0>
			switch (spi3_buf[0] & 0b00000111) {
 8001d9e:	4b30      	ldr	r3, [pc, #192]	; (8001e60 <HAL_SPI_RxCpltCallback+0x618>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	2b03      	cmp	r3, #3
 8001da8:	f200 8087 	bhi.w	8001eba <HAL_SPI_RxCpltCallback+0x672>
 8001dac:	a201      	add	r2, pc, #4	; (adr r2, 8001db4 <HAL_SPI_RxCpltCallback+0x56c>)
 8001dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001db2:	bf00      	nop
 8001db4:	08001ee3 	.word	0x08001ee3
 8001db8:	08001dc5 	.word	0x08001dc5
 8001dbc:	08001e0f 	.word	0x08001e0f
 8001dc0:	08001e71 	.word	0x08001e71
				if(BOARD_NUMBER==2)
 8001dc4:	4b28      	ldr	r3, [pc, #160]	; (8001e68 <HAL_SPI_RxCpltCallback+0x620>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d113      	bne.n	8001df4 <HAL_SPI_RxCpltCallback+0x5ac>
					HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
 8001dcc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dd0:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001dd4:	4925      	ldr	r1, [pc, #148]	; (8001e6c <HAL_SPI_RxCpltCallback+0x624>)
 8001dd6:	4821      	ldr	r0, [pc, #132]	; (8001e5c <HAL_SPI_RxCpltCallback+0x614>)
 8001dd8:	f005 f8fe 	bl	8006fd8 <HAL_SPI_Receive>
					SPI_master2slave(&spi3_buf, &frame_buf_tmp);
 8001ddc:	4923      	ldr	r1, [pc, #140]	; (8001e6c <HAL_SPI_RxCpltCallback+0x624>)
 8001dde:	4820      	ldr	r0, [pc, #128]	; (8001e60 <HAL_SPI_RxCpltCallback+0x618>)
 8001de0:	f7ff fbc2 	bl	8001568 <SPI_master2slave>
					erase_flash_sector(1);
 8001de4:	2001      	movs	r0, #1
 8001de6:	f000 f9eb 	bl	80021c0 <erase_flash_sector>
					write_flash_page(&frame_buf_tmp, 1);
 8001dea:	2101      	movs	r1, #1
 8001dec:	481f      	ldr	r0, [pc, #124]	; (8001e6c <HAL_SPI_RxCpltCallback+0x624>)
 8001dee:	f000 f915 	bl	800201c <write_flash_page>
				break;
 8001df2:	e077      	b.n	8001ee4 <HAL_SPI_RxCpltCallback+0x69c>
					HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
 8001df4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001df8:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001dfc:	491b      	ldr	r1, [pc, #108]	; (8001e6c <HAL_SPI_RxCpltCallback+0x624>)
 8001dfe:	4817      	ldr	r0, [pc, #92]	; (8001e5c <HAL_SPI_RxCpltCallback+0x614>)
 8001e00:	f005 f8ea 	bl	8006fd8 <HAL_SPI_Receive>
					SPI_master2slave(&spi3_buf, &frame_buf_tmp);
 8001e04:	4919      	ldr	r1, [pc, #100]	; (8001e6c <HAL_SPI_RxCpltCallback+0x624>)
 8001e06:	4816      	ldr	r0, [pc, #88]	; (8001e60 <HAL_SPI_RxCpltCallback+0x618>)
 8001e08:	f7ff fbae 	bl	8001568 <SPI_master2slave>
				break;
 8001e0c:	e06a      	b.n	8001ee4 <HAL_SPI_RxCpltCallback+0x69c>
				if(BOARD_NUMBER==3)
 8001e0e:	4b16      	ldr	r3, [pc, #88]	; (8001e68 <HAL_SPI_RxCpltCallback+0x620>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	2b03      	cmp	r3, #3
 8001e14:	d113      	bne.n	8001e3e <HAL_SPI_RxCpltCallback+0x5f6>
					HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
 8001e16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e1a:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001e1e:	4913      	ldr	r1, [pc, #76]	; (8001e6c <HAL_SPI_RxCpltCallback+0x624>)
 8001e20:	480e      	ldr	r0, [pc, #56]	; (8001e5c <HAL_SPI_RxCpltCallback+0x614>)
 8001e22:	f005 f8d9 	bl	8006fd8 <HAL_SPI_Receive>
					SPI_master2slave(&spi3_buf, &frame_buf_tmp);
 8001e26:	4911      	ldr	r1, [pc, #68]	; (8001e6c <HAL_SPI_RxCpltCallback+0x624>)
 8001e28:	480d      	ldr	r0, [pc, #52]	; (8001e60 <HAL_SPI_RxCpltCallback+0x618>)
 8001e2a:	f7ff fb9d 	bl	8001568 <SPI_master2slave>
					erase_flash_sector(1);
 8001e2e:	2001      	movs	r0, #1
 8001e30:	f000 f9c6 	bl	80021c0 <erase_flash_sector>
					write_flash_page(&frame_buf_tmp, 1);
 8001e34:	2101      	movs	r1, #1
 8001e36:	480d      	ldr	r0, [pc, #52]	; (8001e6c <HAL_SPI_RxCpltCallback+0x624>)
 8001e38:	f000 f8f0 	bl	800201c <write_flash_page>
				break;
 8001e3c:	e052      	b.n	8001ee4 <HAL_SPI_RxCpltCallback+0x69c>
					HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
 8001e3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e42:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001e46:	4909      	ldr	r1, [pc, #36]	; (8001e6c <HAL_SPI_RxCpltCallback+0x624>)
 8001e48:	4804      	ldr	r0, [pc, #16]	; (8001e5c <HAL_SPI_RxCpltCallback+0x614>)
 8001e4a:	f005 f8c5 	bl	8006fd8 <HAL_SPI_Receive>
					SPI_master2slave(&spi3_buf, &frame_buf_tmp);
 8001e4e:	4907      	ldr	r1, [pc, #28]	; (8001e6c <HAL_SPI_RxCpltCallback+0x624>)
 8001e50:	4803      	ldr	r0, [pc, #12]	; (8001e60 <HAL_SPI_RxCpltCallback+0x618>)
 8001e52:	f7ff fb89 	bl	8001568 <SPI_master2slave>
				break;
 8001e56:	e045      	b.n	8001ee4 <HAL_SPI_RxCpltCallback+0x69c>
 8001e58:	200080b4 	.word	0x200080b4
 8001e5c:	20004db8 	.word	0x20004db8
 8001e60:	20004eb0 	.word	0x20004eb0
 8001e64:	200067b4 	.word	0x200067b4
 8001e68:	20000000 	.word	0x20000000
 8001e6c:	20004eb4 	.word	0x20004eb4
				if(BOARD_NUMBER==4)
 8001e70:	4b2f      	ldr	r3, [pc, #188]	; (8001f30 <HAL_SPI_RxCpltCallback+0x6e8>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	2b04      	cmp	r3, #4
 8001e76:	d113      	bne.n	8001ea0 <HAL_SPI_RxCpltCallback+0x658>
					HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
 8001e78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e7c:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001e80:	492c      	ldr	r1, [pc, #176]	; (8001f34 <HAL_SPI_RxCpltCallback+0x6ec>)
 8001e82:	482d      	ldr	r0, [pc, #180]	; (8001f38 <HAL_SPI_RxCpltCallback+0x6f0>)
 8001e84:	f005 f8a8 	bl	8006fd8 <HAL_SPI_Receive>
					SPI_master2slave(&spi3_buf, &frame_buf_tmp);
 8001e88:	492a      	ldr	r1, [pc, #168]	; (8001f34 <HAL_SPI_RxCpltCallback+0x6ec>)
 8001e8a:	482c      	ldr	r0, [pc, #176]	; (8001f3c <HAL_SPI_RxCpltCallback+0x6f4>)
 8001e8c:	f7ff fb6c 	bl	8001568 <SPI_master2slave>
					erase_flash_sector(1);
 8001e90:	2001      	movs	r0, #1
 8001e92:	f000 f995 	bl	80021c0 <erase_flash_sector>
					write_flash_page(&frame_buf_tmp, 1);
 8001e96:	2101      	movs	r1, #1
 8001e98:	4826      	ldr	r0, [pc, #152]	; (8001f34 <HAL_SPI_RxCpltCallback+0x6ec>)
 8001e9a:	f000 f8bf 	bl	800201c <write_flash_page>
				break;
 8001e9e:	e021      	b.n	8001ee4 <HAL_SPI_RxCpltCallback+0x69c>
					HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
 8001ea0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ea4:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001ea8:	4922      	ldr	r1, [pc, #136]	; (8001f34 <HAL_SPI_RxCpltCallback+0x6ec>)
 8001eaa:	4823      	ldr	r0, [pc, #140]	; (8001f38 <HAL_SPI_RxCpltCallback+0x6f0>)
 8001eac:	f005 f894 	bl	8006fd8 <HAL_SPI_Receive>
					SPI_master2slave(&spi3_buf, &frame_buf_tmp);
 8001eb0:	4920      	ldr	r1, [pc, #128]	; (8001f34 <HAL_SPI_RxCpltCallback+0x6ec>)
 8001eb2:	4822      	ldr	r0, [pc, #136]	; (8001f3c <HAL_SPI_RxCpltCallback+0x6f4>)
 8001eb4:	f7ff fb58 	bl	8001568 <SPI_master2slave>
				break;
 8001eb8:	e014      	b.n	8001ee4 <HAL_SPI_RxCpltCallback+0x69c>
				HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf_tmp, 6400, 1000);
 8001eba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ebe:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001ec2:	491c      	ldr	r1, [pc, #112]	; (8001f34 <HAL_SPI_RxCpltCallback+0x6ec>)
 8001ec4:	481c      	ldr	r0, [pc, #112]	; (8001f38 <HAL_SPI_RxCpltCallback+0x6f0>)
 8001ec6:	f005 f887 	bl	8006fd8 <HAL_SPI_Receive>
				SPI_master2slave(&spi3_buf, &frame_buf_tmp);
 8001eca:	491a      	ldr	r1, [pc, #104]	; (8001f34 <HAL_SPI_RxCpltCallback+0x6ec>)
 8001ecc:	481b      	ldr	r0, [pc, #108]	; (8001f3c <HAL_SPI_RxCpltCallback+0x6f4>)
 8001ece:	f7ff fb4b 	bl	8001568 <SPI_master2slave>
				erase_flash_sector(1);
 8001ed2:	2001      	movs	r0, #1
 8001ed4:	f000 f974 	bl	80021c0 <erase_flash_sector>
				write_flash_page(&frame_buf_tmp, 1);
 8001ed8:	2101      	movs	r1, #1
 8001eda:	4816      	ldr	r0, [pc, #88]	; (8001f34 <HAL_SPI_RxCpltCallback+0x6ec>)
 8001edc:	f000 f89e 	bl	800201c <write_flash_page>
				break;
 8001ee0:	e000      	b.n	8001ee4 <HAL_SPI_RxCpltCallback+0x69c>
				break;
 8001ee2:	bf00      	nop
			break;
 8001ee4:	e000      	b.n	8001ee8 <HAL_SPI_RxCpltCallback+0x6a0>
			break;
 8001ee6:	bf00      	nop
		break;
 8001ee8:	e005      	b.n	8001ef6 <HAL_SPI_RxCpltCallback+0x6ae>
		break;
 8001eea:	bf00      	nop
 8001eec:	e004      	b.n	8001ef8 <HAL_SPI_RxCpltCallback+0x6b0>
		break;
 8001eee:	bf00      	nop
 8001ef0:	e002      	b.n	8001ef8 <HAL_SPI_RxCpltCallback+0x6b0>
		break;
 8001ef2:	bf00      	nop
 8001ef4:	e000      	b.n	8001ef8 <HAL_SPI_RxCpltCallback+0x6b0>
		break;
 8001ef6:	bf00      	nop
	}
	// USB command: ID
	switch (spi3_buf[0] & 0b00000111) {
 8001ef8:	4b10      	ldr	r3, [pc, #64]	; (8001f3c <HAL_SPI_RxCpltCallback+0x6f4>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	f003 0307 	and.w	r3, r3, #7
 8001f00:	2b03      	cmp	r3, #3
 8001f02:	d80b      	bhi.n	8001f1c <HAL_SPI_RxCpltCallback+0x6d4>
 8001f04:	a201      	add	r2, pc, #4	; (adr r2, 8001f0c <HAL_SPI_RxCpltCallback+0x6c4>)
 8001f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f0a:	bf00      	nop
 8001f0c:	08001f1d 	.word	0x08001f1d
 8001f10:	08001f1d 	.word	0x08001f1d
 8001f14:	08001f1d 	.word	0x08001f1d
 8001f18:	08001f1d 	.word	0x08001f1d
	case 0b00000010:  //Command for DIP switch ID = 10
		break;
	case 0b00000011:  //Command for DIP switch ID = 11
		break;
	default:  //Broadcast to every board
		break;
 8001f1c:	bf00      	nop
	}

	HAL_SPI_Receive_IT(&hspi3, &spi3_buf, 2);
 8001f1e:	2202      	movs	r2, #2
 8001f20:	4906      	ldr	r1, [pc, #24]	; (8001f3c <HAL_SPI_RxCpltCallback+0x6f4>)
 8001f22:	4805      	ldr	r0, [pc, #20]	; (8001f38 <HAL_SPI_RxCpltCallback+0x6f0>)
 8001f24:	f005 fbb2 	bl	800768c <HAL_SPI_Receive_IT>
}
 8001f28:	bf00      	nop
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	20000000 	.word	0x20000000
 8001f34:	20004eb4 	.word	0x20004eb4
 8001f38:	20004db8 	.word	0x20004db8
 8001f3c:	20004eb0 	.word	0x20004eb0

08001f40 <FLASH_WriteByte>:

void FLASH_WriteByte(uint8_t data) {
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	71fb      	strb	r3, [r7, #7]
    for (int i = 7; i >= 0; i--) {
 8001f4a:	2307      	movs	r3, #7
 8001f4c:	60fb      	str	r3, [r7, #12]
 8001f4e:	e022      	b.n	8001f96 <FLASH_WriteByte+0x56>
        HAL_GPIO_WritePin(FLASH_MOSI_PORT, FLASH_MOSI_PIN, (data >> i) & 1);
 8001f50:	79fa      	ldrb	r2, [r7, #7]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	fa42 f303 	asr.w	r3, r2, r3
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	461a      	mov	r2, r3
 8001f62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f66:	4810      	ldr	r0, [pc, #64]	; (8001fa8 <FLASH_WriteByte+0x68>)
 8001f68:	f002 f81c 	bl	8003fa4 <HAL_GPIO_WritePin>

        HAL_GPIO_WritePin(FLASH_CLK_PORT, FLASH_CLK_PIN, GPIO_PIN_SET);
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f72:	480d      	ldr	r0, [pc, #52]	; (8001fa8 <FLASH_WriteByte+0x68>)
 8001f74:	f002 f816 	bl	8003fa4 <HAL_GPIO_WritePin>
        delay_100ns(1);
 8001f78:	2001      	movs	r0, #1
 8001f7a:	f7ff fbd6 	bl	800172a <delay_100ns>
        HAL_GPIO_WritePin(FLASH_CLK_PORT, FLASH_CLK_PIN, GPIO_PIN_RESET);
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f84:	4808      	ldr	r0, [pc, #32]	; (8001fa8 <FLASH_WriteByte+0x68>)
 8001f86:	f002 f80d 	bl	8003fa4 <HAL_GPIO_WritePin>
        delay_100ns(1);
 8001f8a:	2001      	movs	r0, #1
 8001f8c:	f7ff fbcd 	bl	800172a <delay_100ns>
    for (int i = 7; i >= 0; i--) {
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	3b01      	subs	r3, #1
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	dad9      	bge.n	8001f50 <FLASH_WriteByte+0x10>
    }
}
 8001f9c:	bf00      	nop
 8001f9e:	bf00      	nop
 8001fa0:	3710      	adds	r7, #16
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	48001400 	.word	0x48001400

08001fac <FLASH_ReadByte>:

uint8_t FLASH_ReadByte(void) {
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
    uint8_t data = 0;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	71fb      	strb	r3, [r7, #7]

    for (int i = 7; i >= 0; i--) {
 8001fb6:	2307      	movs	r3, #7
 8001fb8:	603b      	str	r3, [r7, #0]
 8001fba:	e024      	b.n	8002006 <FLASH_ReadByte+0x5a>
        HAL_GPIO_WritePin(FLASH_CLK_PORT, FLASH_CLK_PIN, GPIO_PIN_SET);
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fc2:	4815      	ldr	r0, [pc, #84]	; (8002018 <FLASH_ReadByte+0x6c>)
 8001fc4:	f001 ffee 	bl	8003fa4 <HAL_GPIO_WritePin>
        delay_100ns(1);
 8001fc8:	2001      	movs	r0, #1
 8001fca:	f7ff fbae 	bl	800172a <delay_100ns>
        data |= (HAL_GPIO_ReadPin(FLASH_MISO_PORT, FLASH_MISO_PIN) << i);
 8001fce:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fd2:	4811      	ldr	r0, [pc, #68]	; (8002018 <FLASH_ReadByte+0x6c>)
 8001fd4:	f001 ffce 	bl	8003f74 <HAL_GPIO_ReadPin>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	461a      	mov	r2, r3
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	b25a      	sxtb	r2, r3
 8001fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	b25b      	sxtb	r3, r3
 8001fec:	71fb      	strb	r3, [r7, #7]
        HAL_GPIO_WritePin(FLASH_CLK_PORT,FLASH_CLK_PIN, GPIO_PIN_RESET);
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ff4:	4808      	ldr	r0, [pc, #32]	; (8002018 <FLASH_ReadByte+0x6c>)
 8001ff6:	f001 ffd5 	bl	8003fa4 <HAL_GPIO_WritePin>
        delay_100ns(1);
 8001ffa:	2001      	movs	r0, #1
 8001ffc:	f7ff fb95 	bl	800172a <delay_100ns>
    for (int i = 7; i >= 0; i--) {
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	3b01      	subs	r3, #1
 8002004:	603b      	str	r3, [r7, #0]
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	dad7      	bge.n	8001fbc <FLASH_ReadByte+0x10>
    }

    return data;
 800200c:	79fb      	ldrb	r3, [r7, #7]
}
 800200e:	4618      	mov	r0, r3
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	48001400 	.word	0x48001400

0800201c <write_flash_page>:

void write_flash_page(uint8_t *data, uint8_t image_id)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b088      	sub	sp, #32
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	460b      	mov	r3, r1
 8002026:	70fb      	strb	r3, [r7, #3]
	int image_id_H = image_id/8;
 8002028:	78fb      	ldrb	r3, [r7, #3]
 800202a:	08db      	lsrs	r3, r3, #3
 800202c:	b2db      	uxtb	r3, r3
 800202e:	613b      	str	r3, [r7, #16]
	int image_id_L = image_id%8;
 8002030:	78fb      	ldrb	r3, [r7, #3]
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	60fb      	str	r3, [r7, #12]
	int count=0;
 8002038:	2300      	movs	r3, #0
 800203a:	61fb      	str	r3, [r7, #28]
	for(uint32_t i=image_id_L*0x20; i<image_id_L*0x20+25; i++)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	015b      	lsls	r3, r3, #5
 8002040:	61bb      	str	r3, [r7, #24]
 8002042:	e057      	b.n	80020f4 <write_flash_page+0xd8>
	{
		// enable write
		HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_RESET);
 8002044:	2200      	movs	r2, #0
 8002046:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800204a:	4830      	ldr	r0, [pc, #192]	; (800210c <write_flash_page+0xf0>)
 800204c:	f001 ffaa 	bl	8003fa4 <HAL_GPIO_WritePin>
		FLASH_WriteByte(0x06);
 8002050:	2006      	movs	r0, #6
 8002052:	f7ff ff75 	bl	8001f40 <FLASH_WriteByte>
		HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_SET);
 8002056:	2201      	movs	r2, #1
 8002058:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800205c:	482b      	ldr	r0, [pc, #172]	; (800210c <write_flash_page+0xf0>)
 800205e:	f001 ffa1 	bl	8003fa4 <HAL_GPIO_WritePin>

		// write data to flash page
		HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_RESET);
 8002062:	2200      	movs	r2, #0
 8002064:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002068:	4828      	ldr	r0, [pc, #160]	; (800210c <write_flash_page+0xf0>)
 800206a:	f001 ff9b 	bl	8003fa4 <HAL_GPIO_WritePin>
		FLASH_WriteByte(0x02);
 800206e:	2002      	movs	r0, #2
 8002070:	f7ff ff66 	bl	8001f40 <FLASH_WriteByte>
		FLASH_WriteByte(image_id_H);
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	b2db      	uxtb	r3, r3
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff ff61 	bl	8001f40 <FLASH_WriteByte>
		FLASH_WriteByte(i);
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	b2db      	uxtb	r3, r3
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff ff5c 	bl	8001f40 <FLASH_WriteByte>
		FLASH_WriteByte(0x00);
 8002088:	2000      	movs	r0, #0
 800208a:	f7ff ff59 	bl	8001f40 <FLASH_WriteByte>
		for(uint32_t j=0; j<256; j++)
 800208e:	2300      	movs	r3, #0
 8002090:	617b      	str	r3, [r7, #20]
 8002092:	e00d      	b.n	80020b0 <write_flash_page+0x94>
		{
			FLASH_WriteByte(data[count*256+j]);
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	021b      	lsls	r3, r3, #8
 8002098:	461a      	mov	r2, r3
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	4413      	add	r3, r2
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	4413      	add	r3, r2
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff ff4b 	bl	8001f40 <FLASH_WriteByte>
		for(uint32_t j=0; j<256; j++)
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	3301      	adds	r3, #1
 80020ae:	617b      	str	r3, [r7, #20]
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	2bff      	cmp	r3, #255	; 0xff
 80020b4:	d9ee      	bls.n	8002094 <write_flash_page+0x78>
		}
		HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_SET);
 80020b6:	2201      	movs	r2, #1
 80020b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020bc:	4813      	ldr	r0, [pc, #76]	; (800210c <write_flash_page+0xf0>)
 80020be:	f001 ff71 	bl	8003fa4 <HAL_GPIO_WritePin>

		// disable write
		HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_RESET);
 80020c2:	2200      	movs	r2, #0
 80020c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020c8:	4810      	ldr	r0, [pc, #64]	; (800210c <write_flash_page+0xf0>)
 80020ca:	f001 ff6b 	bl	8003fa4 <HAL_GPIO_WritePin>
		FLASH_WriteByte(0x04);
 80020ce:	2004      	movs	r0, #4
 80020d0:	f7ff ff36 	bl	8001f40 <FLASH_WriteByte>
		HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_SET);
 80020d4:	2201      	movs	r2, #1
 80020d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020da:	480c      	ldr	r0, [pc, #48]	; (800210c <write_flash_page+0xf0>)
 80020dc:	f001 ff62 	bl	8003fa4 <HAL_GPIO_WritePin>
		delay_us(1000);
 80020e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020e4:	f7ff fb06 	bl	80016f4 <delay_us>
		count++;
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	3301      	adds	r3, #1
 80020ec:	61fb      	str	r3, [r7, #28]
	for(uint32_t i=image_id_L*0x20; i<image_id_L*0x20+25; i++)
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	3301      	adds	r3, #1
 80020f2:	61bb      	str	r3, [r7, #24]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	015b      	lsls	r3, r3, #5
 80020f8:	3319      	adds	r3, #25
 80020fa:	461a      	mov	r2, r3
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	4293      	cmp	r3, r2
 8002100:	d3a0      	bcc.n	8002044 <write_flash_page+0x28>
	}
}
 8002102:	bf00      	nop
 8002104:	bf00      	nop
 8002106:	3720      	adds	r7, #32
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	48000800 	.word	0x48000800

08002110 <read_flash_page>:

void read_flash_page(uint8_t *data, uint8_t image_id)
{
 8002110:	b590      	push	{r4, r7, lr}
 8002112:	b089      	sub	sp, #36	; 0x24
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	460b      	mov	r3, r1
 800211a:	70fb      	strb	r3, [r7, #3]
	int image_id_H = image_id/8;
 800211c:	78fb      	ldrb	r3, [r7, #3]
 800211e:	08db      	lsrs	r3, r3, #3
 8002120:	b2db      	uxtb	r3, r3
 8002122:	613b      	str	r3, [r7, #16]
	int image_id_L = image_id%8;
 8002124:	78fb      	ldrb	r3, [r7, #3]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	60fb      	str	r3, [r7, #12]
	int count=0;
 800212c:	2300      	movs	r3, #0
 800212e:	61fb      	str	r3, [r7, #28]
	for(uint32_t i=image_id_L*0x20; i<image_id_L*0x20+25; i++)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	015b      	lsls	r3, r3, #5
 8002134:	61bb      	str	r3, [r7, #24]
 8002136:	e035      	b.n	80021a4 <read_flash_page+0x94>
	{
		HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_RESET);
 8002138:	2200      	movs	r2, #0
 800213a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800213e:	481f      	ldr	r0, [pc, #124]	; (80021bc <read_flash_page+0xac>)
 8002140:	f001 ff30 	bl	8003fa4 <HAL_GPIO_WritePin>
		FLASH_WriteByte(0x03);
 8002144:	2003      	movs	r0, #3
 8002146:	f7ff fefb 	bl	8001f40 <FLASH_WriteByte>
		FLASH_WriteByte(image_id_H);
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	b2db      	uxtb	r3, r3
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff fef6 	bl	8001f40 <FLASH_WriteByte>
		FLASH_WriteByte(i);
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	b2db      	uxtb	r3, r3
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff fef1 	bl	8001f40 <FLASH_WriteByte>
		FLASH_WriteByte(0x00);
 800215e:	2000      	movs	r0, #0
 8002160:	f7ff feee 	bl	8001f40 <FLASH_WriteByte>
		for(uint32_t j=0; j<256; j++)
 8002164:	2300      	movs	r3, #0
 8002166:	617b      	str	r3, [r7, #20]
 8002168:	e00d      	b.n	8002186 <read_flash_page+0x76>
		{
			data[count*256+j] = FLASH_ReadByte();
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	021b      	lsls	r3, r3, #8
 800216e:	461a      	mov	r2, r3
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	4413      	add	r3, r2
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	18d4      	adds	r4, r2, r3
 8002178:	f7ff ff18 	bl	8001fac <FLASH_ReadByte>
 800217c:	4603      	mov	r3, r0
 800217e:	7023      	strb	r3, [r4, #0]
		for(uint32_t j=0; j<256; j++)
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	3301      	adds	r3, #1
 8002184:	617b      	str	r3, [r7, #20]
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	2bff      	cmp	r3, #255	; 0xff
 800218a:	d9ee      	bls.n	800216a <read_flash_page+0x5a>
		}
		HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_SET);
 800218c:	2201      	movs	r2, #1
 800218e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002192:	480a      	ldr	r0, [pc, #40]	; (80021bc <read_flash_page+0xac>)
 8002194:	f001 ff06 	bl	8003fa4 <HAL_GPIO_WritePin>
		count++;
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	3301      	adds	r3, #1
 800219c:	61fb      	str	r3, [r7, #28]
	for(uint32_t i=image_id_L*0x20; i<image_id_L*0x20+25; i++)
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	3301      	adds	r3, #1
 80021a2:	61bb      	str	r3, [r7, #24]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	015b      	lsls	r3, r3, #5
 80021a8:	3319      	adds	r3, #25
 80021aa:	461a      	mov	r2, r3
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d3c2      	bcc.n	8002138 <read_flash_page+0x28>
	}
}
 80021b2:	bf00      	nop
 80021b4:	bf00      	nop
 80021b6:	3724      	adds	r7, #36	; 0x24
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd90      	pop	{r4, r7, pc}
 80021bc:	48000800 	.word	0x48000800

080021c0 <erase_flash_sector>:

void erase_flash_sector(uint8_t image_id)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	71fb      	strb	r3, [r7, #7]
	int image_id_H = image_id/8;
 80021ca:	79fb      	ldrb	r3, [r7, #7]
 80021cc:	08db      	lsrs	r3, r3, #3
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	60fb      	str	r3, [r7, #12]
	int image_id_L = image_id%8;
 80021d2:	79fb      	ldrb	r3, [r7, #7]
 80021d4:	f003 0307 	and.w	r3, r3, #7
 80021d8:	60bb      	str	r3, [r7, #8]
	reset_flash_software();
 80021da:	f000 f889 	bl	80022f0 <reset_flash_software>

	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_RESET);
 80021de:	2200      	movs	r2, #0
 80021e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021e4:	4841      	ldr	r0, [pc, #260]	; (80022ec <erase_flash_sector+0x12c>)
 80021e6:	f001 fedd 	bl	8003fa4 <HAL_GPIO_WritePin>
	FLASH_WriteByte(0x06);
 80021ea:	2006      	movs	r0, #6
 80021ec:	f7ff fea8 	bl	8001f40 <FLASH_WriteByte>
	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_SET);
 80021f0:	2201      	movs	r2, #1
 80021f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021f6:	483d      	ldr	r0, [pc, #244]	; (80022ec <erase_flash_sector+0x12c>)
 80021f8:	f001 fed4 	bl	8003fa4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_RESET);
 80021fc:	2200      	movs	r2, #0
 80021fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002202:	483a      	ldr	r0, [pc, #232]	; (80022ec <erase_flash_sector+0x12c>)
 8002204:	f001 fece 	bl	8003fa4 <HAL_GPIO_WritePin>
	FLASH_WriteByte(0x20);
 8002208:	2020      	movs	r0, #32
 800220a:	f7ff fe99 	bl	8001f40 <FLASH_WriteByte>
	FLASH_WriteByte(image_id_H);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	b2db      	uxtb	r3, r3
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff fe94 	bl	8001f40 <FLASH_WriteByte>
	FLASH_WriteByte(image_id_L*0x20);
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	b2db      	uxtb	r3, r3
 800221c:	015b      	lsls	r3, r3, #5
 800221e:	b2db      	uxtb	r3, r3
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff fe8d 	bl	8001f40 <FLASH_WriteByte>
	FLASH_WriteByte(0x00);
 8002226:	2000      	movs	r0, #0
 8002228:	f7ff fe8a 	bl	8001f40 <FLASH_WriteByte>
	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_SET);
 800222c:	2201      	movs	r2, #1
 800222e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002232:	482e      	ldr	r0, [pc, #184]	; (80022ec <erase_flash_sector+0x12c>)
 8002234:	f001 feb6 	bl	8003fa4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_RESET);
 8002238:	2200      	movs	r2, #0
 800223a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800223e:	482b      	ldr	r0, [pc, #172]	; (80022ec <erase_flash_sector+0x12c>)
 8002240:	f001 feb0 	bl	8003fa4 <HAL_GPIO_WritePin>
	FLASH_WriteByte(0x04);
 8002244:	2004      	movs	r0, #4
 8002246:	f7ff fe7b 	bl	8001f40 <FLASH_WriteByte>
	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_SET);
 800224a:	2201      	movs	r2, #1
 800224c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002250:	4826      	ldr	r0, [pc, #152]	; (80022ec <erase_flash_sector+0x12c>)
 8002252:	f001 fea7 	bl	8003fa4 <HAL_GPIO_WritePin>

	delay_us(30000);
 8002256:	f247 5030 	movw	r0, #30000	; 0x7530
 800225a:	f7ff fa4b 	bl	80016f4 <delay_us>
	////////////////////////////////////////////////////////////
	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_RESET);
 800225e:	2200      	movs	r2, #0
 8002260:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002264:	4821      	ldr	r0, [pc, #132]	; (80022ec <erase_flash_sector+0x12c>)
 8002266:	f001 fe9d 	bl	8003fa4 <HAL_GPIO_WritePin>
	FLASH_WriteByte(0x06);
 800226a:	2006      	movs	r0, #6
 800226c:	f7ff fe68 	bl	8001f40 <FLASH_WriteByte>
	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_SET);
 8002270:	2201      	movs	r2, #1
 8002272:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002276:	481d      	ldr	r0, [pc, #116]	; (80022ec <erase_flash_sector+0x12c>)
 8002278:	f001 fe94 	bl	8003fa4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_RESET);
 800227c:	2200      	movs	r2, #0
 800227e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002282:	481a      	ldr	r0, [pc, #104]	; (80022ec <erase_flash_sector+0x12c>)
 8002284:	f001 fe8e 	bl	8003fa4 <HAL_GPIO_WritePin>
	FLASH_WriteByte(0x20);
 8002288:	2020      	movs	r0, #32
 800228a:	f7ff fe59 	bl	8001f40 <FLASH_WriteByte>
	FLASH_WriteByte(image_id_H);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	b2db      	uxtb	r3, r3
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff fe54 	bl	8001f40 <FLASH_WriteByte>
	FLASH_WriteByte(image_id_L*0x20+0x10);
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	b2db      	uxtb	r3, r3
 800229c:	015b      	lsls	r3, r3, #5
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	3310      	adds	r3, #16
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7ff fe4b 	bl	8001f40 <FLASH_WriteByte>
	FLASH_WriteByte(0x00);
 80022aa:	2000      	movs	r0, #0
 80022ac:	f7ff fe48 	bl	8001f40 <FLASH_WriteByte>
	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_SET);
 80022b0:	2201      	movs	r2, #1
 80022b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022b6:	480d      	ldr	r0, [pc, #52]	; (80022ec <erase_flash_sector+0x12c>)
 80022b8:	f001 fe74 	bl	8003fa4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_RESET);
 80022bc:	2200      	movs	r2, #0
 80022be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022c2:	480a      	ldr	r0, [pc, #40]	; (80022ec <erase_flash_sector+0x12c>)
 80022c4:	f001 fe6e 	bl	8003fa4 <HAL_GPIO_WritePin>
	FLASH_WriteByte(0x04);
 80022c8:	2004      	movs	r0, #4
 80022ca:	f7ff fe39 	bl	8001f40 <FLASH_WriteByte>
	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_SET);
 80022ce:	2201      	movs	r2, #1
 80022d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022d4:	4805      	ldr	r0, [pc, #20]	; (80022ec <erase_flash_sector+0x12c>)
 80022d6:	f001 fe65 	bl	8003fa4 <HAL_GPIO_WritePin>

	delay_us(30000);
 80022da:	f247 5030 	movw	r0, #30000	; 0x7530
 80022de:	f7ff fa09 	bl	80016f4 <delay_us>
}
 80022e2:	bf00      	nop
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	48000800 	.word	0x48000800

080022f0 <reset_flash_software>:

void reset_flash_software()
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_RESET);
 80022f4:	2200      	movs	r2, #0
 80022f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022fa:	4813      	ldr	r0, [pc, #76]	; (8002348 <reset_flash_software+0x58>)
 80022fc:	f001 fe52 	bl	8003fa4 <HAL_GPIO_WritePin>
	FLASH_WriteByte(0x66);
 8002300:	2066      	movs	r0, #102	; 0x66
 8002302:	f7ff fe1d 	bl	8001f40 <FLASH_WriteByte>
	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_SET);
 8002306:	2201      	movs	r2, #1
 8002308:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800230c:	480e      	ldr	r0, [pc, #56]	; (8002348 <reset_flash_software+0x58>)
 800230e:	f001 fe49 	bl	8003fa4 <HAL_GPIO_WritePin>
	delay_100ns(1);
 8002312:	2001      	movs	r0, #1
 8002314:	f7ff fa09 	bl	800172a <delay_100ns>
	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_RESET);
 8002318:	2200      	movs	r2, #0
 800231a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800231e:	480a      	ldr	r0, [pc, #40]	; (8002348 <reset_flash_software+0x58>)
 8002320:	f001 fe40 	bl	8003fa4 <HAL_GPIO_WritePin>
	FLASH_WriteByte(0x99);
 8002324:	2099      	movs	r0, #153	; 0x99
 8002326:	f7ff fe0b 	bl	8001f40 <FLASH_WriteByte>
	HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_SET);
 800232a:	2201      	movs	r2, #1
 800232c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002330:	4805      	ldr	r0, [pc, #20]	; (8002348 <reset_flash_software+0x58>)
 8002332:	f001 fe37 	bl	8003fa4 <HAL_GPIO_WritePin>
	delay_100ns(1);
 8002336:	2001      	movs	r0, #1
 8002338:	f7ff f9f7 	bl	800172a <delay_100ns>

	delay_us(1000);
 800233c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002340:	f7ff f9d8 	bl	80016f4 <delay_us>
}
 8002344:	bf00      	nop
 8002346:	bd80      	pop	{r7, pc}
 8002348:	48000800 	.word	0x48000800

0800234c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002350:	b672      	cpsid	i
}
 8002352:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002354:	e7fe      	b.n	8002354 <Error_Handler+0x8>
	...

08002358 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800235e:	4b0f      	ldr	r3, [pc, #60]	; (800239c <HAL_MspInit+0x44>)
 8002360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002362:	4a0e      	ldr	r2, [pc, #56]	; (800239c <HAL_MspInit+0x44>)
 8002364:	f043 0301 	orr.w	r3, r3, #1
 8002368:	6613      	str	r3, [r2, #96]	; 0x60
 800236a:	4b0c      	ldr	r3, [pc, #48]	; (800239c <HAL_MspInit+0x44>)
 800236c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	607b      	str	r3, [r7, #4]
 8002374:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002376:	4b09      	ldr	r3, [pc, #36]	; (800239c <HAL_MspInit+0x44>)
 8002378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800237a:	4a08      	ldr	r2, [pc, #32]	; (800239c <HAL_MspInit+0x44>)
 800237c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002380:	6593      	str	r3, [r2, #88]	; 0x58
 8002382:	4b06      	ldr	r3, [pc, #24]	; (800239c <HAL_MspInit+0x44>)
 8002384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238a:	603b      	str	r3, [r7, #0]
 800238c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800238e:	bf00      	nop
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	40021000 	.word	0x40021000

080023a0 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b0aa      	sub	sp, #168	; 0xa8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023a8:	f107 030c 	add.w	r3, r7, #12
 80023ac:	229c      	movs	r2, #156	; 0x9c
 80023ae:	2100      	movs	r1, #0
 80023b0:	4618      	mov	r0, r3
 80023b2:	f006 fe63 	bl	800907c <memset>
  if(hdsi->Instance==DSI)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a11      	ldr	r2, [pc, #68]	; (8002400 <HAL_DSI_MspInit+0x60>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d11b      	bne.n	80023f8 <HAL_DSI_MspInit+0x58>

  /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 80023c0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80023c4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.DsiClockSelection = RCC_DSICLKSOURCE_DSIPHY;
 80023c6:	2300      	movs	r3, #0
 80023c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023cc:	f107 030c 	add.w	r3, r7, #12
 80023d0:	4618      	mov	r0, r3
 80023d2:	f003 fe71 	bl	80060b8 <HAL_RCCEx_PeriphCLKConfig>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <HAL_DSI_MspInit+0x40>
    {
      Error_Handler();
 80023dc:	f7ff ffb6 	bl	800234c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 80023e0:	4b08      	ldr	r3, [pc, #32]	; (8002404 <HAL_DSI_MspInit+0x64>)
 80023e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023e4:	4a07      	ldr	r2, [pc, #28]	; (8002404 <HAL_DSI_MspInit+0x64>)
 80023e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80023ea:	6613      	str	r3, [r2, #96]	; 0x60
 80023ec:	4b05      	ldr	r3, [pc, #20]	; (8002404 <HAL_DSI_MspInit+0x64>)
 80023ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023f4:	60bb      	str	r3, [r7, #8]
 80023f6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 80023f8:	bf00      	nop
 80023fa:	37a8      	adds	r7, #168	; 0xa8
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	40016c00 	.word	0x40016c00
 8002404:	40021000 	.word	0x40021000

08002408 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b0b2      	sub	sp, #200	; 0xc8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002410:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	605a      	str	r2, [r3, #4]
 800241a:	609a      	str	r2, [r3, #8]
 800241c:	60da      	str	r2, [r3, #12]
 800241e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002420:	f107 0318 	add.w	r3, r7, #24
 8002424:	229c      	movs	r2, #156	; 0x9c
 8002426:	2100      	movs	r1, #0
 8002428:	4618      	mov	r0, r3
 800242a:	f006 fe27 	bl	800907c <memset>
  if(hi2c->Instance==I2C1)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a42      	ldr	r2, [pc, #264]	; (800253c <HAL_I2C_MspInit+0x134>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d13c      	bne.n	80024b2 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002438:	2340      	movs	r3, #64	; 0x40
 800243a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800243c:	2300      	movs	r3, #0
 800243e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002440:	f107 0318 	add.w	r3, r7, #24
 8002444:	4618      	mov	r0, r3
 8002446:	f003 fe37 	bl	80060b8 <HAL_RCCEx_PeriphCLKConfig>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002450:	f7ff ff7c 	bl	800234c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002454:	4b3a      	ldr	r3, [pc, #232]	; (8002540 <HAL_I2C_MspInit+0x138>)
 8002456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002458:	4a39      	ldr	r2, [pc, #228]	; (8002540 <HAL_I2C_MspInit+0x138>)
 800245a:	f043 0302 	orr.w	r3, r3, #2
 800245e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002460:	4b37      	ldr	r3, [pc, #220]	; (8002540 <HAL_I2C_MspInit+0x138>)
 8002462:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	617b      	str	r3, [r7, #20]
 800246a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 800246c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002470:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002474:	2312      	movs	r3, #18
 8002476:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247a:	2300      	movs	r3, #0
 800247c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002480:	2303      	movs	r3, #3
 8002482:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002486:	2304      	movs	r3, #4
 8002488:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800248c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002490:	4619      	mov	r1, r3
 8002492:	482c      	ldr	r0, [pc, #176]	; (8002544 <HAL_I2C_MspInit+0x13c>)
 8002494:	f001 fbdc 	bl	8003c50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002498:	4b29      	ldr	r3, [pc, #164]	; (8002540 <HAL_I2C_MspInit+0x138>)
 800249a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800249c:	4a28      	ldr	r2, [pc, #160]	; (8002540 <HAL_I2C_MspInit+0x138>)
 800249e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80024a2:	6593      	str	r3, [r2, #88]	; 0x58
 80024a4:	4b26      	ldr	r3, [pc, #152]	; (8002540 <HAL_I2C_MspInit+0x138>)
 80024a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024ac:	613b      	str	r3, [r7, #16]
 80024ae:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80024b0:	e040      	b.n	8002534 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a24      	ldr	r2, [pc, #144]	; (8002548 <HAL_I2C_MspInit+0x140>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d13b      	bne.n	8002534 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80024bc:	2380      	movs	r3, #128	; 0x80
 80024be:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80024c0:	2300      	movs	r3, #0
 80024c2:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024c4:	f107 0318 	add.w	r3, r7, #24
 80024c8:	4618      	mov	r0, r3
 80024ca:	f003 fdf5 	bl	80060b8 <HAL_RCCEx_PeriphCLKConfig>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 80024d4:	f7ff ff3a 	bl	800234c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024d8:	4b19      	ldr	r3, [pc, #100]	; (8002540 <HAL_I2C_MspInit+0x138>)
 80024da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024dc:	4a18      	ldr	r2, [pc, #96]	; (8002540 <HAL_I2C_MspInit+0x138>)
 80024de:	f043 0302 	orr.w	r3, r3, #2
 80024e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024e4:	4b16      	ldr	r3, [pc, #88]	; (8002540 <HAL_I2C_MspInit+0x138>)
 80024e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 80024f0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80024f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024f8:	2312      	movs	r3, #18
 80024fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fe:	2300      	movs	r3, #0
 8002500:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002504:	2303      	movs	r3, #3
 8002506:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800250a:	2304      	movs	r3, #4
 800250c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002510:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002514:	4619      	mov	r1, r3
 8002516:	480b      	ldr	r0, [pc, #44]	; (8002544 <HAL_I2C_MspInit+0x13c>)
 8002518:	f001 fb9a 	bl	8003c50 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800251c:	4b08      	ldr	r3, [pc, #32]	; (8002540 <HAL_I2C_MspInit+0x138>)
 800251e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002520:	4a07      	ldr	r2, [pc, #28]	; (8002540 <HAL_I2C_MspInit+0x138>)
 8002522:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002526:	6593      	str	r3, [r2, #88]	; 0x58
 8002528:	4b05      	ldr	r3, [pc, #20]	; (8002540 <HAL_I2C_MspInit+0x138>)
 800252a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800252c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002530:	60bb      	str	r3, [r7, #8]
 8002532:	68bb      	ldr	r3, [r7, #8]
}
 8002534:	bf00      	nop
 8002536:	37c8      	adds	r7, #200	; 0xc8
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40005400 	.word	0x40005400
 8002540:	40021000 	.word	0x40021000
 8002544:	48000400 	.word	0x48000400
 8002548:	40005800 	.word	0x40005800

0800254c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b0aa      	sub	sp, #168	; 0xa8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002554:	f107 030c 	add.w	r3, r7, #12
 8002558:	229c      	movs	r2, #156	; 0x9c
 800255a:	2100      	movs	r1, #0
 800255c:	4618      	mov	r0, r3
 800255e:	f006 fd8d 	bl	800907c <memset>
  if(hltdc->Instance==LTDC)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a19      	ldr	r2, [pc, #100]	; (80025cc <HAL_LTDC_MspInit+0x80>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d12b      	bne.n	80025c4 <HAL_LTDC_MspInit+0x78>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800256c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002570:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLLSAI2_DIV4;
 8002572:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002576:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    PeriphClkInit.PLLSAI2.PLLSAI2Source = RCC_PLLSOURCE_HSE;
 800257a:	2303      	movs	r3, #3
 800257c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI2.PLLSAI2M = 1;
 800257e:	2301      	movs	r3, #1
 8002580:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI2.PLLSAI2N = 8;
 8002582:	2308      	movs	r3, #8
 8002584:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.PLLSAI2.PLLSAI2P = RCC_PLLP_DIV2;
 8002586:	2302      	movs	r3, #2
 8002588:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.PLLSAI2.PLLSAI2R = RCC_PLLR_DIV2;
 800258a:	2302      	movs	r3, #2
 800258c:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInit.PLLSAI2.PLLSAI2Q = RCC_PLLQ_DIV2;
 800258e:	2302      	movs	r3, #2
 8002590:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInit.PLLSAI2.PLLSAI2ClockOut = RCC_PLLSAI2_LTDCCLK;
 8002592:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002596:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002598:	f107 030c 	add.w	r3, r7, #12
 800259c:	4618      	mov	r0, r3
 800259e:	f003 fd8b 	bl	80060b8 <HAL_RCCEx_PeriphCLKConfig>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <HAL_LTDC_MspInit+0x60>
    {
      Error_Handler();
 80025a8:	f7ff fed0 	bl	800234c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80025ac:	4b08      	ldr	r3, [pc, #32]	; (80025d0 <HAL_LTDC_MspInit+0x84>)
 80025ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025b0:	4a07      	ldr	r2, [pc, #28]	; (80025d0 <HAL_LTDC_MspInit+0x84>)
 80025b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80025b6:	6613      	str	r3, [r2, #96]	; 0x60
 80025b8:	4b05      	ldr	r3, [pc, #20]	; (80025d0 <HAL_LTDC_MspInit+0x84>)
 80025ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025c0:	60bb      	str	r3, [r7, #8]
 80025c2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80025c4:	bf00      	nop
 80025c6:	37a8      	adds	r7, #168	; 0xa8
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	40016800 	.word	0x40016800
 80025d0:	40021000 	.word	0x40021000

080025d4 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b0b2      	sub	sp, #200	; 0xc8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025dc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	605a      	str	r2, [r3, #4]
 80025e6:	609a      	str	r2, [r3, #8]
 80025e8:	60da      	str	r2, [r3, #12]
 80025ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025ec:	f107 0318 	add.w	r3, r7, #24
 80025f0:	229c      	movs	r2, #156	; 0x9c
 80025f2:	2100      	movs	r1, #0
 80025f4:	4618      	mov	r0, r3
 80025f6:	f006 fd41 	bl	800907c <memset>
  if(hospi->Instance==OCTOSPI2)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a38      	ldr	r2, [pc, #224]	; (80026e0 <HAL_OSPI_MspInit+0x10c>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d169      	bne.n	80026d8 <HAL_OSPI_MspInit+0x104>

  /* USER CODE END OCTOSPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8002604:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002608:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 800260a:	2300      	movs	r3, #0
 800260c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002610:	f107 0318 	add.w	r3, r7, #24
 8002614:	4618      	mov	r0, r3
 8002616:	f003 fd4f 	bl	80060b8 <HAL_RCCEx_PeriphCLKConfig>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 8002620:	f7ff fe94 	bl	800234c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8002624:	4b2f      	ldr	r3, [pc, #188]	; (80026e4 <HAL_OSPI_MspInit+0x110>)
 8002626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002628:	4a2e      	ldr	r2, [pc, #184]	; (80026e4 <HAL_OSPI_MspInit+0x110>)
 800262a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800262e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002630:	4b2c      	ldr	r3, [pc, #176]	; (80026e4 <HAL_OSPI_MspInit+0x110>)
 8002632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002634:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002638:	617b      	str	r3, [r7, #20]
 800263a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI2_CLK_ENABLE();
 800263c:	4b29      	ldr	r3, [pc, #164]	; (80026e4 <HAL_OSPI_MspInit+0x110>)
 800263e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002640:	4a28      	ldr	r2, [pc, #160]	; (80026e4 <HAL_OSPI_MspInit+0x110>)
 8002642:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002646:	6513      	str	r3, [r2, #80]	; 0x50
 8002648:	4b26      	ldr	r3, [pc, #152]	; (80026e4 <HAL_OSPI_MspInit+0x110>)
 800264a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800264c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002650:	613b      	str	r3, [r7, #16]
 8002652:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002654:	4b23      	ldr	r3, [pc, #140]	; (80026e4 <HAL_OSPI_MspInit+0x110>)
 8002656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002658:	4a22      	ldr	r2, [pc, #136]	; (80026e4 <HAL_OSPI_MspInit+0x110>)
 800265a:	f043 0308 	orr.w	r3, r3, #8
 800265e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002660:	4b20      	ldr	r3, [pc, #128]	; (80026e4 <HAL_OSPI_MspInit+0x110>)
 8002662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002664:	f003 0308 	and.w	r3, r3, #8
 8002668:	60fb      	str	r3, [r7, #12]
 800266a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800266c:	4b1d      	ldr	r3, [pc, #116]	; (80026e4 <HAL_OSPI_MspInit+0x110>)
 800266e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002670:	4a1c      	ldr	r2, [pc, #112]	; (80026e4 <HAL_OSPI_MspInit+0x110>)
 8002672:	f043 0320 	orr.w	r3, r3, #32
 8002676:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002678:	4b1a      	ldr	r3, [pc, #104]	; (80026e4 <HAL_OSPI_MspInit+0x110>)
 800267a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800267c:	f003 0320 	and.w	r3, r3, #32
 8002680:	60bb      	str	r3, [r7, #8]
 8002682:	68bb      	ldr	r3, [r7, #8]
    PD3     ------> OCTOSPIM_P2_NCS
    PF1     ------> OCTOSPIM_P2_IO1
    PF0     ------> OCTOSPIM_P2_IO0
    PF4     ------> OCTOSPIM_P2_CLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002684:	2308      	movs	r3, #8
 8002686:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800268a:	2302      	movs	r3, #2
 800268c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002690:	2300      	movs	r3, #0
 8002692:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002696:	2303      	movs	r3, #3
 8002698:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P2;
 800269c:	230a      	movs	r3, #10
 800269e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026a2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80026a6:	4619      	mov	r1, r3
 80026a8:	480f      	ldr	r0, [pc, #60]	; (80026e8 <HAL_OSPI_MspInit+0x114>)
 80026aa:	f001 fad1 	bl	8003c50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_4;
 80026ae:	2313      	movs	r3, #19
 80026b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b4:	2302      	movs	r3, #2
 80026b6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ba:	2300      	movs	r3, #0
 80026bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026c0:	2303      	movs	r3, #3
 80026c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 80026c6:	2305      	movs	r3, #5
 80026c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80026cc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80026d0:	4619      	mov	r1, r3
 80026d2:	4806      	ldr	r0, [pc, #24]	; (80026ec <HAL_OSPI_MspInit+0x118>)
 80026d4:	f001 fabc 	bl	8003c50 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI2_MspInit 1 */

  /* USER CODE END OCTOSPI2_MspInit 1 */
  }

}
 80026d8:	bf00      	nop
 80026da:	37c8      	adds	r7, #200	; 0xc8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	a0001400 	.word	0xa0001400
 80026e4:	40021000 	.word	0x40021000
 80026e8:	48000c00 	.word	0x48000c00
 80026ec:	48001400 	.word	0x48001400

080026f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b092      	sub	sp, #72	; 0x48
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	605a      	str	r2, [r3, #4]
 8002702:	609a      	str	r2, [r3, #8]
 8002704:	60da      	str	r2, [r3, #12]
 8002706:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a84      	ldr	r2, [pc, #528]	; (8002920 <HAL_SPI_MspInit+0x230>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d146      	bne.n	80027a0 <HAL_SPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002712:	4b84      	ldr	r3, [pc, #528]	; (8002924 <HAL_SPI_MspInit+0x234>)
 8002714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002716:	4a83      	ldr	r2, [pc, #524]	; (8002924 <HAL_SPI_MspInit+0x234>)
 8002718:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800271c:	6613      	str	r3, [r2, #96]	; 0x60
 800271e:	4b81      	ldr	r3, [pc, #516]	; (8002924 <HAL_SPI_MspInit+0x234>)
 8002720:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002722:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002726:	633b      	str	r3, [r7, #48]	; 0x30
 8002728:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800272a:	4b7e      	ldr	r3, [pc, #504]	; (8002924 <HAL_SPI_MspInit+0x234>)
 800272c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800272e:	4a7d      	ldr	r2, [pc, #500]	; (8002924 <HAL_SPI_MspInit+0x234>)
 8002730:	f043 0302 	orr.w	r3, r3, #2
 8002734:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002736:	4b7b      	ldr	r3, [pc, #492]	; (8002924 <HAL_SPI_MspInit+0x234>)
 8002738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002742:	4b78      	ldr	r3, [pc, #480]	; (8002924 <HAL_SPI_MspInit+0x234>)
 8002744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002746:	4a77      	ldr	r2, [pc, #476]	; (8002924 <HAL_SPI_MspInit+0x234>)
 8002748:	f043 0301 	orr.w	r3, r3, #1
 800274c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800274e:	4b75      	ldr	r3, [pc, #468]	; (8002924 <HAL_SPI_MspInit+0x234>)
 8002750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	62bb      	str	r3, [r7, #40]	; 0x28
 8002758:	6abb      	ldr	r3, [r7, #40]	; 0x28
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PA15 (JTDI)     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_3;
 800275a:	2338      	movs	r3, #56	; 0x38
 800275c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800275e:	2302      	movs	r3, #2
 8002760:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002762:	2300      	movs	r3, #0
 8002764:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002766:	2303      	movs	r3, #3
 8002768:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800276a:	2305      	movs	r3, #5
 800276c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800276e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002772:	4619      	mov	r1, r3
 8002774:	486c      	ldr	r0, [pc, #432]	; (8002928 <HAL_SPI_MspInit+0x238>)
 8002776:	f001 fa6b 	bl	8003c50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800277a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800277e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002780:	2302      	movs	r3, #2
 8002782:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002784:	2300      	movs	r3, #0
 8002786:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002788:	2303      	movs	r3, #3
 800278a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800278c:	2305      	movs	r3, #5
 800278e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002790:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002794:	4619      	mov	r1, r3
 8002796:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800279a:	f001 fa59 	bl	8003c50 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800279e:	e0ba      	b.n	8002916 <HAL_SPI_MspInit+0x226>
  else if(hspi->Instance==SPI2)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a61      	ldr	r2, [pc, #388]	; (800292c <HAL_SPI_MspInit+0x23c>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d144      	bne.n	8002834 <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80027aa:	4b5e      	ldr	r3, [pc, #376]	; (8002924 <HAL_SPI_MspInit+0x234>)
 80027ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ae:	4a5d      	ldr	r2, [pc, #372]	; (8002924 <HAL_SPI_MspInit+0x234>)
 80027b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027b4:	6593      	str	r3, [r2, #88]	; 0x58
 80027b6:	4b5b      	ldr	r3, [pc, #364]	; (8002924 <HAL_SPI_MspInit+0x234>)
 80027b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027be:	627b      	str	r3, [r7, #36]	; 0x24
 80027c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027c2:	4b58      	ldr	r3, [pc, #352]	; (8002924 <HAL_SPI_MspInit+0x234>)
 80027c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027c6:	4a57      	ldr	r2, [pc, #348]	; (8002924 <HAL_SPI_MspInit+0x234>)
 80027c8:	f043 0308 	orr.w	r3, r3, #8
 80027cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027ce:	4b55      	ldr	r3, [pc, #340]	; (8002924 <HAL_SPI_MspInit+0x234>)
 80027d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027d2:	f003 0308 	and.w	r3, r3, #8
 80027d6:	623b      	str	r3, [r7, #32]
 80027d8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027da:	4b52      	ldr	r3, [pc, #328]	; (8002924 <HAL_SPI_MspInit+0x234>)
 80027dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027de:	4a51      	ldr	r2, [pc, #324]	; (8002924 <HAL_SPI_MspInit+0x234>)
 80027e0:	f043 0304 	orr.w	r3, r3, #4
 80027e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027e6:	4b4f      	ldr	r3, [pc, #316]	; (8002924 <HAL_SPI_MspInit+0x234>)
 80027e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ea:	f003 0304 	and.w	r3, r3, #4
 80027ee:	61fb      	str	r3, [r7, #28]
 80027f0:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 80027f2:	2312      	movs	r3, #18
 80027f4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f6:	2302      	movs	r3, #2
 80027f8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fa:	2300      	movs	r3, #0
 80027fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027fe:	2303      	movs	r3, #3
 8002800:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002802:	2305      	movs	r3, #5
 8002804:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002806:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800280a:	4619      	mov	r1, r3
 800280c:	4848      	ldr	r0, [pc, #288]	; (8002930 <HAL_SPI_MspInit+0x240>)
 800280e:	f001 fa1f 	bl	8003c50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002812:	2304      	movs	r3, #4
 8002814:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002816:	2302      	movs	r3, #2
 8002818:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281a:	2300      	movs	r3, #0
 800281c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800281e:	2303      	movs	r3, #3
 8002820:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002822:	2305      	movs	r3, #5
 8002824:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002826:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800282a:	4619      	mov	r1, r3
 800282c:	4841      	ldr	r0, [pc, #260]	; (8002934 <HAL_SPI_MspInit+0x244>)
 800282e:	f001 fa0f 	bl	8003c50 <HAL_GPIO_Init>
}
 8002832:	e070      	b.n	8002916 <HAL_SPI_MspInit+0x226>
  else if(hspi->Instance==SPI3)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a3f      	ldr	r2, [pc, #252]	; (8002938 <HAL_SPI_MspInit+0x248>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d16b      	bne.n	8002916 <HAL_SPI_MspInit+0x226>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800283e:	4b39      	ldr	r3, [pc, #228]	; (8002924 <HAL_SPI_MspInit+0x234>)
 8002840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002842:	4a38      	ldr	r2, [pc, #224]	; (8002924 <HAL_SPI_MspInit+0x234>)
 8002844:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002848:	6593      	str	r3, [r2, #88]	; 0x58
 800284a:	4b36      	ldr	r3, [pc, #216]	; (8002924 <HAL_SPI_MspInit+0x234>)
 800284c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800284e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002852:	61bb      	str	r3, [r7, #24]
 8002854:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002856:	4b33      	ldr	r3, [pc, #204]	; (8002924 <HAL_SPI_MspInit+0x234>)
 8002858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800285a:	4a32      	ldr	r2, [pc, #200]	; (8002924 <HAL_SPI_MspInit+0x234>)
 800285c:	f043 0308 	orr.w	r3, r3, #8
 8002860:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002862:	4b30      	ldr	r3, [pc, #192]	; (8002924 <HAL_SPI_MspInit+0x234>)
 8002864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002866:	f003 0308 	and.w	r3, r3, #8
 800286a:	617b      	str	r3, [r7, #20]
 800286c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800286e:	4b2d      	ldr	r3, [pc, #180]	; (8002924 <HAL_SPI_MspInit+0x234>)
 8002870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002872:	4a2c      	ldr	r2, [pc, #176]	; (8002924 <HAL_SPI_MspInit+0x234>)
 8002874:	f043 0304 	orr.w	r3, r3, #4
 8002878:	64d3      	str	r3, [r2, #76]	; 0x4c
 800287a:	4b2a      	ldr	r3, [pc, #168]	; (8002924 <HAL_SPI_MspInit+0x234>)
 800287c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800287e:	f003 0304 	and.w	r3, r3, #4
 8002882:	613b      	str	r3, [r7, #16]
 8002884:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002886:	4b27      	ldr	r3, [pc, #156]	; (8002924 <HAL_SPI_MspInit+0x234>)
 8002888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800288a:	4a26      	ldr	r2, [pc, #152]	; (8002924 <HAL_SPI_MspInit+0x234>)
 800288c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002890:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002892:	4b24      	ldr	r3, [pc, #144]	; (8002924 <HAL_SPI_MspInit+0x234>)
 8002894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800289a:	60fb      	str	r3, [r7, #12]
 800289c:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 800289e:	f002 fd23 	bl	80052e8 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80028a2:	2340      	movs	r3, #64	; 0x40
 80028a4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a6:	2302      	movs	r3, #2
 80028a8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028aa:	2300      	movs	r3, #0
 80028ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ae:	2303      	movs	r3, #3
 80028b0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI3;
 80028b2:	2305      	movs	r3, #5
 80028b4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028b6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80028ba:	4619      	mov	r1, r3
 80028bc:	481c      	ldr	r0, [pc, #112]	; (8002930 <HAL_SPI_MspInit+0x240>)
 80028be:	f001 f9c7 	bl	8003c50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80028c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028c6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c8:	2302      	movs	r3, #2
 80028ca:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028cc:	2300      	movs	r3, #0
 80028ce:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028d0:	2303      	movs	r3, #3
 80028d2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80028d4:	2306      	movs	r3, #6
 80028d6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80028dc:	4619      	mov	r1, r3
 80028de:	4815      	ldr	r0, [pc, #84]	; (8002934 <HAL_SPI_MspInit+0x244>)
 80028e0:	f001 f9b6 	bl	8003c50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_10;
 80028e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80028e8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ea:	2302      	movs	r3, #2
 80028ec:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ee:	2300      	movs	r3, #0
 80028f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028f2:	2303      	movs	r3, #3
 80028f4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80028f6:	2306      	movs	r3, #6
 80028f8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80028fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80028fe:	4619      	mov	r1, r3
 8002900:	480e      	ldr	r0, [pc, #56]	; (800293c <HAL_SPI_MspInit+0x24c>)
 8002902:	f001 f9a5 	bl	8003c50 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8002906:	2200      	movs	r2, #0
 8002908:	2100      	movs	r1, #0
 800290a:	2033      	movs	r0, #51	; 0x33
 800290c:	f000 fa67 	bl	8002dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8002910:	2033      	movs	r0, #51	; 0x33
 8002912:	f000 fa80 	bl	8002e16 <HAL_NVIC_EnableIRQ>
}
 8002916:	bf00      	nop
 8002918:	3748      	adds	r7, #72	; 0x48
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	40013000 	.word	0x40013000
 8002924:	40021000 	.word	0x40021000
 8002928:	48000400 	.word	0x48000400
 800292c:	40003800 	.word	0x40003800
 8002930:	48000c00 	.word	0x48000c00
 8002934:	48000800 	.word	0x48000800
 8002938:	40003c00 	.word	0x40003c00
 800293c:	48001800 	.word	0x48001800

08002940 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b0b0      	sub	sp, #192	; 0xc0
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002948:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800294c:	2200      	movs	r2, #0
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	605a      	str	r2, [r3, #4]
 8002952:	609a      	str	r2, [r3, #8]
 8002954:	60da      	str	r2, [r3, #12]
 8002956:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002958:	f107 0310 	add.w	r3, r7, #16
 800295c:	229c      	movs	r2, #156	; 0x9c
 800295e:	2100      	movs	r1, #0
 8002960:	4618      	mov	r0, r3
 8002962:	f006 fb8b 	bl	800907c <memset>
  if(huart->Instance==UART4)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a21      	ldr	r2, [pc, #132]	; (80029f0 <HAL_UART_MspInit+0xb0>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d13b      	bne.n	80029e8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002970:	2308      	movs	r3, #8
 8002972:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002974:	2300      	movs	r3, #0
 8002976:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002978:	f107 0310 	add.w	r3, r7, #16
 800297c:	4618      	mov	r0, r3
 800297e:	f003 fb9b 	bl	80060b8 <HAL_RCCEx_PeriphCLKConfig>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002988:	f7ff fce0 	bl	800234c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800298c:	4b19      	ldr	r3, [pc, #100]	; (80029f4 <HAL_UART_MspInit+0xb4>)
 800298e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002990:	4a18      	ldr	r2, [pc, #96]	; (80029f4 <HAL_UART_MspInit+0xb4>)
 8002992:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002996:	6593      	str	r3, [r2, #88]	; 0x58
 8002998:	4b16      	ldr	r3, [pc, #88]	; (80029f4 <HAL_UART_MspInit+0xb4>)
 800299a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800299c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029a0:	60fb      	str	r3, [r7, #12]
 80029a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029a4:	4b13      	ldr	r3, [pc, #76]	; (80029f4 <HAL_UART_MspInit+0xb4>)
 80029a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029a8:	4a12      	ldr	r2, [pc, #72]	; (80029f4 <HAL_UART_MspInit+0xb4>)
 80029aa:	f043 0301 	orr.w	r3, r3, #1
 80029ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029b0:	4b10      	ldr	r3, [pc, #64]	; (80029f4 <HAL_UART_MspInit+0xb4>)
 80029b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	60bb      	str	r3, [r7, #8]
 80029ba:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80029bc:	2303      	movs	r3, #3
 80029be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c2:	2302      	movs	r3, #2
 80029c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c8:	2300      	movs	r3, #0
 80029ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ce:	2303      	movs	r3, #3
 80029d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80029d4:	2308      	movs	r3, #8
 80029d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029da:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80029de:	4619      	mov	r1, r3
 80029e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029e4:	f001 f934 	bl	8003c50 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80029e8:	bf00      	nop
 80029ea:	37c0      	adds	r7, #192	; 0xc0
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40004c00 	.word	0x40004c00
 80029f4:	40021000 	.word	0x40021000

080029f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029fc:	e7fe      	b.n	80029fc <NMI_Handler+0x4>

080029fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029fe:	b480      	push	{r7}
 8002a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a02:	e7fe      	b.n	8002a02 <HardFault_Handler+0x4>

08002a04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a08:	e7fe      	b.n	8002a08 <MemManage_Handler+0x4>

08002a0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a0e:	e7fe      	b.n	8002a0e <BusFault_Handler+0x4>

08002a10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a14:	e7fe      	b.n	8002a14 <UsageFault_Handler+0x4>

08002a16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a16:	b480      	push	{r7}
 8002a18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a1a:	bf00      	nop
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a28:	bf00      	nop
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr

08002a32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a32:	b480      	push	{r7}
 8002a34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a36:	bf00      	nop
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a44:	f000 f8ac 	bl	8002ba0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a48:	bf00      	nop
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002a50:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002a54:	f001 fabe 	bl	8003fd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002a58:	bf00      	nop
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8002a60:	4802      	ldr	r0, [pc, #8]	; (8002a6c <SPI3_IRQHandler+0x10>)
 8002a62:	f004 ff6f 	bl	8007944 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8002a66:	bf00      	nop
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	20004db8 	.word	0x20004db8

08002a70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002a74:	4b06      	ldr	r3, [pc, #24]	; (8002a90 <SystemInit+0x20>)
 8002a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7a:	4a05      	ldr	r2, [pc, #20]	; (8002a90 <SystemInit+0x20>)
 8002a7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002a84:	bf00      	nop
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	e000ed00 	.word	0xe000ed00

08002a94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002a94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002acc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002a98:	f7ff ffea 	bl	8002a70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a9c:	480c      	ldr	r0, [pc, #48]	; (8002ad0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002a9e:	490d      	ldr	r1, [pc, #52]	; (8002ad4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002aa0:	4a0d      	ldr	r2, [pc, #52]	; (8002ad8 <LoopForever+0xe>)
  movs r3, #0
 8002aa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002aa4:	e002      	b.n	8002aac <LoopCopyDataInit>

08002aa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002aa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002aa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002aaa:	3304      	adds	r3, #4

08002aac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002aac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002aae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ab0:	d3f9      	bcc.n	8002aa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ab2:	4a0a      	ldr	r2, [pc, #40]	; (8002adc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ab4:	4c0a      	ldr	r4, [pc, #40]	; (8002ae0 <LoopForever+0x16>)
  movs r3, #0
 8002ab6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ab8:	e001      	b.n	8002abe <LoopFillZerobss>

08002aba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002aba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002abc:	3204      	adds	r2, #4

08002abe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002abe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ac0:	d3fb      	bcc.n	8002aba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ac2:	f006 fae3 	bl	800908c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002ac6:	f7fd fd17 	bl	80004f8 <main>

08002aca <LoopForever>:

LoopForever:
    b LoopForever
 8002aca:	e7fe      	b.n	8002aca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002acc:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002ad0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ad4:	20004b18 	.word	0x20004b18
  ldr r2, =_sidata
 8002ad8:	080091f4 	.word	0x080091f4
  ldr r2, =_sbss
 8002adc:	20004b18 	.word	0x20004b18
  ldr r4, =_ebss
 8002ae0:	2000b2c0 	.word	0x2000b2c0

08002ae4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002ae4:	e7fe      	b.n	8002ae4 <ADC1_IRQHandler>
	...

08002ae8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002aee:	2300      	movs	r3, #0
 8002af0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002af2:	4b0c      	ldr	r3, [pc, #48]	; (8002b24 <HAL_Init+0x3c>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a0b      	ldr	r2, [pc, #44]	; (8002b24 <HAL_Init+0x3c>)
 8002af8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002afc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002afe:	2003      	movs	r0, #3
 8002b00:	f000 f962 	bl	8002dc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b04:	2002      	movs	r0, #2
 8002b06:	f000 f80f 	bl	8002b28 <HAL_InitTick>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d002      	beq.n	8002b16 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	71fb      	strb	r3, [r7, #7]
 8002b14:	e001      	b.n	8002b1a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002b16:	f7ff fc1f 	bl	8002358 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002b1a:	79fb      	ldrb	r3, [r7, #7]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3708      	adds	r7, #8
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	40022000 	.word	0x40022000

08002b28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002b30:	2300      	movs	r3, #0
 8002b32:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002b34:	4b17      	ldr	r3, [pc, #92]	; (8002b94 <HAL_InitTick+0x6c>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d023      	beq.n	8002b84 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002b3c:	4b16      	ldr	r3, [pc, #88]	; (8002b98 <HAL_InitTick+0x70>)
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	4b14      	ldr	r3, [pc, #80]	; (8002b94 <HAL_InitTick+0x6c>)
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	4619      	mov	r1, r3
 8002b46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b52:	4618      	mov	r0, r3
 8002b54:	f000 f96d 	bl	8002e32 <HAL_SYSTICK_Config>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10f      	bne.n	8002b7e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2b0f      	cmp	r3, #15
 8002b62:	d809      	bhi.n	8002b78 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b64:	2200      	movs	r2, #0
 8002b66:	6879      	ldr	r1, [r7, #4]
 8002b68:	f04f 30ff 	mov.w	r0, #4294967295
 8002b6c:	f000 f937 	bl	8002dde <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b70:	4a0a      	ldr	r2, [pc, #40]	; (8002b9c <HAL_InitTick+0x74>)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6013      	str	r3, [r2, #0]
 8002b76:	e007      	b.n	8002b88 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	73fb      	strb	r3, [r7, #15]
 8002b7c:	e004      	b.n	8002b88 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	73fb      	strb	r3, [r7, #15]
 8002b82:	e001      	b.n	8002b88 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	20004b14 	.word	0x20004b14
 8002b98:	20004b0c 	.word	0x20004b0c
 8002b9c:	20004b10 	.word	0x20004b10

08002ba0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ba4:	4b06      	ldr	r3, [pc, #24]	; (8002bc0 <HAL_IncTick+0x20>)
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	461a      	mov	r2, r3
 8002baa:	4b06      	ldr	r3, [pc, #24]	; (8002bc4 <HAL_IncTick+0x24>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4413      	add	r3, r2
 8002bb0:	4a04      	ldr	r2, [pc, #16]	; (8002bc4 <HAL_IncTick+0x24>)
 8002bb2:	6013      	str	r3, [r2, #0]
}
 8002bb4:	bf00      	nop
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	20004b14 	.word	0x20004b14
 8002bc4:	2000b2bc 	.word	0x2000b2bc

08002bc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
  return uwTick;
 8002bcc:	4b03      	ldr	r3, [pc, #12]	; (8002bdc <HAL_GetTick+0x14>)
 8002bce:	681b      	ldr	r3, [r3, #0]
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	2000b2bc 	.word	0x2000b2bc

08002be0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002be8:	f7ff ffee 	bl	8002bc8 <HAL_GetTick>
 8002bec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bf8:	d005      	beq.n	8002c06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002bfa:	4b0a      	ldr	r3, [pc, #40]	; (8002c24 <HAL_Delay+0x44>)
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	461a      	mov	r2, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	4413      	add	r3, r2
 8002c04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c06:	bf00      	nop
 8002c08:	f7ff ffde 	bl	8002bc8 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d8f7      	bhi.n	8002c08 <HAL_Delay+0x28>
  {
  }
}
 8002c18:	bf00      	nop
 8002c1a:	bf00      	nop
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	20004b14 	.word	0x20004b14

08002c28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c38:	4b0c      	ldr	r3, [pc, #48]	; (8002c6c <__NVIC_SetPriorityGrouping+0x44>)
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c3e:	68ba      	ldr	r2, [r7, #8]
 8002c40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c44:	4013      	ands	r3, r2
 8002c46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c5a:	4a04      	ldr	r2, [pc, #16]	; (8002c6c <__NVIC_SetPriorityGrouping+0x44>)
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	60d3      	str	r3, [r2, #12]
}
 8002c60:	bf00      	nop
 8002c62:	3714      	adds	r7, #20
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr
 8002c6c:	e000ed00 	.word	0xe000ed00

08002c70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c74:	4b04      	ldr	r3, [pc, #16]	; (8002c88 <__NVIC_GetPriorityGrouping+0x18>)
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	0a1b      	lsrs	r3, r3, #8
 8002c7a:	f003 0307 	and.w	r3, r3, #7
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr
 8002c88:	e000ed00 	.word	0xe000ed00

08002c8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	4603      	mov	r3, r0
 8002c94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	db0b      	blt.n	8002cb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c9e:	79fb      	ldrb	r3, [r7, #7]
 8002ca0:	f003 021f 	and.w	r2, r3, #31
 8002ca4:	4907      	ldr	r1, [pc, #28]	; (8002cc4 <__NVIC_EnableIRQ+0x38>)
 8002ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002caa:	095b      	lsrs	r3, r3, #5
 8002cac:	2001      	movs	r0, #1
 8002cae:	fa00 f202 	lsl.w	r2, r0, r2
 8002cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002cb6:	bf00      	nop
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	e000e100 	.word	0xe000e100

08002cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	4603      	mov	r3, r0
 8002cd0:	6039      	str	r1, [r7, #0]
 8002cd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	db0a      	blt.n	8002cf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	b2da      	uxtb	r2, r3
 8002ce0:	490c      	ldr	r1, [pc, #48]	; (8002d14 <__NVIC_SetPriority+0x4c>)
 8002ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce6:	0112      	lsls	r2, r2, #4
 8002ce8:	b2d2      	uxtb	r2, r2
 8002cea:	440b      	add	r3, r1
 8002cec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cf0:	e00a      	b.n	8002d08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	4908      	ldr	r1, [pc, #32]	; (8002d18 <__NVIC_SetPriority+0x50>)
 8002cf8:	79fb      	ldrb	r3, [r7, #7]
 8002cfa:	f003 030f 	and.w	r3, r3, #15
 8002cfe:	3b04      	subs	r3, #4
 8002d00:	0112      	lsls	r2, r2, #4
 8002d02:	b2d2      	uxtb	r2, r2
 8002d04:	440b      	add	r3, r1
 8002d06:	761a      	strb	r2, [r3, #24]
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr
 8002d14:	e000e100 	.word	0xe000e100
 8002d18:	e000ed00 	.word	0xe000ed00

08002d1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b089      	sub	sp, #36	; 0x24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f003 0307 	and.w	r3, r3, #7
 8002d2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	f1c3 0307 	rsb	r3, r3, #7
 8002d36:	2b04      	cmp	r3, #4
 8002d38:	bf28      	it	cs
 8002d3a:	2304      	movcs	r3, #4
 8002d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	3304      	adds	r3, #4
 8002d42:	2b06      	cmp	r3, #6
 8002d44:	d902      	bls.n	8002d4c <NVIC_EncodePriority+0x30>
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	3b03      	subs	r3, #3
 8002d4a:	e000      	b.n	8002d4e <NVIC_EncodePriority+0x32>
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d50:	f04f 32ff 	mov.w	r2, #4294967295
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5a:	43da      	mvns	r2, r3
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	401a      	ands	r2, r3
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d64:	f04f 31ff 	mov.w	r1, #4294967295
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d6e:	43d9      	mvns	r1, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d74:	4313      	orrs	r3, r2
         );
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3724      	adds	r7, #36	; 0x24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
	...

08002d84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d94:	d301      	bcc.n	8002d9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d96:	2301      	movs	r3, #1
 8002d98:	e00f      	b.n	8002dba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d9a:	4a0a      	ldr	r2, [pc, #40]	; (8002dc4 <SysTick_Config+0x40>)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002da2:	210f      	movs	r1, #15
 8002da4:	f04f 30ff 	mov.w	r0, #4294967295
 8002da8:	f7ff ff8e 	bl	8002cc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dac:	4b05      	ldr	r3, [pc, #20]	; (8002dc4 <SysTick_Config+0x40>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002db2:	4b04      	ldr	r3, [pc, #16]	; (8002dc4 <SysTick_Config+0x40>)
 8002db4:	2207      	movs	r2, #7
 8002db6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	e000e010 	.word	0xe000e010

08002dc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f7ff ff29 	bl	8002c28 <__NVIC_SetPriorityGrouping>
}
 8002dd6:	bf00      	nop
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b086      	sub	sp, #24
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	4603      	mov	r3, r0
 8002de6:	60b9      	str	r1, [r7, #8]
 8002de8:	607a      	str	r2, [r7, #4]
 8002dea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002dec:	2300      	movs	r3, #0
 8002dee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002df0:	f7ff ff3e 	bl	8002c70 <__NVIC_GetPriorityGrouping>
 8002df4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	68b9      	ldr	r1, [r7, #8]
 8002dfa:	6978      	ldr	r0, [r7, #20]
 8002dfc:	f7ff ff8e 	bl	8002d1c <NVIC_EncodePriority>
 8002e00:	4602      	mov	r2, r0
 8002e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e06:	4611      	mov	r1, r2
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7ff ff5d 	bl	8002cc8 <__NVIC_SetPriority>
}
 8002e0e:	bf00      	nop
 8002e10:	3718      	adds	r7, #24
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b082      	sub	sp, #8
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff ff31 	bl	8002c8c <__NVIC_EnableIRQ>
}
 8002e2a:	bf00      	nop
 8002e2c:	3708      	adds	r7, #8
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b082      	sub	sp, #8
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f7ff ffa2 	bl	8002d84 <SysTick_Config>
 8002e40:	4603      	mov	r3, r0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3708      	adds	r7, #8
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b084      	sub	sp, #16
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e52:	2300      	movs	r3, #0
 8002e54:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d005      	beq.n	8002e6e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2204      	movs	r2, #4
 8002e66:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	73fb      	strb	r3, [r7, #15]
 8002e6c:	e047      	b.n	8002efe <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f022 020e 	bic.w	r2, r2, #14
 8002e7c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 0201 	bic.w	r2, r2, #1
 8002e8c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e9c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea2:	f003 021c 	and.w	r2, r3, #28
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	2101      	movs	r1, #1
 8002eac:	fa01 f202 	lsl.w	r2, r1, r2
 8002eb0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002eba:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00c      	beq.n	8002ede <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ece:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ed2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002edc:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	4798      	blx	r3
    }
  }
  return status;
 8002efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
 8002f14:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	019a      	lsls	r2, r3, #6
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	431a      	orrs	r2, r3
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	021b      	lsls	r3, r3, #8
 8002f22:	431a      	orrs	r2, r3
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	041b      	lsls	r3, r3, #16
 8002f28:	431a      	orrs	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8002f2e:	bf00      	nop
 8002f30:	3714      	adds	r7, #20
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr

08002f3a <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b086      	sub	sp, #24
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	60f8      	str	r0, [r7, #12]
 8002f42:	60b9      	str	r1, [r7, #8]
 8002f44:	607a      	str	r2, [r7, #4]
 8002f46:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f48:	f7ff fe3e 	bl	8002bc8 <HAL_GetTick>
 8002f4c:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002f4e:	e009      	b.n	8002f64 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002f50:	f7ff fe3a 	bl	8002bc8 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f5e:	d901      	bls.n	8002f64 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e015      	b.n	8002f90 <DSI_ShortWrite+0x56>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d0ee      	beq.n	8002f50 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	019a      	lsls	r2, r3, #6
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	431a      	orrs	r2, r3
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	021b      	lsls	r3, r3, #8
 8002f7e:	ea42 0103 	orr.w	r1, r2, r3
 8002f82:	6a3b      	ldr	r3, [r7, #32]
 8002f84:	041a      	lsls	r2, r3, #16
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3718      	adds	r7, #24
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b088      	sub	sp, #32
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d101      	bne.n	8002fac <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e10b      	b.n	80031c4 <HAL_DSI_Init+0x22c>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	7c5b      	ldrb	r3, [r3, #17]
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d102      	bne.n	8002fbc <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f7ff f9f2 	bl	80023a0 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2203      	movs	r2, #3
 8002fc0:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	613b      	str	r3, [r7, #16]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002fd6:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002fe2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fe6:	613b      	str	r3, [r7, #16]
 8002fe8:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fea:	f7ff fded 	bl	8002bc8 <HAL_GetTick>
 8002fee:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8002ff0:	e009      	b.n	8003006 <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002ff2:	f7ff fde9 	bl	8002bc8 <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003000:	d901      	bls.n	8003006 <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e0de      	b.n	80031c4 <HAL_DSI_Init+0x22c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800300e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d0ed      	beq.n	8002ff2 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	6812      	ldr	r2, [r2, #0]
 8003022:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 8003026:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 800302a:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8003042:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800304a:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	430a      	orrs	r2, r1
 8003052:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8003056:	2300      	movs	r3, #0
 8003058:	60fb      	str	r3, [r7, #12]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f042 0201 	orr.w	r2, r2, #1
 800306a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	60fb      	str	r3, [r7, #12]
 800307c:	68fb      	ldr	r3, [r7, #12]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 800307e:	2001      	movs	r0, #1
 8003080:	f7ff fdae 	bl	8002be0 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8003084:	f7ff fda0 	bl	8002bc8 <HAL_GetTick>
 8003088:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800308a:	e009      	b.n	80030a0 <HAL_DSI_Init+0x108>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800308c:	f7ff fd9c 	bl	8002bc8 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800309a:	d901      	bls.n	80030a0 <HAL_DSI_Init+0x108>
    {
      return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e091      	b.n	80031c4 <HAL_DSI_Init+0x22c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80030a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d0ed      	beq.n	800308c <HAL_DSI_Init+0xf4>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f042 0206 	orr.w	r2, r2, #6
 80030c0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 0203 	bic.w	r2, r2, #3
 80030d4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	431a      	orrs	r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f042 0201 	orr.w	r2, r2, #1
 80030ee:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f022 0203 	bic.w	r2, r2, #3
 8003102:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	68da      	ldr	r2, [r3, #12]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	430a      	orrs	r2, r1
 8003118:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	689a      	ldr	r2, [r3, #8]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800312a:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	6899      	ldr	r1, [r3, #8]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	689a      	ldr	r2, [r3, #8]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	430a      	orrs	r2, r1
 800313c:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d002      	beq.n	800314c <HAL_DSI_Init+0x1b4>
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	e000      	b.n	800314e <HAL_DSI_Init+0x1b6>
 800314c:	2301      	movs	r3, #1
 800314e:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	4a1e      	ldr	r2, [pc, #120]	; (80031cc <HAL_DSI_Init+0x234>)
 8003154:	fb03 f202 	mul.w	r2, r3, r2
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f003 0303 	and.w	r3, r3, #3
 8003160:	409a      	lsls	r2, r3
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 800316a:	fb01 f303 	mul.w	r3, r1, r3
 800316e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003172:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003184:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	697a      	ldr	r2, [r7, #20]
 8003196:	430a      	orrs	r2, r1
 8003198:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3720      	adds	r7, #32
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	003d0900 	.word	0x003d0900

080031d0 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	7c1b      	ldrb	r3, [r3, #16]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d101      	bne.n	80031e6 <HAL_DSI_ConfigErrorMonitor+0x16>
 80031e2:	2302      	movs	r3, #2
 80031e4:	e0ab      	b.n	800333e <HAL_DSI_ConfigErrorMonitor+0x16e>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2201      	movs	r2, #1
 80031ea:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	683a      	ldr	r2, [r7, #0]
 8003204:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00b      	beq.n	8003228 <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	6812      	ldr	r2, [r2, #0]
 800321c:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8003220:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8003224:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d009      	beq.n	8003246 <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 8003242:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	f003 0304 	and.w	r3, r3, #4
 800324c:	2b00      	cmp	r3, #0
 800324e:	d009      	beq.n	8003264 <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f042 0201 	orr.w	r2, r2, #1
 8003260:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	f003 0308 	and.w	r3, r3, #8
 800326a:	2b00      	cmp	r3, #0
 800326c:	d009      	beq.n	8003282 <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f042 0202 	orr.w	r2, r2, #2
 800327e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	f003 0310 	and.w	r3, r3, #16
 8003288:	2b00      	cmp	r3, #0
 800328a:	d009      	beq.n	80032a0 <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f042 020c 	orr.w	r2, r2, #12
 800329c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	f003 0320 	and.w	r3, r3, #32
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d009      	beq.n	80032be <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f042 0210 	orr.w	r2, r2, #16
 80032ba:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d009      	beq.n	80032dc <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f042 0220 	orr.w	r2, r2, #32
 80032d8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d009      	beq.n	80032fa <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032f6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003300:	2b00      	cmp	r3, #0
 8003302:	d009      	beq.n	8003318 <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003314:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800331e:	2b00      	cmp	r3, #0
 8003320:	d009      	beq.n	8003336 <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8003332:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr

0800334a <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 800334a:	b480      	push	{r7}
 800334c:	b083      	sub	sp, #12
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
 8003352:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	7c1b      	ldrb	r3, [r3, #16]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d101      	bne.n	8003360 <HAL_DSI_SetGenericVCID+0x16>
 800335c:	2302      	movs	r3, #2
 800335e:	e016      	b.n	800338e <HAL_DSI_SetGenericVCID+0x44>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f022 0203 	bic.w	r2, r2, #3
 8003374:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	683a      	ldr	r2, [r7, #0]
 8003382:	430a      	orrs	r2, r1
 8003384:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr

0800339a <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 800339a:	b480      	push	{r7}
 800339c:	b083      	sub	sp, #12
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
 80033a2:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	7c1b      	ldrb	r3, [r3, #16]
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d101      	bne.n	80033b0 <HAL_DSI_ConfigVideoMode+0x16>
 80033ac:	2302      	movs	r3, #2
 80033ae:	e1f6      	b.n	800379e <HAL_DSI_ConfigVideoMode+0x404>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f022 0201 	bic.w	r2, r2, #1
 80033c4:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f022 0201 	bic.w	r2, r2, #1
 80033d6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f022 0203 	bic.w	r2, r2, #3
 80033e8:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	68da      	ldr	r2, [r3, #12]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	6812      	ldr	r2, [r2, #0]
 8003406:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800340a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800340e:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	691a      	ldr	r2, [r3, #16]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	430a      	orrs	r2, r1
 8003420:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	6812      	ldr	r2, [r2, #0]
 800342c:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8003430:	f023 031f 	bic.w	r3, r3, #31
 8003434:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	695a      	ldr	r2, [r3, #20]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	430a      	orrs	r2, r1
 8003446:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	6812      	ldr	r2, [r2, #0]
 8003452:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8003456:	f023 031f 	bic.w	r3, r3, #31
 800345a:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	699a      	ldr	r2, [r3, #24]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	430a      	orrs	r2, r1
 800346c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68da      	ldr	r2, [r3, #12]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 0203 	bic.w	r2, r2, #3
 800347c:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68d9      	ldr	r1, [r3, #12]
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	430a      	orrs	r2, r1
 800348e:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	695a      	ldr	r2, [r3, #20]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f022 0207 	bic.w	r2, r2, #7
 800349e:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	6959      	ldr	r1, [r3, #20]
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	6a1b      	ldr	r3, [r3, #32]
 80034ae:	431a      	orrs	r2, r3
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	69db      	ldr	r3, [r3, #28]
 80034b4:	431a      	orrs	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	430a      	orrs	r2, r1
 80034bc:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	691a      	ldr	r2, [r3, #16]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f022 020f 	bic.w	r2, r2, #15
 80034cc:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	6919      	ldr	r1, [r3, #16]
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	430a      	orrs	r2, r1
 80034de:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 020e 	bic.w	r2, r2, #14
 80034f0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	005a      	lsls	r2, r3, #1
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	430a      	orrs	r2, r1
 8003508:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	2b03      	cmp	r3, #3
 8003512:	d110      	bne.n	8003536 <HAL_DSI_ConfigVideoMode+0x19c>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	691a      	ldr	r2, [r3, #16]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003522:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6919      	ldr	r1, [r3, #16]
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	689a      	ldr	r2, [r3, #8]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	430a      	orrs	r2, r1
 8003534:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	6812      	ldr	r2, [r2, #0]
 8003540:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003544:	f023 030f 	bic.w	r3, r3, #15
 8003548:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	430a      	orrs	r2, r1
 800355a:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	6812      	ldr	r2, [r2, #0]
 8003566:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800356a:	f023 030f 	bic.w	r3, r3, #15
 800356e:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	430a      	orrs	r2, r1
 8003580:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	6812      	ldr	r2, [r2, #0]
 800358c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003590:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003594:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	430a      	orrs	r2, r1
 80035a6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	6812      	ldr	r2, [r2, #0]
 80035b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035b6:	f023 0303 	bic.w	r3, r3, #3
 80035ba:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	430a      	orrs	r2, r1
 80035cc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	6812      	ldr	r2, [r2, #0]
 80035d8:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035dc:	f023 0303 	bic.w	r3, r3, #3
 80035e0:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	430a      	orrs	r2, r1
 80035f2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	6812      	ldr	r2, [r2, #0]
 80035fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003602:	f023 0303 	bic.w	r3, r3, #3
 8003606:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	430a      	orrs	r2, r1
 8003618:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	6812      	ldr	r2, [r2, #0]
 8003624:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003628:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800362c:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	430a      	orrs	r2, r1
 800363e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800364e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	430a      	orrs	r2, r1
 8003660:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	699a      	ldr	r2, [r3, #24]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8003670:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	6999      	ldr	r1, [r3, #24]
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800367c:	041a      	lsls	r2, r3, #16
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	430a      	orrs	r2, r1
 8003684:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	699a      	ldr	r2, [r3, #24]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003694:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	6999      	ldr	r1, [r3, #24]
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	430a      	orrs	r2, r1
 80036a6:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036b6:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	430a      	orrs	r2, r1
 80036c8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80036d8:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	430a      	orrs	r2, r1
 80036ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036fa:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	430a      	orrs	r2, r1
 800370c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800371c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	430a      	orrs	r2, r1
 800372e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800373e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	430a      	orrs	r2, r1
 8003750:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003760:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	430a      	orrs	r2, r1
 8003772:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003782:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	430a      	orrs	r2, r1
 8003794:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr

080037aa <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 80037aa:	b480      	push	{r7}
 80037ac:	b085      	sub	sp, #20
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
 80037b2:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	7c1b      	ldrb	r3, [r3, #16]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d101      	bne.n	80037c0 <HAL_DSI_ConfigPhyTimer+0x16>
 80037bc:	2302      	movs	r3, #2
 80037be:	e058      	b.n	8003872 <HAL_DSI_ConfigPhyTimer+0xc8>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	4293      	cmp	r3, r2
 80037d0:	bf38      	it	cc
 80037d2:	4613      	movcc	r3, r2
 80037d4:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 80037e6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	041a      	lsls	r2, r3, #16
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	431a      	orrs	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	430a      	orrs	r2, r1
 8003800:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8003814:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	691a      	ldr	r2, [r3, #16]
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	041b      	lsls	r3, r3, #16
 800382a:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8003832:	431a      	orrs	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	430a      	orrs	r2, r1
 800383a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800384e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	021a      	lsls	r2, r3, #8
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	430a      	orrs	r2, r1
 8003866:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3714      	adds	r7, #20
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr

0800387e <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 800387e:	b480      	push	{r7}
 8003880:	b083      	sub	sp, #12
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
 8003886:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	7c1b      	ldrb	r3, [r3, #16]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d101      	bne.n	8003894 <HAL_DSI_ConfigHostTimeouts+0x16>
 8003890:	2302      	movs	r3, #2
 8003892:	e0b4      	b.n	80039fe <HAL_DSI_ConfigHostTimeouts+0x180>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80038a8:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	6899      	ldr	r1, [r3, #8]
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	021a      	lsls	r2, r3, #8
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	b292      	uxth	r2, r2
 80038ca:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	041a      	lsls	r2, r3, #16
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	430a      	orrs	r2, r1
 80038de:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	6812      	ldr	r2, [r2, #0]
 80038ea:	0c1b      	lsrs	r3, r3, #16
 80038ec:	041b      	lsls	r3, r3, #16
 80038ee:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	689a      	ldr	r2, [r3, #8]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	430a      	orrs	r2, r1
 8003900:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	6812      	ldr	r2, [r2, #0]
 800390c:	0c1b      	lsrs	r3, r3, #16
 800390e:	041b      	lsls	r3, r3, #16
 8003910:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	68da      	ldr	r2, [r3, #12]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	430a      	orrs	r2, r1
 8003922:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	6812      	ldr	r2, [r2, #0]
 8003930:	0c1b      	lsrs	r3, r3, #16
 8003932:	041b      	lsls	r3, r3, #16
 8003934:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	691a      	ldr	r2, [r3, #16]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	430a      	orrs	r2, r1
 800394a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	6812      	ldr	r2, [r2, #0]
 800395a:	0c1b      	lsrs	r3, r3, #16
 800395c:	041b      	lsls	r3, r3, #16
 800395e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	695a      	ldr	r2, [r3, #20]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	430a      	orrs	r2, r1
 8003974:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003988:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	699a      	ldr	r2, [r3, #24]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	430a      	orrs	r2, r1
 800399e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	6812      	ldr	r2, [r2, #0]
 80039ae:	0c1b      	lsrs	r3, r3, #16
 80039b0:	041b      	lsls	r3, r3, #16
 80039b2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	69da      	ldr	r2, [r3, #28]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	430a      	orrs	r2, r1
 80039c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	6812      	ldr	r2, [r2, #0]
 80039d8:	0c1b      	lsrs	r3, r3, #16
 80039da:	041b      	lsls	r3, r3, #16
 80039dc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	6a1a      	ldr	r2, [r3, #32]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	430a      	orrs	r2, r1
 80039f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr

08003a0a <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b085      	sub	sp, #20
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	7c1b      	ldrb	r3, [r3, #16]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d101      	bne.n	8003a1e <HAL_DSI_Start+0x14>
 8003a1a:	2302      	movs	r3, #2
 8003a1c:	e02b      	b.n	8003a76 <HAL_DSI_Start+0x6c>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2201      	movs	r2, #1
 8003a22:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8003a24:	2300      	movs	r3, #0
 8003a26:	60fb      	str	r3, [r7, #12]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	685a      	ldr	r2, [r3, #4]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f042 0201 	orr.w	r2, r2, #1
 8003a36:	605a      	str	r2, [r3, #4]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	60fb      	str	r3, [r7, #12]
 8003a44:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8003a46:	2300      	movs	r3, #0
 8003a48:	60bb      	str	r3, [r7, #8]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f042 0208 	orr.w	r2, r2, #8
 8003a5a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003a66:	f003 0308 	and.w	r3, r3, #8
 8003a6a:	60bb      	str	r3, [r7, #8]
 8003a6c:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3714      	adds	r7, #20
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr

08003a82 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b088      	sub	sp, #32
 8003a86:	af02      	add	r7, sp, #8
 8003a88:	60f8      	str	r0, [r7, #12]
 8003a8a:	60b9      	str	r1, [r7, #8]
 8003a8c:	607a      	str	r2, [r7, #4]
 8003a8e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	7c1b      	ldrb	r3, [r3, #16]
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d101      	bne.n	8003a9c <HAL_DSI_ShortWrite+0x1a>
 8003a98:	2302      	movs	r3, #2
 8003a9a:	e010      	b.n	8003abe <HAL_DSI_ShortWrite+0x3c>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	741a      	strb	r2, [r3, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8003aa2:	6a3b      	ldr	r3, [r7, #32]
 8003aa4:	9300      	str	r3, [sp, #0]
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	68b9      	ldr	r1, [r7, #8]
 8003aac:	68f8      	ldr	r0, [r7, #12]
 8003aae:	f7ff fa44 	bl	8002f3a <DSI_ShortWrite>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	741a      	strb	r2, [r3, #16]

  return status;
 8003abc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3718      	adds	r7, #24
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	b08c      	sub	sp, #48	; 0x30
 8003aca:	af02      	add	r7, sp, #8
 8003acc:	60f8      	str	r0, [r7, #12]
 8003ace:	60b9      	str	r1, [r7, #8]
 8003ad0:	607a      	str	r2, [r7, #4]
 8003ad2:	603b      	str	r3, [r7, #0]
  uint32_t uicounter;
  uint32_t nbBytes;
  uint32_t count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 8003ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ad6:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	7c1b      	ldrb	r3, [r3, #16]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d101      	bne.n	8003ae4 <HAL_DSI_LongWrite+0x1e>
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	e084      	b.n	8003bee <HAL_DSI_LongWrite+0x128>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8003aea:	f7ff f86d 	bl	8002bc8 <HAL_GetTick>
 8003aee:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003af0:	e00c      	b.n	8003b0c <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003af2:	f7ff f869 	bl	8002bc8 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b00:	d904      	bls.n	8003b0c <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e070      	b.n	8003bee <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d0eb      	beq.n	8003af2 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8003b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b1c:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	2b03      	cmp	r3, #3
 8003b22:	bf28      	it	cs
 8003b24:	2303      	movcs	r3, #3
 8003b26:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 8003b28:	2300      	movs	r3, #0
 8003b2a:	623b      	str	r3, [r7, #32]
 8003b2c:	e00f      	b.n	8003b4e <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8003b2e:	69ba      	ldr	r2, [r7, #24]
 8003b30:	6a3b      	ldr	r3, [r7, #32]
 8003b32:	4413      	add	r3, r2
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	461a      	mov	r2, r3
 8003b38:	6a3b      	ldr	r3, [r7, #32]
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	00db      	lsls	r3, r3, #3
 8003b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b42:	69fa      	ldr	r2, [r7, #28]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8003b48:	6a3b      	ldr	r3, [r7, #32]
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	623b      	str	r3, [r7, #32]
 8003b4e:	6a3a      	ldr	r2, [r7, #32]
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d3eb      	bcc.n	8003b2e <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	69fa      	ldr	r2, [r7, #28]
 8003b5c:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8003b5e:	683a      	ldr	r2, [r7, #0]
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 8003b66:	69ba      	ldr	r2, [r7, #24]
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8003b6e:	e028      	b.n	8003bc2 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8003b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b72:	2b04      	cmp	r3, #4
 8003b74:	bf28      	it	cs
 8003b76:	2304      	movcs	r3, #4
 8003b78:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8003b7e:	2300      	movs	r3, #0
 8003b80:	623b      	str	r3, [r7, #32]
 8003b82:	e00e      	b.n	8003ba2 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	6a3b      	ldr	r3, [r7, #32]
 8003b88:	4413      	add	r3, r2
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	6a3b      	ldr	r3, [r7, #32]
 8003b90:	00db      	lsls	r3, r3, #3
 8003b92:	fa02 f303 	lsl.w	r3, r2, r3
 8003b96:	69fa      	ldr	r2, [r7, #28]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8003b9c:	6a3b      	ldr	r3, [r7, #32]
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	623b      	str	r3, [r7, #32]
 8003ba2:	6a3a      	ldr	r2, [r7, #32]
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d3ec      	bcc.n	8003b84 <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	69fa      	ldr	r2, [r7, #28]
 8003bb0:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8003bb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 8003bba:	69ba      	ldr	r2, [r7, #24]
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1d3      	bne.n	8003b70 <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8003bd0:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	9300      	str	r3, [sp, #0]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	68b9      	ldr	r1, [r7, #8]
 8003be2:	f7ff f991 	bl	8002f08 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2200      	movs	r2, #0
 8003bea:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3728      	adds	r7, #40	; 0x28
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 8003bf6:	b480      	push	{r7}
 8003bf8:	b083      	sub	sp, #12
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
 8003bfe:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	7c1b      	ldrb	r3, [r3, #16]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d101      	bne.n	8003c0c <HAL_DSI_SetLowPowerRXFilter+0x16>
 8003c08:	2302      	movs	r3, #2
 8003c0a:	e01b      	b.n	8003c44 <HAL_DSI_SetLowPowerRXFilter+0x4e>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8003c22:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	065a      	lsls	r2, r3, #25
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	430a      	orrs	r2, r1
 8003c38:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b087      	sub	sp, #28
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c5e:	e166      	b.n	8003f2e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	2101      	movs	r1, #1
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	fa01 f303 	lsl.w	r3, r1, r3
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	f000 8158 	beq.w	8003f28 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f003 0303 	and.w	r3, r3, #3
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d005      	beq.n	8003c90 <HAL_GPIO_Init+0x40>
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f003 0303 	and.w	r3, r3, #3
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d130      	bne.n	8003cf2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	2203      	movs	r2, #3
 8003c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca0:	43db      	mvns	r3, r3
 8003ca2:	693a      	ldr	r2, [r7, #16]
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	68da      	ldr	r2, [r3, #12]
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	693a      	ldr	r2, [r7, #16]
 8003cbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	fa02 f303 	lsl.w	r3, r2, r3
 8003cce:	43db      	mvns	r3, r3
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	091b      	lsrs	r3, r3, #4
 8003cdc:	f003 0201 	and.w	r2, r3, #1
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce6:	693a      	ldr	r2, [r7, #16]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f003 0303 	and.w	r3, r3, #3
 8003cfa:	2b03      	cmp	r3, #3
 8003cfc:	d017      	beq.n	8003d2e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	005b      	lsls	r3, r3, #1
 8003d08:	2203      	movs	r2, #3
 8003d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0e:	43db      	mvns	r3, r3
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	4013      	ands	r3, r2
 8003d14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	689a      	ldr	r2, [r3, #8]
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	005b      	lsls	r3, r3, #1
 8003d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d22:	693a      	ldr	r2, [r7, #16]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f003 0303 	and.w	r3, r3, #3
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d123      	bne.n	8003d82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	08da      	lsrs	r2, r3, #3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	3208      	adds	r2, #8
 8003d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	f003 0307 	and.w	r3, r3, #7
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	220f      	movs	r2, #15
 8003d52:	fa02 f303 	lsl.w	r3, r2, r3
 8003d56:	43db      	mvns	r3, r3
 8003d58:	693a      	ldr	r2, [r7, #16]
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	691a      	ldr	r2, [r3, #16]
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	f003 0307 	and.w	r3, r3, #7
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6e:	693a      	ldr	r2, [r7, #16]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	08da      	lsrs	r2, r3, #3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	3208      	adds	r2, #8
 8003d7c:	6939      	ldr	r1, [r7, #16]
 8003d7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	005b      	lsls	r3, r3, #1
 8003d8c:	2203      	movs	r2, #3
 8003d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d92:	43db      	mvns	r3, r3
 8003d94:	693a      	ldr	r2, [r7, #16]
 8003d96:	4013      	ands	r3, r2
 8003d98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f003 0203 	and.w	r2, r3, #3
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	005b      	lsls	r3, r3, #1
 8003da6:	fa02 f303 	lsl.w	r3, r2, r3
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	f000 80b2 	beq.w	8003f28 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dc4:	4b61      	ldr	r3, [pc, #388]	; (8003f4c <HAL_GPIO_Init+0x2fc>)
 8003dc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dc8:	4a60      	ldr	r2, [pc, #384]	; (8003f4c <HAL_GPIO_Init+0x2fc>)
 8003dca:	f043 0301 	orr.w	r3, r3, #1
 8003dce:	6613      	str	r3, [r2, #96]	; 0x60
 8003dd0:	4b5e      	ldr	r3, [pc, #376]	; (8003f4c <HAL_GPIO_Init+0x2fc>)
 8003dd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	60bb      	str	r3, [r7, #8]
 8003dda:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003ddc:	4a5c      	ldr	r2, [pc, #368]	; (8003f50 <HAL_GPIO_Init+0x300>)
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	089b      	lsrs	r3, r3, #2
 8003de2:	3302      	adds	r3, #2
 8003de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003de8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	f003 0303 	and.w	r3, r3, #3
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	220f      	movs	r2, #15
 8003df4:	fa02 f303 	lsl.w	r3, r2, r3
 8003df8:	43db      	mvns	r3, r3
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003e06:	d02b      	beq.n	8003e60 <HAL_GPIO_Init+0x210>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a52      	ldr	r2, [pc, #328]	; (8003f54 <HAL_GPIO_Init+0x304>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d025      	beq.n	8003e5c <HAL_GPIO_Init+0x20c>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a51      	ldr	r2, [pc, #324]	; (8003f58 <HAL_GPIO_Init+0x308>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d01f      	beq.n	8003e58 <HAL_GPIO_Init+0x208>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4a50      	ldr	r2, [pc, #320]	; (8003f5c <HAL_GPIO_Init+0x30c>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d019      	beq.n	8003e54 <HAL_GPIO_Init+0x204>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	4a4f      	ldr	r2, [pc, #316]	; (8003f60 <HAL_GPIO_Init+0x310>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d013      	beq.n	8003e50 <HAL_GPIO_Init+0x200>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4a4e      	ldr	r2, [pc, #312]	; (8003f64 <HAL_GPIO_Init+0x314>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d00d      	beq.n	8003e4c <HAL_GPIO_Init+0x1fc>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a4d      	ldr	r2, [pc, #308]	; (8003f68 <HAL_GPIO_Init+0x318>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d007      	beq.n	8003e48 <HAL_GPIO_Init+0x1f8>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a4c      	ldr	r2, [pc, #304]	; (8003f6c <HAL_GPIO_Init+0x31c>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d101      	bne.n	8003e44 <HAL_GPIO_Init+0x1f4>
 8003e40:	2307      	movs	r3, #7
 8003e42:	e00e      	b.n	8003e62 <HAL_GPIO_Init+0x212>
 8003e44:	2308      	movs	r3, #8
 8003e46:	e00c      	b.n	8003e62 <HAL_GPIO_Init+0x212>
 8003e48:	2306      	movs	r3, #6
 8003e4a:	e00a      	b.n	8003e62 <HAL_GPIO_Init+0x212>
 8003e4c:	2305      	movs	r3, #5
 8003e4e:	e008      	b.n	8003e62 <HAL_GPIO_Init+0x212>
 8003e50:	2304      	movs	r3, #4
 8003e52:	e006      	b.n	8003e62 <HAL_GPIO_Init+0x212>
 8003e54:	2303      	movs	r3, #3
 8003e56:	e004      	b.n	8003e62 <HAL_GPIO_Init+0x212>
 8003e58:	2302      	movs	r3, #2
 8003e5a:	e002      	b.n	8003e62 <HAL_GPIO_Init+0x212>
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e000      	b.n	8003e62 <HAL_GPIO_Init+0x212>
 8003e60:	2300      	movs	r3, #0
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	f002 0203 	and.w	r2, r2, #3
 8003e68:	0092      	lsls	r2, r2, #2
 8003e6a:	4093      	lsls	r3, r2
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003e72:	4937      	ldr	r1, [pc, #220]	; (8003f50 <HAL_GPIO_Init+0x300>)
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	089b      	lsrs	r3, r3, #2
 8003e78:	3302      	adds	r3, #2
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e80:	4b3b      	ldr	r3, [pc, #236]	; (8003f70 <HAL_GPIO_Init+0x320>)
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	43db      	mvns	r3, r3
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d003      	beq.n	8003ea4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003e9c:	693a      	ldr	r2, [r7, #16]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ea4:	4a32      	ldr	r2, [pc, #200]	; (8003f70 <HAL_GPIO_Init+0x320>)
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003eaa:	4b31      	ldr	r3, [pc, #196]	; (8003f70 <HAL_GPIO_Init+0x320>)
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	43db      	mvns	r3, r3
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d003      	beq.n	8003ece <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003ece:	4a28      	ldr	r2, [pc, #160]	; (8003f70 <HAL_GPIO_Init+0x320>)
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003ed4:	4b26      	ldr	r3, [pc, #152]	; (8003f70 <HAL_GPIO_Init+0x320>)
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	43db      	mvns	r3, r3
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d003      	beq.n	8003ef8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ef8:	4a1d      	ldr	r2, [pc, #116]	; (8003f70 <HAL_GPIO_Init+0x320>)
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003efe:	4b1c      	ldr	r3, [pc, #112]	; (8003f70 <HAL_GPIO_Init+0x320>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	43db      	mvns	r3, r3
 8003f08:	693a      	ldr	r2, [r7, #16]
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d003      	beq.n	8003f22 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003f22:	4a13      	ldr	r2, [pc, #76]	; (8003f70 <HAL_GPIO_Init+0x320>)
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	fa22 f303 	lsr.w	r3, r2, r3
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	f47f ae91 	bne.w	8003c60 <HAL_GPIO_Init+0x10>
  }
}
 8003f3e:	bf00      	nop
 8003f40:	bf00      	nop
 8003f42:	371c      	adds	r7, #28
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr
 8003f4c:	40021000 	.word	0x40021000
 8003f50:	40010000 	.word	0x40010000
 8003f54:	48000400 	.word	0x48000400
 8003f58:	48000800 	.word	0x48000800
 8003f5c:	48000c00 	.word	0x48000c00
 8003f60:	48001000 	.word	0x48001000
 8003f64:	48001400 	.word	0x48001400
 8003f68:	48001800 	.word	0x48001800
 8003f6c:	48001c00 	.word	0x48001c00
 8003f70:	40010400 	.word	0x40010400

08003f74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b085      	sub	sp, #20
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	691a      	ldr	r2, [r3, #16]
 8003f84:	887b      	ldrh	r3, [r7, #2]
 8003f86:	4013      	ands	r3, r2
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d002      	beq.n	8003f92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	73fb      	strb	r3, [r7, #15]
 8003f90:	e001      	b.n	8003f96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f92:	2300      	movs	r3, #0
 8003f94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3714      	adds	r7, #20
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	460b      	mov	r3, r1
 8003fae:	807b      	strh	r3, [r7, #2]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003fb4:	787b      	ldrb	r3, [r7, #1]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d003      	beq.n	8003fc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003fba:	887a      	ldrh	r2, [r7, #2]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003fc0:	e002      	b.n	8003fc8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003fc2:	887a      	ldrh	r2, [r7, #2]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	4603      	mov	r3, r0
 8003fdc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003fde:	4b08      	ldr	r3, [pc, #32]	; (8004000 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fe0:	695a      	ldr	r2, [r3, #20]
 8003fe2:	88fb      	ldrh	r3, [r7, #6]
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d006      	beq.n	8003ff8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003fea:	4a05      	ldr	r2, [pc, #20]	; (8004000 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fec:	88fb      	ldrh	r3, [r7, #6]
 8003fee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ff0:	88fb      	ldrh	r3, [r7, #6]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7fd fbb4 	bl	8001760 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ff8:	bf00      	nop
 8003ffa:	3708      	adds	r7, #8
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	40010400 	.word	0x40010400

08004004 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d101      	bne.n	8004016 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e08d      	b.n	8004132 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800401c:	b2db      	uxtb	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d106      	bne.n	8004030 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f7fe f9ec 	bl	8002408 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2224      	movs	r2, #36	; 0x24
 8004034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f022 0201 	bic.w	r2, r2, #1
 8004046:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685a      	ldr	r2, [r3, #4]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004054:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	689a      	ldr	r2, [r3, #8]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004064:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d107      	bne.n	800407e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	689a      	ldr	r2, [r3, #8]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800407a:	609a      	str	r2, [r3, #8]
 800407c:	e006      	b.n	800408c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	689a      	ldr	r2, [r3, #8]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800408a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	2b02      	cmp	r3, #2
 8004092:	d108      	bne.n	80040a6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	685a      	ldr	r2, [r3, #4]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040a2:	605a      	str	r2, [r3, #4]
 80040a4:	e007      	b.n	80040b6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	685a      	ldr	r2, [r3, #4]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	6812      	ldr	r2, [r2, #0]
 80040c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80040c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68da      	ldr	r2, [r3, #12]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	691a      	ldr	r2, [r3, #16]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	430a      	orrs	r2, r1
 80040f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	69d9      	ldr	r1, [r3, #28]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a1a      	ldr	r2, [r3, #32]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	430a      	orrs	r2, r1
 8004102:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f042 0201 	orr.w	r2, r2, #1
 8004112:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2220      	movs	r2, #32
 800411e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3708      	adds	r7, #8
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}

0800413a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800413a:	b480      	push	{r7}
 800413c:	b083      	sub	sp, #12
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
 8004142:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800414a:	b2db      	uxtb	r3, r3
 800414c:	2b20      	cmp	r3, #32
 800414e:	d138      	bne.n	80041c2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004156:	2b01      	cmp	r3, #1
 8004158:	d101      	bne.n	800415e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800415a:	2302      	movs	r3, #2
 800415c:	e032      	b.n	80041c4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2201      	movs	r2, #1
 8004162:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2224      	movs	r2, #36	; 0x24
 800416a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f022 0201 	bic.w	r2, r2, #1
 800417c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800418c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	6819      	ldr	r1, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	683a      	ldr	r2, [r7, #0]
 800419a:	430a      	orrs	r2, r1
 800419c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f042 0201 	orr.w	r2, r2, #1
 80041ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2220      	movs	r2, #32
 80041b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80041be:	2300      	movs	r3, #0
 80041c0:	e000      	b.n	80041c4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80041c2:	2302      	movs	r3, #2
  }
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b085      	sub	sp, #20
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	2b20      	cmp	r3, #32
 80041e4:	d139      	bne.n	800425a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d101      	bne.n	80041f4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80041f0:	2302      	movs	r3, #2
 80041f2:	e033      	b.n	800425c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2224      	movs	r2, #36	; 0x24
 8004200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f022 0201 	bic.w	r2, r2, #1
 8004212:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004222:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	021b      	lsls	r3, r3, #8
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	4313      	orrs	r3, r2
 800422c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f042 0201 	orr.w	r2, r2, #1
 8004244:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2220      	movs	r2, #32
 800424a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004256:	2300      	movs	r3, #0
 8004258:	e000      	b.n	800425c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800425a:	2302      	movs	r3, #2
  }
}
 800425c:	4618      	mov	r0, r3
 800425e:	3714      	adds	r7, #20
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d101      	bne.n	800427a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e0bf      	b.n	80043fa <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004280:	b2db      	uxtb	r3, r3
 8004282:	2b00      	cmp	r3, #0
 8004284:	d106      	bne.n	8004294 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f7fe f95c 	bl	800254c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2202      	movs	r2, #2
 8004298:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	699a      	ldr	r2, [r3, #24]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80042aa:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	6999      	ldr	r1, [r3, #24]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685a      	ldr	r2, [r3, #4]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80042c0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	430a      	orrs	r2, r1
 80042ce:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	6899      	ldr	r1, [r3, #8]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	4b4a      	ldr	r3, [pc, #296]	; (8004404 <HAL_LTDC_Init+0x19c>)
 80042dc:	400b      	ands	r3, r1
 80042de:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	695b      	ldr	r3, [r3, #20]
 80042e4:	041b      	lsls	r3, r3, #16
 80042e6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	6899      	ldr	r1, [r3, #8]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	699a      	ldr	r2, [r3, #24]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	431a      	orrs	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	430a      	orrs	r2, r1
 80042fc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68d9      	ldr	r1, [r3, #12]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	4b3e      	ldr	r3, [pc, #248]	; (8004404 <HAL_LTDC_Init+0x19c>)
 800430a:	400b      	ands	r3, r1
 800430c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	69db      	ldr	r3, [r3, #28]
 8004312:	041b      	lsls	r3, r3, #16
 8004314:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68d9      	ldr	r1, [r3, #12]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a1a      	ldr	r2, [r3, #32]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	431a      	orrs	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	430a      	orrs	r2, r1
 800432a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	6919      	ldr	r1, [r3, #16]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	4b33      	ldr	r3, [pc, #204]	; (8004404 <HAL_LTDC_Init+0x19c>)
 8004338:	400b      	ands	r3, r1
 800433a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004340:	041b      	lsls	r3, r3, #16
 8004342:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	6919      	ldr	r1, [r3, #16]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	431a      	orrs	r2, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	430a      	orrs	r2, r1
 8004358:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	6959      	ldr	r1, [r3, #20]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	4b27      	ldr	r3, [pc, #156]	; (8004404 <HAL_LTDC_Init+0x19c>)
 8004366:	400b      	ands	r3, r1
 8004368:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436e:	041b      	lsls	r3, r3, #16
 8004370:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	6959      	ldr	r1, [r3, #20]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	431a      	orrs	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	430a      	orrs	r2, r1
 8004386:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800438e:	021b      	lsls	r3, r3, #8
 8004390:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004398:	041b      	lsls	r3, r3, #16
 800439a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80043aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80043b2:	68ba      	ldr	r2, [r7, #8]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80043be:	431a      	orrs	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	430a      	orrs	r2, r1
 80043c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f042 0206 	orr.w	r2, r2, #6
 80043d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	699a      	ldr	r2, [r3, #24]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f042 0201 	orr.w	r2, r2, #1
 80043e6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	f000f800 	.word	0xf000f800

08004408 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004408:	b5b0      	push	{r4, r5, r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800441a:	2b01      	cmp	r3, #1
 800441c:	d101      	bne.n	8004422 <HAL_LTDC_ConfigLayer+0x1a>
 800441e:	2302      	movs	r3, #2
 8004420:	e02c      	b.n	800447c <HAL_LTDC_ConfigLayer+0x74>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2202      	movs	r2, #2
 800442e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2134      	movs	r1, #52	; 0x34
 8004438:	fb01 f303 	mul.w	r3, r1, r3
 800443c:	4413      	add	r3, r2
 800443e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	4614      	mov	r4, r2
 8004446:	461d      	mov	r5, r3
 8004448:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800444a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800444c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800444e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004450:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004452:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004454:	682b      	ldr	r3, [r5, #0]
 8004456:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	68b9      	ldr	r1, [r7, #8]
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f000 f811 	bl	8004484 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2201      	movs	r2, #1
 8004468:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2201      	movs	r2, #1
 800446e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	3710      	adds	r7, #16
 8004480:	46bd      	mov	sp, r7
 8004482:	bdb0      	pop	{r4, r5, r7, pc}

08004484 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004484:	b480      	push	{r7}
 8004486:	b089      	sub	sp, #36	; 0x24
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	685a      	ldr	r2, [r3, #4]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	0c1b      	lsrs	r3, r3, #16
 800449c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044a0:	4413      	add	r3, r2
 80044a2:	041b      	lsls	r3, r3, #16
 80044a4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	461a      	mov	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	01db      	lsls	r3, r3, #7
 80044b0:	4413      	add	r3, r2
 80044b2:	3384      	adds	r3, #132	; 0x84
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	6812      	ldr	r2, [r2, #0]
 80044ba:	4611      	mov	r1, r2
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	01d2      	lsls	r2, r2, #7
 80044c0:	440a      	add	r2, r1
 80044c2:	3284      	adds	r2, #132	; 0x84
 80044c4:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 80044c8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	0c1b      	lsrs	r3, r3, #16
 80044d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80044da:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80044dc:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4619      	mov	r1, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	01db      	lsls	r3, r3, #7
 80044e8:	440b      	add	r3, r1
 80044ea:	3384      	adds	r3, #132	; 0x84
 80044ec:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80044f2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	68da      	ldr	r2, [r3, #12]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004502:	4413      	add	r3, r2
 8004504:	041b      	lsls	r3, r3, #16
 8004506:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	461a      	mov	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	01db      	lsls	r3, r3, #7
 8004512:	4413      	add	r3, r2
 8004514:	3384      	adds	r3, #132	; 0x84
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	6812      	ldr	r2, [r2, #0]
 800451c:	4611      	mov	r1, r2
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	01d2      	lsls	r2, r2, #7
 8004522:	440a      	add	r2, r1
 8004524:	3284      	adds	r2, #132	; 0x84
 8004526:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 800452a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	689a      	ldr	r2, [r3, #8]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800453a:	4413      	add	r3, r2
 800453c:	1c5a      	adds	r2, r3, #1
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4619      	mov	r1, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	01db      	lsls	r3, r3, #7
 8004548:	440b      	add	r3, r1
 800454a:	3384      	adds	r3, #132	; 0x84
 800454c:	4619      	mov	r1, r3
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	4313      	orrs	r3, r2
 8004552:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	461a      	mov	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	01db      	lsls	r3, r3, #7
 800455e:	4413      	add	r3, r2
 8004560:	3384      	adds	r3, #132	; 0x84
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	6812      	ldr	r2, [r2, #0]
 8004568:	4611      	mov	r1, r2
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	01d2      	lsls	r2, r2, #7
 800456e:	440a      	add	r2, r1
 8004570:	3284      	adds	r2, #132	; 0x84
 8004572:	f023 0307 	bic.w	r3, r3, #7
 8004576:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	461a      	mov	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	01db      	lsls	r3, r3, #7
 8004582:	4413      	add	r3, r2
 8004584:	3384      	adds	r3, #132	; 0x84
 8004586:	461a      	mov	r2, r3
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004594:	021b      	lsls	r3, r3, #8
 8004596:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800459e:	041b      	lsls	r3, r3, #16
 80045a0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	061b      	lsls	r3, r3, #24
 80045a8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	461a      	mov	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	01db      	lsls	r3, r3, #7
 80045b4:	4413      	add	r3, r2
 80045b6:	3384      	adds	r3, #132	; 0x84
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	461a      	mov	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	01db      	lsls	r3, r3, #7
 80045c4:	4413      	add	r3, r2
 80045c6:	3384      	adds	r3, #132	; 0x84
 80045c8:	461a      	mov	r2, r3
 80045ca:	2300      	movs	r3, #0
 80045cc:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80045d4:	461a      	mov	r2, r3
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	431a      	orrs	r2, r3
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	431a      	orrs	r2, r3
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4619      	mov	r1, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	01db      	lsls	r3, r3, #7
 80045e8:	440b      	add	r3, r1
 80045ea:	3384      	adds	r3, #132	; 0x84
 80045ec:	4619      	mov	r1, r3
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	461a      	mov	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	01db      	lsls	r3, r3, #7
 80045fe:	4413      	add	r3, r2
 8004600:	3384      	adds	r3, #132	; 0x84
 8004602:	695b      	ldr	r3, [r3, #20]
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	6812      	ldr	r2, [r2, #0]
 8004608:	4611      	mov	r1, r2
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	01d2      	lsls	r2, r2, #7
 800460e:	440a      	add	r2, r1
 8004610:	3284      	adds	r2, #132	; 0x84
 8004612:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004616:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	461a      	mov	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	01db      	lsls	r3, r3, #7
 8004622:	4413      	add	r3, r2
 8004624:	3384      	adds	r3, #132	; 0x84
 8004626:	461a      	mov	r2, r3
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	695b      	ldr	r3, [r3, #20]
 800462c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	461a      	mov	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	01db      	lsls	r3, r3, #7
 8004638:	4413      	add	r3, r2
 800463a:	3384      	adds	r3, #132	; 0x84
 800463c:	69db      	ldr	r3, [r3, #28]
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	6812      	ldr	r2, [r2, #0]
 8004642:	4611      	mov	r1, r2
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	01d2      	lsls	r2, r2, #7
 8004648:	440a      	add	r2, r1
 800464a:	3284      	adds	r2, #132	; 0x84
 800464c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004650:	f023 0307 	bic.w	r3, r3, #7
 8004654:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	69da      	ldr	r2, [r3, #28]
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	68f9      	ldr	r1, [r7, #12]
 8004660:	6809      	ldr	r1, [r1, #0]
 8004662:	4608      	mov	r0, r1
 8004664:	6879      	ldr	r1, [r7, #4]
 8004666:	01c9      	lsls	r1, r1, #7
 8004668:	4401      	add	r1, r0
 800466a:	3184      	adds	r1, #132	; 0x84
 800466c:	4313      	orrs	r3, r2
 800466e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	461a      	mov	r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	01db      	lsls	r3, r3, #7
 800467a:	4413      	add	r3, r2
 800467c:	3384      	adds	r3, #132	; 0x84
 800467e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	461a      	mov	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	01db      	lsls	r3, r3, #7
 800468a:	4413      	add	r3, r2
 800468c:	3384      	adds	r3, #132	; 0x84
 800468e:	461a      	mov	r2, r3
 8004690:	2300      	movs	r3, #0
 8004692:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	461a      	mov	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	01db      	lsls	r3, r3, #7
 800469e:	4413      	add	r3, r2
 80046a0:	3384      	adds	r3, #132	; 0x84
 80046a2:	461a      	mov	r2, r3
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a8:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d102      	bne.n	80046b8 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80046b2:	2304      	movs	r3, #4
 80046b4:	61fb      	str	r3, [r7, #28]
 80046b6:	e01b      	b.n	80046f0 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d102      	bne.n	80046c6 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80046c0:	2303      	movs	r3, #3
 80046c2:	61fb      	str	r3, [r7, #28]
 80046c4:	e014      	b.n	80046f0 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	2b04      	cmp	r3, #4
 80046cc:	d00b      	beq.n	80046e6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d007      	beq.n	80046e6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80046da:	2b03      	cmp	r3, #3
 80046dc:	d003      	beq.n	80046e6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80046e2:	2b07      	cmp	r3, #7
 80046e4:	d102      	bne.n	80046ec <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80046e6:	2302      	movs	r3, #2
 80046e8:	61fb      	str	r3, [r7, #28]
 80046ea:	e001      	b.n	80046f0 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80046ec:	2301      	movs	r3, #1
 80046ee:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	461a      	mov	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	01db      	lsls	r3, r3, #7
 80046fa:	4413      	add	r3, r2
 80046fc:	3384      	adds	r3, #132	; 0x84
 80046fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004700:	68fa      	ldr	r2, [r7, #12]
 8004702:	6812      	ldr	r2, [r2, #0]
 8004704:	4611      	mov	r1, r2
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	01d2      	lsls	r2, r2, #7
 800470a:	440a      	add	r2, r1
 800470c:	3284      	adds	r2, #132	; 0x84
 800470e:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004712:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004718:	69fa      	ldr	r2, [r7, #28]
 800471a:	fb02 f303 	mul.w	r3, r2, r3
 800471e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	6859      	ldr	r1, [r3, #4]
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	1acb      	subs	r3, r1, r3
 800472a:	69f9      	ldr	r1, [r7, #28]
 800472c:	fb01 f303 	mul.w	r3, r1, r3
 8004730:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004732:	68f9      	ldr	r1, [r7, #12]
 8004734:	6809      	ldr	r1, [r1, #0]
 8004736:	4608      	mov	r0, r1
 8004738:	6879      	ldr	r1, [r7, #4]
 800473a:	01c9      	lsls	r1, r1, #7
 800473c:	4401      	add	r1, r0
 800473e:	3184      	adds	r1, #132	; 0x84
 8004740:	4313      	orrs	r3, r2
 8004742:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	461a      	mov	r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	01db      	lsls	r3, r3, #7
 800474e:	4413      	add	r3, r2
 8004750:	3384      	adds	r3, #132	; 0x84
 8004752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	6812      	ldr	r2, [r2, #0]
 8004758:	4611      	mov	r1, r2
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	01d2      	lsls	r2, r2, #7
 800475e:	440a      	add	r2, r1
 8004760:	3284      	adds	r2, #132	; 0x84
 8004762:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004766:	f023 0307 	bic.w	r3, r3, #7
 800476a:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	461a      	mov	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	01db      	lsls	r3, r3, #7
 8004776:	4413      	add	r3, r2
 8004778:	3384      	adds	r3, #132	; 0x84
 800477a:	461a      	mov	r2, r3
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004780:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	461a      	mov	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	01db      	lsls	r3, r3, #7
 800478c:	4413      	add	r3, r2
 800478e:	3384      	adds	r3, #132	; 0x84
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	6812      	ldr	r2, [r2, #0]
 8004796:	4611      	mov	r1, r2
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	01d2      	lsls	r2, r2, #7
 800479c:	440a      	add	r2, r1
 800479e:	3284      	adds	r2, #132	; 0x84
 80047a0:	f043 0301 	orr.w	r3, r3, #1
 80047a4:	6013      	str	r3, [r2, #0]
}
 80047a6:	bf00      	nop
 80047a8:	3724      	adds	r7, #36	; 0x24
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
	...

080047b4 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b086      	sub	sp, #24
 80047b8:	af02      	add	r7, sp, #8
 80047ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047bc:	2300      	movs	r3, #0
 80047be:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80047c0:	f7fe fa02 	bl	8002bc8 <HAL_GetTick>
 80047c4:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d102      	bne.n	80047d2 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	73fb      	strb	r3, [r7, #15]
 80047d0:	e092      	b.n	80048f8 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047dc:	2b00      	cmp	r3, #0
 80047de:	f040 808b 	bne.w	80048f8 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f7fd fef6 	bl	80025d4 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 80047e8:	f241 3188 	movw	r1, #5000	; 0x1388
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f000 f88b 	bl	8004908 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	689a      	ldr	r2, [r3, #8]
 80047f8:	4b42      	ldr	r3, [pc, #264]	; (8004904 <HAL_OSPI_Init+0x150>)
 80047fa:	4013      	ands	r3, r2
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	68d1      	ldr	r1, [r2, #12]
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	6912      	ldr	r2, [r2, #16]
 8004804:	3a01      	subs	r2, #1
 8004806:	0412      	lsls	r2, r2, #16
 8004808:	4311      	orrs	r1, r2
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	6952      	ldr	r2, [r2, #20]
 800480e:	3a01      	subs	r2, #1
 8004810:	0212      	lsls	r2, r2, #8
 8004812:	4311      	orrs	r1, r2
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004818:	4311      	orrs	r1, r2
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	69d2      	ldr	r2, [r2, #28]
 800481e:	4311      	orrs	r1, r2
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	6812      	ldr	r2, [r2, #0]
 8004824:	430b      	orrs	r3, r1
 8004826:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	0412      	lsls	r2, r2, #16
 8004832:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	3b01      	subs	r3, #1
 8004844:	021a      	lsls	r2, r3, #8
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	430a      	orrs	r2, r1
 800484c:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004852:	9300      	str	r3, [sp, #0]
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	2200      	movs	r2, #0
 8004858:	2120      	movs	r1, #32
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 fb98 	bl	8004f90 <OSPI_WaitFlagStateUntilTimeout>
 8004860:	4603      	mov	r3, r0
 8004862:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004864:	7bfb      	ldrb	r3, [r7, #15]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d146      	bne.n	80048f8 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a1b      	ldr	r3, [r3, #32]
 8004878:	1e5a      	subs	r2, r3, #1
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	430a      	orrs	r2, r1
 8004880:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	689a      	ldr	r2, [r3, #8]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	430a      	orrs	r2, r1
 8004896:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80048a0:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ac:	431a      	orrs	r2, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	430a      	orrs	r2, r1
 80048b4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f042 0201 	orr.w	r2, r2, #1
 80048c6:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d107      	bne.n	80048e0 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	689a      	ldr	r2, [r3, #8]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f042 0202 	orr.w	r2, r2, #2
 80048de:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048e8:	d103      	bne.n	80048f2 <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2201      	movs	r2, #1
 80048ee:	645a      	str	r2, [r3, #68]	; 0x44
 80048f0:	e002      	b.n	80048f8 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2202      	movs	r2, #2
 80048f6:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 80048f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3710      	adds	r7, #16
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	f8e0f8f4 	.word	0xf8e0f8f4

08004908 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	683a      	ldr	r2, [r7, #0]
 8004916:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	370c      	adds	r7, #12
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
	...

08004928 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b092      	sub	sp, #72	; 0x48
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004934:	2300      	movs	r3, #0
 8004936:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 800493a:	2300      	movs	r3, #0
 800493c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a08      	ldr	r2, [pc, #32]	; (8004968 <HAL_OSPIM_Config+0x40>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d105      	bne.n	8004956 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 800494a:	2300      	movs	r3, #0
 800494c:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 800494e:	2301      	movs	r3, #1
 8004950:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8004954:	e004      	b.n	8004960 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8004956:	2301      	movs	r3, #1
 8004958:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 800495a:	2300      	movs	r3, #0
 800495c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8004960:	2300      	movs	r3, #0
 8004962:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8004966:	e01f      	b.n	80049a8 <HAL_OSPIM_Config+0x80>
 8004968:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 800496c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004970:	3301      	adds	r3, #1
 8004972:	b2d8      	uxtb	r0, r3
 8004974:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8004978:	f107 0114 	add.w	r1, r7, #20
 800497c:	4613      	mov	r3, r2
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	4413      	add	r3, r2
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	440b      	add	r3, r1
 8004986:	4619      	mov	r1, r3
 8004988:	f000 fb3a 	bl	8005000 <OSPIM_GetConfig>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d005      	beq.n	800499e <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2208      	movs	r2, #8
 800499c:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800499e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80049a2:	3301      	adds	r3, #1
 80049a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80049a8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d9dd      	bls.n	800496c <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 80049b0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	f040 82de 	bne.w	8004f76 <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 80049ba:	4bc6      	ldr	r3, [pc, #792]	; (8004cd4 <HAL_OSPIM_Config+0x3ac>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00b      	beq.n	80049de <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80049c6:	4bc3      	ldr	r3, [pc, #780]	; (8004cd4 <HAL_OSPIM_Config+0x3ac>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4ac2      	ldr	r2, [pc, #776]	; (8004cd4 <HAL_OSPIM_Config+0x3ac>)
 80049cc:	f023 0301 	bic.w	r3, r3, #1
 80049d0:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 80049d2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80049d6:	f043 0301 	orr.w	r3, r3, #1
 80049da:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 80049de:	4bbe      	ldr	r3, [pc, #760]	; (8004cd8 <HAL_OSPIM_Config+0x3b0>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0301 	and.w	r3, r3, #1
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00b      	beq.n	8004a02 <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80049ea:	4bbb      	ldr	r3, [pc, #748]	; (8004cd8 <HAL_OSPIM_Config+0x3b0>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4aba      	ldr	r2, [pc, #744]	; (8004cd8 <HAL_OSPIM_Config+0x3b0>)
 80049f0:	f023 0301 	bic.w	r3, r3, #1
 80049f4:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 80049f6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80049fa:	f043 0302 	orr.w	r3, r3, #2
 80049fe:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8004a02:	49b6      	ldr	r1, [pc, #728]	; (8004cdc <HAL_OSPIM_Config+0x3b4>)
 8004a04:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a06:	4613      	mov	r3, r2
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	4413      	add	r3, r2
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	3348      	adds	r3, #72	; 0x48
 8004a10:	443b      	add	r3, r7
 8004a12:	3b2c      	subs	r3, #44	; 0x2c
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	3b01      	subs	r3, #1
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	440b      	add	r3, r1
 8004a1c:	6859      	ldr	r1, [r3, #4]
 8004a1e:	48af      	ldr	r0, [pc, #700]	; (8004cdc <HAL_OSPIM_Config+0x3b4>)
 8004a20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a22:	4613      	mov	r3, r2
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	4413      	add	r3, r2
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	3348      	adds	r3, #72	; 0x48
 8004a2c:	443b      	add	r3, r7
 8004a2e:	3b2c      	subs	r3, #44	; 0x2c
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	3b01      	subs	r3, #1
 8004a34:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	4403      	add	r3, r0
 8004a3c:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 8004a3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a40:	4613      	mov	r3, r2
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	4413      	add	r3, r2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	3348      	adds	r3, #72	; 0x48
 8004a4a:	443b      	add	r3, r7
 8004a4c:	3b34      	subs	r3, #52	; 0x34
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f000 80a1 	beq.w	8004b98 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8004a56:	49a1      	ldr	r1, [pc, #644]	; (8004cdc <HAL_OSPIM_Config+0x3b4>)
 8004a58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	4413      	add	r3, r2
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	3348      	adds	r3, #72	; 0x48
 8004a64:	443b      	add	r3, r7
 8004a66:	3b34      	subs	r3, #52	; 0x34
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	3b01      	subs	r3, #1
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	440b      	add	r3, r1
 8004a70:	6859      	ldr	r1, [r3, #4]
 8004a72:	489a      	ldr	r0, [pc, #616]	; (8004cdc <HAL_OSPIM_Config+0x3b4>)
 8004a74:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a76:	4613      	mov	r3, r2
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	4413      	add	r3, r2
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	3348      	adds	r3, #72	; 0x48
 8004a80:	443b      	add	r3, r7
 8004a82:	3b34      	subs	r3, #52	; 0x34
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	3b01      	subs	r3, #1
 8004a88:	f021 0201 	bic.w	r2, r1, #1
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	4403      	add	r3, r0
 8004a90:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8004a92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a94:	4613      	mov	r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	4413      	add	r3, r2
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	3348      	adds	r3, #72	; 0x48
 8004a9e:	443b      	add	r3, r7
 8004aa0:	3b30      	subs	r3, #48	; 0x30
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d01d      	beq.n	8004ae4 <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8004aa8:	498c      	ldr	r1, [pc, #560]	; (8004cdc <HAL_OSPIM_Config+0x3b4>)
 8004aaa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004aac:	4613      	mov	r3, r2
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	4413      	add	r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	3348      	adds	r3, #72	; 0x48
 8004ab6:	443b      	add	r3, r7
 8004ab8:	3b30      	subs	r3, #48	; 0x30
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	3b01      	subs	r3, #1
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	440b      	add	r3, r1
 8004ac2:	6859      	ldr	r1, [r3, #4]
 8004ac4:	4885      	ldr	r0, [pc, #532]	; (8004cdc <HAL_OSPIM_Config+0x3b4>)
 8004ac6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ac8:	4613      	mov	r3, r2
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	4413      	add	r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	3348      	adds	r3, #72	; 0x48
 8004ad2:	443b      	add	r3, r7
 8004ad4:	3b30      	subs	r3, #48	; 0x30
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	f021 0210 	bic.w	r2, r1, #16
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	4403      	add	r3, r0
 8004ae2:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004ae4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	4413      	add	r3, r2
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	3348      	adds	r3, #72	; 0x48
 8004af0:	443b      	add	r3, r7
 8004af2:	3b28      	subs	r3, #40	; 0x28
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d021      	beq.n	8004b3e <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8004afa:	4978      	ldr	r1, [pc, #480]	; (8004cdc <HAL_OSPIM_Config+0x3b4>)
 8004afc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004afe:	4613      	mov	r3, r2
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	4413      	add	r3, r2
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	3348      	adds	r3, #72	; 0x48
 8004b08:	443b      	add	r3, r7
 8004b0a:	3b28      	subs	r3, #40	; 0x28
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	3b01      	subs	r3, #1
 8004b10:	f003 0301 	and.w	r3, r3, #1
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	440b      	add	r3, r1
 8004b18:	6859      	ldr	r1, [r3, #4]
 8004b1a:	4870      	ldr	r0, [pc, #448]	; (8004cdc <HAL_OSPIM_Config+0x3b4>)
 8004b1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b1e:	4613      	mov	r3, r2
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	4413      	add	r3, r2
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	3348      	adds	r3, #72	; 0x48
 8004b28:	443b      	add	r3, r7
 8004b2a:	3b28      	subs	r3, #40	; 0x28
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	f003 0301 	and.w	r3, r3, #1
 8004b34:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	4403      	add	r3, r0
 8004b3c:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004b3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b40:	4613      	mov	r3, r2
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	4413      	add	r3, r2
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	3348      	adds	r3, #72	; 0x48
 8004b4a:	443b      	add	r3, r7
 8004b4c:	3b24      	subs	r3, #36	; 0x24
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d021      	beq.n	8004b98 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8004b54:	4961      	ldr	r1, [pc, #388]	; (8004cdc <HAL_OSPIM_Config+0x3b4>)
 8004b56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b58:	4613      	mov	r3, r2
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	4413      	add	r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	3348      	adds	r3, #72	; 0x48
 8004b62:	443b      	add	r3, r7
 8004b64:	3b24      	subs	r3, #36	; 0x24
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	3b01      	subs	r3, #1
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	440b      	add	r3, r1
 8004b72:	6859      	ldr	r1, [r3, #4]
 8004b74:	4859      	ldr	r0, [pc, #356]	; (8004cdc <HAL_OSPIM_Config+0x3b4>)
 8004b76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b78:	4613      	mov	r3, r2
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	4413      	add	r3, r2
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	3348      	adds	r3, #72	; 0x48
 8004b82:	443b      	add	r3, r7
 8004b84:	3b24      	subs	r3, #36	; 0x24
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	4403      	add	r3, r0
 8004b96:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	6819      	ldr	r1, [r3, #0]
 8004b9c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	4413      	add	r3, r2
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	3348      	adds	r3, #72	; 0x48
 8004baa:	443b      	add	r3, r7
 8004bac:	3b34      	subs	r3, #52	; 0x34
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4299      	cmp	r1, r3
 8004bb2:	d038      	beq.n	8004c26 <HAL_OSPIM_Config+0x2fe>
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	6859      	ldr	r1, [r3, #4]
 8004bb8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	4413      	add	r3, r2
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	3348      	adds	r3, #72	; 0x48
 8004bc6:	443b      	add	r3, r7
 8004bc8:	3b30      	subs	r3, #48	; 0x30
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4299      	cmp	r1, r3
 8004bce:	d02a      	beq.n	8004c26 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	6899      	ldr	r1, [r3, #8]
 8004bd4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004bd8:	4613      	mov	r3, r2
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	4413      	add	r3, r2
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	3348      	adds	r3, #72	; 0x48
 8004be2:	443b      	add	r3, r7
 8004be4:	3b2c      	subs	r3, #44	; 0x2c
 8004be6:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8004be8:	4299      	cmp	r1, r3
 8004bea:	d01c      	beq.n	8004c26 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	68d9      	ldr	r1, [r3, #12]
 8004bf0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	4413      	add	r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	3348      	adds	r3, #72	; 0x48
 8004bfe:	443b      	add	r3, r7
 8004c00:	3b28      	subs	r3, #40	; 0x28
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4299      	cmp	r1, r3
 8004c06:	d00e      	beq.n	8004c26 <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	6919      	ldr	r1, [r3, #16]
 8004c0c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004c10:	4613      	mov	r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	4413      	add	r3, r2
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	3348      	adds	r3, #72	; 0x48
 8004c1a:	443b      	add	r3, r7
 8004c1c:	3b24      	subs	r3, #36	; 0x24
 8004c1e:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004c20:	4299      	cmp	r1, r3
 8004c22:	f040 80d3 	bne.w	8004dcc <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8004c26:	492d      	ldr	r1, [pc, #180]	; (8004cdc <HAL_OSPIM_Config+0x3b4>)
 8004c28:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	4413      	add	r3, r2
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	3348      	adds	r3, #72	; 0x48
 8004c36:	443b      	add	r3, r7
 8004c38:	3b34      	subs	r3, #52	; 0x34
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	3b01      	subs	r3, #1
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	440b      	add	r3, r1
 8004c42:	6859      	ldr	r1, [r3, #4]
 8004c44:	4825      	ldr	r0, [pc, #148]	; (8004cdc <HAL_OSPIM_Config+0x3b4>)
 8004c46:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004c4a:	4613      	mov	r3, r2
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	4413      	add	r3, r2
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	3348      	adds	r3, #72	; 0x48
 8004c54:	443b      	add	r3, r7
 8004c56:	3b34      	subs	r3, #52	; 0x34
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	f021 0201 	bic.w	r2, r1, #1
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	4403      	add	r3, r0
 8004c64:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8004c66:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	4413      	add	r3, r2
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	3348      	adds	r3, #72	; 0x48
 8004c74:	443b      	add	r3, r7
 8004c76:	3b30      	subs	r3, #48	; 0x30
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d01f      	beq.n	8004cbe <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8004c7e:	4917      	ldr	r1, [pc, #92]	; (8004cdc <HAL_OSPIM_Config+0x3b4>)
 8004c80:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004c84:	4613      	mov	r3, r2
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	4413      	add	r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	3348      	adds	r3, #72	; 0x48
 8004c8e:	443b      	add	r3, r7
 8004c90:	3b30      	subs	r3, #48	; 0x30
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	3b01      	subs	r3, #1
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	440b      	add	r3, r1
 8004c9a:	6859      	ldr	r1, [r3, #4]
 8004c9c:	480f      	ldr	r0, [pc, #60]	; (8004cdc <HAL_OSPIM_Config+0x3b4>)
 8004c9e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	4413      	add	r3, r2
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	3348      	adds	r3, #72	; 0x48
 8004cac:	443b      	add	r3, r7
 8004cae:	3b30      	subs	r3, #48	; 0x30
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	f021 0210 	bic.w	r2, r1, #16
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	4403      	add	r3, r0
 8004cbc:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8004cbe:	4907      	ldr	r1, [pc, #28]	; (8004cdc <HAL_OSPIM_Config+0x3b4>)
 8004cc0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	4413      	add	r3, r2
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	3348      	adds	r3, #72	; 0x48
 8004cce:	443b      	add	r3, r7
 8004cd0:	3b2c      	subs	r3, #44	; 0x2c
 8004cd2:	e005      	b.n	8004ce0 <HAL_OSPIM_Config+0x3b8>
 8004cd4:	a0001000 	.word	0xa0001000
 8004cd8:	a0001400 	.word	0xa0001400
 8004cdc:	50061c00 	.word	0x50061c00
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	440b      	add	r3, r1
 8004ce8:	6859      	ldr	r1, [r3, #4]
 8004cea:	48a6      	ldr	r0, [pc, #664]	; (8004f84 <HAL_OSPIM_Config+0x65c>)
 8004cec:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	4413      	add	r3, r2
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	3348      	adds	r3, #72	; 0x48
 8004cfa:	443b      	add	r3, r7
 8004cfc:	3b2c      	subs	r3, #44	; 0x2c
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	3b01      	subs	r3, #1
 8004d02:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	4403      	add	r3, r0
 8004d0a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004d0c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004d10:	4613      	mov	r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4413      	add	r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	3348      	adds	r3, #72	; 0x48
 8004d1a:	443b      	add	r3, r7
 8004d1c:	3b28      	subs	r3, #40	; 0x28
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d023      	beq.n	8004d6c <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004d24:	4997      	ldr	r1, [pc, #604]	; (8004f84 <HAL_OSPIM_Config+0x65c>)
 8004d26:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	4413      	add	r3, r2
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	3348      	adds	r3, #72	; 0x48
 8004d34:	443b      	add	r3, r7
 8004d36:	3b28      	subs	r3, #40	; 0x28
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	f003 0301 	and.w	r3, r3, #1
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	440b      	add	r3, r1
 8004d44:	6859      	ldr	r1, [r3, #4]
 8004d46:	488f      	ldr	r0, [pc, #572]	; (8004f84 <HAL_OSPIM_Config+0x65c>)
 8004d48:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	4413      	add	r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	3348      	adds	r3, #72	; 0x48
 8004d56:	443b      	add	r3, r7
 8004d58:	3b28      	subs	r3, #40	; 0x28
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	f003 0301 	and.w	r3, r3, #1
 8004d62:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	4403      	add	r3, r0
 8004d6a:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004d6c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004d70:	4613      	mov	r3, r2
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	4413      	add	r3, r2
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	3348      	adds	r3, #72	; 0x48
 8004d7a:	443b      	add	r3, r7
 8004d7c:	3b24      	subs	r3, #36	; 0x24
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d023      	beq.n	8004dcc <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004d84:	497f      	ldr	r1, [pc, #508]	; (8004f84 <HAL_OSPIM_Config+0x65c>)
 8004d86:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	4413      	add	r3, r2
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	3348      	adds	r3, #72	; 0x48
 8004d94:	443b      	add	r3, r7
 8004d96:	3b24      	subs	r3, #36	; 0x24
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	f003 0301 	and.w	r3, r3, #1
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	440b      	add	r3, r1
 8004da4:	6859      	ldr	r1, [r3, #4]
 8004da6:	4877      	ldr	r0, [pc, #476]	; (8004f84 <HAL_OSPIM_Config+0x65c>)
 8004da8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004dac:	4613      	mov	r3, r2
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	4413      	add	r3, r2
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	3348      	adds	r3, #72	; 0x48
 8004db6:	443b      	add	r3, r7
 8004db8:	3b24      	subs	r3, #36	; 0x24
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	f003 0301 	and.w	r3, r3, #1
 8004dc2:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	4403      	add	r3, r0
 8004dca:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8004dcc:	4a6d      	ldr	r2, [pc, #436]	; (8004f84 <HAL_OSPIM_Config+0x65c>)
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	4413      	add	r3, r2
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004dde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004de0:	025b      	lsls	r3, r3, #9
 8004de2:	431a      	orrs	r2, r3
 8004de4:	4967      	ldr	r1, [pc, #412]	; (8004f84 <HAL_OSPIM_Config+0x65c>)
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	3b01      	subs	r3, #1
 8004dec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	440b      	add	r3, r1
 8004df4:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8004df6:	4a63      	ldr	r2, [pc, #396]	; (8004f84 <HAL_OSPIM_Config+0x65c>)
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4413      	add	r3, r2
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	f023 0203 	bic.w	r2, r3, #3
 8004e08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e0a:	005b      	lsls	r3, r3, #1
 8004e0c:	431a      	orrs	r2, r3
 8004e0e:	495d      	ldr	r1, [pc, #372]	; (8004f84 <HAL_OSPIM_Config+0x65c>)
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	3b01      	subs	r3, #1
 8004e16:	f042 0201 	orr.w	r2, r2, #1
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	440b      	add	r3, r1
 8004e1e:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d014      	beq.n	8004e52 <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8004e28:	4a56      	ldr	r2, [pc, #344]	; (8004f84 <HAL_OSPIM_Config+0x65c>)
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	4413      	add	r3, r2
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004e3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e3c:	015b      	lsls	r3, r3, #5
 8004e3e:	431a      	orrs	r2, r3
 8004e40:	4950      	ldr	r1, [pc, #320]	; (8004f84 <HAL_OSPIM_Config+0x65c>)
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	3b01      	subs	r3, #1
 8004e48:	f042 0210 	orr.w	r2, r2, #16
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	440b      	add	r3, r1
 8004e50:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d019      	beq.n	8004e92 <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004e5e:	4a49      	ldr	r2, [pc, #292]	; (8004f84 <HAL_OSPIM_Config+0x65c>)
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	3b01      	subs	r3, #1
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	4413      	add	r3, r2
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004e74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e76:	049b      	lsls	r3, r3, #18
 8004e78:	431a      	orrs	r2, r3
 8004e7a:	4942      	ldr	r1, [pc, #264]	; (8004f84 <HAL_OSPIM_Config+0x65c>)
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	3b01      	subs	r3, #1
 8004e82:	f003 0301 	and.w	r3, r3, #1
 8004e86:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	440b      	add	r3, r1
 8004e8e:	605a      	str	r2, [r3, #4]
 8004e90:	e01c      	b.n	8004ecc <HAL_OSPIM_Config+0x5a4>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d018      	beq.n	8004ecc <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004e9a:	4a3a      	ldr	r2, [pc, #232]	; (8004f84 <HAL_OSPIM_Config+0x65c>)
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	f003 0301 	and.w	r3, r3, #1
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	4413      	add	r3, r2
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004eb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004eb2:	069b      	lsls	r3, r3, #26
 8004eb4:	431a      	orrs	r2, r3
 8004eb6:	4933      	ldr	r1, [pc, #204]	; (8004f84 <HAL_OSPIM_Config+0x65c>)
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	440b      	add	r3, r1
 8004eca:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d019      	beq.n	8004f0c <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004ed8:	4a2a      	ldr	r2, [pc, #168]	; (8004f84 <HAL_OSPIM_Config+0x65c>)
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	f003 0301 	and.w	r3, r3, #1
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	4413      	add	r3, r2
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004eee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ef0:	049b      	lsls	r3, r3, #18
 8004ef2:	431a      	orrs	r2, r3
 8004ef4:	4923      	ldr	r1, [pc, #140]	; (8004f84 <HAL_OSPIM_Config+0x65c>)
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	3b01      	subs	r3, #1
 8004efc:	f003 0301 	and.w	r3, r3, #1
 8004f00:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	440b      	add	r3, r1
 8004f08:	605a      	str	r2, [r3, #4]
 8004f0a:	e01c      	b.n	8004f46 <HAL_OSPIM_Config+0x61e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	691b      	ldr	r3, [r3, #16]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d018      	beq.n	8004f46 <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004f14:	4a1b      	ldr	r2, [pc, #108]	; (8004f84 <HAL_OSPIM_Config+0x65c>)
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	f003 0301 	and.w	r3, r3, #1
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	4413      	add	r3, r2
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004f2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f2c:	069b      	lsls	r3, r3, #26
 8004f2e:	431a      	orrs	r2, r3
 8004f30:	4914      	ldr	r1, [pc, #80]	; (8004f84 <HAL_OSPIM_Config+0x65c>)
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	3b01      	subs	r3, #1
 8004f38:	f003 0301 	and.w	r3, r3, #1
 8004f3c:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	440b      	add	r3, r1
 8004f44:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8004f46:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004f4a:	f003 0301 	and.w	r3, r3, #1
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d005      	beq.n	8004f5e <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8004f52:	4b0d      	ldr	r3, [pc, #52]	; (8004f88 <HAL_OSPIM_Config+0x660>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a0c      	ldr	r2, [pc, #48]	; (8004f88 <HAL_OSPIM_Config+0x660>)
 8004f58:	f043 0301 	orr.w	r3, r3, #1
 8004f5c:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8004f5e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004f62:	f003 0302 	and.w	r3, r3, #2
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d005      	beq.n	8004f76 <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8004f6a:	4b08      	ldr	r3, [pc, #32]	; (8004f8c <HAL_OSPIM_Config+0x664>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a07      	ldr	r2, [pc, #28]	; (8004f8c <HAL_OSPIM_Config+0x664>)
 8004f70:	f043 0301 	orr.w	r3, r3, #1
 8004f74:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8004f76:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3748      	adds	r7, #72	; 0x48
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	50061c00 	.word	0x50061c00
 8004f88:	a0001000 	.word	0xa0001000
 8004f8c:	a0001400 	.word	0xa0001400

08004f90 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	603b      	str	r3, [r7, #0]
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8004fa0:	e01a      	b.n	8004fd8 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa8:	d016      	beq.n	8004fd8 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004faa:	f7fd fe0d 	bl	8002bc8 <HAL_GetTick>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	69ba      	ldr	r2, [r7, #24]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d302      	bcc.n	8004fc0 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8004fba:	69bb      	ldr	r3, [r7, #24]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d10b      	bne.n	8004fd8 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fc6:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fcc:	f043 0201 	orr.w	r2, r3, #1
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e00e      	b.n	8004ff6 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	6a1a      	ldr	r2, [r3, #32]
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	bf14      	ite	ne
 8004fe6:	2301      	movne	r3, #1
 8004fe8:	2300      	moveq	r3, #0
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	461a      	mov	r2, r3
 8004fee:	79fb      	ldrb	r3, [r7, #7]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d1d6      	bne.n	8004fa2 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3710      	adds	r7, #16
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
	...

08005000 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8005000:	b480      	push	{r7}
 8005002:	b087      	sub	sp, #28
 8005004:	af00      	add	r7, sp, #0
 8005006:	4603      	mov	r3, r0
 8005008:	6039      	str	r1, [r7, #0]
 800500a:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800500c:	2300      	movs	r3, #0
 800500e:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8005010:	2300      	movs	r3, #0
 8005012:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8005014:	79fb      	ldrb	r3, [r7, #7]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d005      	beq.n	8005026 <OSPIM_GetConfig+0x26>
 800501a:	79fb      	ldrb	r3, [r7, #7]
 800501c:	2b02      	cmp	r3, #2
 800501e:	d802      	bhi.n	8005026 <OSPIM_GetConfig+0x26>
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d102      	bne.n	800502c <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	75fb      	strb	r3, [r7, #23]
 800502a:	e08e      	b.n	800514a <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	2200      	movs	r2, #0
 8005030:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	2200      	movs	r2, #0
 8005036:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	2200      	movs	r2, #0
 800503c:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	2200      	movs	r2, #0
 8005042:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	2200      	movs	r2, #0
 8005048:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 800504a:	79fb      	ldrb	r3, [r7, #7]
 800504c:	2b02      	cmp	r3, #2
 800504e:	d101      	bne.n	8005054 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8005050:	4b41      	ldr	r3, [pc, #260]	; (8005158 <OSPIM_GetConfig+0x158>)
 8005052:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8005054:	2300      	movs	r3, #0
 8005056:	60fb      	str	r3, [r7, #12]
 8005058:	e074      	b.n	8005144 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 800505a:	4a40      	ldr	r2, [pc, #256]	; (800515c <OSPIM_GetConfig+0x15c>)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	4413      	add	r3, r2
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	f003 0301 	and.w	r3, r3, #1
 800506c:	2b00      	cmp	r3, #0
 800506e:	d00a      	beq.n	8005086 <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8005070:	68ba      	ldr	r2, [r7, #8]
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	4053      	eors	r3, r2
 8005076:	f003 0302 	and.w	r3, r3, #2
 800507a:	2b00      	cmp	r3, #0
 800507c:	d103      	bne.n	8005086 <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	1c5a      	adds	r2, r3, #1
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	f003 0310 	and.w	r3, r3, #16
 800508c:	2b00      	cmp	r3, #0
 800508e:	d00a      	beq.n	80050a6 <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8005090:	68ba      	ldr	r2, [r7, #8]
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	4053      	eors	r3, r2
 8005096:	f003 0320 	and.w	r3, r3, #32
 800509a:	2b00      	cmp	r3, #0
 800509c:	d103      	bne.n	80050a6 <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	1c5a      	adds	r2, r3, #1
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d00a      	beq.n	80050c6 <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 80050b0:	68ba      	ldr	r2, [r7, #8]
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	4053      	eors	r3, r2
 80050b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d103      	bne.n	80050c6 <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	1c5a      	adds	r2, r3, #1
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d018      	beq.n	8005102 <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 80050d0:	68ba      	ldr	r2, [r7, #8]
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	4053      	eors	r3, r2
 80050d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d111      	bne.n	8005102 <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d106      	bne.n	80050f6 <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	3301      	adds	r3, #1
 80050ec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	60da      	str	r2, [r3, #12]
 80050f4:	e005      	b.n	8005102 <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	3301      	adds	r3, #1
 80050fa:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d018      	beq.n	800513e <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 800510c:	68ba      	ldr	r2, [r7, #8]
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	4053      	eors	r3, r2
 8005112:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005116:	2b00      	cmp	r3, #0
 8005118:	d111      	bne.n	800513e <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d106      	bne.n	8005132 <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	3301      	adds	r3, #1
 8005128:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	611a      	str	r2, [r3, #16]
 8005130:	e005      	b.n	800513e <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	3301      	adds	r3, #1
 8005136:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	3301      	adds	r3, #1
 8005142:	60fb      	str	r3, [r7, #12]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2b01      	cmp	r3, #1
 8005148:	d987      	bls.n	800505a <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 800514a:	7dfb      	ldrb	r3, [r7, #23]
}
 800514c:	4618      	mov	r0, r3
 800514e:	371c      	adds	r7, #28
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr
 8005158:	04040222 	.word	0x04040222
 800515c:	50061c00 	.word	0x50061c00

08005160 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005160:	b480      	push	{r7}
 8005162:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005164:	4b0d      	ldr	r3, [pc, #52]	; (800519c <HAL_PWREx_GetVoltageRange+0x3c>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800516c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005170:	d102      	bne.n	8005178 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8005172:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005176:	e00b      	b.n	8005190 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8005178:	4b08      	ldr	r3, [pc, #32]	; (800519c <HAL_PWREx_GetVoltageRange+0x3c>)
 800517a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800517e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005182:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005186:	d102      	bne.n	800518e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8005188:	f44f 7300 	mov.w	r3, #512	; 0x200
 800518c:	e000      	b.n	8005190 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800518e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8005190:	4618      	mov	r0, r3
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr
 800519a:	bf00      	nop
 800519c:	40007000 	.word	0x40007000

080051a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b085      	sub	sp, #20
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d141      	bne.n	8005232 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80051ae:	4b4b      	ldr	r3, [pc, #300]	; (80052dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80051b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051ba:	d131      	bne.n	8005220 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80051bc:	4b47      	ldr	r3, [pc, #284]	; (80052dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051c2:	4a46      	ldr	r2, [pc, #280]	; (80052dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80051cc:	4b43      	ldr	r3, [pc, #268]	; (80052dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80051d4:	4a41      	ldr	r2, [pc, #260]	; (80052dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80051da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80051dc:	4b40      	ldr	r3, [pc, #256]	; (80052e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2232      	movs	r2, #50	; 0x32
 80051e2:	fb02 f303 	mul.w	r3, r2, r3
 80051e6:	4a3f      	ldr	r2, [pc, #252]	; (80052e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80051e8:	fba2 2303 	umull	r2, r3, r2, r3
 80051ec:	0c9b      	lsrs	r3, r3, #18
 80051ee:	3301      	adds	r3, #1
 80051f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80051f2:	e002      	b.n	80051fa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	3b01      	subs	r3, #1
 80051f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80051fa:	4b38      	ldr	r3, [pc, #224]	; (80052dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005202:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005206:	d102      	bne.n	800520e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d1f2      	bne.n	80051f4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800520e:	4b33      	ldr	r3, [pc, #204]	; (80052dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005210:	695b      	ldr	r3, [r3, #20]
 8005212:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005216:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800521a:	d158      	bne.n	80052ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	e057      	b.n	80052d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005220:	4b2e      	ldr	r3, [pc, #184]	; (80052dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005222:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005226:	4a2d      	ldr	r2, [pc, #180]	; (80052dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005228:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800522c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005230:	e04d      	b.n	80052ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005238:	d141      	bne.n	80052be <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800523a:	4b28      	ldr	r3, [pc, #160]	; (80052dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005242:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005246:	d131      	bne.n	80052ac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005248:	4b24      	ldr	r3, [pc, #144]	; (80052dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800524a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800524e:	4a23      	ldr	r2, [pc, #140]	; (80052dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005250:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005254:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005258:	4b20      	ldr	r3, [pc, #128]	; (80052dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005260:	4a1e      	ldr	r2, [pc, #120]	; (80052dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005262:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005266:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005268:	4b1d      	ldr	r3, [pc, #116]	; (80052e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2232      	movs	r2, #50	; 0x32
 800526e:	fb02 f303 	mul.w	r3, r2, r3
 8005272:	4a1c      	ldr	r2, [pc, #112]	; (80052e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005274:	fba2 2303 	umull	r2, r3, r2, r3
 8005278:	0c9b      	lsrs	r3, r3, #18
 800527a:	3301      	adds	r3, #1
 800527c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800527e:	e002      	b.n	8005286 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	3b01      	subs	r3, #1
 8005284:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005286:	4b15      	ldr	r3, [pc, #84]	; (80052dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800528e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005292:	d102      	bne.n	800529a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d1f2      	bne.n	8005280 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800529a:	4b10      	ldr	r3, [pc, #64]	; (80052dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052a6:	d112      	bne.n	80052ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80052a8:	2303      	movs	r3, #3
 80052aa:	e011      	b.n	80052d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80052ac:	4b0b      	ldr	r3, [pc, #44]	; (80052dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052b2:	4a0a      	ldr	r2, [pc, #40]	; (80052dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80052bc:	e007      	b.n	80052ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80052be:	4b07      	ldr	r3, [pc, #28]	; (80052dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80052c6:	4a05      	ldr	r2, [pc, #20]	; (80052dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80052cc:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3714      	adds	r7, #20
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr
 80052dc:	40007000 	.word	0x40007000
 80052e0:	20004b0c 	.word	0x20004b0c
 80052e4:	431bde83 	.word	0x431bde83

080052e8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80052e8:	b480      	push	{r7}
 80052ea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80052ec:	4b05      	ldr	r3, [pc, #20]	; (8005304 <HAL_PWREx_EnableVddIO2+0x1c>)
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	4a04      	ldr	r2, [pc, #16]	; (8005304 <HAL_PWREx_EnableVddIO2+0x1c>)
 80052f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80052f6:	6053      	str	r3, [r2, #4]
}
 80052f8:	bf00      	nop
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr
 8005302:	bf00      	nop
 8005304:	40007000 	.word	0x40007000

08005308 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b088      	sub	sp, #32
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d102      	bne.n	800531c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	f000 bc08 	b.w	8005b2c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800531c:	4b96      	ldr	r3, [pc, #600]	; (8005578 <HAL_RCC_OscConfig+0x270>)
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	f003 030c 	and.w	r3, r3, #12
 8005324:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005326:	4b94      	ldr	r3, [pc, #592]	; (8005578 <HAL_RCC_OscConfig+0x270>)
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	f003 0303 	and.w	r3, r3, #3
 800532e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 0310 	and.w	r3, r3, #16
 8005338:	2b00      	cmp	r3, #0
 800533a:	f000 80e4 	beq.w	8005506 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d007      	beq.n	8005354 <HAL_RCC_OscConfig+0x4c>
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	2b0c      	cmp	r3, #12
 8005348:	f040 808b 	bne.w	8005462 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	2b01      	cmp	r3, #1
 8005350:	f040 8087 	bne.w	8005462 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005354:	4b88      	ldr	r3, [pc, #544]	; (8005578 <HAL_RCC_OscConfig+0x270>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0302 	and.w	r3, r3, #2
 800535c:	2b00      	cmp	r3, #0
 800535e:	d005      	beq.n	800536c <HAL_RCC_OscConfig+0x64>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	699b      	ldr	r3, [r3, #24]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d101      	bne.n	800536c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e3df      	b.n	8005b2c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6a1a      	ldr	r2, [r3, #32]
 8005370:	4b81      	ldr	r3, [pc, #516]	; (8005578 <HAL_RCC_OscConfig+0x270>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0308 	and.w	r3, r3, #8
 8005378:	2b00      	cmp	r3, #0
 800537a:	d004      	beq.n	8005386 <HAL_RCC_OscConfig+0x7e>
 800537c:	4b7e      	ldr	r3, [pc, #504]	; (8005578 <HAL_RCC_OscConfig+0x270>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005384:	e005      	b.n	8005392 <HAL_RCC_OscConfig+0x8a>
 8005386:	4b7c      	ldr	r3, [pc, #496]	; (8005578 <HAL_RCC_OscConfig+0x270>)
 8005388:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800538c:	091b      	lsrs	r3, r3, #4
 800538e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005392:	4293      	cmp	r3, r2
 8005394:	d223      	bcs.n	80053de <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a1b      	ldr	r3, [r3, #32]
 800539a:	4618      	mov	r0, r3
 800539c:	f000 fdcc 	bl	8005f38 <RCC_SetFlashLatencyFromMSIRange>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d001      	beq.n	80053aa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e3c0      	b.n	8005b2c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80053aa:	4b73      	ldr	r3, [pc, #460]	; (8005578 <HAL_RCC_OscConfig+0x270>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a72      	ldr	r2, [pc, #456]	; (8005578 <HAL_RCC_OscConfig+0x270>)
 80053b0:	f043 0308 	orr.w	r3, r3, #8
 80053b4:	6013      	str	r3, [r2, #0]
 80053b6:	4b70      	ldr	r3, [pc, #448]	; (8005578 <HAL_RCC_OscConfig+0x270>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a1b      	ldr	r3, [r3, #32]
 80053c2:	496d      	ldr	r1, [pc, #436]	; (8005578 <HAL_RCC_OscConfig+0x270>)
 80053c4:	4313      	orrs	r3, r2
 80053c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80053c8:	4b6b      	ldr	r3, [pc, #428]	; (8005578 <HAL_RCC_OscConfig+0x270>)
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	69db      	ldr	r3, [r3, #28]
 80053d4:	021b      	lsls	r3, r3, #8
 80053d6:	4968      	ldr	r1, [pc, #416]	; (8005578 <HAL_RCC_OscConfig+0x270>)
 80053d8:	4313      	orrs	r3, r2
 80053da:	604b      	str	r3, [r1, #4]
 80053dc:	e025      	b.n	800542a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80053de:	4b66      	ldr	r3, [pc, #408]	; (8005578 <HAL_RCC_OscConfig+0x270>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a65      	ldr	r2, [pc, #404]	; (8005578 <HAL_RCC_OscConfig+0x270>)
 80053e4:	f043 0308 	orr.w	r3, r3, #8
 80053e8:	6013      	str	r3, [r2, #0]
 80053ea:	4b63      	ldr	r3, [pc, #396]	; (8005578 <HAL_RCC_OscConfig+0x270>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a1b      	ldr	r3, [r3, #32]
 80053f6:	4960      	ldr	r1, [pc, #384]	; (8005578 <HAL_RCC_OscConfig+0x270>)
 80053f8:	4313      	orrs	r3, r2
 80053fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80053fc:	4b5e      	ldr	r3, [pc, #376]	; (8005578 <HAL_RCC_OscConfig+0x270>)
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	69db      	ldr	r3, [r3, #28]
 8005408:	021b      	lsls	r3, r3, #8
 800540a:	495b      	ldr	r1, [pc, #364]	; (8005578 <HAL_RCC_OscConfig+0x270>)
 800540c:	4313      	orrs	r3, r2
 800540e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d109      	bne.n	800542a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	4618      	mov	r0, r3
 800541c:	f000 fd8c 	bl	8005f38 <RCC_SetFlashLatencyFromMSIRange>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d001      	beq.n	800542a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e380      	b.n	8005b2c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800542a:	f000 fcc1 	bl	8005db0 <HAL_RCC_GetSysClockFreq>
 800542e:	4602      	mov	r2, r0
 8005430:	4b51      	ldr	r3, [pc, #324]	; (8005578 <HAL_RCC_OscConfig+0x270>)
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	091b      	lsrs	r3, r3, #4
 8005436:	f003 030f 	and.w	r3, r3, #15
 800543a:	4950      	ldr	r1, [pc, #320]	; (800557c <HAL_RCC_OscConfig+0x274>)
 800543c:	5ccb      	ldrb	r3, [r1, r3]
 800543e:	f003 031f 	and.w	r3, r3, #31
 8005442:	fa22 f303 	lsr.w	r3, r2, r3
 8005446:	4a4e      	ldr	r2, [pc, #312]	; (8005580 <HAL_RCC_OscConfig+0x278>)
 8005448:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800544a:	4b4e      	ldr	r3, [pc, #312]	; (8005584 <HAL_RCC_OscConfig+0x27c>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4618      	mov	r0, r3
 8005450:	f7fd fb6a 	bl	8002b28 <HAL_InitTick>
 8005454:	4603      	mov	r3, r0
 8005456:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005458:	7bfb      	ldrb	r3, [r7, #15]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d052      	beq.n	8005504 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800545e:	7bfb      	ldrb	r3, [r7, #15]
 8005460:	e364      	b.n	8005b2c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d032      	beq.n	80054d0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800546a:	4b43      	ldr	r3, [pc, #268]	; (8005578 <HAL_RCC_OscConfig+0x270>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a42      	ldr	r2, [pc, #264]	; (8005578 <HAL_RCC_OscConfig+0x270>)
 8005470:	f043 0301 	orr.w	r3, r3, #1
 8005474:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005476:	f7fd fba7 	bl	8002bc8 <HAL_GetTick>
 800547a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800547c:	e008      	b.n	8005490 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800547e:	f7fd fba3 	bl	8002bc8 <HAL_GetTick>
 8005482:	4602      	mov	r2, r0
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	1ad3      	subs	r3, r2, r3
 8005488:	2b02      	cmp	r3, #2
 800548a:	d901      	bls.n	8005490 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	e34d      	b.n	8005b2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005490:	4b39      	ldr	r3, [pc, #228]	; (8005578 <HAL_RCC_OscConfig+0x270>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0302 	and.w	r3, r3, #2
 8005498:	2b00      	cmp	r3, #0
 800549a:	d0f0      	beq.n	800547e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800549c:	4b36      	ldr	r3, [pc, #216]	; (8005578 <HAL_RCC_OscConfig+0x270>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a35      	ldr	r2, [pc, #212]	; (8005578 <HAL_RCC_OscConfig+0x270>)
 80054a2:	f043 0308 	orr.w	r3, r3, #8
 80054a6:	6013      	str	r3, [r2, #0]
 80054a8:	4b33      	ldr	r3, [pc, #204]	; (8005578 <HAL_RCC_OscConfig+0x270>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a1b      	ldr	r3, [r3, #32]
 80054b4:	4930      	ldr	r1, [pc, #192]	; (8005578 <HAL_RCC_OscConfig+0x270>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054ba:	4b2f      	ldr	r3, [pc, #188]	; (8005578 <HAL_RCC_OscConfig+0x270>)
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	69db      	ldr	r3, [r3, #28]
 80054c6:	021b      	lsls	r3, r3, #8
 80054c8:	492b      	ldr	r1, [pc, #172]	; (8005578 <HAL_RCC_OscConfig+0x270>)
 80054ca:	4313      	orrs	r3, r2
 80054cc:	604b      	str	r3, [r1, #4]
 80054ce:	e01a      	b.n	8005506 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80054d0:	4b29      	ldr	r3, [pc, #164]	; (8005578 <HAL_RCC_OscConfig+0x270>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a28      	ldr	r2, [pc, #160]	; (8005578 <HAL_RCC_OscConfig+0x270>)
 80054d6:	f023 0301 	bic.w	r3, r3, #1
 80054da:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80054dc:	f7fd fb74 	bl	8002bc8 <HAL_GetTick>
 80054e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80054e2:	e008      	b.n	80054f6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80054e4:	f7fd fb70 	bl	8002bc8 <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	2b02      	cmp	r3, #2
 80054f0:	d901      	bls.n	80054f6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e31a      	b.n	8005b2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80054f6:	4b20      	ldr	r3, [pc, #128]	; (8005578 <HAL_RCC_OscConfig+0x270>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 0302 	and.w	r3, r3, #2
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1f0      	bne.n	80054e4 <HAL_RCC_OscConfig+0x1dc>
 8005502:	e000      	b.n	8005506 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005504:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0301 	and.w	r3, r3, #1
 800550e:	2b00      	cmp	r3, #0
 8005510:	d073      	beq.n	80055fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	2b08      	cmp	r3, #8
 8005516:	d005      	beq.n	8005524 <HAL_RCC_OscConfig+0x21c>
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	2b0c      	cmp	r3, #12
 800551c:	d10e      	bne.n	800553c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	2b03      	cmp	r3, #3
 8005522:	d10b      	bne.n	800553c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005524:	4b14      	ldr	r3, [pc, #80]	; (8005578 <HAL_RCC_OscConfig+0x270>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800552c:	2b00      	cmp	r3, #0
 800552e:	d063      	beq.n	80055f8 <HAL_RCC_OscConfig+0x2f0>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d15f      	bne.n	80055f8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	e2f7      	b.n	8005b2c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005544:	d106      	bne.n	8005554 <HAL_RCC_OscConfig+0x24c>
 8005546:	4b0c      	ldr	r3, [pc, #48]	; (8005578 <HAL_RCC_OscConfig+0x270>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a0b      	ldr	r2, [pc, #44]	; (8005578 <HAL_RCC_OscConfig+0x270>)
 800554c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005550:	6013      	str	r3, [r2, #0]
 8005552:	e025      	b.n	80055a0 <HAL_RCC_OscConfig+0x298>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800555c:	d114      	bne.n	8005588 <HAL_RCC_OscConfig+0x280>
 800555e:	4b06      	ldr	r3, [pc, #24]	; (8005578 <HAL_RCC_OscConfig+0x270>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a05      	ldr	r2, [pc, #20]	; (8005578 <HAL_RCC_OscConfig+0x270>)
 8005564:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005568:	6013      	str	r3, [r2, #0]
 800556a:	4b03      	ldr	r3, [pc, #12]	; (8005578 <HAL_RCC_OscConfig+0x270>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a02      	ldr	r2, [pc, #8]	; (8005578 <HAL_RCC_OscConfig+0x270>)
 8005570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005574:	6013      	str	r3, [r2, #0]
 8005576:	e013      	b.n	80055a0 <HAL_RCC_OscConfig+0x298>
 8005578:	40021000 	.word	0x40021000
 800557c:	08009174 	.word	0x08009174
 8005580:	20004b0c 	.word	0x20004b0c
 8005584:	20004b10 	.word	0x20004b10
 8005588:	4ba0      	ldr	r3, [pc, #640]	; (800580c <HAL_RCC_OscConfig+0x504>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a9f      	ldr	r2, [pc, #636]	; (800580c <HAL_RCC_OscConfig+0x504>)
 800558e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005592:	6013      	str	r3, [r2, #0]
 8005594:	4b9d      	ldr	r3, [pc, #628]	; (800580c <HAL_RCC_OscConfig+0x504>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a9c      	ldr	r2, [pc, #624]	; (800580c <HAL_RCC_OscConfig+0x504>)
 800559a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800559e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d013      	beq.n	80055d0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a8:	f7fd fb0e 	bl	8002bc8 <HAL_GetTick>
 80055ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055ae:	e008      	b.n	80055c2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055b0:	f7fd fb0a 	bl	8002bc8 <HAL_GetTick>
 80055b4:	4602      	mov	r2, r0
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	2b64      	cmp	r3, #100	; 0x64
 80055bc:	d901      	bls.n	80055c2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	e2b4      	b.n	8005b2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055c2:	4b92      	ldr	r3, [pc, #584]	; (800580c <HAL_RCC_OscConfig+0x504>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d0f0      	beq.n	80055b0 <HAL_RCC_OscConfig+0x2a8>
 80055ce:	e014      	b.n	80055fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055d0:	f7fd fafa 	bl	8002bc8 <HAL_GetTick>
 80055d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80055d6:	e008      	b.n	80055ea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055d8:	f7fd faf6 	bl	8002bc8 <HAL_GetTick>
 80055dc:	4602      	mov	r2, r0
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	2b64      	cmp	r3, #100	; 0x64
 80055e4:	d901      	bls.n	80055ea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80055e6:	2303      	movs	r3, #3
 80055e8:	e2a0      	b.n	8005b2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80055ea:	4b88      	ldr	r3, [pc, #544]	; (800580c <HAL_RCC_OscConfig+0x504>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d1f0      	bne.n	80055d8 <HAL_RCC_OscConfig+0x2d0>
 80055f6:	e000      	b.n	80055fa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 0302 	and.w	r3, r3, #2
 8005602:	2b00      	cmp	r3, #0
 8005604:	d060      	beq.n	80056c8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	2b04      	cmp	r3, #4
 800560a:	d005      	beq.n	8005618 <HAL_RCC_OscConfig+0x310>
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	2b0c      	cmp	r3, #12
 8005610:	d119      	bne.n	8005646 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	2b02      	cmp	r3, #2
 8005616:	d116      	bne.n	8005646 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005618:	4b7c      	ldr	r3, [pc, #496]	; (800580c <HAL_RCC_OscConfig+0x504>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005620:	2b00      	cmp	r3, #0
 8005622:	d005      	beq.n	8005630 <HAL_RCC_OscConfig+0x328>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d101      	bne.n	8005630 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e27d      	b.n	8005b2c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005630:	4b76      	ldr	r3, [pc, #472]	; (800580c <HAL_RCC_OscConfig+0x504>)
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	061b      	lsls	r3, r3, #24
 800563e:	4973      	ldr	r1, [pc, #460]	; (800580c <HAL_RCC_OscConfig+0x504>)
 8005640:	4313      	orrs	r3, r2
 8005642:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005644:	e040      	b.n	80056c8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d023      	beq.n	8005696 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800564e:	4b6f      	ldr	r3, [pc, #444]	; (800580c <HAL_RCC_OscConfig+0x504>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a6e      	ldr	r2, [pc, #440]	; (800580c <HAL_RCC_OscConfig+0x504>)
 8005654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005658:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800565a:	f7fd fab5 	bl	8002bc8 <HAL_GetTick>
 800565e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005660:	e008      	b.n	8005674 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005662:	f7fd fab1 	bl	8002bc8 <HAL_GetTick>
 8005666:	4602      	mov	r2, r0
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	2b02      	cmp	r3, #2
 800566e:	d901      	bls.n	8005674 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005670:	2303      	movs	r3, #3
 8005672:	e25b      	b.n	8005b2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005674:	4b65      	ldr	r3, [pc, #404]	; (800580c <HAL_RCC_OscConfig+0x504>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800567c:	2b00      	cmp	r3, #0
 800567e:	d0f0      	beq.n	8005662 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005680:	4b62      	ldr	r3, [pc, #392]	; (800580c <HAL_RCC_OscConfig+0x504>)
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	061b      	lsls	r3, r3, #24
 800568e:	495f      	ldr	r1, [pc, #380]	; (800580c <HAL_RCC_OscConfig+0x504>)
 8005690:	4313      	orrs	r3, r2
 8005692:	604b      	str	r3, [r1, #4]
 8005694:	e018      	b.n	80056c8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005696:	4b5d      	ldr	r3, [pc, #372]	; (800580c <HAL_RCC_OscConfig+0x504>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a5c      	ldr	r2, [pc, #368]	; (800580c <HAL_RCC_OscConfig+0x504>)
 800569c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056a2:	f7fd fa91 	bl	8002bc8 <HAL_GetTick>
 80056a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80056a8:	e008      	b.n	80056bc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056aa:	f7fd fa8d 	bl	8002bc8 <HAL_GetTick>
 80056ae:	4602      	mov	r2, r0
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	1ad3      	subs	r3, r2, r3
 80056b4:	2b02      	cmp	r3, #2
 80056b6:	d901      	bls.n	80056bc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80056b8:	2303      	movs	r3, #3
 80056ba:	e237      	b.n	8005b2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80056bc:	4b53      	ldr	r3, [pc, #332]	; (800580c <HAL_RCC_OscConfig+0x504>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d1f0      	bne.n	80056aa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 0308 	and.w	r3, r3, #8
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d03c      	beq.n	800574e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	695b      	ldr	r3, [r3, #20]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d01c      	beq.n	8005716 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056dc:	4b4b      	ldr	r3, [pc, #300]	; (800580c <HAL_RCC_OscConfig+0x504>)
 80056de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056e2:	4a4a      	ldr	r2, [pc, #296]	; (800580c <HAL_RCC_OscConfig+0x504>)
 80056e4:	f043 0301 	orr.w	r3, r3, #1
 80056e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056ec:	f7fd fa6c 	bl	8002bc8 <HAL_GetTick>
 80056f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80056f2:	e008      	b.n	8005706 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056f4:	f7fd fa68 	bl	8002bc8 <HAL_GetTick>
 80056f8:	4602      	mov	r2, r0
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	2b02      	cmp	r3, #2
 8005700:	d901      	bls.n	8005706 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e212      	b.n	8005b2c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005706:	4b41      	ldr	r3, [pc, #260]	; (800580c <HAL_RCC_OscConfig+0x504>)
 8005708:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800570c:	f003 0302 	and.w	r3, r3, #2
 8005710:	2b00      	cmp	r3, #0
 8005712:	d0ef      	beq.n	80056f4 <HAL_RCC_OscConfig+0x3ec>
 8005714:	e01b      	b.n	800574e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005716:	4b3d      	ldr	r3, [pc, #244]	; (800580c <HAL_RCC_OscConfig+0x504>)
 8005718:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800571c:	4a3b      	ldr	r2, [pc, #236]	; (800580c <HAL_RCC_OscConfig+0x504>)
 800571e:	f023 0301 	bic.w	r3, r3, #1
 8005722:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005726:	f7fd fa4f 	bl	8002bc8 <HAL_GetTick>
 800572a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800572c:	e008      	b.n	8005740 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800572e:	f7fd fa4b 	bl	8002bc8 <HAL_GetTick>
 8005732:	4602      	mov	r2, r0
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	2b02      	cmp	r3, #2
 800573a:	d901      	bls.n	8005740 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800573c:	2303      	movs	r3, #3
 800573e:	e1f5      	b.n	8005b2c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005740:	4b32      	ldr	r3, [pc, #200]	; (800580c <HAL_RCC_OscConfig+0x504>)
 8005742:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005746:	f003 0302 	and.w	r3, r3, #2
 800574a:	2b00      	cmp	r3, #0
 800574c:	d1ef      	bne.n	800572e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 0304 	and.w	r3, r3, #4
 8005756:	2b00      	cmp	r3, #0
 8005758:	f000 80a6 	beq.w	80058a8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800575c:	2300      	movs	r3, #0
 800575e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005760:	4b2a      	ldr	r3, [pc, #168]	; (800580c <HAL_RCC_OscConfig+0x504>)
 8005762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005768:	2b00      	cmp	r3, #0
 800576a:	d10d      	bne.n	8005788 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800576c:	4b27      	ldr	r3, [pc, #156]	; (800580c <HAL_RCC_OscConfig+0x504>)
 800576e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005770:	4a26      	ldr	r2, [pc, #152]	; (800580c <HAL_RCC_OscConfig+0x504>)
 8005772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005776:	6593      	str	r3, [r2, #88]	; 0x58
 8005778:	4b24      	ldr	r3, [pc, #144]	; (800580c <HAL_RCC_OscConfig+0x504>)
 800577a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800577c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005780:	60bb      	str	r3, [r7, #8]
 8005782:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005784:	2301      	movs	r3, #1
 8005786:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005788:	4b21      	ldr	r3, [pc, #132]	; (8005810 <HAL_RCC_OscConfig+0x508>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005790:	2b00      	cmp	r3, #0
 8005792:	d118      	bne.n	80057c6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005794:	4b1e      	ldr	r3, [pc, #120]	; (8005810 <HAL_RCC_OscConfig+0x508>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a1d      	ldr	r2, [pc, #116]	; (8005810 <HAL_RCC_OscConfig+0x508>)
 800579a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800579e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057a0:	f7fd fa12 	bl	8002bc8 <HAL_GetTick>
 80057a4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057a6:	e008      	b.n	80057ba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057a8:	f7fd fa0e 	bl	8002bc8 <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d901      	bls.n	80057ba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e1b8      	b.n	8005b2c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057ba:	4b15      	ldr	r3, [pc, #84]	; (8005810 <HAL_RCC_OscConfig+0x508>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d0f0      	beq.n	80057a8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d108      	bne.n	80057e0 <HAL_RCC_OscConfig+0x4d8>
 80057ce:	4b0f      	ldr	r3, [pc, #60]	; (800580c <HAL_RCC_OscConfig+0x504>)
 80057d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057d4:	4a0d      	ldr	r2, [pc, #52]	; (800580c <HAL_RCC_OscConfig+0x504>)
 80057d6:	f043 0301 	orr.w	r3, r3, #1
 80057da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80057de:	e029      	b.n	8005834 <HAL_RCC_OscConfig+0x52c>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	2b05      	cmp	r3, #5
 80057e6:	d115      	bne.n	8005814 <HAL_RCC_OscConfig+0x50c>
 80057e8:	4b08      	ldr	r3, [pc, #32]	; (800580c <HAL_RCC_OscConfig+0x504>)
 80057ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ee:	4a07      	ldr	r2, [pc, #28]	; (800580c <HAL_RCC_OscConfig+0x504>)
 80057f0:	f043 0304 	orr.w	r3, r3, #4
 80057f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80057f8:	4b04      	ldr	r3, [pc, #16]	; (800580c <HAL_RCC_OscConfig+0x504>)
 80057fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057fe:	4a03      	ldr	r2, [pc, #12]	; (800580c <HAL_RCC_OscConfig+0x504>)
 8005800:	f043 0301 	orr.w	r3, r3, #1
 8005804:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005808:	e014      	b.n	8005834 <HAL_RCC_OscConfig+0x52c>
 800580a:	bf00      	nop
 800580c:	40021000 	.word	0x40021000
 8005810:	40007000 	.word	0x40007000
 8005814:	4b9d      	ldr	r3, [pc, #628]	; (8005a8c <HAL_RCC_OscConfig+0x784>)
 8005816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800581a:	4a9c      	ldr	r2, [pc, #624]	; (8005a8c <HAL_RCC_OscConfig+0x784>)
 800581c:	f023 0301 	bic.w	r3, r3, #1
 8005820:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005824:	4b99      	ldr	r3, [pc, #612]	; (8005a8c <HAL_RCC_OscConfig+0x784>)
 8005826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800582a:	4a98      	ldr	r2, [pc, #608]	; (8005a8c <HAL_RCC_OscConfig+0x784>)
 800582c:	f023 0304 	bic.w	r3, r3, #4
 8005830:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d016      	beq.n	800586a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800583c:	f7fd f9c4 	bl	8002bc8 <HAL_GetTick>
 8005840:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005842:	e00a      	b.n	800585a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005844:	f7fd f9c0 	bl	8002bc8 <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005852:	4293      	cmp	r3, r2
 8005854:	d901      	bls.n	800585a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	e168      	b.n	8005b2c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800585a:	4b8c      	ldr	r3, [pc, #560]	; (8005a8c <HAL_RCC_OscConfig+0x784>)
 800585c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005860:	f003 0302 	and.w	r3, r3, #2
 8005864:	2b00      	cmp	r3, #0
 8005866:	d0ed      	beq.n	8005844 <HAL_RCC_OscConfig+0x53c>
 8005868:	e015      	b.n	8005896 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800586a:	f7fd f9ad 	bl	8002bc8 <HAL_GetTick>
 800586e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005870:	e00a      	b.n	8005888 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005872:	f7fd f9a9 	bl	8002bc8 <HAL_GetTick>
 8005876:	4602      	mov	r2, r0
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005880:	4293      	cmp	r3, r2
 8005882:	d901      	bls.n	8005888 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005884:	2303      	movs	r3, #3
 8005886:	e151      	b.n	8005b2c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005888:	4b80      	ldr	r3, [pc, #512]	; (8005a8c <HAL_RCC_OscConfig+0x784>)
 800588a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800588e:	f003 0302 	and.w	r3, r3, #2
 8005892:	2b00      	cmp	r3, #0
 8005894:	d1ed      	bne.n	8005872 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005896:	7ffb      	ldrb	r3, [r7, #31]
 8005898:	2b01      	cmp	r3, #1
 800589a:	d105      	bne.n	80058a8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800589c:	4b7b      	ldr	r3, [pc, #492]	; (8005a8c <HAL_RCC_OscConfig+0x784>)
 800589e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058a0:	4a7a      	ldr	r2, [pc, #488]	; (8005a8c <HAL_RCC_OscConfig+0x784>)
 80058a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058a6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0320 	and.w	r3, r3, #32
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d03c      	beq.n	800592e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d01c      	beq.n	80058f6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80058bc:	4b73      	ldr	r3, [pc, #460]	; (8005a8c <HAL_RCC_OscConfig+0x784>)
 80058be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80058c2:	4a72      	ldr	r2, [pc, #456]	; (8005a8c <HAL_RCC_OscConfig+0x784>)
 80058c4:	f043 0301 	orr.w	r3, r3, #1
 80058c8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058cc:	f7fd f97c 	bl	8002bc8 <HAL_GetTick>
 80058d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80058d2:	e008      	b.n	80058e6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80058d4:	f7fd f978 	bl	8002bc8 <HAL_GetTick>
 80058d8:	4602      	mov	r2, r0
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d901      	bls.n	80058e6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	e122      	b.n	8005b2c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80058e6:	4b69      	ldr	r3, [pc, #420]	; (8005a8c <HAL_RCC_OscConfig+0x784>)
 80058e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80058ec:	f003 0302 	and.w	r3, r3, #2
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d0ef      	beq.n	80058d4 <HAL_RCC_OscConfig+0x5cc>
 80058f4:	e01b      	b.n	800592e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80058f6:	4b65      	ldr	r3, [pc, #404]	; (8005a8c <HAL_RCC_OscConfig+0x784>)
 80058f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80058fc:	4a63      	ldr	r2, [pc, #396]	; (8005a8c <HAL_RCC_OscConfig+0x784>)
 80058fe:	f023 0301 	bic.w	r3, r3, #1
 8005902:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005906:	f7fd f95f 	bl	8002bc8 <HAL_GetTick>
 800590a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800590c:	e008      	b.n	8005920 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800590e:	f7fd f95b 	bl	8002bc8 <HAL_GetTick>
 8005912:	4602      	mov	r2, r0
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	2b02      	cmp	r3, #2
 800591a:	d901      	bls.n	8005920 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800591c:	2303      	movs	r3, #3
 800591e:	e105      	b.n	8005b2c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005920:	4b5a      	ldr	r3, [pc, #360]	; (8005a8c <HAL_RCC_OscConfig+0x784>)
 8005922:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005926:	f003 0302 	and.w	r3, r3, #2
 800592a:	2b00      	cmp	r3, #0
 800592c:	d1ef      	bne.n	800590e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005932:	2b00      	cmp	r3, #0
 8005934:	f000 80f9 	beq.w	8005b2a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800593c:	2b02      	cmp	r3, #2
 800593e:	f040 80cf 	bne.w	8005ae0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005942:	4b52      	ldr	r3, [pc, #328]	; (8005a8c <HAL_RCC_OscConfig+0x784>)
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	f003 0203 	and.w	r2, r3, #3
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005952:	429a      	cmp	r2, r3
 8005954:	d12c      	bne.n	80059b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005960:	3b01      	subs	r3, #1
 8005962:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005964:	429a      	cmp	r2, r3
 8005966:	d123      	bne.n	80059b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005972:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005974:	429a      	cmp	r2, r3
 8005976:	d11b      	bne.n	80059b0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005982:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005984:	429a      	cmp	r2, r3
 8005986:	d113      	bne.n	80059b0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005992:	085b      	lsrs	r3, r3, #1
 8005994:	3b01      	subs	r3, #1
 8005996:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005998:	429a      	cmp	r2, r3
 800599a:	d109      	bne.n	80059b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a6:	085b      	lsrs	r3, r3, #1
 80059a8:	3b01      	subs	r3, #1
 80059aa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d071      	beq.n	8005a94 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80059b0:	69bb      	ldr	r3, [r7, #24]
 80059b2:	2b0c      	cmp	r3, #12
 80059b4:	d068      	beq.n	8005a88 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80059b6:	4b35      	ldr	r3, [pc, #212]	; (8005a8c <HAL_RCC_OscConfig+0x784>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d105      	bne.n	80059ce <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80059c2:	4b32      	ldr	r3, [pc, #200]	; (8005a8c <HAL_RCC_OscConfig+0x784>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d001      	beq.n	80059d2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e0ac      	b.n	8005b2c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80059d2:	4b2e      	ldr	r3, [pc, #184]	; (8005a8c <HAL_RCC_OscConfig+0x784>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a2d      	ldr	r2, [pc, #180]	; (8005a8c <HAL_RCC_OscConfig+0x784>)
 80059d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059dc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80059de:	f7fd f8f3 	bl	8002bc8 <HAL_GetTick>
 80059e2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059e4:	e008      	b.n	80059f8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059e6:	f7fd f8ef 	bl	8002bc8 <HAL_GetTick>
 80059ea:	4602      	mov	r2, r0
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	1ad3      	subs	r3, r2, r3
 80059f0:	2b02      	cmp	r3, #2
 80059f2:	d901      	bls.n	80059f8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80059f4:	2303      	movs	r3, #3
 80059f6:	e099      	b.n	8005b2c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059f8:	4b24      	ldr	r3, [pc, #144]	; (8005a8c <HAL_RCC_OscConfig+0x784>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d1f0      	bne.n	80059e6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a04:	4b21      	ldr	r3, [pc, #132]	; (8005a8c <HAL_RCC_OscConfig+0x784>)
 8005a06:	68da      	ldr	r2, [r3, #12]
 8005a08:	4b21      	ldr	r3, [pc, #132]	; (8005a90 <HAL_RCC_OscConfig+0x788>)
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005a14:	3a01      	subs	r2, #1
 8005a16:	0112      	lsls	r2, r2, #4
 8005a18:	4311      	orrs	r1, r2
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a1e:	0212      	lsls	r2, r2, #8
 8005a20:	4311      	orrs	r1, r2
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005a26:	0852      	lsrs	r2, r2, #1
 8005a28:	3a01      	subs	r2, #1
 8005a2a:	0552      	lsls	r2, r2, #21
 8005a2c:	4311      	orrs	r1, r2
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005a32:	0852      	lsrs	r2, r2, #1
 8005a34:	3a01      	subs	r2, #1
 8005a36:	0652      	lsls	r2, r2, #25
 8005a38:	4311      	orrs	r1, r2
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a3e:	06d2      	lsls	r2, r2, #27
 8005a40:	430a      	orrs	r2, r1
 8005a42:	4912      	ldr	r1, [pc, #72]	; (8005a8c <HAL_RCC_OscConfig+0x784>)
 8005a44:	4313      	orrs	r3, r2
 8005a46:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005a48:	4b10      	ldr	r3, [pc, #64]	; (8005a8c <HAL_RCC_OscConfig+0x784>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a0f      	ldr	r2, [pc, #60]	; (8005a8c <HAL_RCC_OscConfig+0x784>)
 8005a4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a52:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005a54:	4b0d      	ldr	r3, [pc, #52]	; (8005a8c <HAL_RCC_OscConfig+0x784>)
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	4a0c      	ldr	r2, [pc, #48]	; (8005a8c <HAL_RCC_OscConfig+0x784>)
 8005a5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a5e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005a60:	f7fd f8b2 	bl	8002bc8 <HAL_GetTick>
 8005a64:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a66:	e008      	b.n	8005a7a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a68:	f7fd f8ae 	bl	8002bc8 <HAL_GetTick>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	1ad3      	subs	r3, r2, r3
 8005a72:	2b02      	cmp	r3, #2
 8005a74:	d901      	bls.n	8005a7a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005a76:	2303      	movs	r3, #3
 8005a78:	e058      	b.n	8005b2c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a7a:	4b04      	ldr	r3, [pc, #16]	; (8005a8c <HAL_RCC_OscConfig+0x784>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d0f0      	beq.n	8005a68 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005a86:	e050      	b.n	8005b2a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e04f      	b.n	8005b2c <HAL_RCC_OscConfig+0x824>
 8005a8c:	40021000 	.word	0x40021000
 8005a90:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a94:	4b27      	ldr	r3, [pc, #156]	; (8005b34 <HAL_RCC_OscConfig+0x82c>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d144      	bne.n	8005b2a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005aa0:	4b24      	ldr	r3, [pc, #144]	; (8005b34 <HAL_RCC_OscConfig+0x82c>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a23      	ldr	r2, [pc, #140]	; (8005b34 <HAL_RCC_OscConfig+0x82c>)
 8005aa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005aaa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005aac:	4b21      	ldr	r3, [pc, #132]	; (8005b34 <HAL_RCC_OscConfig+0x82c>)
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	4a20      	ldr	r2, [pc, #128]	; (8005b34 <HAL_RCC_OscConfig+0x82c>)
 8005ab2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ab6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005ab8:	f7fd f886 	bl	8002bc8 <HAL_GetTick>
 8005abc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005abe:	e008      	b.n	8005ad2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ac0:	f7fd f882 	bl	8002bc8 <HAL_GetTick>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	d901      	bls.n	8005ad2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	e02c      	b.n	8005b2c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ad2:	4b18      	ldr	r3, [pc, #96]	; (8005b34 <HAL_RCC_OscConfig+0x82c>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d0f0      	beq.n	8005ac0 <HAL_RCC_OscConfig+0x7b8>
 8005ade:	e024      	b.n	8005b2a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005ae0:	69bb      	ldr	r3, [r7, #24]
 8005ae2:	2b0c      	cmp	r3, #12
 8005ae4:	d01f      	beq.n	8005b26 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ae6:	4b13      	ldr	r3, [pc, #76]	; (8005b34 <HAL_RCC_OscConfig+0x82c>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a12      	ldr	r2, [pc, #72]	; (8005b34 <HAL_RCC_OscConfig+0x82c>)
 8005aec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005af0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005af2:	f7fd f869 	bl	8002bc8 <HAL_GetTick>
 8005af6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005af8:	e008      	b.n	8005b0c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005afa:	f7fd f865 	bl	8002bc8 <HAL_GetTick>
 8005afe:	4602      	mov	r2, r0
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	2b02      	cmp	r3, #2
 8005b06:	d901      	bls.n	8005b0c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005b08:	2303      	movs	r3, #3
 8005b0a:	e00f      	b.n	8005b2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b0c:	4b09      	ldr	r3, [pc, #36]	; (8005b34 <HAL_RCC_OscConfig+0x82c>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d1f0      	bne.n	8005afa <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005b18:	4b06      	ldr	r3, [pc, #24]	; (8005b34 <HAL_RCC_OscConfig+0x82c>)
 8005b1a:	68da      	ldr	r2, [r3, #12]
 8005b1c:	4905      	ldr	r1, [pc, #20]	; (8005b34 <HAL_RCC_OscConfig+0x82c>)
 8005b1e:	4b06      	ldr	r3, [pc, #24]	; (8005b38 <HAL_RCC_OscConfig+0x830>)
 8005b20:	4013      	ands	r3, r2
 8005b22:	60cb      	str	r3, [r1, #12]
 8005b24:	e001      	b.n	8005b2a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e000      	b.n	8005b2c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8005b2a:	2300      	movs	r3, #0
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3720      	adds	r7, #32
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	40021000 	.word	0x40021000
 8005b38:	feeefffc 	.word	0xfeeefffc

08005b3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b086      	sub	sp, #24
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005b46:	2300      	movs	r3, #0
 8005b48:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d101      	bne.n	8005b54 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	e11d      	b.n	8005d90 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b54:	4b90      	ldr	r3, [pc, #576]	; (8005d98 <HAL_RCC_ClockConfig+0x25c>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 030f 	and.w	r3, r3, #15
 8005b5c:	683a      	ldr	r2, [r7, #0]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d910      	bls.n	8005b84 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b62:	4b8d      	ldr	r3, [pc, #564]	; (8005d98 <HAL_RCC_ClockConfig+0x25c>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f023 020f 	bic.w	r2, r3, #15
 8005b6a:	498b      	ldr	r1, [pc, #556]	; (8005d98 <HAL_RCC_ClockConfig+0x25c>)
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b72:	4b89      	ldr	r3, [pc, #548]	; (8005d98 <HAL_RCC_ClockConfig+0x25c>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 030f 	and.w	r3, r3, #15
 8005b7a:	683a      	ldr	r2, [r7, #0]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d001      	beq.n	8005b84 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	e105      	b.n	8005d90 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 0302 	and.w	r3, r3, #2
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d010      	beq.n	8005bb2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	689a      	ldr	r2, [r3, #8]
 8005b94:	4b81      	ldr	r3, [pc, #516]	; (8005d9c <HAL_RCC_ClockConfig+0x260>)
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d908      	bls.n	8005bb2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ba0:	4b7e      	ldr	r3, [pc, #504]	; (8005d9c <HAL_RCC_ClockConfig+0x260>)
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	497b      	ldr	r1, [pc, #492]	; (8005d9c <HAL_RCC_ClockConfig+0x260>)
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 0301 	and.w	r3, r3, #1
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d079      	beq.n	8005cb2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	2b03      	cmp	r3, #3
 8005bc4:	d11e      	bne.n	8005c04 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bc6:	4b75      	ldr	r3, [pc, #468]	; (8005d9c <HAL_RCC_ClockConfig+0x260>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d101      	bne.n	8005bd6 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e0dc      	b.n	8005d90 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005bd6:	f000 fa09 	bl	8005fec <RCC_GetSysClockFreqFromPLLSource>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	4a70      	ldr	r2, [pc, #448]	; (8005da0 <HAL_RCC_ClockConfig+0x264>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d946      	bls.n	8005c70 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005be2:	4b6e      	ldr	r3, [pc, #440]	; (8005d9c <HAL_RCC_ClockConfig+0x260>)
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d140      	bne.n	8005c70 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005bee:	4b6b      	ldr	r3, [pc, #428]	; (8005d9c <HAL_RCC_ClockConfig+0x260>)
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bf6:	4a69      	ldr	r2, [pc, #420]	; (8005d9c <HAL_RCC_ClockConfig+0x260>)
 8005bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bfc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005bfe:	2380      	movs	r3, #128	; 0x80
 8005c00:	617b      	str	r3, [r7, #20]
 8005c02:	e035      	b.n	8005c70 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	2b02      	cmp	r3, #2
 8005c0a:	d107      	bne.n	8005c1c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c0c:	4b63      	ldr	r3, [pc, #396]	; (8005d9c <HAL_RCC_ClockConfig+0x260>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d115      	bne.n	8005c44 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e0b9      	b.n	8005d90 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d107      	bne.n	8005c34 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005c24:	4b5d      	ldr	r3, [pc, #372]	; (8005d9c <HAL_RCC_ClockConfig+0x260>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 0302 	and.w	r3, r3, #2
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d109      	bne.n	8005c44 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	e0ad      	b.n	8005d90 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c34:	4b59      	ldr	r3, [pc, #356]	; (8005d9c <HAL_RCC_ClockConfig+0x260>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d101      	bne.n	8005c44 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	e0a5      	b.n	8005d90 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005c44:	f000 f8b4 	bl	8005db0 <HAL_RCC_GetSysClockFreq>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	4a55      	ldr	r2, [pc, #340]	; (8005da0 <HAL_RCC_ClockConfig+0x264>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d90f      	bls.n	8005c70 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005c50:	4b52      	ldr	r3, [pc, #328]	; (8005d9c <HAL_RCC_ClockConfig+0x260>)
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d109      	bne.n	8005c70 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005c5c:	4b4f      	ldr	r3, [pc, #316]	; (8005d9c <HAL_RCC_ClockConfig+0x260>)
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c64:	4a4d      	ldr	r2, [pc, #308]	; (8005d9c <HAL_RCC_ClockConfig+0x260>)
 8005c66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c6a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005c6c:	2380      	movs	r3, #128	; 0x80
 8005c6e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c70:	4b4a      	ldr	r3, [pc, #296]	; (8005d9c <HAL_RCC_ClockConfig+0x260>)
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	f023 0203 	bic.w	r2, r3, #3
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	4947      	ldr	r1, [pc, #284]	; (8005d9c <HAL_RCC_ClockConfig+0x260>)
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c82:	f7fc ffa1 	bl	8002bc8 <HAL_GetTick>
 8005c86:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c88:	e00a      	b.n	8005ca0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c8a:	f7fc ff9d 	bl	8002bc8 <HAL_GetTick>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d901      	bls.n	8005ca0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	e077      	b.n	8005d90 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ca0:	4b3e      	ldr	r3, [pc, #248]	; (8005d9c <HAL_RCC_ClockConfig+0x260>)
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	f003 020c 	and.w	r2, r3, #12
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d1eb      	bne.n	8005c8a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	2b80      	cmp	r3, #128	; 0x80
 8005cb6:	d105      	bne.n	8005cc4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005cb8:	4b38      	ldr	r3, [pc, #224]	; (8005d9c <HAL_RCC_ClockConfig+0x260>)
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	4a37      	ldr	r2, [pc, #220]	; (8005d9c <HAL_RCC_ClockConfig+0x260>)
 8005cbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cc2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0302 	and.w	r3, r3, #2
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d010      	beq.n	8005cf2 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	689a      	ldr	r2, [r3, #8]
 8005cd4:	4b31      	ldr	r3, [pc, #196]	; (8005d9c <HAL_RCC_ClockConfig+0x260>)
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d208      	bcs.n	8005cf2 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ce0:	4b2e      	ldr	r3, [pc, #184]	; (8005d9c <HAL_RCC_ClockConfig+0x260>)
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	492b      	ldr	r1, [pc, #172]	; (8005d9c <HAL_RCC_ClockConfig+0x260>)
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005cf2:	4b29      	ldr	r3, [pc, #164]	; (8005d98 <HAL_RCC_ClockConfig+0x25c>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 030f 	and.w	r3, r3, #15
 8005cfa:	683a      	ldr	r2, [r7, #0]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d210      	bcs.n	8005d22 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d00:	4b25      	ldr	r3, [pc, #148]	; (8005d98 <HAL_RCC_ClockConfig+0x25c>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f023 020f 	bic.w	r2, r3, #15
 8005d08:	4923      	ldr	r1, [pc, #140]	; (8005d98 <HAL_RCC_ClockConfig+0x25c>)
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d10:	4b21      	ldr	r3, [pc, #132]	; (8005d98 <HAL_RCC_ClockConfig+0x25c>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 030f 	and.w	r3, r3, #15
 8005d18:	683a      	ldr	r2, [r7, #0]
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d001      	beq.n	8005d22 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e036      	b.n	8005d90 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 0304 	and.w	r3, r3, #4
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d008      	beq.n	8005d40 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d2e:	4b1b      	ldr	r3, [pc, #108]	; (8005d9c <HAL_RCC_ClockConfig+0x260>)
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	4918      	ldr	r1, [pc, #96]	; (8005d9c <HAL_RCC_ClockConfig+0x260>)
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 0308 	and.w	r3, r3, #8
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d009      	beq.n	8005d60 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d4c:	4b13      	ldr	r3, [pc, #76]	; (8005d9c <HAL_RCC_ClockConfig+0x260>)
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	691b      	ldr	r3, [r3, #16]
 8005d58:	00db      	lsls	r3, r3, #3
 8005d5a:	4910      	ldr	r1, [pc, #64]	; (8005d9c <HAL_RCC_ClockConfig+0x260>)
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005d60:	f000 f826 	bl	8005db0 <HAL_RCC_GetSysClockFreq>
 8005d64:	4602      	mov	r2, r0
 8005d66:	4b0d      	ldr	r3, [pc, #52]	; (8005d9c <HAL_RCC_ClockConfig+0x260>)
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	091b      	lsrs	r3, r3, #4
 8005d6c:	f003 030f 	and.w	r3, r3, #15
 8005d70:	490c      	ldr	r1, [pc, #48]	; (8005da4 <HAL_RCC_ClockConfig+0x268>)
 8005d72:	5ccb      	ldrb	r3, [r1, r3]
 8005d74:	f003 031f 	and.w	r3, r3, #31
 8005d78:	fa22 f303 	lsr.w	r3, r2, r3
 8005d7c:	4a0a      	ldr	r2, [pc, #40]	; (8005da8 <HAL_RCC_ClockConfig+0x26c>)
 8005d7e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005d80:	4b0a      	ldr	r3, [pc, #40]	; (8005dac <HAL_RCC_ClockConfig+0x270>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4618      	mov	r0, r3
 8005d86:	f7fc fecf 	bl	8002b28 <HAL_InitTick>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	73fb      	strb	r3, [r7, #15]

  return status;
 8005d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3718      	adds	r7, #24
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}
 8005d98:	40022000 	.word	0x40022000
 8005d9c:	40021000 	.word	0x40021000
 8005da0:	04c4b400 	.word	0x04c4b400
 8005da4:	08009174 	.word	0x08009174
 8005da8:	20004b0c 	.word	0x20004b0c
 8005dac:	20004b10 	.word	0x20004b10

08005db0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b089      	sub	sp, #36	; 0x24
 8005db4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005db6:	2300      	movs	r3, #0
 8005db8:	61fb      	str	r3, [r7, #28]
 8005dba:	2300      	movs	r3, #0
 8005dbc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005dbe:	4b3e      	ldr	r3, [pc, #248]	; (8005eb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	f003 030c 	and.w	r3, r3, #12
 8005dc6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005dc8:	4b3b      	ldr	r3, [pc, #236]	; (8005eb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	f003 0303 	and.w	r3, r3, #3
 8005dd0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d005      	beq.n	8005de4 <HAL_RCC_GetSysClockFreq+0x34>
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	2b0c      	cmp	r3, #12
 8005ddc:	d121      	bne.n	8005e22 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d11e      	bne.n	8005e22 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005de4:	4b34      	ldr	r3, [pc, #208]	; (8005eb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 0308 	and.w	r3, r3, #8
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d107      	bne.n	8005e00 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005df0:	4b31      	ldr	r3, [pc, #196]	; (8005eb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005df2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005df6:	0a1b      	lsrs	r3, r3, #8
 8005df8:	f003 030f 	and.w	r3, r3, #15
 8005dfc:	61fb      	str	r3, [r7, #28]
 8005dfe:	e005      	b.n	8005e0c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005e00:	4b2d      	ldr	r3, [pc, #180]	; (8005eb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	091b      	lsrs	r3, r3, #4
 8005e06:	f003 030f 	and.w	r3, r3, #15
 8005e0a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005e0c:	4a2b      	ldr	r2, [pc, #172]	; (8005ebc <HAL_RCC_GetSysClockFreq+0x10c>)
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e14:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d10d      	bne.n	8005e38 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005e20:	e00a      	b.n	8005e38 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	2b04      	cmp	r3, #4
 8005e26:	d102      	bne.n	8005e2e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005e28:	4b25      	ldr	r3, [pc, #148]	; (8005ec0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005e2a:	61bb      	str	r3, [r7, #24]
 8005e2c:	e004      	b.n	8005e38 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	2b08      	cmp	r3, #8
 8005e32:	d101      	bne.n	8005e38 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005e34:	4b23      	ldr	r3, [pc, #140]	; (8005ec4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005e36:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	2b0c      	cmp	r3, #12
 8005e3c:	d134      	bne.n	8005ea8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005e3e:	4b1e      	ldr	r3, [pc, #120]	; (8005eb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	f003 0303 	and.w	r3, r3, #3
 8005e46:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	2b02      	cmp	r3, #2
 8005e4c:	d003      	beq.n	8005e56 <HAL_RCC_GetSysClockFreq+0xa6>
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	2b03      	cmp	r3, #3
 8005e52:	d003      	beq.n	8005e5c <HAL_RCC_GetSysClockFreq+0xac>
 8005e54:	e005      	b.n	8005e62 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005e56:	4b1a      	ldr	r3, [pc, #104]	; (8005ec0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005e58:	617b      	str	r3, [r7, #20]
      break;
 8005e5a:	e005      	b.n	8005e68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005e5c:	4b19      	ldr	r3, [pc, #100]	; (8005ec4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005e5e:	617b      	str	r3, [r7, #20]
      break;
 8005e60:	e002      	b.n	8005e68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	617b      	str	r3, [r7, #20]
      break;
 8005e66:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005e68:	4b13      	ldr	r3, [pc, #76]	; (8005eb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	091b      	lsrs	r3, r3, #4
 8005e6e:	f003 030f 	and.w	r3, r3, #15
 8005e72:	3301      	adds	r3, #1
 8005e74:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005e76:	4b10      	ldr	r3, [pc, #64]	; (8005eb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	0a1b      	lsrs	r3, r3, #8
 8005e7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e80:	697a      	ldr	r2, [r7, #20]
 8005e82:	fb03 f202 	mul.w	r2, r3, r2
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e8c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005e8e:	4b0a      	ldr	r3, [pc, #40]	; (8005eb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	0e5b      	lsrs	r3, r3, #25
 8005e94:	f003 0303 	and.w	r3, r3, #3
 8005e98:	3301      	adds	r3, #1
 8005e9a:	005b      	lsls	r3, r3, #1
 8005e9c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005e9e:	697a      	ldr	r2, [r7, #20]
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ea6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005ea8:	69bb      	ldr	r3, [r7, #24]
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3724      	adds	r7, #36	; 0x24
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr
 8005eb6:	bf00      	nop
 8005eb8:	40021000 	.word	0x40021000
 8005ebc:	0800918c 	.word	0x0800918c
 8005ec0:	00f42400 	.word	0x00f42400
 8005ec4:	007a1200 	.word	0x007a1200

08005ec8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ecc:	4b03      	ldr	r3, [pc, #12]	; (8005edc <HAL_RCC_GetHCLKFreq+0x14>)
 8005ece:	681b      	ldr	r3, [r3, #0]
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr
 8005eda:	bf00      	nop
 8005edc:	20004b0c 	.word	0x20004b0c

08005ee0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005ee4:	f7ff fff0 	bl	8005ec8 <HAL_RCC_GetHCLKFreq>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	4b06      	ldr	r3, [pc, #24]	; (8005f04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	0a1b      	lsrs	r3, r3, #8
 8005ef0:	f003 0307 	and.w	r3, r3, #7
 8005ef4:	4904      	ldr	r1, [pc, #16]	; (8005f08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005ef6:	5ccb      	ldrb	r3, [r1, r3]
 8005ef8:	f003 031f 	and.w	r3, r3, #31
 8005efc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	40021000 	.word	0x40021000
 8005f08:	08009184 	.word	0x08009184

08005f0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005f10:	f7ff ffda 	bl	8005ec8 <HAL_RCC_GetHCLKFreq>
 8005f14:	4602      	mov	r2, r0
 8005f16:	4b06      	ldr	r3, [pc, #24]	; (8005f30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	0adb      	lsrs	r3, r3, #11
 8005f1c:	f003 0307 	and.w	r3, r3, #7
 8005f20:	4904      	ldr	r1, [pc, #16]	; (8005f34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005f22:	5ccb      	ldrb	r3, [r1, r3]
 8005f24:	f003 031f 	and.w	r3, r3, #31
 8005f28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	bd80      	pop	{r7, pc}
 8005f30:	40021000 	.word	0x40021000
 8005f34:	08009184 	.word	0x08009184

08005f38 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b086      	sub	sp, #24
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005f40:	2300      	movs	r3, #0
 8005f42:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005f44:	4b27      	ldr	r3, [pc, #156]	; (8005fe4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d003      	beq.n	8005f58 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005f50:	f7ff f906 	bl	8005160 <HAL_PWREx_GetVoltageRange>
 8005f54:	6178      	str	r0, [r7, #20]
 8005f56:	e014      	b.n	8005f82 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005f58:	4b22      	ldr	r3, [pc, #136]	; (8005fe4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f5c:	4a21      	ldr	r2, [pc, #132]	; (8005fe4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005f5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f62:	6593      	str	r3, [r2, #88]	; 0x58
 8005f64:	4b1f      	ldr	r3, [pc, #124]	; (8005fe4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f6c:	60fb      	str	r3, [r7, #12]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005f70:	f7ff f8f6 	bl	8005160 <HAL_PWREx_GetVoltageRange>
 8005f74:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005f76:	4b1b      	ldr	r3, [pc, #108]	; (8005fe4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f7a:	4a1a      	ldr	r2, [pc, #104]	; (8005fe4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005f7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f80:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f88:	d10b      	bne.n	8005fa2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2b80      	cmp	r3, #128	; 0x80
 8005f8e:	d913      	bls.n	8005fb8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2ba0      	cmp	r3, #160	; 0xa0
 8005f94:	d902      	bls.n	8005f9c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005f96:	2302      	movs	r3, #2
 8005f98:	613b      	str	r3, [r7, #16]
 8005f9a:	e00d      	b.n	8005fb8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	613b      	str	r3, [r7, #16]
 8005fa0:	e00a      	b.n	8005fb8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2b7f      	cmp	r3, #127	; 0x7f
 8005fa6:	d902      	bls.n	8005fae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005fa8:	2302      	movs	r3, #2
 8005faa:	613b      	str	r3, [r7, #16]
 8005fac:	e004      	b.n	8005fb8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2b70      	cmp	r3, #112	; 0x70
 8005fb2:	d101      	bne.n	8005fb8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005fb8:	4b0b      	ldr	r3, [pc, #44]	; (8005fe8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f023 020f 	bic.w	r2, r3, #15
 8005fc0:	4909      	ldr	r1, [pc, #36]	; (8005fe8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005fc8:	4b07      	ldr	r3, [pc, #28]	; (8005fe8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f003 030f 	and.w	r3, r3, #15
 8005fd0:	693a      	ldr	r2, [r7, #16]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d001      	beq.n	8005fda <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e000      	b.n	8005fdc <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005fda:	2300      	movs	r3, #0
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3718      	adds	r7, #24
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	40021000 	.word	0x40021000
 8005fe8:	40022000 	.word	0x40022000

08005fec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b087      	sub	sp, #28
 8005ff0:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005ff2:	4b2d      	ldr	r3, [pc, #180]	; (80060a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	f003 0303 	and.w	r3, r3, #3
 8005ffa:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2b03      	cmp	r3, #3
 8006000:	d00b      	beq.n	800601a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2b03      	cmp	r3, #3
 8006006:	d825      	bhi.n	8006054 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2b01      	cmp	r3, #1
 800600c:	d008      	beq.n	8006020 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2b02      	cmp	r3, #2
 8006012:	d11f      	bne.n	8006054 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8006014:	4b25      	ldr	r3, [pc, #148]	; (80060ac <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006016:	613b      	str	r3, [r7, #16]
    break;
 8006018:	e01f      	b.n	800605a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800601a:	4b25      	ldr	r3, [pc, #148]	; (80060b0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800601c:	613b      	str	r3, [r7, #16]
    break;
 800601e:	e01c      	b.n	800605a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006020:	4b21      	ldr	r3, [pc, #132]	; (80060a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 0308 	and.w	r3, r3, #8
 8006028:	2b00      	cmp	r3, #0
 800602a:	d107      	bne.n	800603c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800602c:	4b1e      	ldr	r3, [pc, #120]	; (80060a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800602e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006032:	0a1b      	lsrs	r3, r3, #8
 8006034:	f003 030f 	and.w	r3, r3, #15
 8006038:	617b      	str	r3, [r7, #20]
 800603a:	e005      	b.n	8006048 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800603c:	4b1a      	ldr	r3, [pc, #104]	; (80060a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	091b      	lsrs	r3, r3, #4
 8006042:	f003 030f 	and.w	r3, r3, #15
 8006046:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8006048:	4a1a      	ldr	r2, [pc, #104]	; (80060b4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006050:	613b      	str	r3, [r7, #16]
    break;
 8006052:	e002      	b.n	800605a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8006054:	2300      	movs	r3, #0
 8006056:	613b      	str	r3, [r7, #16]
    break;
 8006058:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800605a:	4b13      	ldr	r3, [pc, #76]	; (80060a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	091b      	lsrs	r3, r3, #4
 8006060:	f003 030f 	and.w	r3, r3, #15
 8006064:	3301      	adds	r3, #1
 8006066:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006068:	4b0f      	ldr	r3, [pc, #60]	; (80060a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	0a1b      	lsrs	r3, r3, #8
 800606e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006072:	693a      	ldr	r2, [r7, #16]
 8006074:	fb03 f202 	mul.w	r2, r3, r2
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	fbb2 f3f3 	udiv	r3, r2, r3
 800607e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006080:	4b09      	ldr	r3, [pc, #36]	; (80060a8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	0e5b      	lsrs	r3, r3, #25
 8006086:	f003 0303 	and.w	r3, r3, #3
 800608a:	3301      	adds	r3, #1
 800608c:	005b      	lsls	r3, r3, #1
 800608e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8006090:	693a      	ldr	r2, [r7, #16]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	fbb2 f3f3 	udiv	r3, r2, r3
 8006098:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800609a:	683b      	ldr	r3, [r7, #0]
}
 800609c:	4618      	mov	r0, r3
 800609e:	371c      	adds	r7, #28
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr
 80060a8:	40021000 	.word	0x40021000
 80060ac:	00f42400 	.word	0x00f42400
 80060b0:	007a1200 	.word	0x007a1200
 80060b4:	0800918c 	.word	0x0800918c

080060b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b086      	sub	sp, #24
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80060c0:	2300      	movs	r3, #0
 80060c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80060c4:	2300      	movs	r3, #0
 80060c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d040      	beq.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060d8:	2b80      	cmp	r3, #128	; 0x80
 80060da:	d02a      	beq.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80060dc:	2b80      	cmp	r3, #128	; 0x80
 80060de:	d825      	bhi.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80060e0:	2b60      	cmp	r3, #96	; 0x60
 80060e2:	d026      	beq.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80060e4:	2b60      	cmp	r3, #96	; 0x60
 80060e6:	d821      	bhi.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80060e8:	2b40      	cmp	r3, #64	; 0x40
 80060ea:	d006      	beq.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x42>
 80060ec:	2b40      	cmp	r3, #64	; 0x40
 80060ee:	d81d      	bhi.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d009      	beq.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80060f4:	2b20      	cmp	r3, #32
 80060f6:	d010      	beq.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x62>
 80060f8:	e018      	b.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80060fa:	4b89      	ldr	r3, [pc, #548]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	4a88      	ldr	r2, [pc, #544]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006104:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006106:	e015      	b.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	3304      	adds	r3, #4
 800610c:	2100      	movs	r1, #0
 800610e:	4618      	mov	r0, r3
 8006110:	f000 fb62 	bl	80067d8 <RCCEx_PLLSAI1_Config>
 8006114:	4603      	mov	r3, r0
 8006116:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006118:	e00c      	b.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	3320      	adds	r3, #32
 800611e:	2100      	movs	r1, #0
 8006120:	4618      	mov	r0, r3
 8006122:	f000 fc4d 	bl	80069c0 <RCCEx_PLLSAI2_Config>
 8006126:	4603      	mov	r3, r0
 8006128:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800612a:	e003      	b.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	74fb      	strb	r3, [r7, #19]
      break;
 8006130:	e000      	b.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8006132:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006134:	7cfb      	ldrb	r3, [r7, #19]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d10b      	bne.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800613a:	4b79      	ldr	r3, [pc, #484]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800613c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006140:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006148:	4975      	ldr	r1, [pc, #468]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800614a:	4313      	orrs	r3, r2
 800614c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8006150:	e001      	b.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006152:	7cfb      	ldrb	r3, [r7, #19]
 8006154:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800615e:	2b00      	cmp	r3, #0
 8006160:	d047      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006166:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800616a:	d030      	beq.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x116>
 800616c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006170:	d82a      	bhi.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006172:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006176:	d02a      	beq.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006178:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800617c:	d824      	bhi.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800617e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006182:	d008      	beq.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8006184:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006188:	d81e      	bhi.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800618a:	2b00      	cmp	r3, #0
 800618c:	d00a      	beq.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800618e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006192:	d010      	beq.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006194:	e018      	b.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006196:	4b62      	ldr	r3, [pc, #392]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	4a61      	ldr	r2, [pc, #388]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800619c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061a0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80061a2:	e015      	b.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	3304      	adds	r3, #4
 80061a8:	2100      	movs	r1, #0
 80061aa:	4618      	mov	r0, r3
 80061ac:	f000 fb14 	bl	80067d8 <RCCEx_PLLSAI1_Config>
 80061b0:	4603      	mov	r3, r0
 80061b2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80061b4:	e00c      	b.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	3320      	adds	r3, #32
 80061ba:	2100      	movs	r1, #0
 80061bc:	4618      	mov	r0, r3
 80061be:	f000 fbff 	bl	80069c0 <RCCEx_PLLSAI2_Config>
 80061c2:	4603      	mov	r3, r0
 80061c4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80061c6:	e003      	b.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	74fb      	strb	r3, [r7, #19]
      break;
 80061cc:	e000      	b.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80061ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061d0:	7cfb      	ldrb	r3, [r7, #19]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d10b      	bne.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80061d6:	4b52      	ldr	r3, [pc, #328]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80061d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80061dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061e4:	494e      	ldr	r1, [pc, #312]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80061e6:	4313      	orrs	r3, r2
 80061e8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80061ec:	e001      	b.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061ee:	7cfb      	ldrb	r3, [r7, #19]
 80061f0:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	f000 809f 	beq.w	800633e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006200:	2300      	movs	r3, #0
 8006202:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006204:	4b46      	ldr	r3, [pc, #280]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800620c:	2b00      	cmp	r3, #0
 800620e:	d101      	bne.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006210:	2301      	movs	r3, #1
 8006212:	e000      	b.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8006214:	2300      	movs	r3, #0
 8006216:	2b00      	cmp	r3, #0
 8006218:	d00d      	beq.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800621a:	4b41      	ldr	r3, [pc, #260]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800621c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800621e:	4a40      	ldr	r2, [pc, #256]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006224:	6593      	str	r3, [r2, #88]	; 0x58
 8006226:	4b3e      	ldr	r3, [pc, #248]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800622a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800622e:	60bb      	str	r3, [r7, #8]
 8006230:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006232:	2301      	movs	r3, #1
 8006234:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006236:	4b3b      	ldr	r3, [pc, #236]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a3a      	ldr	r2, [pc, #232]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800623c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006240:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006242:	f7fc fcc1 	bl	8002bc8 <HAL_GetTick>
 8006246:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006248:	e009      	b.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800624a:	f7fc fcbd 	bl	8002bc8 <HAL_GetTick>
 800624e:	4602      	mov	r2, r0
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	1ad3      	subs	r3, r2, r3
 8006254:	2b02      	cmp	r3, #2
 8006256:	d902      	bls.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8006258:	2303      	movs	r3, #3
 800625a:	74fb      	strb	r3, [r7, #19]
        break;
 800625c:	e005      	b.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800625e:	4b31      	ldr	r3, [pc, #196]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006266:	2b00      	cmp	r3, #0
 8006268:	d0ef      	beq.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800626a:	7cfb      	ldrb	r3, [r7, #19]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d15b      	bne.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006270:	4b2b      	ldr	r3, [pc, #172]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006276:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800627a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d01f      	beq.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006288:	697a      	ldr	r2, [r7, #20]
 800628a:	429a      	cmp	r2, r3
 800628c:	d019      	beq.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800628e:	4b24      	ldr	r3, [pc, #144]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006294:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006298:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800629a:	4b21      	ldr	r3, [pc, #132]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800629c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062a0:	4a1f      	ldr	r2, [pc, #124]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80062aa:	4b1d      	ldr	r3, [pc, #116]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062b0:	4a1b      	ldr	r2, [pc, #108]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80062ba:	4a19      	ldr	r2, [pc, #100]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	f003 0301 	and.w	r3, r3, #1
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d016      	beq.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062cc:	f7fc fc7c 	bl	8002bc8 <HAL_GetTick>
 80062d0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062d2:	e00b      	b.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062d4:	f7fc fc78 	bl	8002bc8 <HAL_GetTick>
 80062d8:	4602      	mov	r2, r0
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	1ad3      	subs	r3, r2, r3
 80062de:	f241 3288 	movw	r2, #5000	; 0x1388
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d902      	bls.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80062e6:	2303      	movs	r3, #3
 80062e8:	74fb      	strb	r3, [r7, #19]
            break;
 80062ea:	e006      	b.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062ec:	4b0c      	ldr	r3, [pc, #48]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062f2:	f003 0302 	and.w	r3, r3, #2
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d0ec      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80062fa:	7cfb      	ldrb	r3, [r7, #19]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d10c      	bne.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006300:	4b07      	ldr	r3, [pc, #28]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006306:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006310:	4903      	ldr	r1, [pc, #12]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006312:	4313      	orrs	r3, r2
 8006314:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006318:	e008      	b.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800631a:	7cfb      	ldrb	r3, [r7, #19]
 800631c:	74bb      	strb	r3, [r7, #18]
 800631e:	e005      	b.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8006320:	40021000 	.word	0x40021000
 8006324:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006328:	7cfb      	ldrb	r3, [r7, #19]
 800632a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800632c:	7c7b      	ldrb	r3, [r7, #17]
 800632e:	2b01      	cmp	r3, #1
 8006330:	d105      	bne.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006332:	4ba0      	ldr	r3, [pc, #640]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006336:	4a9f      	ldr	r2, [pc, #636]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006338:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800633c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f003 0301 	and.w	r3, r3, #1
 8006346:	2b00      	cmp	r3, #0
 8006348:	d00a      	beq.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800634a:	4b9a      	ldr	r3, [pc, #616]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800634c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006350:	f023 0203 	bic.w	r2, r3, #3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006358:	4996      	ldr	r1, [pc, #600]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800635a:	4313      	orrs	r3, r2
 800635c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 0302 	and.w	r3, r3, #2
 8006368:	2b00      	cmp	r3, #0
 800636a:	d00a      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800636c:	4b91      	ldr	r3, [pc, #580]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800636e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006372:	f023 020c 	bic.w	r2, r3, #12
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637a:	498e      	ldr	r1, [pc, #568]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800637c:	4313      	orrs	r3, r2
 800637e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f003 0304 	and.w	r3, r3, #4
 800638a:	2b00      	cmp	r3, #0
 800638c:	d00a      	beq.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800638e:	4b89      	ldr	r3, [pc, #548]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006394:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800639c:	4985      	ldr	r1, [pc, #532]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800639e:	4313      	orrs	r3, r2
 80063a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 0308 	and.w	r3, r3, #8
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d00a      	beq.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80063b0:	4b80      	ldr	r3, [pc, #512]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063be:	497d      	ldr	r1, [pc, #500]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063c0:	4313      	orrs	r3, r2
 80063c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 0310 	and.w	r3, r3, #16
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d00a      	beq.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80063d2:	4b78      	ldr	r3, [pc, #480]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063e0:	4974      	ldr	r1, [pc, #464]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063e2:	4313      	orrs	r3, r2
 80063e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f003 0320 	and.w	r3, r3, #32
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d00a      	beq.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80063f4:	4b6f      	ldr	r3, [pc, #444]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006402:	496c      	ldr	r1, [pc, #432]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006404:	4313      	orrs	r3, r2
 8006406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006412:	2b00      	cmp	r3, #0
 8006414:	d00a      	beq.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006416:	4b67      	ldr	r3, [pc, #412]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800641c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006424:	4963      	ldr	r1, [pc, #396]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006426:	4313      	orrs	r3, r2
 8006428:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006434:	2b00      	cmp	r3, #0
 8006436:	d00a      	beq.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006438:	4b5e      	ldr	r3, [pc, #376]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800643a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800643e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006446:	495b      	ldr	r1, [pc, #364]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006448:	4313      	orrs	r3, r2
 800644a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00a      	beq.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800645a:	4b56      	ldr	r3, [pc, #344]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800645c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006460:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006468:	4952      	ldr	r1, [pc, #328]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800646a:	4313      	orrs	r3, r2
 800646c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006478:	2b00      	cmp	r3, #0
 800647a:	d00a      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800647c:	4b4d      	ldr	r3, [pc, #308]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800647e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006482:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800648a:	494a      	ldr	r1, [pc, #296]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800648c:	4313      	orrs	r3, r2
 800648e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800649a:	2b00      	cmp	r3, #0
 800649c:	d00a      	beq.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800649e:	4b45      	ldr	r3, [pc, #276]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064ac:	4941      	ldr	r1, [pc, #260]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064ae:	4313      	orrs	r3, r2
 80064b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d00a      	beq.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80064c0:	4b3c      	ldr	r3, [pc, #240]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80064c6:	f023 0203 	bic.w	r2, r3, #3
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064ce:	4939      	ldr	r1, [pc, #228]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064d0:	4313      	orrs	r3, r2
 80064d2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d028      	beq.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80064e2:	4b34      	ldr	r3, [pc, #208]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064e8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064f0:	4930      	ldr	r1, [pc, #192]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064f2:	4313      	orrs	r3, r2
 80064f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006500:	d106      	bne.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006502:	4b2c      	ldr	r3, [pc, #176]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	4a2b      	ldr	r2, [pc, #172]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006508:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800650c:	60d3      	str	r3, [r2, #12]
 800650e:	e011      	b.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006514:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006518:	d10c      	bne.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	3304      	adds	r3, #4
 800651e:	2101      	movs	r1, #1
 8006520:	4618      	mov	r0, r3
 8006522:	f000 f959 	bl	80067d8 <RCCEx_PLLSAI1_Config>
 8006526:	4603      	mov	r3, r0
 8006528:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800652a:	7cfb      	ldrb	r3, [r7, #19]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d001      	beq.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8006530:	7cfb      	ldrb	r3, [r7, #19]
 8006532:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800653c:	2b00      	cmp	r3, #0
 800653e:	d04d      	beq.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006544:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006548:	d108      	bne.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800654a:	4b1a      	ldr	r3, [pc, #104]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800654c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006550:	4a18      	ldr	r2, [pc, #96]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006552:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006556:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800655a:	e012      	b.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800655c:	4b15      	ldr	r3, [pc, #84]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800655e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006562:	4a14      	ldr	r2, [pc, #80]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006564:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006568:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800656c:	4b11      	ldr	r3, [pc, #68]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800656e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006572:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800657a:	490e      	ldr	r1, [pc, #56]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800657c:	4313      	orrs	r3, r2
 800657e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006586:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800658a:	d106      	bne.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800658c:	4b09      	ldr	r3, [pc, #36]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	4a08      	ldr	r2, [pc, #32]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006592:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006596:	60d3      	str	r3, [r2, #12]
 8006598:	e020      	b.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800659e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065a2:	d109      	bne.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80065a4:	4b03      	ldr	r3, [pc, #12]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	4a02      	ldr	r2, [pc, #8]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065ae:	60d3      	str	r3, [r2, #12]
 80065b0:	e014      	b.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x524>
 80065b2:	bf00      	nop
 80065b4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80065c0:	d10c      	bne.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	3304      	adds	r3, #4
 80065c6:	2101      	movs	r1, #1
 80065c8:	4618      	mov	r0, r3
 80065ca:	f000 f905 	bl	80067d8 <RCCEx_PLLSAI1_Config>
 80065ce:	4603      	mov	r3, r0
 80065d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80065d2:	7cfb      	ldrb	r3, [r7, #19]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d001      	beq.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80065d8:	7cfb      	ldrb	r3, [r7, #19]
 80065da:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d028      	beq.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80065e8:	4b7a      	ldr	r3, [pc, #488]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80065ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065f6:	4977      	ldr	r1, [pc, #476]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80065f8:	4313      	orrs	r3, r2
 80065fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006602:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006606:	d106      	bne.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006608:	4b72      	ldr	r3, [pc, #456]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	4a71      	ldr	r2, [pc, #452]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800660e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006612:	60d3      	str	r3, [r2, #12]
 8006614:	e011      	b.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800661a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800661e:	d10c      	bne.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	3304      	adds	r3, #4
 8006624:	2101      	movs	r1, #1
 8006626:	4618      	mov	r0, r3
 8006628:	f000 f8d6 	bl	80067d8 <RCCEx_PLLSAI1_Config>
 800662c:	4603      	mov	r3, r0
 800662e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006630:	7cfb      	ldrb	r3, [r7, #19]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d001      	beq.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8006636:	7cfb      	ldrb	r3, [r7, #19]
 8006638:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006642:	2b00      	cmp	r3, #0
 8006644:	d01e      	beq.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006646:	4b63      	ldr	r3, [pc, #396]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800664c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006656:	495f      	ldr	r1, [pc, #380]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006658:	4313      	orrs	r3, r2
 800665a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006664:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006668:	d10c      	bne.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	3304      	adds	r3, #4
 800666e:	2102      	movs	r1, #2
 8006670:	4618      	mov	r0, r3
 8006672:	f000 f8b1 	bl	80067d8 <RCCEx_PLLSAI1_Config>
 8006676:	4603      	mov	r3, r0
 8006678:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800667a:	7cfb      	ldrb	r3, [r7, #19]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d001      	beq.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8006680:	7cfb      	ldrb	r3, [r7, #19]
 8006682:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800668c:	2b00      	cmp	r3, #0
 800668e:	d00b      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006690:	4b50      	ldr	r3, [pc, #320]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006692:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006696:	f023 0204 	bic.w	r2, r3, #4
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066a0:	494c      	ldr	r1, [pc, #304]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80066a2:	4313      	orrs	r3, r2
 80066a4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d00b      	beq.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80066b4:	4b47      	ldr	r3, [pc, #284]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80066b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80066ba:	f023 0218 	bic.w	r2, r3, #24
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066c4:	4943      	ldr	r1, [pc, #268]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80066c6:	4313      	orrs	r3, r2
 80066c8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d035      	beq.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80066d8:	4b3e      	ldr	r3, [pc, #248]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a3d      	ldr	r2, [pc, #244]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80066de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066e4:	f7fc fa70 	bl	8002bc8 <HAL_GetTick>
 80066e8:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80066ea:	e009      	b.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80066ec:	f7fc fa6c 	bl	8002bc8 <HAL_GetTick>
 80066f0:	4602      	mov	r2, r0
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	1ad3      	subs	r3, r2, r3
 80066f6:	2b02      	cmp	r3, #2
 80066f8:	d902      	bls.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 80066fa:	2303      	movs	r3, #3
 80066fc:	74fb      	strb	r3, [r7, #19]
        break;
 80066fe:	e005      	b.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006700:	4b34      	ldr	r3, [pc, #208]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006708:	2b00      	cmp	r3, #0
 800670a:	d1ef      	bne.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 800670c:	7cfb      	ldrb	r3, [r7, #19]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d113      	bne.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8006712:	4b30      	ldr	r3, [pc, #192]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006714:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006718:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006722:	492c      	ldr	r1, [pc, #176]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006724:	4313      	orrs	r3, r2
 8006726:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	3320      	adds	r3, #32
 800672e:	2102      	movs	r1, #2
 8006730:	4618      	mov	r0, r3
 8006732:	f000 f945 	bl	80069c0 <RCCEx_PLLSAI2_Config>
 8006736:	4603      	mov	r3, r0
 8006738:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 800673a:	7cfb      	ldrb	r3, [r7, #19]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d001      	beq.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8006740:	7cfb      	ldrb	r3, [r7, #19]
 8006742:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800674c:	2b00      	cmp	r3, #0
 800674e:	d01e      	beq.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8006750:	4b20      	ldr	r3, [pc, #128]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006752:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006756:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006760:	491c      	ldr	r1, [pc, #112]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006762:	4313      	orrs	r3, r2
 8006764:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800676e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006772:	d10c      	bne.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	3320      	adds	r3, #32
 8006778:	2101      	movs	r1, #1
 800677a:	4618      	mov	r0, r3
 800677c:	f000 f920 	bl	80069c0 <RCCEx_PLLSAI2_Config>
 8006780:	4603      	mov	r3, r0
 8006782:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006784:	7cfb      	ldrb	r3, [r7, #19]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d001      	beq.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 800678a:	7cfb      	ldrb	r3, [r7, #19]
 800678c:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006796:	2b00      	cmp	r3, #0
 8006798:	d017      	beq.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800679a:	4b0e      	ldr	r3, [pc, #56]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800679c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80067a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80067aa:	490a      	ldr	r1, [pc, #40]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80067ac:	4313      	orrs	r3, r2
 80067ae:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80067b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067bc:	d105      	bne.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80067be:	4b05      	ldr	r3, [pc, #20]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80067c0:	68db      	ldr	r3, [r3, #12]
 80067c2:	4a04      	ldr	r2, [pc, #16]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80067c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80067c8:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80067ca:	7cbb      	ldrb	r3, [r7, #18]
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3718      	adds	r7, #24
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}
 80067d4:	40021000 	.word	0x40021000

080067d8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80067e2:	2300      	movs	r3, #0
 80067e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80067e6:	4b72      	ldr	r3, [pc, #456]	; (80069b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	f003 0303 	and.w	r3, r3, #3
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00e      	beq.n	8006810 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80067f2:	4b6f      	ldr	r3, [pc, #444]	; (80069b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	f003 0203 	and.w	r2, r3, #3
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	429a      	cmp	r2, r3
 8006800:	d103      	bne.n	800680a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
       ||
 8006806:	2b00      	cmp	r3, #0
 8006808:	d142      	bne.n	8006890 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	73fb      	strb	r3, [r7, #15]
 800680e:	e03f      	b.n	8006890 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	2b03      	cmp	r3, #3
 8006816:	d018      	beq.n	800684a <RCCEx_PLLSAI1_Config+0x72>
 8006818:	2b03      	cmp	r3, #3
 800681a:	d825      	bhi.n	8006868 <RCCEx_PLLSAI1_Config+0x90>
 800681c:	2b01      	cmp	r3, #1
 800681e:	d002      	beq.n	8006826 <RCCEx_PLLSAI1_Config+0x4e>
 8006820:	2b02      	cmp	r3, #2
 8006822:	d009      	beq.n	8006838 <RCCEx_PLLSAI1_Config+0x60>
 8006824:	e020      	b.n	8006868 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006826:	4b62      	ldr	r3, [pc, #392]	; (80069b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 0302 	and.w	r3, r3, #2
 800682e:	2b00      	cmp	r3, #0
 8006830:	d11d      	bne.n	800686e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006836:	e01a      	b.n	800686e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006838:	4b5d      	ldr	r3, [pc, #372]	; (80069b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006840:	2b00      	cmp	r3, #0
 8006842:	d116      	bne.n	8006872 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006848:	e013      	b.n	8006872 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800684a:	4b59      	ldr	r3, [pc, #356]	; (80069b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006852:	2b00      	cmp	r3, #0
 8006854:	d10f      	bne.n	8006876 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006856:	4b56      	ldr	r3, [pc, #344]	; (80069b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800685e:	2b00      	cmp	r3, #0
 8006860:	d109      	bne.n	8006876 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006866:	e006      	b.n	8006876 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	73fb      	strb	r3, [r7, #15]
      break;
 800686c:	e004      	b.n	8006878 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800686e:	bf00      	nop
 8006870:	e002      	b.n	8006878 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006872:	bf00      	nop
 8006874:	e000      	b.n	8006878 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006876:	bf00      	nop
    }

    if(status == HAL_OK)
 8006878:	7bfb      	ldrb	r3, [r7, #15]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d108      	bne.n	8006890 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800687e:	4b4c      	ldr	r3, [pc, #304]	; (80069b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006880:	68db      	ldr	r3, [r3, #12]
 8006882:	f023 0203 	bic.w	r2, r3, #3
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4949      	ldr	r1, [pc, #292]	; (80069b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800688c:	4313      	orrs	r3, r2
 800688e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006890:	7bfb      	ldrb	r3, [r7, #15]
 8006892:	2b00      	cmp	r3, #0
 8006894:	f040 8086 	bne.w	80069a4 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006898:	4b45      	ldr	r3, [pc, #276]	; (80069b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a44      	ldr	r2, [pc, #272]	; (80069b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800689e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80068a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068a4:	f7fc f990 	bl	8002bc8 <HAL_GetTick>
 80068a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80068aa:	e009      	b.n	80068c0 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80068ac:	f7fc f98c 	bl	8002bc8 <HAL_GetTick>
 80068b0:	4602      	mov	r2, r0
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	1ad3      	subs	r3, r2, r3
 80068b6:	2b02      	cmp	r3, #2
 80068b8:	d902      	bls.n	80068c0 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80068ba:	2303      	movs	r3, #3
 80068bc:	73fb      	strb	r3, [r7, #15]
        break;
 80068be:	e005      	b.n	80068cc <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80068c0:	4b3b      	ldr	r3, [pc, #236]	; (80069b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d1ef      	bne.n	80068ac <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80068cc:	7bfb      	ldrb	r3, [r7, #15]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d168      	bne.n	80069a4 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d113      	bne.n	8006900 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80068d8:	4b35      	ldr	r3, [pc, #212]	; (80069b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80068da:	691a      	ldr	r2, [r3, #16]
 80068dc:	4b35      	ldr	r3, [pc, #212]	; (80069b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80068de:	4013      	ands	r3, r2
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	6892      	ldr	r2, [r2, #8]
 80068e4:	0211      	lsls	r1, r2, #8
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	68d2      	ldr	r2, [r2, #12]
 80068ea:	06d2      	lsls	r2, r2, #27
 80068ec:	4311      	orrs	r1, r2
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	6852      	ldr	r2, [r2, #4]
 80068f2:	3a01      	subs	r2, #1
 80068f4:	0112      	lsls	r2, r2, #4
 80068f6:	430a      	orrs	r2, r1
 80068f8:	492d      	ldr	r1, [pc, #180]	; (80069b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80068fa:	4313      	orrs	r3, r2
 80068fc:	610b      	str	r3, [r1, #16]
 80068fe:	e02d      	b.n	800695c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	2b01      	cmp	r3, #1
 8006904:	d115      	bne.n	8006932 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006906:	4b2a      	ldr	r3, [pc, #168]	; (80069b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006908:	691a      	ldr	r2, [r3, #16]
 800690a:	4b2b      	ldr	r3, [pc, #172]	; (80069b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800690c:	4013      	ands	r3, r2
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	6892      	ldr	r2, [r2, #8]
 8006912:	0211      	lsls	r1, r2, #8
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	6912      	ldr	r2, [r2, #16]
 8006918:	0852      	lsrs	r2, r2, #1
 800691a:	3a01      	subs	r2, #1
 800691c:	0552      	lsls	r2, r2, #21
 800691e:	4311      	orrs	r1, r2
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	6852      	ldr	r2, [r2, #4]
 8006924:	3a01      	subs	r2, #1
 8006926:	0112      	lsls	r2, r2, #4
 8006928:	430a      	orrs	r2, r1
 800692a:	4921      	ldr	r1, [pc, #132]	; (80069b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800692c:	4313      	orrs	r3, r2
 800692e:	610b      	str	r3, [r1, #16]
 8006930:	e014      	b.n	800695c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006932:	4b1f      	ldr	r3, [pc, #124]	; (80069b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006934:	691a      	ldr	r2, [r3, #16]
 8006936:	4b21      	ldr	r3, [pc, #132]	; (80069bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006938:	4013      	ands	r3, r2
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	6892      	ldr	r2, [r2, #8]
 800693e:	0211      	lsls	r1, r2, #8
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	6952      	ldr	r2, [r2, #20]
 8006944:	0852      	lsrs	r2, r2, #1
 8006946:	3a01      	subs	r2, #1
 8006948:	0652      	lsls	r2, r2, #25
 800694a:	4311      	orrs	r1, r2
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	6852      	ldr	r2, [r2, #4]
 8006950:	3a01      	subs	r2, #1
 8006952:	0112      	lsls	r2, r2, #4
 8006954:	430a      	orrs	r2, r1
 8006956:	4916      	ldr	r1, [pc, #88]	; (80069b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006958:	4313      	orrs	r3, r2
 800695a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800695c:	4b14      	ldr	r3, [pc, #80]	; (80069b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a13      	ldr	r2, [pc, #76]	; (80069b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006962:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006966:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006968:	f7fc f92e 	bl	8002bc8 <HAL_GetTick>
 800696c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800696e:	e009      	b.n	8006984 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006970:	f7fc f92a 	bl	8002bc8 <HAL_GetTick>
 8006974:	4602      	mov	r2, r0
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	1ad3      	subs	r3, r2, r3
 800697a:	2b02      	cmp	r3, #2
 800697c:	d902      	bls.n	8006984 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800697e:	2303      	movs	r3, #3
 8006980:	73fb      	strb	r3, [r7, #15]
          break;
 8006982:	e005      	b.n	8006990 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006984:	4b0a      	ldr	r3, [pc, #40]	; (80069b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800698c:	2b00      	cmp	r3, #0
 800698e:	d0ef      	beq.n	8006970 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006990:	7bfb      	ldrb	r3, [r7, #15]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d106      	bne.n	80069a4 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006996:	4b06      	ldr	r3, [pc, #24]	; (80069b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006998:	691a      	ldr	r2, [r3, #16]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	699b      	ldr	r3, [r3, #24]
 800699e:	4904      	ldr	r1, [pc, #16]	; (80069b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80069a0:	4313      	orrs	r3, r2
 80069a2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80069a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3710      	adds	r7, #16
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop
 80069b0:	40021000 	.word	0x40021000
 80069b4:	07ff800f 	.word	0x07ff800f
 80069b8:	ff9f800f 	.word	0xff9f800f
 80069bc:	f9ff800f 	.word	0xf9ff800f

080069c0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b084      	sub	sp, #16
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80069ca:	2300      	movs	r3, #0
 80069cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80069ce:	4b72      	ldr	r3, [pc, #456]	; (8006b98 <RCCEx_PLLSAI2_Config+0x1d8>)
 80069d0:	68db      	ldr	r3, [r3, #12]
 80069d2:	f003 0303 	and.w	r3, r3, #3
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d00e      	beq.n	80069f8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80069da:	4b6f      	ldr	r3, [pc, #444]	; (8006b98 <RCCEx_PLLSAI2_Config+0x1d8>)
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	f003 0203 	and.w	r2, r3, #3
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d103      	bne.n	80069f2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
       ||
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d142      	bne.n	8006a78 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	73fb      	strb	r3, [r7, #15]
 80069f6:	e03f      	b.n	8006a78 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	2b03      	cmp	r3, #3
 80069fe:	d018      	beq.n	8006a32 <RCCEx_PLLSAI2_Config+0x72>
 8006a00:	2b03      	cmp	r3, #3
 8006a02:	d825      	bhi.n	8006a50 <RCCEx_PLLSAI2_Config+0x90>
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d002      	beq.n	8006a0e <RCCEx_PLLSAI2_Config+0x4e>
 8006a08:	2b02      	cmp	r3, #2
 8006a0a:	d009      	beq.n	8006a20 <RCCEx_PLLSAI2_Config+0x60>
 8006a0c:	e020      	b.n	8006a50 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006a0e:	4b62      	ldr	r3, [pc, #392]	; (8006b98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f003 0302 	and.w	r3, r3, #2
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d11d      	bne.n	8006a56 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a1e:	e01a      	b.n	8006a56 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006a20:	4b5d      	ldr	r3, [pc, #372]	; (8006b98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d116      	bne.n	8006a5a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a30:	e013      	b.n	8006a5a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006a32:	4b59      	ldr	r3, [pc, #356]	; (8006b98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d10f      	bne.n	8006a5e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006a3e:	4b56      	ldr	r3, [pc, #344]	; (8006b98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d109      	bne.n	8006a5e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006a4e:	e006      	b.n	8006a5e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	73fb      	strb	r3, [r7, #15]
      break;
 8006a54:	e004      	b.n	8006a60 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006a56:	bf00      	nop
 8006a58:	e002      	b.n	8006a60 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006a5a:	bf00      	nop
 8006a5c:	e000      	b.n	8006a60 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006a5e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006a60:	7bfb      	ldrb	r3, [r7, #15]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d108      	bne.n	8006a78 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006a66:	4b4c      	ldr	r3, [pc, #304]	; (8006b98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	f023 0203 	bic.w	r2, r3, #3
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4949      	ldr	r1, [pc, #292]	; (8006b98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a74:	4313      	orrs	r3, r2
 8006a76:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006a78:	7bfb      	ldrb	r3, [r7, #15]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	f040 8086 	bne.w	8006b8c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006a80:	4b45      	ldr	r3, [pc, #276]	; (8006b98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a44      	ldr	r2, [pc, #272]	; (8006b98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a8c:	f7fc f89c 	bl	8002bc8 <HAL_GetTick>
 8006a90:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006a92:	e009      	b.n	8006aa8 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006a94:	f7fc f898 	bl	8002bc8 <HAL_GetTick>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	2b02      	cmp	r3, #2
 8006aa0:	d902      	bls.n	8006aa8 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006aa2:	2303      	movs	r3, #3
 8006aa4:	73fb      	strb	r3, [r7, #15]
        break;
 8006aa6:	e005      	b.n	8006ab4 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006aa8:	4b3b      	ldr	r3, [pc, #236]	; (8006b98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d1ef      	bne.n	8006a94 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006ab4:	7bfb      	ldrb	r3, [r7, #15]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d168      	bne.n	8006b8c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d113      	bne.n	8006ae8 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006ac0:	4b35      	ldr	r3, [pc, #212]	; (8006b98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ac2:	695a      	ldr	r2, [r3, #20]
 8006ac4:	4b35      	ldr	r3, [pc, #212]	; (8006b9c <RCCEx_PLLSAI2_Config+0x1dc>)
 8006ac6:	4013      	ands	r3, r2
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	6892      	ldr	r2, [r2, #8]
 8006acc:	0211      	lsls	r1, r2, #8
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	68d2      	ldr	r2, [r2, #12]
 8006ad2:	06d2      	lsls	r2, r2, #27
 8006ad4:	4311      	orrs	r1, r2
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	6852      	ldr	r2, [r2, #4]
 8006ada:	3a01      	subs	r2, #1
 8006adc:	0112      	lsls	r2, r2, #4
 8006ade:	430a      	orrs	r2, r1
 8006ae0:	492d      	ldr	r1, [pc, #180]	; (8006b98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	614b      	str	r3, [r1, #20]
 8006ae6:	e02d      	b.n	8006b44 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d115      	bne.n	8006b1a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006aee:	4b2a      	ldr	r3, [pc, #168]	; (8006b98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006af0:	695a      	ldr	r2, [r3, #20]
 8006af2:	4b2b      	ldr	r3, [pc, #172]	; (8006ba0 <RCCEx_PLLSAI2_Config+0x1e0>)
 8006af4:	4013      	ands	r3, r2
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	6892      	ldr	r2, [r2, #8]
 8006afa:	0211      	lsls	r1, r2, #8
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	6912      	ldr	r2, [r2, #16]
 8006b00:	0852      	lsrs	r2, r2, #1
 8006b02:	3a01      	subs	r2, #1
 8006b04:	0552      	lsls	r2, r2, #21
 8006b06:	4311      	orrs	r1, r2
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	6852      	ldr	r2, [r2, #4]
 8006b0c:	3a01      	subs	r2, #1
 8006b0e:	0112      	lsls	r2, r2, #4
 8006b10:	430a      	orrs	r2, r1
 8006b12:	4921      	ldr	r1, [pc, #132]	; (8006b98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b14:	4313      	orrs	r3, r2
 8006b16:	614b      	str	r3, [r1, #20]
 8006b18:	e014      	b.n	8006b44 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006b1a:	4b1f      	ldr	r3, [pc, #124]	; (8006b98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b1c:	695a      	ldr	r2, [r3, #20]
 8006b1e:	4b21      	ldr	r3, [pc, #132]	; (8006ba4 <RCCEx_PLLSAI2_Config+0x1e4>)
 8006b20:	4013      	ands	r3, r2
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	6892      	ldr	r2, [r2, #8]
 8006b26:	0211      	lsls	r1, r2, #8
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	6952      	ldr	r2, [r2, #20]
 8006b2c:	0852      	lsrs	r2, r2, #1
 8006b2e:	3a01      	subs	r2, #1
 8006b30:	0652      	lsls	r2, r2, #25
 8006b32:	4311      	orrs	r1, r2
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	6852      	ldr	r2, [r2, #4]
 8006b38:	3a01      	subs	r2, #1
 8006b3a:	0112      	lsls	r2, r2, #4
 8006b3c:	430a      	orrs	r2, r1
 8006b3e:	4916      	ldr	r1, [pc, #88]	; (8006b98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b40:	4313      	orrs	r3, r2
 8006b42:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006b44:	4b14      	ldr	r3, [pc, #80]	; (8006b98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a13      	ldr	r2, [pc, #76]	; (8006b98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b4e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b50:	f7fc f83a 	bl	8002bc8 <HAL_GetTick>
 8006b54:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006b56:	e009      	b.n	8006b6c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006b58:	f7fc f836 	bl	8002bc8 <HAL_GetTick>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	2b02      	cmp	r3, #2
 8006b64:	d902      	bls.n	8006b6c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006b66:	2303      	movs	r3, #3
 8006b68:	73fb      	strb	r3, [r7, #15]
          break;
 8006b6a:	e005      	b.n	8006b78 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006b6c:	4b0a      	ldr	r3, [pc, #40]	; (8006b98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d0ef      	beq.n	8006b58 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006b78:	7bfb      	ldrb	r3, [r7, #15]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d106      	bne.n	8006b8c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006b7e:	4b06      	ldr	r3, [pc, #24]	; (8006b98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b80:	695a      	ldr	r2, [r3, #20]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	699b      	ldr	r3, [r3, #24]
 8006b86:	4904      	ldr	r1, [pc, #16]	; (8006b98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3710      	adds	r7, #16
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop
 8006b98:	40021000 	.word	0x40021000
 8006b9c:	07ff800f 	.word	0x07ff800f
 8006ba0:	ff9f800f 	.word	0xff9f800f
 8006ba4:	f9ff800f 	.word	0xf9ff800f

08006ba8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b084      	sub	sp, #16
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d101      	bne.n	8006bba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e095      	b.n	8006ce6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d108      	bne.n	8006bd4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006bca:	d009      	beq.n	8006be0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	61da      	str	r2, [r3, #28]
 8006bd2:	e005      	b.n	8006be0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d106      	bne.n	8006c00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f7fb fd78 	bl	80026f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2202      	movs	r2, #2
 8006c04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c16:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006c20:	d902      	bls.n	8006c28 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006c22:	2300      	movs	r3, #0
 8006c24:	60fb      	str	r3, [r7, #12]
 8006c26:	e002      	b.n	8006c2e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006c28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c2c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006c36:	d007      	beq.n	8006c48 <HAL_SPI_Init+0xa0>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006c40:	d002      	beq.n	8006c48 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006c58:	431a      	orrs	r2, r3
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	691b      	ldr	r3, [r3, #16]
 8006c5e:	f003 0302 	and.w	r3, r3, #2
 8006c62:	431a      	orrs	r2, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	695b      	ldr	r3, [r3, #20]
 8006c68:	f003 0301 	and.w	r3, r3, #1
 8006c6c:	431a      	orrs	r2, r3
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	699b      	ldr	r3, [r3, #24]
 8006c72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c76:	431a      	orrs	r2, r3
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	69db      	ldr	r3, [r3, #28]
 8006c7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c80:	431a      	orrs	r2, r3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6a1b      	ldr	r3, [r3, #32]
 8006c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c8a:	ea42 0103 	orr.w	r1, r2, r3
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c92:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	430a      	orrs	r2, r1
 8006c9c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	699b      	ldr	r3, [r3, #24]
 8006ca2:	0c1b      	lsrs	r3, r3, #16
 8006ca4:	f003 0204 	and.w	r2, r3, #4
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cac:	f003 0310 	and.w	r3, r3, #16
 8006cb0:	431a      	orrs	r2, r3
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cb6:	f003 0308 	and.w	r3, r3, #8
 8006cba:	431a      	orrs	r2, r3
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006cc4:	ea42 0103 	orr.w	r1, r2, r3
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	430a      	orrs	r2, r1
 8006cd4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006ce4:	2300      	movs	r3, #0
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3710      	adds	r7, #16
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}

08006cee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cee:	b580      	push	{r7, lr}
 8006cf0:	b088      	sub	sp, #32
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	60f8      	str	r0, [r7, #12]
 8006cf6:	60b9      	str	r1, [r7, #8]
 8006cf8:	603b      	str	r3, [r7, #0]
 8006cfa:	4613      	mov	r3, r2
 8006cfc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d101      	bne.n	8006d10 <HAL_SPI_Transmit+0x22>
 8006d0c:	2302      	movs	r3, #2
 8006d0e:	e15f      	b.n	8006fd0 <HAL_SPI_Transmit+0x2e2>
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2201      	movs	r2, #1
 8006d14:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d18:	f7fb ff56 	bl	8002bc8 <HAL_GetTick>
 8006d1c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006d1e:	88fb      	ldrh	r3, [r7, #6]
 8006d20:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d002      	beq.n	8006d34 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006d2e:	2302      	movs	r3, #2
 8006d30:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006d32:	e148      	b.n	8006fc6 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d002      	beq.n	8006d40 <HAL_SPI_Transmit+0x52>
 8006d3a:	88fb      	ldrh	r3, [r7, #6]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d102      	bne.n	8006d46 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006d44:	e13f      	b.n	8006fc6 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2203      	movs	r2, #3
 8006d4a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2200      	movs	r2, #0
 8006d52:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	68ba      	ldr	r2, [r7, #8]
 8006d58:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	88fa      	ldrh	r2, [r7, #6]
 8006d5e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	88fa      	ldrh	r2, [r7, #6]
 8006d64:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2200      	movs	r2, #0
 8006d86:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d90:	d10f      	bne.n	8006db2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006da0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006db0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dbc:	2b40      	cmp	r3, #64	; 0x40
 8006dbe:	d007      	beq.n	8006dd0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006dce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006dd8:	d94f      	bls.n	8006e7a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d002      	beq.n	8006de8 <HAL_SPI_Transmit+0xfa>
 8006de2:	8afb      	ldrh	r3, [r7, #22]
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d142      	bne.n	8006e6e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dec:	881a      	ldrh	r2, [r3, #0]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006df8:	1c9a      	adds	r2, r3, #2
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	3b01      	subs	r3, #1
 8006e06:	b29a      	uxth	r2, r3
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006e0c:	e02f      	b.n	8006e6e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	f003 0302 	and.w	r3, r3, #2
 8006e18:	2b02      	cmp	r3, #2
 8006e1a:	d112      	bne.n	8006e42 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e20:	881a      	ldrh	r2, [r3, #0]
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e2c:	1c9a      	adds	r2, r3, #2
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	3b01      	subs	r3, #1
 8006e3a:	b29a      	uxth	r2, r3
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006e40:	e015      	b.n	8006e6e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e42:	f7fb fec1 	bl	8002bc8 <HAL_GetTick>
 8006e46:	4602      	mov	r2, r0
 8006e48:	69bb      	ldr	r3, [r7, #24]
 8006e4a:	1ad3      	subs	r3, r2, r3
 8006e4c:	683a      	ldr	r2, [r7, #0]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d803      	bhi.n	8006e5a <HAL_SPI_Transmit+0x16c>
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e58:	d102      	bne.n	8006e60 <HAL_SPI_Transmit+0x172>
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d106      	bne.n	8006e6e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8006e60:	2303      	movs	r3, #3
 8006e62:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006e6c:	e0ab      	b.n	8006fc6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d1ca      	bne.n	8006e0e <HAL_SPI_Transmit+0x120>
 8006e78:	e080      	b.n	8006f7c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d002      	beq.n	8006e88 <HAL_SPI_Transmit+0x19a>
 8006e82:	8afb      	ldrh	r3, [r7, #22]
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d174      	bne.n	8006f72 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d912      	bls.n	8006eb8 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e96:	881a      	ldrh	r2, [r3, #0]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea2:	1c9a      	adds	r2, r3, #2
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	3b02      	subs	r3, #2
 8006eb0:	b29a      	uxth	r2, r3
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006eb6:	e05c      	b.n	8006f72 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	330c      	adds	r3, #12
 8006ec2:	7812      	ldrb	r2, [r2, #0]
 8006ec4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eca:	1c5a      	adds	r2, r3, #1
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	3b01      	subs	r3, #1
 8006ed8:	b29a      	uxth	r2, r3
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006ede:	e048      	b.n	8006f72 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	f003 0302 	and.w	r3, r3, #2
 8006eea:	2b02      	cmp	r3, #2
 8006eec:	d12b      	bne.n	8006f46 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d912      	bls.n	8006f1e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006efc:	881a      	ldrh	r2, [r3, #0]
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f08:	1c9a      	adds	r2, r3, #2
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	3b02      	subs	r3, #2
 8006f16:	b29a      	uxth	r2, r3
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006f1c:	e029      	b.n	8006f72 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	330c      	adds	r3, #12
 8006f28:	7812      	ldrb	r2, [r2, #0]
 8006f2a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f30:	1c5a      	adds	r2, r3, #1
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	3b01      	subs	r3, #1
 8006f3e:	b29a      	uxth	r2, r3
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006f44:	e015      	b.n	8006f72 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f46:	f7fb fe3f 	bl	8002bc8 <HAL_GetTick>
 8006f4a:	4602      	mov	r2, r0
 8006f4c:	69bb      	ldr	r3, [r7, #24]
 8006f4e:	1ad3      	subs	r3, r2, r3
 8006f50:	683a      	ldr	r2, [r7, #0]
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d803      	bhi.n	8006f5e <HAL_SPI_Transmit+0x270>
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f5c:	d102      	bne.n	8006f64 <HAL_SPI_Transmit+0x276>
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d106      	bne.n	8006f72 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8006f64:	2303      	movs	r3, #3
 8006f66:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006f70:	e029      	b.n	8006fc6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d1b1      	bne.n	8006ee0 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f7c:	69ba      	ldr	r2, [r7, #24]
 8006f7e:	6839      	ldr	r1, [r7, #0]
 8006f80:	68f8      	ldr	r0, [r7, #12]
 8006f82:	f001 f8cb 	bl	800811c <SPI_EndRxTxTransaction>
 8006f86:	4603      	mov	r3, r0
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d002      	beq.n	8006f92 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2220      	movs	r2, #32
 8006f90:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d10a      	bne.n	8006fb0 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	613b      	str	r3, [r7, #16]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	613b      	str	r3, [r7, #16]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	613b      	str	r3, [r7, #16]
 8006fae:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d002      	beq.n	8006fbe <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	77fb      	strb	r3, [r7, #31]
 8006fbc:	e003      	b.n	8006fc6 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2201      	movs	r2, #1
 8006fc2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006fce:	7ffb      	ldrb	r3, [r7, #31]
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3720      	adds	r7, #32
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b088      	sub	sp, #32
 8006fdc:	af02      	add	r7, sp, #8
 8006fde:	60f8      	str	r0, [r7, #12]
 8006fe0:	60b9      	str	r1, [r7, #8]
 8006fe2:	603b      	str	r3, [r7, #0]
 8006fe4:	4613      	mov	r3, r2
 8006fe6:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d002      	beq.n	8006ffe <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8006ff8:	2302      	movs	r3, #2
 8006ffa:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006ffc:	e11a      	b.n	8007234 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007006:	d112      	bne.n	800702e <HAL_SPI_Receive+0x56>
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d10e      	bne.n	800702e <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2204      	movs	r2, #4
 8007014:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007018:	88fa      	ldrh	r2, [r7, #6]
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	9300      	str	r3, [sp, #0]
 800701e:	4613      	mov	r3, r2
 8007020:	68ba      	ldr	r2, [r7, #8]
 8007022:	68b9      	ldr	r1, [r7, #8]
 8007024:	68f8      	ldr	r0, [r7, #12]
 8007026:	f000 f90e 	bl	8007246 <HAL_SPI_TransmitReceive>
 800702a:	4603      	mov	r3, r0
 800702c:	e107      	b.n	800723e <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007034:	2b01      	cmp	r3, #1
 8007036:	d101      	bne.n	800703c <HAL_SPI_Receive+0x64>
 8007038:	2302      	movs	r3, #2
 800703a:	e100      	b.n	800723e <HAL_SPI_Receive+0x266>
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2201      	movs	r2, #1
 8007040:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007044:	f7fb fdc0 	bl	8002bc8 <HAL_GetTick>
 8007048:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d002      	beq.n	8007056 <HAL_SPI_Receive+0x7e>
 8007050:	88fb      	ldrh	r3, [r7, #6]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d102      	bne.n	800705c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	75fb      	strb	r3, [r7, #23]
    goto error;
 800705a:	e0eb      	b.n	8007234 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2204      	movs	r2, #4
 8007060:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2200      	movs	r2, #0
 8007068:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	68ba      	ldr	r2, [r7, #8]
 800706e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	88fa      	ldrh	r2, [r7, #6]
 8007074:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	88fa      	ldrh	r2, [r7, #6]
 800707c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2200      	movs	r2, #0
 8007084:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2200      	movs	r2, #0
 800708a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2200      	movs	r2, #0
 8007090:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2200      	movs	r2, #0
 8007096:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2200      	movs	r2, #0
 800709c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	68db      	ldr	r3, [r3, #12]
 80070a2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80070a6:	d908      	bls.n	80070ba <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	685a      	ldr	r2, [r3, #4]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80070b6:	605a      	str	r2, [r3, #4]
 80070b8:	e007      	b.n	80070ca <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	685a      	ldr	r2, [r3, #4]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80070c8:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070d2:	d10f      	bne.n	80070f4 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070e2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80070f2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070fe:	2b40      	cmp	r3, #64	; 0x40
 8007100:	d007      	beq.n	8007112 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007110:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	68db      	ldr	r3, [r3, #12]
 8007116:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800711a:	d86f      	bhi.n	80071fc <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800711c:	e034      	b.n	8007188 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	f003 0301 	and.w	r3, r3, #1
 8007128:	2b01      	cmp	r3, #1
 800712a:	d117      	bne.n	800715c <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f103 020c 	add.w	r2, r3, #12
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007138:	7812      	ldrb	r2, [r2, #0]
 800713a:	b2d2      	uxtb	r2, r2
 800713c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007142:	1c5a      	adds	r2, r3, #1
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800714e:	b29b      	uxth	r3, r3
 8007150:	3b01      	subs	r3, #1
 8007152:	b29a      	uxth	r2, r3
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800715a:	e015      	b.n	8007188 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800715c:	f7fb fd34 	bl	8002bc8 <HAL_GetTick>
 8007160:	4602      	mov	r2, r0
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	1ad3      	subs	r3, r2, r3
 8007166:	683a      	ldr	r2, [r7, #0]
 8007168:	429a      	cmp	r2, r3
 800716a:	d803      	bhi.n	8007174 <HAL_SPI_Receive+0x19c>
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007172:	d102      	bne.n	800717a <HAL_SPI_Receive+0x1a2>
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d106      	bne.n	8007188 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 800717a:	2303      	movs	r3, #3
 800717c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2201      	movs	r2, #1
 8007182:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8007186:	e055      	b.n	8007234 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800718e:	b29b      	uxth	r3, r3
 8007190:	2b00      	cmp	r3, #0
 8007192:	d1c4      	bne.n	800711e <HAL_SPI_Receive+0x146>
 8007194:	e038      	b.n	8007208 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	f003 0301 	and.w	r3, r3, #1
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d115      	bne.n	80071d0 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	68da      	ldr	r2, [r3, #12]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ae:	b292      	uxth	r2, r2
 80071b0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b6:	1c9a      	adds	r2, r3, #2
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	3b01      	subs	r3, #1
 80071c6:	b29a      	uxth	r2, r3
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80071ce:	e015      	b.n	80071fc <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071d0:	f7fb fcfa 	bl	8002bc8 <HAL_GetTick>
 80071d4:	4602      	mov	r2, r0
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	1ad3      	subs	r3, r2, r3
 80071da:	683a      	ldr	r2, [r7, #0]
 80071dc:	429a      	cmp	r2, r3
 80071de:	d803      	bhi.n	80071e8 <HAL_SPI_Receive+0x210>
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071e6:	d102      	bne.n	80071ee <HAL_SPI_Receive+0x216>
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d106      	bne.n	80071fc <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 80071ee:	2303      	movs	r3, #3
 80071f0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2201      	movs	r2, #1
 80071f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80071fa:	e01b      	b.n	8007234 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007202:	b29b      	uxth	r3, r3
 8007204:	2b00      	cmp	r3, #0
 8007206:	d1c6      	bne.n	8007196 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007208:	693a      	ldr	r2, [r7, #16]
 800720a:	6839      	ldr	r1, [r7, #0]
 800720c:	68f8      	ldr	r0, [r7, #12]
 800720e:	f000 ff2d 	bl	800806c <SPI_EndRxTransaction>
 8007212:	4603      	mov	r3, r0
 8007214:	2b00      	cmp	r3, #0
 8007216:	d002      	beq.n	800721e <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2220      	movs	r2, #32
 800721c:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007222:	2b00      	cmp	r3, #0
 8007224:	d002      	beq.n	800722c <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	75fb      	strb	r3, [r7, #23]
 800722a:	e003      	b.n	8007234 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2201      	movs	r2, #1
 8007230:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2200      	movs	r2, #0
 8007238:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800723c:	7dfb      	ldrb	r3, [r7, #23]
}
 800723e:	4618      	mov	r0, r3
 8007240:	3718      	adds	r7, #24
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}

08007246 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007246:	b580      	push	{r7, lr}
 8007248:	b08a      	sub	sp, #40	; 0x28
 800724a:	af00      	add	r7, sp, #0
 800724c:	60f8      	str	r0, [r7, #12]
 800724e:	60b9      	str	r1, [r7, #8]
 8007250:	607a      	str	r2, [r7, #4]
 8007252:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007254:	2301      	movs	r3, #1
 8007256:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007258:	2300      	movs	r3, #0
 800725a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007264:	2b01      	cmp	r3, #1
 8007266:	d101      	bne.n	800726c <HAL_SPI_TransmitReceive+0x26>
 8007268:	2302      	movs	r3, #2
 800726a:	e20a      	b.n	8007682 <HAL_SPI_TransmitReceive+0x43c>
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2201      	movs	r2, #1
 8007270:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007274:	f7fb fca8 	bl	8002bc8 <HAL_GetTick>
 8007278:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007280:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007288:	887b      	ldrh	r3, [r7, #2]
 800728a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800728c:	887b      	ldrh	r3, [r7, #2]
 800728e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007290:	7efb      	ldrb	r3, [r7, #27]
 8007292:	2b01      	cmp	r3, #1
 8007294:	d00e      	beq.n	80072b4 <HAL_SPI_TransmitReceive+0x6e>
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800729c:	d106      	bne.n	80072ac <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d102      	bne.n	80072ac <HAL_SPI_TransmitReceive+0x66>
 80072a6:	7efb      	ldrb	r3, [r7, #27]
 80072a8:	2b04      	cmp	r3, #4
 80072aa:	d003      	beq.n	80072b4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80072ac:	2302      	movs	r3, #2
 80072ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80072b2:	e1e0      	b.n	8007676 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d005      	beq.n	80072c6 <HAL_SPI_TransmitReceive+0x80>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d002      	beq.n	80072c6 <HAL_SPI_TransmitReceive+0x80>
 80072c0:	887b      	ldrh	r3, [r7, #2]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d103      	bne.n	80072ce <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80072cc:	e1d3      	b.n	8007676 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	2b04      	cmp	r3, #4
 80072d8:	d003      	beq.n	80072e2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2205      	movs	r2, #5
 80072de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2200      	movs	r2, #0
 80072e6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	887a      	ldrh	r2, [r7, #2]
 80072f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	887a      	ldrh	r2, [r7, #2]
 80072fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	68ba      	ldr	r2, [r7, #8]
 8007302:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	887a      	ldrh	r2, [r7, #2]
 8007308:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	887a      	ldrh	r2, [r7, #2]
 800730e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2200      	movs	r2, #0
 8007314:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2200      	movs	r2, #0
 800731a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007324:	d802      	bhi.n	800732c <HAL_SPI_TransmitReceive+0xe6>
 8007326:	8a3b      	ldrh	r3, [r7, #16]
 8007328:	2b01      	cmp	r3, #1
 800732a:	d908      	bls.n	800733e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	685a      	ldr	r2, [r3, #4]
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800733a:	605a      	str	r2, [r3, #4]
 800733c:	e007      	b.n	800734e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	685a      	ldr	r2, [r3, #4]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800734c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007358:	2b40      	cmp	r3, #64	; 0x40
 800735a:	d007      	beq.n	800736c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800736a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	68db      	ldr	r3, [r3, #12]
 8007370:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007374:	f240 8081 	bls.w	800747a <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d002      	beq.n	8007386 <HAL_SPI_TransmitReceive+0x140>
 8007380:	8a7b      	ldrh	r3, [r7, #18]
 8007382:	2b01      	cmp	r3, #1
 8007384:	d16d      	bne.n	8007462 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800738a:	881a      	ldrh	r2, [r3, #0]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007396:	1c9a      	adds	r2, r3, #2
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	3b01      	subs	r3, #1
 80073a4:	b29a      	uxth	r2, r3
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073aa:	e05a      	b.n	8007462 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	f003 0302 	and.w	r3, r3, #2
 80073b6:	2b02      	cmp	r3, #2
 80073b8:	d11b      	bne.n	80073f2 <HAL_SPI_TransmitReceive+0x1ac>
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073be:	b29b      	uxth	r3, r3
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d016      	beq.n	80073f2 <HAL_SPI_TransmitReceive+0x1ac>
 80073c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d113      	bne.n	80073f2 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ce:	881a      	ldrh	r2, [r3, #0]
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073da:	1c9a      	adds	r2, r3, #2
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	3b01      	subs	r3, #1
 80073e8:	b29a      	uxth	r2, r3
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80073ee:	2300      	movs	r3, #0
 80073f0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	689b      	ldr	r3, [r3, #8]
 80073f8:	f003 0301 	and.w	r3, r3, #1
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d11c      	bne.n	800743a <HAL_SPI_TransmitReceive+0x1f4>
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007406:	b29b      	uxth	r3, r3
 8007408:	2b00      	cmp	r3, #0
 800740a:	d016      	beq.n	800743a <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	68da      	ldr	r2, [r3, #12]
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007416:	b292      	uxth	r2, r2
 8007418:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800741e:	1c9a      	adds	r2, r3, #2
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800742a:	b29b      	uxth	r3, r3
 800742c:	3b01      	subs	r3, #1
 800742e:	b29a      	uxth	r2, r3
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007436:	2301      	movs	r3, #1
 8007438:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800743a:	f7fb fbc5 	bl	8002bc8 <HAL_GetTick>
 800743e:	4602      	mov	r2, r0
 8007440:	69fb      	ldr	r3, [r7, #28]
 8007442:	1ad3      	subs	r3, r2, r3
 8007444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007446:	429a      	cmp	r2, r3
 8007448:	d80b      	bhi.n	8007462 <HAL_SPI_TransmitReceive+0x21c>
 800744a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800744c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007450:	d007      	beq.n	8007462 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8007452:	2303      	movs	r3, #3
 8007454:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2201      	movs	r2, #1
 800745c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8007460:	e109      	b.n	8007676 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007466:	b29b      	uxth	r3, r3
 8007468:	2b00      	cmp	r3, #0
 800746a:	d19f      	bne.n	80073ac <HAL_SPI_TransmitReceive+0x166>
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007472:	b29b      	uxth	r3, r3
 8007474:	2b00      	cmp	r3, #0
 8007476:	d199      	bne.n	80073ac <HAL_SPI_TransmitReceive+0x166>
 8007478:	e0e3      	b.n	8007642 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d003      	beq.n	800748a <HAL_SPI_TransmitReceive+0x244>
 8007482:	8a7b      	ldrh	r3, [r7, #18]
 8007484:	2b01      	cmp	r3, #1
 8007486:	f040 80cf 	bne.w	8007628 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800748e:	b29b      	uxth	r3, r3
 8007490:	2b01      	cmp	r3, #1
 8007492:	d912      	bls.n	80074ba <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007498:	881a      	ldrh	r2, [r3, #0]
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a4:	1c9a      	adds	r2, r3, #2
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	3b02      	subs	r3, #2
 80074b2:	b29a      	uxth	r2, r3
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80074b8:	e0b6      	b.n	8007628 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	330c      	adds	r3, #12
 80074c4:	7812      	ldrb	r2, [r2, #0]
 80074c6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074cc:	1c5a      	adds	r2, r3, #1
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	3b01      	subs	r3, #1
 80074da:	b29a      	uxth	r2, r3
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074e0:	e0a2      	b.n	8007628 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	f003 0302 	and.w	r3, r3, #2
 80074ec:	2b02      	cmp	r3, #2
 80074ee:	d134      	bne.n	800755a <HAL_SPI_TransmitReceive+0x314>
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d02f      	beq.n	800755a <HAL_SPI_TransmitReceive+0x314>
 80074fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d12c      	bne.n	800755a <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007504:	b29b      	uxth	r3, r3
 8007506:	2b01      	cmp	r3, #1
 8007508:	d912      	bls.n	8007530 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800750e:	881a      	ldrh	r2, [r3, #0]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800751a:	1c9a      	adds	r2, r3, #2
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007524:	b29b      	uxth	r3, r3
 8007526:	3b02      	subs	r3, #2
 8007528:	b29a      	uxth	r2, r3
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800752e:	e012      	b.n	8007556 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	330c      	adds	r3, #12
 800753a:	7812      	ldrb	r2, [r2, #0]
 800753c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007542:	1c5a      	adds	r2, r3, #1
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800754c:	b29b      	uxth	r3, r3
 800754e:	3b01      	subs	r3, #1
 8007550:	b29a      	uxth	r2, r3
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007556:	2300      	movs	r3, #0
 8007558:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	f003 0301 	and.w	r3, r3, #1
 8007564:	2b01      	cmp	r3, #1
 8007566:	d148      	bne.n	80075fa <HAL_SPI_TransmitReceive+0x3b4>
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800756e:	b29b      	uxth	r3, r3
 8007570:	2b00      	cmp	r3, #0
 8007572:	d042      	beq.n	80075fa <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800757a:	b29b      	uxth	r3, r3
 800757c:	2b01      	cmp	r3, #1
 800757e:	d923      	bls.n	80075c8 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	68da      	ldr	r2, [r3, #12]
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800758a:	b292      	uxth	r2, r2
 800758c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007592:	1c9a      	adds	r2, r3, #2
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800759e:	b29b      	uxth	r3, r3
 80075a0:	3b02      	subs	r3, #2
 80075a2:	b29a      	uxth	r2, r3
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d81f      	bhi.n	80075f6 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	685a      	ldr	r2, [r3, #4]
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80075c4:	605a      	str	r2, [r3, #4]
 80075c6:	e016      	b.n	80075f6 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f103 020c 	add.w	r2, r3, #12
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d4:	7812      	ldrb	r2, [r2, #0]
 80075d6:	b2d2      	uxtb	r2, r2
 80075d8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075de:	1c5a      	adds	r2, r3, #1
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	3b01      	subs	r3, #1
 80075ee:	b29a      	uxth	r2, r3
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80075f6:	2301      	movs	r3, #1
 80075f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80075fa:	f7fb fae5 	bl	8002bc8 <HAL_GetTick>
 80075fe:	4602      	mov	r2, r0
 8007600:	69fb      	ldr	r3, [r7, #28]
 8007602:	1ad3      	subs	r3, r2, r3
 8007604:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007606:	429a      	cmp	r2, r3
 8007608:	d803      	bhi.n	8007612 <HAL_SPI_TransmitReceive+0x3cc>
 800760a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800760c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007610:	d102      	bne.n	8007618 <HAL_SPI_TransmitReceive+0x3d2>
 8007612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007614:	2b00      	cmp	r3, #0
 8007616:	d107      	bne.n	8007628 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8007618:	2303      	movs	r3, #3
 800761a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2201      	movs	r2, #1
 8007622:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8007626:	e026      	b.n	8007676 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800762c:	b29b      	uxth	r3, r3
 800762e:	2b00      	cmp	r3, #0
 8007630:	f47f af57 	bne.w	80074e2 <HAL_SPI_TransmitReceive+0x29c>
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800763a:	b29b      	uxth	r3, r3
 800763c:	2b00      	cmp	r3, #0
 800763e:	f47f af50 	bne.w	80074e2 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007642:	69fa      	ldr	r2, [r7, #28]
 8007644:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007646:	68f8      	ldr	r0, [r7, #12]
 8007648:	f000 fd68 	bl	800811c <SPI_EndRxTxTransaction>
 800764c:	4603      	mov	r3, r0
 800764e:	2b00      	cmp	r3, #0
 8007650:	d005      	beq.n	800765e <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8007652:	2301      	movs	r3, #1
 8007654:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2220      	movs	r2, #32
 800765c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007662:	2b00      	cmp	r3, #0
 8007664:	d003      	beq.n	800766e <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800766c:	e003      	b.n	8007676 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2201      	movs	r2, #1
 8007672:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2200      	movs	r2, #0
 800767a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800767e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007682:	4618      	mov	r0, r3
 8007684:	3728      	adds	r7, #40	; 0x28
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
	...

0800768c <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b086      	sub	sp, #24
 8007690:	af00      	add	r7, sp, #0
 8007692:	60f8      	str	r0, [r7, #12]
 8007694:	60b9      	str	r1, [r7, #8]
 8007696:	4613      	mov	r3, r2
 8007698:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800769a:	2300      	movs	r3, #0
 800769c:	75fb      	strb	r3, [r7, #23]


  if (hspi->State != HAL_SPI_STATE_READY)
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	d002      	beq.n	80076b0 <HAL_SPI_Receive_IT+0x24>
  {
    errorcode = HAL_BUSY;
 80076aa:	2302      	movs	r3, #2
 80076ac:	75fb      	strb	r3, [r7, #23]
    goto error;
 80076ae:	e092      	b.n	80077d6 <HAL_SPI_Receive_IT+0x14a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d110      	bne.n	80076da <HAL_SPI_Receive_IT+0x4e>
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076c0:	d10b      	bne.n	80076da <HAL_SPI_Receive_IT+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2204      	movs	r2, #4
 80076c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80076ca:	88fb      	ldrh	r3, [r7, #6]
 80076cc:	68ba      	ldr	r2, [r7, #8]
 80076ce:	68b9      	ldr	r1, [r7, #8]
 80076d0:	68f8      	ldr	r0, [r7, #12]
 80076d2:	f000 f889 	bl	80077e8 <HAL_SPI_TransmitReceive_IT>
 80076d6:	4603      	mov	r3, r0
 80076d8:	e07e      	b.n	80077d8 <HAL_SPI_Receive_IT+0x14c>
  }


  if ((pData == NULL) || (Size == 0U))
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d002      	beq.n	80076e6 <HAL_SPI_Receive_IT+0x5a>
 80076e0:	88fb      	ldrh	r3, [r7, #6]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d102      	bne.n	80076ec <HAL_SPI_Receive_IT+0x60>
  {
    errorcode = HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80076ea:	e074      	b.n	80077d6 <HAL_SPI_Receive_IT+0x14a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d101      	bne.n	80076fa <HAL_SPI_Receive_IT+0x6e>
 80076f6:	2302      	movs	r3, #2
 80076f8:	e06e      	b.n	80077d8 <HAL_SPI_Receive_IT+0x14c>
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2201      	movs	r2, #1
 80076fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2204      	movs	r2, #4
 8007706:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2200      	movs	r2, #0
 800770e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	68ba      	ldr	r2, [r7, #8]
 8007714:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	88fa      	ldrh	r2, [r7, #6]
 800771a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	88fa      	ldrh	r2, [r7, #6]
 8007722:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2200      	movs	r2, #0
 800772a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2200      	movs	r2, #0
 8007730:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2200      	movs	r2, #0
 8007736:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2200      	movs	r2, #0
 800773c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	68db      	ldr	r3, [r3, #12]
 8007742:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007746:	d90b      	bls.n	8007760 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	685a      	ldr	r2, [r3, #4]
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007756:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	4a21      	ldr	r2, [pc, #132]	; (80077e0 <HAL_SPI_Receive_IT+0x154>)
 800775c:	64da      	str	r2, [r3, #76]	; 0x4c
 800775e:	e00a      	b.n	8007776 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	685a      	ldr	r2, [r3, #4]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800776e:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	4a1c      	ldr	r2, [pc, #112]	; (80077e4 <HAL_SPI_Receive_IT+0x158>)
 8007774:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800777e:	d10f      	bne.n	80077a0 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	681a      	ldr	r2, [r3, #0]
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800778e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	681a      	ldr	r2, [r3, #0]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800779e:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077aa:	2b40      	cmp	r3, #64	; 0x40
 80077ac:	d007      	beq.n	80077be <HAL_SPI_Receive_IT+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077bc:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2200      	movs	r2, #0
 80077c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	685a      	ldr	r2, [r3, #4]
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80077d4:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 80077d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3718      	adds	r7, #24
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}
 80077e0:	08007de5 	.word	0x08007de5
 80077e4:	08007d95 	.word	0x08007d95

080077e8 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b087      	sub	sp, #28
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	60f8      	str	r0, [r7, #12]
 80077f0:	60b9      	str	r1, [r7, #8]
 80077f2:	607a      	str	r2, [r7, #4]
 80077f4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80077f6:	2300      	movs	r3, #0
 80077f8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007800:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007808:	7dbb      	ldrb	r3, [r7, #22]
 800780a:	2b01      	cmp	r3, #1
 800780c:	d00d      	beq.n	800782a <HAL_SPI_TransmitReceive_IT+0x42>
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007814:	d106      	bne.n	8007824 <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d102      	bne.n	8007824 <HAL_SPI_TransmitReceive_IT+0x3c>
 800781e:	7dbb      	ldrb	r3, [r7, #22]
 8007820:	2b04      	cmp	r3, #4
 8007822:	d002      	beq.n	800782a <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 8007824:	2302      	movs	r3, #2
 8007826:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007828:	e07d      	b.n	8007926 <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d005      	beq.n	800783c <HAL_SPI_TransmitReceive_IT+0x54>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d002      	beq.n	800783c <HAL_SPI_TransmitReceive_IT+0x54>
 8007836:	887b      	ldrh	r3, [r7, #2]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d102      	bne.n	8007842 <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 800783c:	2301      	movs	r3, #1
 800783e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007840:	e071      	b.n	8007926 <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007848:	2b01      	cmp	r3, #1
 800784a:	d101      	bne.n	8007850 <HAL_SPI_TransmitReceive_IT+0x68>
 800784c:	2302      	movs	r3, #2
 800784e:	e06b      	b.n	8007928 <HAL_SPI_TransmitReceive_IT+0x140>
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2201      	movs	r2, #1
 8007854:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800785e:	b2db      	uxtb	r3, r3
 8007860:	2b04      	cmp	r3, #4
 8007862:	d003      	beq.n	800786c <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2205      	movs	r2, #5
 8007868:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2200      	movs	r2, #0
 8007870:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	68ba      	ldr	r2, [r7, #8]
 8007876:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	887a      	ldrh	r2, [r7, #2]
 800787c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	887a      	ldrh	r2, [r7, #2]
 8007882:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	687a      	ldr	r2, [r7, #4]
 8007888:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	887a      	ldrh	r2, [r7, #2]
 800788e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	887a      	ldrh	r2, [r7, #2]
 8007896:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	68db      	ldr	r3, [r3, #12]
 800789e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80078a2:	d906      	bls.n	80078b2 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	4a23      	ldr	r2, [pc, #140]	; (8007934 <HAL_SPI_TransmitReceive_IT+0x14c>)
 80078a8:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	4a22      	ldr	r2, [pc, #136]	; (8007938 <HAL_SPI_TransmitReceive_IT+0x150>)
 80078ae:	651a      	str	r2, [r3, #80]	; 0x50
 80078b0:	e005      	b.n	80078be <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	4a21      	ldr	r2, [pc, #132]	; (800793c <HAL_SPI_TransmitReceive_IT+0x154>)
 80078b6:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	4a21      	ldr	r2, [pc, #132]	; (8007940 <HAL_SPI_TransmitReceive_IT+0x158>)
 80078bc:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80078c6:	d802      	bhi.n	80078ce <HAL_SPI_TransmitReceive_IT+0xe6>
 80078c8:	887b      	ldrh	r3, [r7, #2]
 80078ca:	2b01      	cmp	r3, #1
 80078cc:	d908      	bls.n	80078e0 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	685a      	ldr	r2, [r3, #4]
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80078dc:	605a      	str	r2, [r3, #4]
 80078de:	e007      	b.n	80078f0 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	685a      	ldr	r2, [r3, #4]
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80078ee:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078fa:	2b40      	cmp	r3, #64	; 0x40
 80078fc:	d007      	beq.n	800790e <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	681a      	ldr	r2, [r3, #0]
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800790c:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2200      	movs	r2, #0
 8007912:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	685a      	ldr	r2, [r3, #4]
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8007924:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8007926:	7dfb      	ldrb	r3, [r7, #23]
}
 8007928:	4618      	mov	r0, r3
 800792a:	371c      	adds	r7, #28
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr
 8007934:	08007ccf 	.word	0x08007ccf
 8007938:	08007d35 	.word	0x08007d35
 800793c:	08007b7f 	.word	0x08007b7f
 8007940:	08007c3d 	.word	0x08007c3d

08007944 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b088      	sub	sp, #32
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	689b      	ldr	r3, [r3, #8]
 800795a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800795c:	69bb      	ldr	r3, [r7, #24]
 800795e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007962:	2b00      	cmp	r3, #0
 8007964:	d10e      	bne.n	8007984 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007966:	69bb      	ldr	r3, [r7, #24]
 8007968:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800796c:	2b00      	cmp	r3, #0
 800796e:	d009      	beq.n	8007984 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007970:	69fb      	ldr	r3, [r7, #28]
 8007972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007976:	2b00      	cmp	r3, #0
 8007978:	d004      	beq.n	8007984 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	4798      	blx	r3
    return;
 8007982:	e0ce      	b.n	8007b22 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007984:	69bb      	ldr	r3, [r7, #24]
 8007986:	f003 0302 	and.w	r3, r3, #2
 800798a:	2b00      	cmp	r3, #0
 800798c:	d009      	beq.n	80079a2 <HAL_SPI_IRQHandler+0x5e>
 800798e:	69fb      	ldr	r3, [r7, #28]
 8007990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007994:	2b00      	cmp	r3, #0
 8007996:	d004      	beq.n	80079a2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	4798      	blx	r3
    return;
 80079a0:	e0bf      	b.n	8007b22 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80079a2:	69bb      	ldr	r3, [r7, #24]
 80079a4:	f003 0320 	and.w	r3, r3, #32
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d10a      	bne.n	80079c2 <HAL_SPI_IRQHandler+0x7e>
 80079ac:	69bb      	ldr	r3, [r7, #24]
 80079ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d105      	bne.n	80079c2 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80079b6:	69bb      	ldr	r3, [r7, #24]
 80079b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079bc:	2b00      	cmp	r3, #0
 80079be:	f000 80b0 	beq.w	8007b22 <HAL_SPI_IRQHandler+0x1de>
 80079c2:	69fb      	ldr	r3, [r7, #28]
 80079c4:	f003 0320 	and.w	r3, r3, #32
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	f000 80aa 	beq.w	8007b22 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80079ce:	69bb      	ldr	r3, [r7, #24]
 80079d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d023      	beq.n	8007a20 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	2b03      	cmp	r3, #3
 80079e2:	d011      	beq.n	8007a08 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079e8:	f043 0204 	orr.w	r2, r3, #4
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80079f0:	2300      	movs	r3, #0
 80079f2:	617b      	str	r3, [r7, #20]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	68db      	ldr	r3, [r3, #12]
 80079fa:	617b      	str	r3, [r7, #20]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	689b      	ldr	r3, [r3, #8]
 8007a02:	617b      	str	r3, [r7, #20]
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	e00b      	b.n	8007a20 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007a08:	2300      	movs	r3, #0
 8007a0a:	613b      	str	r3, [r7, #16]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	68db      	ldr	r3, [r3, #12]
 8007a12:	613b      	str	r3, [r7, #16]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	613b      	str	r3, [r7, #16]
 8007a1c:	693b      	ldr	r3, [r7, #16]
        return;
 8007a1e:	e080      	b.n	8007b22 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007a20:	69bb      	ldr	r3, [r7, #24]
 8007a22:	f003 0320 	and.w	r3, r3, #32
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d014      	beq.n	8007a54 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a2e:	f043 0201 	orr.w	r2, r3, #1
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007a36:	2300      	movs	r3, #0
 8007a38:	60fb      	str	r3, [r7, #12]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	60fb      	str	r3, [r7, #12]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a50:	601a      	str	r2, [r3, #0]
 8007a52:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007a54:	69bb      	ldr	r3, [r7, #24]
 8007a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d00c      	beq.n	8007a78 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a62:	f043 0208 	orr.w	r2, r3, #8
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	60bb      	str	r3, [r7, #8]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	60bb      	str	r3, [r7, #8]
 8007a76:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d04f      	beq.n	8007b20 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	685a      	ldr	r2, [r3, #4]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007a8e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2201      	movs	r2, #1
 8007a94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007a98:	69fb      	ldr	r3, [r7, #28]
 8007a9a:	f003 0302 	and.w	r3, r3, #2
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d104      	bne.n	8007aac <HAL_SPI_IRQHandler+0x168>
 8007aa2:	69fb      	ldr	r3, [r7, #28]
 8007aa4:	f003 0301 	and.w	r3, r3, #1
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d034      	beq.n	8007b16 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	685a      	ldr	r2, [r3, #4]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f022 0203 	bic.w	r2, r2, #3
 8007aba:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d011      	beq.n	8007ae8 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ac8:	4a17      	ldr	r2, [pc, #92]	; (8007b28 <HAL_SPI_IRQHandler+0x1e4>)
 8007aca:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f7fb f9ba 	bl	8002e4a <HAL_DMA_Abort_IT>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d005      	beq.n	8007ae8 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ae0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d016      	beq.n	8007b1e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007af4:	4a0c      	ldr	r2, [pc, #48]	; (8007b28 <HAL_SPI_IRQHandler+0x1e4>)
 8007af6:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007afc:	4618      	mov	r0, r3
 8007afe:	f7fb f9a4 	bl	8002e4a <HAL_DMA_Abort_IT>
 8007b02:	4603      	mov	r3, r0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d00a      	beq.n	8007b1e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b0c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8007b14:	e003      	b.n	8007b1e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 f812 	bl	8007b40 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007b1c:	e000      	b.n	8007b20 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8007b1e:	bf00      	nop
    return;
 8007b20:	bf00      	nop
  }
}
 8007b22:	3720      	adds	r7, #32
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}
 8007b28:	08007b55 	.word	0x08007b55

08007b2c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007b34:	bf00      	nop
 8007b36:	370c      	adds	r7, #12
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr

08007b40 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b083      	sub	sp, #12
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007b48:	bf00      	nop
 8007b4a:	370c      	adds	r7, #12
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr

08007b54 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b084      	sub	sp, #16
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b60:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007b70:	68f8      	ldr	r0, [r7, #12]
 8007b72:	f7ff ffe5 	bl	8007b40 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007b76:	bf00      	nop
 8007b78:	3710      	adds	r7, #16
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}

08007b7e <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007b7e:	b580      	push	{r7, lr}
 8007b80:	b082      	sub	sp, #8
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	2b01      	cmp	r3, #1
 8007b90:	d923      	bls.n	8007bda <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	68da      	ldr	r2, [r3, #12]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b9c:	b292      	uxth	r2, r2
 8007b9e:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ba4:	1c9a      	adds	r2, r3, #2
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	3b02      	subs	r3, #2
 8007bb4:	b29a      	uxth	r2, r3
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d11f      	bne.n	8007c08 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	685a      	ldr	r2, [r3, #4]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007bd6:	605a      	str	r2, [r3, #4]
 8007bd8:	e016      	b.n	8007c08 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f103 020c 	add.w	r2, r3, #12
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007be6:	7812      	ldrb	r2, [r2, #0]
 8007be8:	b2d2      	uxtb	r2, r2
 8007bea:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bf0:	1c5a      	adds	r2, r3, #1
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	3b01      	subs	r3, #1
 8007c00:	b29a      	uxth	r2, r3
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d10f      	bne.n	8007c34 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	685a      	ldr	r2, [r3, #4]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007c22:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d102      	bne.n	8007c34 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 faba 	bl	80081a8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8007c34:	bf00      	nop
 8007c36:	3708      	adds	r7, #8
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}

08007c3c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b082      	sub	sp, #8
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c48:	b29b      	uxth	r3, r3
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	d912      	bls.n	8007c74 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c52:	881a      	ldrh	r2, [r3, #0]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c5e:	1c9a      	adds	r2, r3, #2
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c68:	b29b      	uxth	r3, r3
 8007c6a:	3b02      	subs	r3, #2
 8007c6c:	b29a      	uxth	r2, r3
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007c72:	e012      	b.n	8007c9a <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	330c      	adds	r3, #12
 8007c7e:	7812      	ldrb	r2, [r2, #0]
 8007c80:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c86:	1c5a      	adds	r2, r3, #1
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	3b01      	subs	r3, #1
 8007c94:	b29a      	uxth	r2, r3
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d110      	bne.n	8007cc6 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	685a      	ldr	r2, [r3, #4]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007cb2:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d102      	bne.n	8007cc6 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f000 fa71 	bl	80081a8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8007cc6:	bf00      	nop
 8007cc8:	3708      	adds	r7, #8
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}

08007cce <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007cce:	b580      	push	{r7, lr}
 8007cd0:	b082      	sub	sp, #8
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	68da      	ldr	r2, [r3, #12]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ce0:	b292      	uxth	r2, r2
 8007ce2:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ce8:	1c9a      	adds	r2, r3, #2
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	3b01      	subs	r3, #1
 8007cf8:	b29a      	uxth	r2, r3
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d10f      	bne.n	8007d2c <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	685a      	ldr	r2, [r3, #4]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d1a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d102      	bne.n	8007d2c <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 fa3e 	bl	80081a8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8007d2c:	bf00      	nop
 8007d2e:	3708      	adds	r7, #8
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b082      	sub	sp, #8
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d40:	881a      	ldrh	r2, [r3, #0]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d4c:	1c9a      	adds	r2, r3, #2
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	3b01      	subs	r3, #1
 8007d5a:	b29a      	uxth	r2, r3
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d110      	bne.n	8007d8c <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	685a      	ldr	r2, [r3, #4]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d78:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d102      	bne.n	8007d8c <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 fa0e 	bl	80081a8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8007d8c:	bf00      	nop
 8007d8e:	3708      	adds	r7, #8
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b082      	sub	sp, #8
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f103 020c 	add.w	r2, r3, #12
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da8:	7812      	ldrb	r2, [r2, #0]
 8007daa:	b2d2      	uxtb	r2, r2
 8007dac:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db2:	1c5a      	adds	r2, r3, #1
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	3b01      	subs	r3, #1
 8007dc2:	b29a      	uxth	r2, r3
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d102      	bne.n	8007ddc <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 fa28 	bl	800822c <SPI_CloseRx_ISR>
  }
}
 8007ddc:	bf00      	nop
 8007dde:	3708      	adds	r7, #8
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b082      	sub	sp, #8
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	68da      	ldr	r2, [r3, #12]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007df6:	b292      	uxth	r2, r2
 8007df8:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dfe:	1c9a      	adds	r2, r3, #2
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	3b01      	subs	r3, #1
 8007e0e:	b29a      	uxth	r2, r3
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e1c:	b29b      	uxth	r3, r3
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d102      	bne.n	8007e28 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 fa02 	bl	800822c <SPI_CloseRx_ISR>
  }
}
 8007e28:	bf00      	nop
 8007e2a:	3708      	adds	r7, #8
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}

08007e30 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b088      	sub	sp, #32
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	60f8      	str	r0, [r7, #12]
 8007e38:	60b9      	str	r1, [r7, #8]
 8007e3a:	603b      	str	r3, [r7, #0]
 8007e3c:	4613      	mov	r3, r2
 8007e3e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007e40:	f7fa fec2 	bl	8002bc8 <HAL_GetTick>
 8007e44:	4602      	mov	r2, r0
 8007e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e48:	1a9b      	subs	r3, r3, r2
 8007e4a:	683a      	ldr	r2, [r7, #0]
 8007e4c:	4413      	add	r3, r2
 8007e4e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007e50:	f7fa feba 	bl	8002bc8 <HAL_GetTick>
 8007e54:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007e56:	4b39      	ldr	r3, [pc, #228]	; (8007f3c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	015b      	lsls	r3, r3, #5
 8007e5c:	0d1b      	lsrs	r3, r3, #20
 8007e5e:	69fa      	ldr	r2, [r7, #28]
 8007e60:	fb02 f303 	mul.w	r3, r2, r3
 8007e64:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e66:	e054      	b.n	8007f12 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e6e:	d050      	beq.n	8007f12 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007e70:	f7fa feaa 	bl	8002bc8 <HAL_GetTick>
 8007e74:	4602      	mov	r2, r0
 8007e76:	69bb      	ldr	r3, [r7, #24]
 8007e78:	1ad3      	subs	r3, r2, r3
 8007e7a:	69fa      	ldr	r2, [r7, #28]
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d902      	bls.n	8007e86 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007e80:	69fb      	ldr	r3, [r7, #28]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d13d      	bne.n	8007f02 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	685a      	ldr	r2, [r3, #4]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007e94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e9e:	d111      	bne.n	8007ec4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ea8:	d004      	beq.n	8007eb4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	689b      	ldr	r3, [r3, #8]
 8007eae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007eb2:	d107      	bne.n	8007ec4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ec2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ec8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ecc:	d10f      	bne.n	8007eee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007edc:	601a      	str	r2, [r3, #0]
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	681a      	ldr	r2, [r3, #0]
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007eec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007efe:	2303      	movs	r3, #3
 8007f00:	e017      	b.n	8007f32 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d101      	bne.n	8007f0c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	3b01      	subs	r3, #1
 8007f10:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	689a      	ldr	r2, [r3, #8]
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	4013      	ands	r3, r2
 8007f1c:	68ba      	ldr	r2, [r7, #8]
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	bf0c      	ite	eq
 8007f22:	2301      	moveq	r3, #1
 8007f24:	2300      	movne	r3, #0
 8007f26:	b2db      	uxtb	r3, r3
 8007f28:	461a      	mov	r2, r3
 8007f2a:	79fb      	ldrb	r3, [r7, #7]
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d19b      	bne.n	8007e68 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007f30:	2300      	movs	r3, #0
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3720      	adds	r7, #32
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
 8007f3a:	bf00      	nop
 8007f3c:	20004b0c 	.word	0x20004b0c

08007f40 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b08a      	sub	sp, #40	; 0x28
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	60f8      	str	r0, [r7, #12]
 8007f48:	60b9      	str	r1, [r7, #8]
 8007f4a:	607a      	str	r2, [r7, #4]
 8007f4c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007f52:	f7fa fe39 	bl	8002bc8 <HAL_GetTick>
 8007f56:	4602      	mov	r2, r0
 8007f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f5a:	1a9b      	subs	r3, r3, r2
 8007f5c:	683a      	ldr	r2, [r7, #0]
 8007f5e:	4413      	add	r3, r2
 8007f60:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007f62:	f7fa fe31 	bl	8002bc8 <HAL_GetTick>
 8007f66:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	330c      	adds	r3, #12
 8007f6e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007f70:	4b3d      	ldr	r3, [pc, #244]	; (8008068 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007f72:	681a      	ldr	r2, [r3, #0]
 8007f74:	4613      	mov	r3, r2
 8007f76:	009b      	lsls	r3, r3, #2
 8007f78:	4413      	add	r3, r2
 8007f7a:	00da      	lsls	r2, r3, #3
 8007f7c:	1ad3      	subs	r3, r2, r3
 8007f7e:	0d1b      	lsrs	r3, r3, #20
 8007f80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f82:	fb02 f303 	mul.w	r3, r2, r3
 8007f86:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007f88:	e060      	b.n	800804c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007f90:	d107      	bne.n	8007fa2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d104      	bne.n	8007fa2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007f98:	69fb      	ldr	r3, [r7, #28]
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007fa0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fa8:	d050      	beq.n	800804c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007faa:	f7fa fe0d 	bl	8002bc8 <HAL_GetTick>
 8007fae:	4602      	mov	r2, r0
 8007fb0:	6a3b      	ldr	r3, [r7, #32]
 8007fb2:	1ad3      	subs	r3, r2, r3
 8007fb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d902      	bls.n	8007fc0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d13d      	bne.n	800803c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	685a      	ldr	r2, [r3, #4]
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007fce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007fd8:	d111      	bne.n	8007ffe <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fe2:	d004      	beq.n	8007fee <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fec:	d107      	bne.n	8007ffe <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	681a      	ldr	r2, [r3, #0]
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ffc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008002:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008006:	d10f      	bne.n	8008028 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008016:	601a      	str	r2, [r3, #0]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008026:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2201      	movs	r2, #1
 800802c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	2200      	movs	r2, #0
 8008034:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008038:	2303      	movs	r3, #3
 800803a:	e010      	b.n	800805e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800803c:	69bb      	ldr	r3, [r7, #24]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d101      	bne.n	8008046 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008042:	2300      	movs	r3, #0
 8008044:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8008046:	69bb      	ldr	r3, [r7, #24]
 8008048:	3b01      	subs	r3, #1
 800804a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	689a      	ldr	r2, [r3, #8]
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	4013      	ands	r3, r2
 8008056:	687a      	ldr	r2, [r7, #4]
 8008058:	429a      	cmp	r2, r3
 800805a:	d196      	bne.n	8007f8a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800805c:	2300      	movs	r3, #0
}
 800805e:	4618      	mov	r0, r3
 8008060:	3728      	adds	r7, #40	; 0x28
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}
 8008066:	bf00      	nop
 8008068:	20004b0c 	.word	0x20004b0c

0800806c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b086      	sub	sp, #24
 8008070:	af02      	add	r7, sp, #8
 8008072:	60f8      	str	r0, [r7, #12]
 8008074:	60b9      	str	r1, [r7, #8]
 8008076:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008080:	d111      	bne.n	80080a6 <SPI_EndRxTransaction+0x3a>
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	689b      	ldr	r3, [r3, #8]
 8008086:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800808a:	d004      	beq.n	8008096 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	689b      	ldr	r3, [r3, #8]
 8008090:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008094:	d107      	bne.n	80080a6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	681a      	ldr	r2, [r3, #0]
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080a4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	9300      	str	r3, [sp, #0]
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	2200      	movs	r2, #0
 80080ae:	2180      	movs	r1, #128	; 0x80
 80080b0:	68f8      	ldr	r0, [r7, #12]
 80080b2:	f7ff febd 	bl	8007e30 <SPI_WaitFlagStateUntilTimeout>
 80080b6:	4603      	mov	r3, r0
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d007      	beq.n	80080cc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080c0:	f043 0220 	orr.w	r2, r3, #32
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80080c8:	2303      	movs	r3, #3
 80080ca:	e023      	b.n	8008114 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80080d4:	d11d      	bne.n	8008112 <SPI_EndRxTransaction+0xa6>
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	689b      	ldr	r3, [r3, #8]
 80080da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080de:	d004      	beq.n	80080ea <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	689b      	ldr	r3, [r3, #8]
 80080e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080e8:	d113      	bne.n	8008112 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	9300      	str	r3, [sp, #0]
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	2200      	movs	r2, #0
 80080f2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80080f6:	68f8      	ldr	r0, [r7, #12]
 80080f8:	f7ff ff22 	bl	8007f40 <SPI_WaitFifoStateUntilTimeout>
 80080fc:	4603      	mov	r3, r0
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d007      	beq.n	8008112 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008106:	f043 0220 	orr.w	r2, r3, #32
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800810e:	2303      	movs	r3, #3
 8008110:	e000      	b.n	8008114 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8008112:	2300      	movs	r3, #0
}
 8008114:	4618      	mov	r0, r3
 8008116:	3710      	adds	r7, #16
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b086      	sub	sp, #24
 8008120:	af02      	add	r7, sp, #8
 8008122:	60f8      	str	r0, [r7, #12]
 8008124:	60b9      	str	r1, [r7, #8]
 8008126:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	9300      	str	r3, [sp, #0]
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	2200      	movs	r2, #0
 8008130:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008134:	68f8      	ldr	r0, [r7, #12]
 8008136:	f7ff ff03 	bl	8007f40 <SPI_WaitFifoStateUntilTimeout>
 800813a:	4603      	mov	r3, r0
 800813c:	2b00      	cmp	r3, #0
 800813e:	d007      	beq.n	8008150 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008144:	f043 0220 	orr.w	r2, r3, #32
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800814c:	2303      	movs	r3, #3
 800814e:	e027      	b.n	80081a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	9300      	str	r3, [sp, #0]
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	2200      	movs	r2, #0
 8008158:	2180      	movs	r1, #128	; 0x80
 800815a:	68f8      	ldr	r0, [r7, #12]
 800815c:	f7ff fe68 	bl	8007e30 <SPI_WaitFlagStateUntilTimeout>
 8008160:	4603      	mov	r3, r0
 8008162:	2b00      	cmp	r3, #0
 8008164:	d007      	beq.n	8008176 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800816a:	f043 0220 	orr.w	r2, r3, #32
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008172:	2303      	movs	r3, #3
 8008174:	e014      	b.n	80081a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	9300      	str	r3, [sp, #0]
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	2200      	movs	r2, #0
 800817e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008182:	68f8      	ldr	r0, [r7, #12]
 8008184:	f7ff fedc 	bl	8007f40 <SPI_WaitFifoStateUntilTimeout>
 8008188:	4603      	mov	r3, r0
 800818a:	2b00      	cmp	r3, #0
 800818c:	d007      	beq.n	800819e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008192:	f043 0220 	orr.w	r2, r3, #32
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800819a:	2303      	movs	r3, #3
 800819c:	e000      	b.n	80081a0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800819e:	2300      	movs	r3, #0
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3710      	adds	r7, #16
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b084      	sub	sp, #16
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80081b0:	f7fa fd0a 	bl	8002bc8 <HAL_GetTick>
 80081b4:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	685a      	ldr	r2, [r3, #4]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f022 0220 	bic.w	r2, r2, #32
 80081c4:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80081c6:	68fa      	ldr	r2, [r7, #12]
 80081c8:	2164      	movs	r1, #100	; 0x64
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f7ff ffa6 	bl	800811c <SPI_EndRxTxTransaction>
 80081d0:	4603      	mov	r3, r0
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d005      	beq.n	80081e2 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081da:	f043 0220 	orr.w	r2, r3, #32
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d115      	bne.n	8008216 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80081f0:	b2db      	uxtb	r3, r3
 80081f2:	2b04      	cmp	r3, #4
 80081f4:	d107      	bne.n	8008206 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2201      	movs	r2, #1
 80081fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f7f9 fb22 	bl	8001848 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8008204:	e00e      	b.n	8008224 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2201      	movs	r2, #1
 800820a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f7ff fc8c 	bl	8007b2c <HAL_SPI_TxRxCpltCallback>
}
 8008214:	e006      	b.n	8008224 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2201      	movs	r2, #1
 800821a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f7ff fc8e 	bl	8007b40 <HAL_SPI_ErrorCallback>
}
 8008224:	bf00      	nop
 8008226:	3710      	adds	r7, #16
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}

0800822c <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b082      	sub	sp, #8
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	685a      	ldr	r2, [r3, #4]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008242:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8008244:	f7fa fcc0 	bl	8002bc8 <HAL_GetTick>
 8008248:	4603      	mov	r3, r0
 800824a:	461a      	mov	r2, r3
 800824c:	2164      	movs	r1, #100	; 0x64
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f7ff ff0c 	bl	800806c <SPI_EndRxTransaction>
 8008254:	4603      	mov	r3, r0
 8008256:	2b00      	cmp	r3, #0
 8008258:	d005      	beq.n	8008266 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800825e:	f043 0220 	orr.w	r2, r3, #32
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2201      	movs	r2, #1
 800826a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008272:	2b00      	cmp	r3, #0
 8008274:	d103      	bne.n	800827e <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f7f9 fae6 	bl	8001848 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800827c:	e002      	b.n	8008284 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f7ff fc5e 	bl	8007b40 <HAL_SPI_ErrorCallback>
}
 8008284:	bf00      	nop
 8008286:	3708      	adds	r7, #8
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}

0800828c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b082      	sub	sp, #8
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d101      	bne.n	800829e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800829a:	2301      	movs	r3, #1
 800829c:	e042      	b.n	8008324 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d106      	bne.n	80082b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2200      	movs	r2, #0
 80082ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f7fa fb45 	bl	8002940 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2224      	movs	r2, #36	; 0x24
 80082ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	681a      	ldr	r2, [r3, #0]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f022 0201 	bic.w	r2, r2, #1
 80082cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d002      	beq.n	80082dc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f000 fbb4 	bl	8008a44 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f000 f8b5 	bl	800844c <UART_SetConfig>
 80082e2:	4603      	mov	r3, r0
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d101      	bne.n	80082ec <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80082e8:	2301      	movs	r3, #1
 80082ea:	e01b      	b.n	8008324 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	685a      	ldr	r2, [r3, #4]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80082fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	689a      	ldr	r2, [r3, #8]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800830a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	681a      	ldr	r2, [r3, #0]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f042 0201 	orr.w	r2, r2, #1
 800831a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f000 fc33 	bl	8008b88 <UART_CheckIdleState>
 8008322:	4603      	mov	r3, r0
}
 8008324:	4618      	mov	r0, r3
 8008326:	3708      	adds	r7, #8
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b08a      	sub	sp, #40	; 0x28
 8008330:	af02      	add	r7, sp, #8
 8008332:	60f8      	str	r0, [r7, #12]
 8008334:	60b9      	str	r1, [r7, #8]
 8008336:	603b      	str	r3, [r7, #0]
 8008338:	4613      	mov	r3, r2
 800833a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008342:	2b20      	cmp	r3, #32
 8008344:	d17c      	bne.n	8008440 <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d002      	beq.n	8008352 <HAL_UART_Transmit+0x26>
 800834c:	88fb      	ldrh	r3, [r7, #6]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d101      	bne.n	8008356 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008352:	2301      	movs	r3, #1
 8008354:	e075      	b.n	8008442 <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2200      	movs	r2, #0
 800835a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	2221      	movs	r2, #33	; 0x21
 8008362:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008366:	f7fa fc2f 	bl	8002bc8 <HAL_GetTick>
 800836a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	88fa      	ldrh	r2, [r7, #6]
 8008370:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	88fa      	ldrh	r2, [r7, #6]
 8008378:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	689b      	ldr	r3, [r3, #8]
 8008380:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008384:	d108      	bne.n	8008398 <HAL_UART_Transmit+0x6c>
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	691b      	ldr	r3, [r3, #16]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d104      	bne.n	8008398 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800838e:	2300      	movs	r3, #0
 8008390:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	61bb      	str	r3, [r7, #24]
 8008396:	e003      	b.n	80083a0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800839c:	2300      	movs	r3, #0
 800839e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80083a0:	e031      	b.n	8008406 <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	9300      	str	r3, [sp, #0]
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	2200      	movs	r2, #0
 80083aa:	2180      	movs	r1, #128	; 0x80
 80083ac:	68f8      	ldr	r0, [r7, #12]
 80083ae:	f000 fc95 	bl	8008cdc <UART_WaitOnFlagUntilTimeout>
 80083b2:	4603      	mov	r3, r0
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d005      	beq.n	80083c4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	2220      	movs	r2, #32
 80083bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80083c0:	2303      	movs	r3, #3
 80083c2:	e03e      	b.n	8008442 <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 80083c4:	69fb      	ldr	r3, [r7, #28]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d10b      	bne.n	80083e2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80083ca:	69bb      	ldr	r3, [r7, #24]
 80083cc:	881a      	ldrh	r2, [r3, #0]
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80083d6:	b292      	uxth	r2, r2
 80083d8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80083da:	69bb      	ldr	r3, [r7, #24]
 80083dc:	3302      	adds	r3, #2
 80083de:	61bb      	str	r3, [r7, #24]
 80083e0:	e008      	b.n	80083f4 <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80083e2:	69fb      	ldr	r3, [r7, #28]
 80083e4:	781a      	ldrb	r2, [r3, #0]
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	b292      	uxth	r2, r2
 80083ec:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80083ee:	69fb      	ldr	r3, [r7, #28]
 80083f0:	3301      	adds	r3, #1
 80083f2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	3b01      	subs	r3, #1
 80083fe:	b29a      	uxth	r2, r3
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800840c:	b29b      	uxth	r3, r3
 800840e:	2b00      	cmp	r3, #0
 8008410:	d1c7      	bne.n	80083a2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	9300      	str	r3, [sp, #0]
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	2200      	movs	r2, #0
 800841a:	2140      	movs	r1, #64	; 0x40
 800841c:	68f8      	ldr	r0, [r7, #12]
 800841e:	f000 fc5d 	bl	8008cdc <UART_WaitOnFlagUntilTimeout>
 8008422:	4603      	mov	r3, r0
 8008424:	2b00      	cmp	r3, #0
 8008426:	d005      	beq.n	8008434 <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2220      	movs	r2, #32
 800842c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8008430:	2303      	movs	r3, #3
 8008432:	e006      	b.n	8008442 <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2220      	movs	r2, #32
 8008438:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800843c:	2300      	movs	r3, #0
 800843e:	e000      	b.n	8008442 <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 8008440:	2302      	movs	r3, #2
  }
}
 8008442:	4618      	mov	r0, r3
 8008444:	3720      	adds	r7, #32
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
	...

0800844c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800844c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008450:	b08c      	sub	sp, #48	; 0x30
 8008452:	af00      	add	r7, sp, #0
 8008454:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008456:	2300      	movs	r3, #0
 8008458:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	689a      	ldr	r2, [r3, #8]
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	691b      	ldr	r3, [r3, #16]
 8008464:	431a      	orrs	r2, r3
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	695b      	ldr	r3, [r3, #20]
 800846a:	431a      	orrs	r2, r3
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	69db      	ldr	r3, [r3, #28]
 8008470:	4313      	orrs	r3, r2
 8008472:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	681a      	ldr	r2, [r3, #0]
 800847a:	4baa      	ldr	r3, [pc, #680]	; (8008724 <UART_SetConfig+0x2d8>)
 800847c:	4013      	ands	r3, r2
 800847e:	697a      	ldr	r2, [r7, #20]
 8008480:	6812      	ldr	r2, [r2, #0]
 8008482:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008484:	430b      	orrs	r3, r1
 8008486:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	68da      	ldr	r2, [r3, #12]
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	430a      	orrs	r2, r1
 800849c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	699b      	ldr	r3, [r3, #24]
 80084a2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a9f      	ldr	r2, [pc, #636]	; (8008728 <UART_SetConfig+0x2dc>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d004      	beq.n	80084b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	6a1b      	ldr	r3, [r3, #32]
 80084b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084b4:	4313      	orrs	r3, r2
 80084b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	689b      	ldr	r3, [r3, #8]
 80084be:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80084c2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80084c6:	697a      	ldr	r2, [r7, #20]
 80084c8:	6812      	ldr	r2, [r2, #0]
 80084ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80084cc:	430b      	orrs	r3, r1
 80084ce:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d6:	f023 010f 	bic.w	r1, r3, #15
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	430a      	orrs	r2, r1
 80084e4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4a90      	ldr	r2, [pc, #576]	; (800872c <UART_SetConfig+0x2e0>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d125      	bne.n	800853c <UART_SetConfig+0xf0>
 80084f0:	4b8f      	ldr	r3, [pc, #572]	; (8008730 <UART_SetConfig+0x2e4>)
 80084f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084f6:	f003 0303 	and.w	r3, r3, #3
 80084fa:	2b03      	cmp	r3, #3
 80084fc:	d81a      	bhi.n	8008534 <UART_SetConfig+0xe8>
 80084fe:	a201      	add	r2, pc, #4	; (adr r2, 8008504 <UART_SetConfig+0xb8>)
 8008500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008504:	08008515 	.word	0x08008515
 8008508:	08008525 	.word	0x08008525
 800850c:	0800851d 	.word	0x0800851d
 8008510:	0800852d 	.word	0x0800852d
 8008514:	2301      	movs	r3, #1
 8008516:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800851a:	e116      	b.n	800874a <UART_SetConfig+0x2fe>
 800851c:	2302      	movs	r3, #2
 800851e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008522:	e112      	b.n	800874a <UART_SetConfig+0x2fe>
 8008524:	2304      	movs	r3, #4
 8008526:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800852a:	e10e      	b.n	800874a <UART_SetConfig+0x2fe>
 800852c:	2308      	movs	r3, #8
 800852e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008532:	e10a      	b.n	800874a <UART_SetConfig+0x2fe>
 8008534:	2310      	movs	r3, #16
 8008536:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800853a:	e106      	b.n	800874a <UART_SetConfig+0x2fe>
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a7c      	ldr	r2, [pc, #496]	; (8008734 <UART_SetConfig+0x2e8>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d138      	bne.n	80085b8 <UART_SetConfig+0x16c>
 8008546:	4b7a      	ldr	r3, [pc, #488]	; (8008730 <UART_SetConfig+0x2e4>)
 8008548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800854c:	f003 030c 	and.w	r3, r3, #12
 8008550:	2b0c      	cmp	r3, #12
 8008552:	d82d      	bhi.n	80085b0 <UART_SetConfig+0x164>
 8008554:	a201      	add	r2, pc, #4	; (adr r2, 800855c <UART_SetConfig+0x110>)
 8008556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800855a:	bf00      	nop
 800855c:	08008591 	.word	0x08008591
 8008560:	080085b1 	.word	0x080085b1
 8008564:	080085b1 	.word	0x080085b1
 8008568:	080085b1 	.word	0x080085b1
 800856c:	080085a1 	.word	0x080085a1
 8008570:	080085b1 	.word	0x080085b1
 8008574:	080085b1 	.word	0x080085b1
 8008578:	080085b1 	.word	0x080085b1
 800857c:	08008599 	.word	0x08008599
 8008580:	080085b1 	.word	0x080085b1
 8008584:	080085b1 	.word	0x080085b1
 8008588:	080085b1 	.word	0x080085b1
 800858c:	080085a9 	.word	0x080085a9
 8008590:	2300      	movs	r3, #0
 8008592:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008596:	e0d8      	b.n	800874a <UART_SetConfig+0x2fe>
 8008598:	2302      	movs	r3, #2
 800859a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800859e:	e0d4      	b.n	800874a <UART_SetConfig+0x2fe>
 80085a0:	2304      	movs	r3, #4
 80085a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085a6:	e0d0      	b.n	800874a <UART_SetConfig+0x2fe>
 80085a8:	2308      	movs	r3, #8
 80085aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085ae:	e0cc      	b.n	800874a <UART_SetConfig+0x2fe>
 80085b0:	2310      	movs	r3, #16
 80085b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085b6:	e0c8      	b.n	800874a <UART_SetConfig+0x2fe>
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4a5e      	ldr	r2, [pc, #376]	; (8008738 <UART_SetConfig+0x2ec>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d125      	bne.n	800860e <UART_SetConfig+0x1c2>
 80085c2:	4b5b      	ldr	r3, [pc, #364]	; (8008730 <UART_SetConfig+0x2e4>)
 80085c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085c8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80085cc:	2b30      	cmp	r3, #48	; 0x30
 80085ce:	d016      	beq.n	80085fe <UART_SetConfig+0x1b2>
 80085d0:	2b30      	cmp	r3, #48	; 0x30
 80085d2:	d818      	bhi.n	8008606 <UART_SetConfig+0x1ba>
 80085d4:	2b20      	cmp	r3, #32
 80085d6:	d00a      	beq.n	80085ee <UART_SetConfig+0x1a2>
 80085d8:	2b20      	cmp	r3, #32
 80085da:	d814      	bhi.n	8008606 <UART_SetConfig+0x1ba>
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d002      	beq.n	80085e6 <UART_SetConfig+0x19a>
 80085e0:	2b10      	cmp	r3, #16
 80085e2:	d008      	beq.n	80085f6 <UART_SetConfig+0x1aa>
 80085e4:	e00f      	b.n	8008606 <UART_SetConfig+0x1ba>
 80085e6:	2300      	movs	r3, #0
 80085e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085ec:	e0ad      	b.n	800874a <UART_SetConfig+0x2fe>
 80085ee:	2302      	movs	r3, #2
 80085f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085f4:	e0a9      	b.n	800874a <UART_SetConfig+0x2fe>
 80085f6:	2304      	movs	r3, #4
 80085f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085fc:	e0a5      	b.n	800874a <UART_SetConfig+0x2fe>
 80085fe:	2308      	movs	r3, #8
 8008600:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008604:	e0a1      	b.n	800874a <UART_SetConfig+0x2fe>
 8008606:	2310      	movs	r3, #16
 8008608:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800860c:	e09d      	b.n	800874a <UART_SetConfig+0x2fe>
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4a4a      	ldr	r2, [pc, #296]	; (800873c <UART_SetConfig+0x2f0>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d125      	bne.n	8008664 <UART_SetConfig+0x218>
 8008618:	4b45      	ldr	r3, [pc, #276]	; (8008730 <UART_SetConfig+0x2e4>)
 800861a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800861e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008622:	2bc0      	cmp	r3, #192	; 0xc0
 8008624:	d016      	beq.n	8008654 <UART_SetConfig+0x208>
 8008626:	2bc0      	cmp	r3, #192	; 0xc0
 8008628:	d818      	bhi.n	800865c <UART_SetConfig+0x210>
 800862a:	2b80      	cmp	r3, #128	; 0x80
 800862c:	d00a      	beq.n	8008644 <UART_SetConfig+0x1f8>
 800862e:	2b80      	cmp	r3, #128	; 0x80
 8008630:	d814      	bhi.n	800865c <UART_SetConfig+0x210>
 8008632:	2b00      	cmp	r3, #0
 8008634:	d002      	beq.n	800863c <UART_SetConfig+0x1f0>
 8008636:	2b40      	cmp	r3, #64	; 0x40
 8008638:	d008      	beq.n	800864c <UART_SetConfig+0x200>
 800863a:	e00f      	b.n	800865c <UART_SetConfig+0x210>
 800863c:	2300      	movs	r3, #0
 800863e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008642:	e082      	b.n	800874a <UART_SetConfig+0x2fe>
 8008644:	2302      	movs	r3, #2
 8008646:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800864a:	e07e      	b.n	800874a <UART_SetConfig+0x2fe>
 800864c:	2304      	movs	r3, #4
 800864e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008652:	e07a      	b.n	800874a <UART_SetConfig+0x2fe>
 8008654:	2308      	movs	r3, #8
 8008656:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800865a:	e076      	b.n	800874a <UART_SetConfig+0x2fe>
 800865c:	2310      	movs	r3, #16
 800865e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008662:	e072      	b.n	800874a <UART_SetConfig+0x2fe>
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a35      	ldr	r2, [pc, #212]	; (8008740 <UART_SetConfig+0x2f4>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d12a      	bne.n	80086c4 <UART_SetConfig+0x278>
 800866e:	4b30      	ldr	r3, [pc, #192]	; (8008730 <UART_SetConfig+0x2e4>)
 8008670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008674:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008678:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800867c:	d01a      	beq.n	80086b4 <UART_SetConfig+0x268>
 800867e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008682:	d81b      	bhi.n	80086bc <UART_SetConfig+0x270>
 8008684:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008688:	d00c      	beq.n	80086a4 <UART_SetConfig+0x258>
 800868a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800868e:	d815      	bhi.n	80086bc <UART_SetConfig+0x270>
 8008690:	2b00      	cmp	r3, #0
 8008692:	d003      	beq.n	800869c <UART_SetConfig+0x250>
 8008694:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008698:	d008      	beq.n	80086ac <UART_SetConfig+0x260>
 800869a:	e00f      	b.n	80086bc <UART_SetConfig+0x270>
 800869c:	2300      	movs	r3, #0
 800869e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086a2:	e052      	b.n	800874a <UART_SetConfig+0x2fe>
 80086a4:	2302      	movs	r3, #2
 80086a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086aa:	e04e      	b.n	800874a <UART_SetConfig+0x2fe>
 80086ac:	2304      	movs	r3, #4
 80086ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086b2:	e04a      	b.n	800874a <UART_SetConfig+0x2fe>
 80086b4:	2308      	movs	r3, #8
 80086b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086ba:	e046      	b.n	800874a <UART_SetConfig+0x2fe>
 80086bc:	2310      	movs	r3, #16
 80086be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086c2:	e042      	b.n	800874a <UART_SetConfig+0x2fe>
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a17      	ldr	r2, [pc, #92]	; (8008728 <UART_SetConfig+0x2dc>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d13a      	bne.n	8008744 <UART_SetConfig+0x2f8>
 80086ce:	4b18      	ldr	r3, [pc, #96]	; (8008730 <UART_SetConfig+0x2e4>)
 80086d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80086d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80086dc:	d01a      	beq.n	8008714 <UART_SetConfig+0x2c8>
 80086de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80086e2:	d81b      	bhi.n	800871c <UART_SetConfig+0x2d0>
 80086e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086e8:	d00c      	beq.n	8008704 <UART_SetConfig+0x2b8>
 80086ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086ee:	d815      	bhi.n	800871c <UART_SetConfig+0x2d0>
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d003      	beq.n	80086fc <UART_SetConfig+0x2b0>
 80086f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086f8:	d008      	beq.n	800870c <UART_SetConfig+0x2c0>
 80086fa:	e00f      	b.n	800871c <UART_SetConfig+0x2d0>
 80086fc:	2300      	movs	r3, #0
 80086fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008702:	e022      	b.n	800874a <UART_SetConfig+0x2fe>
 8008704:	2302      	movs	r3, #2
 8008706:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800870a:	e01e      	b.n	800874a <UART_SetConfig+0x2fe>
 800870c:	2304      	movs	r3, #4
 800870e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008712:	e01a      	b.n	800874a <UART_SetConfig+0x2fe>
 8008714:	2308      	movs	r3, #8
 8008716:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800871a:	e016      	b.n	800874a <UART_SetConfig+0x2fe>
 800871c:	2310      	movs	r3, #16
 800871e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008722:	e012      	b.n	800874a <UART_SetConfig+0x2fe>
 8008724:	cfff69f3 	.word	0xcfff69f3
 8008728:	40008000 	.word	0x40008000
 800872c:	40013800 	.word	0x40013800
 8008730:	40021000 	.word	0x40021000
 8008734:	40004400 	.word	0x40004400
 8008738:	40004800 	.word	0x40004800
 800873c:	40004c00 	.word	0x40004c00
 8008740:	40005000 	.word	0x40005000
 8008744:	2310      	movs	r3, #16
 8008746:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4aae      	ldr	r2, [pc, #696]	; (8008a08 <UART_SetConfig+0x5bc>)
 8008750:	4293      	cmp	r3, r2
 8008752:	f040 8097 	bne.w	8008884 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008756:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800875a:	2b08      	cmp	r3, #8
 800875c:	d823      	bhi.n	80087a6 <UART_SetConfig+0x35a>
 800875e:	a201      	add	r2, pc, #4	; (adr r2, 8008764 <UART_SetConfig+0x318>)
 8008760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008764:	08008789 	.word	0x08008789
 8008768:	080087a7 	.word	0x080087a7
 800876c:	08008791 	.word	0x08008791
 8008770:	080087a7 	.word	0x080087a7
 8008774:	08008797 	.word	0x08008797
 8008778:	080087a7 	.word	0x080087a7
 800877c:	080087a7 	.word	0x080087a7
 8008780:	080087a7 	.word	0x080087a7
 8008784:	0800879f 	.word	0x0800879f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008788:	f7fd fbaa 	bl	8005ee0 <HAL_RCC_GetPCLK1Freq>
 800878c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800878e:	e010      	b.n	80087b2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008790:	4b9e      	ldr	r3, [pc, #632]	; (8008a0c <UART_SetConfig+0x5c0>)
 8008792:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008794:	e00d      	b.n	80087b2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008796:	f7fd fb0b 	bl	8005db0 <HAL_RCC_GetSysClockFreq>
 800879a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800879c:	e009      	b.n	80087b2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800879e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80087a4:	e005      	b.n	80087b2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80087a6:	2300      	movs	r3, #0
 80087a8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80087aa:	2301      	movs	r3, #1
 80087ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80087b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80087b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	f000 8130 	beq.w	8008a1a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087be:	4a94      	ldr	r2, [pc, #592]	; (8008a10 <UART_SetConfig+0x5c4>)
 80087c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087c4:	461a      	mov	r2, r3
 80087c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80087cc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	685a      	ldr	r2, [r3, #4]
 80087d2:	4613      	mov	r3, r2
 80087d4:	005b      	lsls	r3, r3, #1
 80087d6:	4413      	add	r3, r2
 80087d8:	69ba      	ldr	r2, [r7, #24]
 80087da:	429a      	cmp	r2, r3
 80087dc:	d305      	bcc.n	80087ea <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80087e4:	69ba      	ldr	r2, [r7, #24]
 80087e6:	429a      	cmp	r2, r3
 80087e8:	d903      	bls.n	80087f2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80087ea:	2301      	movs	r3, #1
 80087ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80087f0:	e113      	b.n	8008a1a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f4:	2200      	movs	r2, #0
 80087f6:	60bb      	str	r3, [r7, #8]
 80087f8:	60fa      	str	r2, [r7, #12]
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087fe:	4a84      	ldr	r2, [pc, #528]	; (8008a10 <UART_SetConfig+0x5c4>)
 8008800:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008804:	b29b      	uxth	r3, r3
 8008806:	2200      	movs	r2, #0
 8008808:	603b      	str	r3, [r7, #0]
 800880a:	607a      	str	r2, [r7, #4]
 800880c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008810:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008814:	f7f7 fcf2 	bl	80001fc <__aeabi_uldivmod>
 8008818:	4602      	mov	r2, r0
 800881a:	460b      	mov	r3, r1
 800881c:	4610      	mov	r0, r2
 800881e:	4619      	mov	r1, r3
 8008820:	f04f 0200 	mov.w	r2, #0
 8008824:	f04f 0300 	mov.w	r3, #0
 8008828:	020b      	lsls	r3, r1, #8
 800882a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800882e:	0202      	lsls	r2, r0, #8
 8008830:	6979      	ldr	r1, [r7, #20]
 8008832:	6849      	ldr	r1, [r1, #4]
 8008834:	0849      	lsrs	r1, r1, #1
 8008836:	2000      	movs	r0, #0
 8008838:	460c      	mov	r4, r1
 800883a:	4605      	mov	r5, r0
 800883c:	eb12 0804 	adds.w	r8, r2, r4
 8008840:	eb43 0905 	adc.w	r9, r3, r5
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	2200      	movs	r2, #0
 800884a:	469a      	mov	sl, r3
 800884c:	4693      	mov	fp, r2
 800884e:	4652      	mov	r2, sl
 8008850:	465b      	mov	r3, fp
 8008852:	4640      	mov	r0, r8
 8008854:	4649      	mov	r1, r9
 8008856:	f7f7 fcd1 	bl	80001fc <__aeabi_uldivmod>
 800885a:	4602      	mov	r2, r0
 800885c:	460b      	mov	r3, r1
 800885e:	4613      	mov	r3, r2
 8008860:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008862:	6a3b      	ldr	r3, [r7, #32]
 8008864:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008868:	d308      	bcc.n	800887c <UART_SetConfig+0x430>
 800886a:	6a3b      	ldr	r3, [r7, #32]
 800886c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008870:	d204      	bcs.n	800887c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	6a3a      	ldr	r2, [r7, #32]
 8008878:	60da      	str	r2, [r3, #12]
 800887a:	e0ce      	b.n	8008a1a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800887c:	2301      	movs	r3, #1
 800887e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008882:	e0ca      	b.n	8008a1a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	69db      	ldr	r3, [r3, #28]
 8008888:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800888c:	d166      	bne.n	800895c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800888e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008892:	2b08      	cmp	r3, #8
 8008894:	d827      	bhi.n	80088e6 <UART_SetConfig+0x49a>
 8008896:	a201      	add	r2, pc, #4	; (adr r2, 800889c <UART_SetConfig+0x450>)
 8008898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800889c:	080088c1 	.word	0x080088c1
 80088a0:	080088c9 	.word	0x080088c9
 80088a4:	080088d1 	.word	0x080088d1
 80088a8:	080088e7 	.word	0x080088e7
 80088ac:	080088d7 	.word	0x080088d7
 80088b0:	080088e7 	.word	0x080088e7
 80088b4:	080088e7 	.word	0x080088e7
 80088b8:	080088e7 	.word	0x080088e7
 80088bc:	080088df 	.word	0x080088df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80088c0:	f7fd fb0e 	bl	8005ee0 <HAL_RCC_GetPCLK1Freq>
 80088c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80088c6:	e014      	b.n	80088f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80088c8:	f7fd fb20 	bl	8005f0c <HAL_RCC_GetPCLK2Freq>
 80088cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80088ce:	e010      	b.n	80088f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80088d0:	4b4e      	ldr	r3, [pc, #312]	; (8008a0c <UART_SetConfig+0x5c0>)
 80088d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80088d4:	e00d      	b.n	80088f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80088d6:	f7fd fa6b 	bl	8005db0 <HAL_RCC_GetSysClockFreq>
 80088da:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80088dc:	e009      	b.n	80088f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80088e4:	e005      	b.n	80088f2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80088e6:	2300      	movs	r3, #0
 80088e8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80088ea:	2301      	movs	r3, #1
 80088ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80088f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80088f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	f000 8090 	beq.w	8008a1a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088fe:	4a44      	ldr	r2, [pc, #272]	; (8008a10 <UART_SetConfig+0x5c4>)
 8008900:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008904:	461a      	mov	r2, r3
 8008906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008908:	fbb3 f3f2 	udiv	r3, r3, r2
 800890c:	005a      	lsls	r2, r3, #1
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	085b      	lsrs	r3, r3, #1
 8008914:	441a      	add	r2, r3
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	fbb2 f3f3 	udiv	r3, r2, r3
 800891e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008920:	6a3b      	ldr	r3, [r7, #32]
 8008922:	2b0f      	cmp	r3, #15
 8008924:	d916      	bls.n	8008954 <UART_SetConfig+0x508>
 8008926:	6a3b      	ldr	r3, [r7, #32]
 8008928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800892c:	d212      	bcs.n	8008954 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800892e:	6a3b      	ldr	r3, [r7, #32]
 8008930:	b29b      	uxth	r3, r3
 8008932:	f023 030f 	bic.w	r3, r3, #15
 8008936:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008938:	6a3b      	ldr	r3, [r7, #32]
 800893a:	085b      	lsrs	r3, r3, #1
 800893c:	b29b      	uxth	r3, r3
 800893e:	f003 0307 	and.w	r3, r3, #7
 8008942:	b29a      	uxth	r2, r3
 8008944:	8bfb      	ldrh	r3, [r7, #30]
 8008946:	4313      	orrs	r3, r2
 8008948:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	8bfa      	ldrh	r2, [r7, #30]
 8008950:	60da      	str	r2, [r3, #12]
 8008952:	e062      	b.n	8008a1a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008954:	2301      	movs	r3, #1
 8008956:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800895a:	e05e      	b.n	8008a1a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800895c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008960:	2b08      	cmp	r3, #8
 8008962:	d828      	bhi.n	80089b6 <UART_SetConfig+0x56a>
 8008964:	a201      	add	r2, pc, #4	; (adr r2, 800896c <UART_SetConfig+0x520>)
 8008966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800896a:	bf00      	nop
 800896c:	08008991 	.word	0x08008991
 8008970:	08008999 	.word	0x08008999
 8008974:	080089a1 	.word	0x080089a1
 8008978:	080089b7 	.word	0x080089b7
 800897c:	080089a7 	.word	0x080089a7
 8008980:	080089b7 	.word	0x080089b7
 8008984:	080089b7 	.word	0x080089b7
 8008988:	080089b7 	.word	0x080089b7
 800898c:	080089af 	.word	0x080089af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008990:	f7fd faa6 	bl	8005ee0 <HAL_RCC_GetPCLK1Freq>
 8008994:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008996:	e014      	b.n	80089c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008998:	f7fd fab8 	bl	8005f0c <HAL_RCC_GetPCLK2Freq>
 800899c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800899e:	e010      	b.n	80089c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80089a0:	4b1a      	ldr	r3, [pc, #104]	; (8008a0c <UART_SetConfig+0x5c0>)
 80089a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80089a4:	e00d      	b.n	80089c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80089a6:	f7fd fa03 	bl	8005db0 <HAL_RCC_GetSysClockFreq>
 80089aa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80089ac:	e009      	b.n	80089c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80089b4:	e005      	b.n	80089c2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80089b6:	2300      	movs	r3, #0
 80089b8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80089ba:	2301      	movs	r3, #1
 80089bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80089c0:	bf00      	nop
    }

    if (pclk != 0U)
 80089c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d028      	beq.n	8008a1a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089cc:	4a10      	ldr	r2, [pc, #64]	; (8008a10 <UART_SetConfig+0x5c4>)
 80089ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089d2:	461a      	mov	r2, r3
 80089d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	685b      	ldr	r3, [r3, #4]
 80089de:	085b      	lsrs	r3, r3, #1
 80089e0:	441a      	add	r2, r3
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	685b      	ldr	r3, [r3, #4]
 80089e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80089ea:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80089ec:	6a3b      	ldr	r3, [r7, #32]
 80089ee:	2b0f      	cmp	r3, #15
 80089f0:	d910      	bls.n	8008a14 <UART_SetConfig+0x5c8>
 80089f2:	6a3b      	ldr	r3, [r7, #32]
 80089f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089f8:	d20c      	bcs.n	8008a14 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80089fa:	6a3b      	ldr	r3, [r7, #32]
 80089fc:	b29a      	uxth	r2, r3
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	60da      	str	r2, [r3, #12]
 8008a04:	e009      	b.n	8008a1a <UART_SetConfig+0x5ce>
 8008a06:	bf00      	nop
 8008a08:	40008000 	.word	0x40008000
 8008a0c:	00f42400 	.word	0x00f42400
 8008a10:	080091bc 	.word	0x080091bc
      }
      else
      {
        ret = HAL_ERROR;
 8008a14:	2301      	movs	r3, #1
 8008a16:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	2201      	movs	r2, #1
 8008a26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	2200      	movs	r2, #0
 8008a34:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008a36:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3730      	adds	r7, #48	; 0x30
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008a44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b083      	sub	sp, #12
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a50:	f003 0308 	and.w	r3, r3, #8
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d00a      	beq.n	8008a6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	430a      	orrs	r2, r1
 8008a6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a72:	f003 0301 	and.w	r3, r3, #1
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d00a      	beq.n	8008a90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	430a      	orrs	r2, r1
 8008a8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a94:	f003 0302 	and.w	r3, r3, #2
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d00a      	beq.n	8008ab2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	430a      	orrs	r2, r1
 8008ab0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ab6:	f003 0304 	and.w	r3, r3, #4
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d00a      	beq.n	8008ad4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	430a      	orrs	r2, r1
 8008ad2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ad8:	f003 0310 	and.w	r3, r3, #16
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d00a      	beq.n	8008af6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	689b      	ldr	r3, [r3, #8]
 8008ae6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	430a      	orrs	r2, r1
 8008af4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008afa:	f003 0320 	and.w	r3, r3, #32
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d00a      	beq.n	8008b18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	689b      	ldr	r3, [r3, #8]
 8008b08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	430a      	orrs	r2, r1
 8008b16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d01a      	beq.n	8008b5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	430a      	orrs	r2, r1
 8008b38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b42:	d10a      	bne.n	8008b5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	430a      	orrs	r2, r1
 8008b58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d00a      	beq.n	8008b7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	430a      	orrs	r2, r1
 8008b7a:	605a      	str	r2, [r3, #4]
  }
}
 8008b7c:	bf00      	nop
 8008b7e:	370c      	adds	r7, #12
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr

08008b88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b098      	sub	sp, #96	; 0x60
 8008b8c:	af02      	add	r7, sp, #8
 8008b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2200      	movs	r2, #0
 8008b94:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008b98:	f7fa f816 	bl	8002bc8 <HAL_GetTick>
 8008b9c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f003 0308 	and.w	r3, r3, #8
 8008ba8:	2b08      	cmp	r3, #8
 8008baa:	d12f      	bne.n	8008c0c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008bac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008bb0:	9300      	str	r3, [sp, #0]
 8008bb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f000 f88e 	bl	8008cdc <UART_WaitOnFlagUntilTimeout>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d022      	beq.n	8008c0c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bce:	e853 3f00 	ldrex	r3, [r3]
 8008bd2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008bda:	653b      	str	r3, [r7, #80]	; 0x50
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	461a      	mov	r2, r3
 8008be2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008be4:	647b      	str	r3, [r7, #68]	; 0x44
 8008be6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008bea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008bec:	e841 2300 	strex	r3, r2, [r1]
 8008bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008bf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d1e6      	bne.n	8008bc6 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2220      	movs	r2, #32
 8008bfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2200      	movs	r2, #0
 8008c04:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c08:	2303      	movs	r3, #3
 8008c0a:	e063      	b.n	8008cd4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f003 0304 	and.w	r3, r3, #4
 8008c16:	2b04      	cmp	r3, #4
 8008c18:	d149      	bne.n	8008cae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c1a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c1e:	9300      	str	r3, [sp, #0]
 8008c20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c22:	2200      	movs	r2, #0
 8008c24:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f000 f857 	bl	8008cdc <UART_WaitOnFlagUntilTimeout>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d03c      	beq.n	8008cae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c3c:	e853 3f00 	ldrex	r3, [r3]
 8008c40:	623b      	str	r3, [r7, #32]
   return(result);
 8008c42:	6a3b      	ldr	r3, [r7, #32]
 8008c44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	461a      	mov	r2, r3
 8008c50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c52:	633b      	str	r3, [r7, #48]	; 0x30
 8008c54:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c5a:	e841 2300 	strex	r3, r2, [r1]
 8008c5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d1e6      	bne.n	8008c34 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	3308      	adds	r3, #8
 8008c6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	e853 3f00 	ldrex	r3, [r3]
 8008c74:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	f023 0301 	bic.w	r3, r3, #1
 8008c7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	3308      	adds	r3, #8
 8008c84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c86:	61fa      	str	r2, [r7, #28]
 8008c88:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c8a:	69b9      	ldr	r1, [r7, #24]
 8008c8c:	69fa      	ldr	r2, [r7, #28]
 8008c8e:	e841 2300 	strex	r3, r2, [r1]
 8008c92:	617b      	str	r3, [r7, #20]
   return(result);
 8008c94:	697b      	ldr	r3, [r7, #20]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d1e5      	bne.n	8008c66 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2220      	movs	r2, #32
 8008c9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008caa:	2303      	movs	r3, #3
 8008cac:	e012      	b.n	8008cd4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2220      	movs	r2, #32
 8008cb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2220      	movs	r2, #32
 8008cba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008cd2:	2300      	movs	r3, #0
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3758      	adds	r7, #88	; 0x58
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}

08008cdc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b084      	sub	sp, #16
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	60f8      	str	r0, [r7, #12]
 8008ce4:	60b9      	str	r1, [r7, #8]
 8008ce6:	603b      	str	r3, [r7, #0]
 8008ce8:	4613      	mov	r3, r2
 8008cea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cec:	e049      	b.n	8008d82 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008cee:	69bb      	ldr	r3, [r7, #24]
 8008cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cf4:	d045      	beq.n	8008d82 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cf6:	f7f9 ff67 	bl	8002bc8 <HAL_GetTick>
 8008cfa:	4602      	mov	r2, r0
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	1ad3      	subs	r3, r2, r3
 8008d00:	69ba      	ldr	r2, [r7, #24]
 8008d02:	429a      	cmp	r2, r3
 8008d04:	d302      	bcc.n	8008d0c <UART_WaitOnFlagUntilTimeout+0x30>
 8008d06:	69bb      	ldr	r3, [r7, #24]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d101      	bne.n	8008d10 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008d0c:	2303      	movs	r3, #3
 8008d0e:	e048      	b.n	8008da2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f003 0304 	and.w	r3, r3, #4
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d031      	beq.n	8008d82 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	69db      	ldr	r3, [r3, #28]
 8008d24:	f003 0308 	and.w	r3, r3, #8
 8008d28:	2b08      	cmp	r3, #8
 8008d2a:	d110      	bne.n	8008d4e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	2208      	movs	r2, #8
 8008d32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008d34:	68f8      	ldr	r0, [r7, #12]
 8008d36:	f000 f838 	bl	8008daa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2208      	movs	r2, #8
 8008d3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	2200      	movs	r2, #0
 8008d46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	e029      	b.n	8008da2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	69db      	ldr	r3, [r3, #28]
 8008d54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d5c:	d111      	bne.n	8008d82 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008d66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008d68:	68f8      	ldr	r0, [r7, #12]
 8008d6a:	f000 f81e 	bl	8008daa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	2220      	movs	r2, #32
 8008d72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008d7e:	2303      	movs	r3, #3
 8008d80:	e00f      	b.n	8008da2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	69da      	ldr	r2, [r3, #28]
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	4013      	ands	r3, r2
 8008d8c:	68ba      	ldr	r2, [r7, #8]
 8008d8e:	429a      	cmp	r2, r3
 8008d90:	bf0c      	ite	eq
 8008d92:	2301      	moveq	r3, #1
 8008d94:	2300      	movne	r3, #0
 8008d96:	b2db      	uxtb	r3, r3
 8008d98:	461a      	mov	r2, r3
 8008d9a:	79fb      	ldrb	r3, [r7, #7]
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	d0a6      	beq.n	8008cee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008da0:	2300      	movs	r3, #0
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3710      	adds	r7, #16
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}

08008daa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008daa:	b480      	push	{r7}
 8008dac:	b095      	sub	sp, #84	; 0x54
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dba:	e853 3f00 	ldrex	r3, [r3]
 8008dbe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008dc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	461a      	mov	r2, r3
 8008dce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dd0:	643b      	str	r3, [r7, #64]	; 0x40
 8008dd2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dd4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008dd6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008dd8:	e841 2300 	strex	r3, r2, [r1]
 8008ddc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d1e6      	bne.n	8008db2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	3308      	adds	r3, #8
 8008dea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dec:	6a3b      	ldr	r3, [r7, #32]
 8008dee:	e853 3f00 	ldrex	r3, [r3]
 8008df2:	61fb      	str	r3, [r7, #28]
   return(result);
 8008df4:	69fb      	ldr	r3, [r7, #28]
 8008df6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008dfa:	f023 0301 	bic.w	r3, r3, #1
 8008dfe:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	3308      	adds	r3, #8
 8008e06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e08:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008e0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e10:	e841 2300 	strex	r3, r2, [r1]
 8008e14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d1e3      	bne.n	8008de4 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	d118      	bne.n	8008e56 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	e853 3f00 	ldrex	r3, [r3]
 8008e30:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	f023 0310 	bic.w	r3, r3, #16
 8008e38:	647b      	str	r3, [r7, #68]	; 0x44
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	461a      	mov	r2, r3
 8008e40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e42:	61bb      	str	r3, [r7, #24]
 8008e44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e46:	6979      	ldr	r1, [r7, #20]
 8008e48:	69ba      	ldr	r2, [r7, #24]
 8008e4a:	e841 2300 	strex	r3, r2, [r1]
 8008e4e:	613b      	str	r3, [r7, #16]
   return(result);
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d1e6      	bne.n	8008e24 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2220      	movs	r2, #32
 8008e5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2200      	movs	r2, #0
 8008e62:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2200      	movs	r2, #0
 8008e68:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008e6a:	bf00      	nop
 8008e6c:	3754      	adds	r7, #84	; 0x54
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e74:	4770      	bx	lr

08008e76 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008e76:	b480      	push	{r7}
 8008e78:	b085      	sub	sp, #20
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008e84:	2b01      	cmp	r3, #1
 8008e86:	d101      	bne.n	8008e8c <HAL_UARTEx_DisableFifoMode+0x16>
 8008e88:	2302      	movs	r3, #2
 8008e8a:	e027      	b.n	8008edc <HAL_UARTEx_DisableFifoMode+0x66>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2201      	movs	r2, #1
 8008e90:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2224      	movs	r2, #36	; 0x24
 8008e98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	681a      	ldr	r2, [r3, #0]
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f022 0201 	bic.w	r2, r2, #1
 8008eb2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008eba:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	68fa      	ldr	r2, [r7, #12]
 8008ec8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2220      	movs	r2, #32
 8008ece:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008eda:	2300      	movs	r3, #0
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3714      	adds	r7, #20
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr

08008ee8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b084      	sub	sp, #16
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	d101      	bne.n	8008f00 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008efc:	2302      	movs	r3, #2
 8008efe:	e02d      	b.n	8008f5c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2201      	movs	r2, #1
 8008f04:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2224      	movs	r2, #36	; 0x24
 8008f0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	681a      	ldr	r2, [r3, #0]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f022 0201 	bic.w	r2, r2, #1
 8008f26:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	689b      	ldr	r3, [r3, #8]
 8008f2e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	683a      	ldr	r2, [r7, #0]
 8008f38:	430a      	orrs	r2, r1
 8008f3a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f000 f84f 	bl	8008fe0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	68fa      	ldr	r2, [r7, #12]
 8008f48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2220      	movs	r2, #32
 8008f4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2200      	movs	r2, #0
 8008f56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008f5a:	2300      	movs	r3, #0
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3710      	adds	r7, #16
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}

08008f64 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b084      	sub	sp, #16
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008f74:	2b01      	cmp	r3, #1
 8008f76:	d101      	bne.n	8008f7c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008f78:	2302      	movs	r3, #2
 8008f7a:	e02d      	b.n	8008fd8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2201      	movs	r2, #1
 8008f80:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2224      	movs	r2, #36	; 0x24
 8008f88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	681a      	ldr	r2, [r3, #0]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f022 0201 	bic.w	r2, r2, #1
 8008fa2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	689b      	ldr	r3, [r3, #8]
 8008faa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	683a      	ldr	r2, [r7, #0]
 8008fb4:	430a      	orrs	r2, r1
 8008fb6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f000 f811 	bl	8008fe0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	68fa      	ldr	r2, [r7, #12]
 8008fc4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2220      	movs	r2, #32
 8008fca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008fd6:	2300      	movs	r3, #0
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3710      	adds	r7, #16
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b085      	sub	sp, #20
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d108      	bne.n	8009002 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009000:	e031      	b.n	8009066 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009002:	2308      	movs	r3, #8
 8009004:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009006:	2308      	movs	r3, #8
 8009008:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	689b      	ldr	r3, [r3, #8]
 8009010:	0e5b      	lsrs	r3, r3, #25
 8009012:	b2db      	uxtb	r3, r3
 8009014:	f003 0307 	and.w	r3, r3, #7
 8009018:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	689b      	ldr	r3, [r3, #8]
 8009020:	0f5b      	lsrs	r3, r3, #29
 8009022:	b2db      	uxtb	r3, r3
 8009024:	f003 0307 	and.w	r3, r3, #7
 8009028:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800902a:	7bbb      	ldrb	r3, [r7, #14]
 800902c:	7b3a      	ldrb	r2, [r7, #12]
 800902e:	4911      	ldr	r1, [pc, #68]	; (8009074 <UARTEx_SetNbDataToProcess+0x94>)
 8009030:	5c8a      	ldrb	r2, [r1, r2]
 8009032:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009036:	7b3a      	ldrb	r2, [r7, #12]
 8009038:	490f      	ldr	r1, [pc, #60]	; (8009078 <UARTEx_SetNbDataToProcess+0x98>)
 800903a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800903c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009040:	b29a      	uxth	r2, r3
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009048:	7bfb      	ldrb	r3, [r7, #15]
 800904a:	7b7a      	ldrb	r2, [r7, #13]
 800904c:	4909      	ldr	r1, [pc, #36]	; (8009074 <UARTEx_SetNbDataToProcess+0x94>)
 800904e:	5c8a      	ldrb	r2, [r1, r2]
 8009050:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009054:	7b7a      	ldrb	r2, [r7, #13]
 8009056:	4908      	ldr	r1, [pc, #32]	; (8009078 <UARTEx_SetNbDataToProcess+0x98>)
 8009058:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800905a:	fb93 f3f2 	sdiv	r3, r3, r2
 800905e:	b29a      	uxth	r2, r3
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009066:	bf00      	nop
 8009068:	3714      	adds	r7, #20
 800906a:	46bd      	mov	sp, r7
 800906c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009070:	4770      	bx	lr
 8009072:	bf00      	nop
 8009074:	080091d4 	.word	0x080091d4
 8009078:	080091dc 	.word	0x080091dc

0800907c <memset>:
 800907c:	4402      	add	r2, r0
 800907e:	4603      	mov	r3, r0
 8009080:	4293      	cmp	r3, r2
 8009082:	d100      	bne.n	8009086 <memset+0xa>
 8009084:	4770      	bx	lr
 8009086:	f803 1b01 	strb.w	r1, [r3], #1
 800908a:	e7f9      	b.n	8009080 <memset+0x4>

0800908c <__libc_init_array>:
 800908c:	b570      	push	{r4, r5, r6, lr}
 800908e:	4d0d      	ldr	r5, [pc, #52]	; (80090c4 <__libc_init_array+0x38>)
 8009090:	4c0d      	ldr	r4, [pc, #52]	; (80090c8 <__libc_init_array+0x3c>)
 8009092:	1b64      	subs	r4, r4, r5
 8009094:	10a4      	asrs	r4, r4, #2
 8009096:	2600      	movs	r6, #0
 8009098:	42a6      	cmp	r6, r4
 800909a:	d109      	bne.n	80090b0 <__libc_init_array+0x24>
 800909c:	4d0b      	ldr	r5, [pc, #44]	; (80090cc <__libc_init_array+0x40>)
 800909e:	4c0c      	ldr	r4, [pc, #48]	; (80090d0 <__libc_init_array+0x44>)
 80090a0:	f000 f818 	bl	80090d4 <_init>
 80090a4:	1b64      	subs	r4, r4, r5
 80090a6:	10a4      	asrs	r4, r4, #2
 80090a8:	2600      	movs	r6, #0
 80090aa:	42a6      	cmp	r6, r4
 80090ac:	d105      	bne.n	80090ba <__libc_init_array+0x2e>
 80090ae:	bd70      	pop	{r4, r5, r6, pc}
 80090b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80090b4:	4798      	blx	r3
 80090b6:	3601      	adds	r6, #1
 80090b8:	e7ee      	b.n	8009098 <__libc_init_array+0xc>
 80090ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80090be:	4798      	blx	r3
 80090c0:	3601      	adds	r6, #1
 80090c2:	e7f2      	b.n	80090aa <__libc_init_array+0x1e>
 80090c4:	080091ec 	.word	0x080091ec
 80090c8:	080091ec 	.word	0x080091ec
 80090cc:	080091ec 	.word	0x080091ec
 80090d0:	080091f0 	.word	0x080091f0

080090d4 <_init>:
 80090d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090d6:	bf00      	nop
 80090d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090da:	bc08      	pop	{r3}
 80090dc:	469e      	mov	lr, r3
 80090de:	4770      	bx	lr

080090e0 <_fini>:
 80090e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090e2:	bf00      	nop
 80090e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090e6:	bc08      	pop	{r3}
 80090e8:	469e      	mov	lr, r3
 80090ea:	4770      	bx	lr
