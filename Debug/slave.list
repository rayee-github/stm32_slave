
slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008358  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08008514  08008514  00018514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008618  08008618  00024b0c  2**0
                  CONTENTS
  4 .ARM          00000008  08008618  08008618  00018618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008620  08008620  00024b0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008620  08008620  00018620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008624  08008624  00018624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00004b0c  20000000  08008628  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f0  20004b0c  0800d134  00024b0c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004efc  0800d134  00024efc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00024b0c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00024b3c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018767  00000000  00000000  00024b7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a09  00000000  00000000  0003d2e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013a0  00000000  00000000  0003fcf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f63  00000000  00000000  00041090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000317e9  00000000  00000000  00041ff3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000198e5  00000000  00000000  000737dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0012aab7  00000000  00000000  0008d0c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005478  00000000  00000000  001b7b78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  001bcff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20004b0c 	.word	0x20004b0c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080084fc 	.word	0x080084fc

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20004b10 	.word	0x20004b10
 80001f8:	080084fc 	.word	0x080084fc

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b970 	b.w	80004f4 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	460d      	mov	r5, r1
 8000234:	4604      	mov	r4, r0
 8000236:	460f      	mov	r7, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14a      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023c:	428a      	cmp	r2, r1
 800023e:	4694      	mov	ip, r2
 8000240:	d965      	bls.n	800030e <__udivmoddi4+0xe2>
 8000242:	fab2 f382 	clz	r3, r2
 8000246:	b143      	cbz	r3, 800025a <__udivmoddi4+0x2e>
 8000248:	fa02 fc03 	lsl.w	ip, r2, r3
 800024c:	f1c3 0220 	rsb	r2, r3, #32
 8000250:	409f      	lsls	r7, r3
 8000252:	fa20 f202 	lsr.w	r2, r0, r2
 8000256:	4317      	orrs	r7, r2
 8000258:	409c      	lsls	r4, r3
 800025a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800025e:	fa1f f58c 	uxth.w	r5, ip
 8000262:	fbb7 f1fe 	udiv	r1, r7, lr
 8000266:	0c22      	lsrs	r2, r4, #16
 8000268:	fb0e 7711 	mls	r7, lr, r1, r7
 800026c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000270:	fb01 f005 	mul.w	r0, r1, r5
 8000274:	4290      	cmp	r0, r2
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x62>
 8000278:	eb1c 0202 	adds.w	r2, ip, r2
 800027c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000280:	f080 811c 	bcs.w	80004bc <__udivmoddi4+0x290>
 8000284:	4290      	cmp	r0, r2
 8000286:	f240 8119 	bls.w	80004bc <__udivmoddi4+0x290>
 800028a:	3902      	subs	r1, #2
 800028c:	4462      	add	r2, ip
 800028e:	1a12      	subs	r2, r2, r0
 8000290:	b2a4      	uxth	r4, r4
 8000292:	fbb2 f0fe 	udiv	r0, r2, lr
 8000296:	fb0e 2210 	mls	r2, lr, r0, r2
 800029a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800029e:	fb00 f505 	mul.w	r5, r0, r5
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x90>
 80002a6:	eb1c 0404 	adds.w	r4, ip, r4
 80002aa:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ae:	f080 8107 	bcs.w	80004c0 <__udivmoddi4+0x294>
 80002b2:	42a5      	cmp	r5, r4
 80002b4:	f240 8104 	bls.w	80004c0 <__udivmoddi4+0x294>
 80002b8:	4464      	add	r4, ip
 80002ba:	3802      	subs	r0, #2
 80002bc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c0:	1b64      	subs	r4, r4, r5
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11e      	cbz	r6, 80002ce <__udivmoddi4+0xa2>
 80002c6:	40dc      	lsrs	r4, r3
 80002c8:	2300      	movs	r3, #0
 80002ca:	e9c6 4300 	strd	r4, r3, [r6]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0xbc>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80ed 	beq.w	80004b6 <__udivmoddi4+0x28a>
 80002dc:	2100      	movs	r1, #0
 80002de:	e9c6 0500 	strd	r0, r5, [r6]
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	d149      	bne.n	8000384 <__udivmoddi4+0x158>
 80002f0:	42ab      	cmp	r3, r5
 80002f2:	d302      	bcc.n	80002fa <__udivmoddi4+0xce>
 80002f4:	4282      	cmp	r2, r0
 80002f6:	f200 80f8 	bhi.w	80004ea <__udivmoddi4+0x2be>
 80002fa:	1a84      	subs	r4, r0, r2
 80002fc:	eb65 0203 	sbc.w	r2, r5, r3
 8000300:	2001      	movs	r0, #1
 8000302:	4617      	mov	r7, r2
 8000304:	2e00      	cmp	r6, #0
 8000306:	d0e2      	beq.n	80002ce <__udivmoddi4+0xa2>
 8000308:	e9c6 4700 	strd	r4, r7, [r6]
 800030c:	e7df      	b.n	80002ce <__udivmoddi4+0xa2>
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xe6>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f382 	clz	r3, r2
 8000316:	2b00      	cmp	r3, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x210>
 800031c:	1a8a      	subs	r2, r1, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f fe8c 	uxth.w	lr, ip
 8000326:	2101      	movs	r1, #1
 8000328:	fbb2 f5f7 	udiv	r5, r2, r7
 800032c:	fb07 2015 	mls	r0, r7, r5, r2
 8000330:	0c22      	lsrs	r2, r4, #16
 8000332:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000336:	fb0e f005 	mul.w	r0, lr, r5
 800033a:	4290      	cmp	r0, r2
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x124>
 800033e:	eb1c 0202 	adds.w	r2, ip, r2
 8000342:	f105 38ff 	add.w	r8, r5, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4290      	cmp	r0, r2
 800034a:	f200 80cb 	bhi.w	80004e4 <__udivmoddi4+0x2b8>
 800034e:	4645      	mov	r5, r8
 8000350:	1a12      	subs	r2, r2, r0
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb2 f0f7 	udiv	r0, r2, r7
 8000358:	fb07 2210 	mls	r2, r7, r0, r2
 800035c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000360:	fb0e fe00 	mul.w	lr, lr, r0
 8000364:	45a6      	cmp	lr, r4
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x14e>
 8000368:	eb1c 0404 	adds.w	r4, ip, r4
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x14c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f200 80bb 	bhi.w	80004ee <__udivmoddi4+0x2c2>
 8000378:	4610      	mov	r0, r2
 800037a:	eba4 040e 	sub.w	r4, r4, lr
 800037e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000382:	e79f      	b.n	80002c4 <__udivmoddi4+0x98>
 8000384:	f1c1 0720 	rsb	r7, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 fc07 	lsr.w	ip, r2, r7
 800038e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000392:	fa05 f401 	lsl.w	r4, r5, r1
 8000396:	fa20 f307 	lsr.w	r3, r0, r7
 800039a:	40fd      	lsrs	r5, r7
 800039c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a0:	4323      	orrs	r3, r4
 80003a2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	fb09 5518 	mls	r5, r9, r8, r5
 80003ae:	0c1c      	lsrs	r4, r3, #16
 80003b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b4:	fb08 f50e 	mul.w	r5, r8, lr
 80003b8:	42a5      	cmp	r5, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	fa00 f001 	lsl.w	r0, r0, r1
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003cc:	f080 8088 	bcs.w	80004e0 <__udivmoddi4+0x2b4>
 80003d0:	42a5      	cmp	r5, r4
 80003d2:	f240 8085 	bls.w	80004e0 <__udivmoddi4+0x2b4>
 80003d6:	f1a8 0802 	sub.w	r8, r8, #2
 80003da:	4464      	add	r4, ip
 80003dc:	1b64      	subs	r4, r4, r5
 80003de:	b29d      	uxth	r5, r3
 80003e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e4:	fb09 4413 	mls	r4, r9, r3, r4
 80003e8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003ec:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003fc:	d26c      	bcs.n	80004d8 <__udivmoddi4+0x2ac>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	d96a      	bls.n	80004d8 <__udivmoddi4+0x2ac>
 8000402:	3b02      	subs	r3, #2
 8000404:	4464      	add	r4, ip
 8000406:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800040a:	fba3 9502 	umull	r9, r5, r3, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	42ac      	cmp	r4, r5
 8000414:	46c8      	mov	r8, r9
 8000416:	46ae      	mov	lr, r5
 8000418:	d356      	bcc.n	80004c8 <__udivmoddi4+0x29c>
 800041a:	d053      	beq.n	80004c4 <__udivmoddi4+0x298>
 800041c:	b156      	cbz	r6, 8000434 <__udivmoddi4+0x208>
 800041e:	ebb0 0208 	subs.w	r2, r0, r8
 8000422:	eb64 040e 	sbc.w	r4, r4, lr
 8000426:	fa04 f707 	lsl.w	r7, r4, r7
 800042a:	40ca      	lsrs	r2, r1
 800042c:	40cc      	lsrs	r4, r1
 800042e:	4317      	orrs	r7, r2
 8000430:	e9c6 7400 	strd	r7, r4, [r6]
 8000434:	4618      	mov	r0, r3
 8000436:	2100      	movs	r1, #0
 8000438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043c:	f1c3 0120 	rsb	r1, r3, #32
 8000440:	fa02 fc03 	lsl.w	ip, r2, r3
 8000444:	fa20 f201 	lsr.w	r2, r0, r1
 8000448:	fa25 f101 	lsr.w	r1, r5, r1
 800044c:	409d      	lsls	r5, r3
 800044e:	432a      	orrs	r2, r5
 8000450:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000454:	fa1f fe8c 	uxth.w	lr, ip
 8000458:	fbb1 f0f7 	udiv	r0, r1, r7
 800045c:	fb07 1510 	mls	r5, r7, r0, r1
 8000460:	0c11      	lsrs	r1, r2, #16
 8000462:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000466:	fb00 f50e 	mul.w	r5, r0, lr
 800046a:	428d      	cmp	r5, r1
 800046c:	fa04 f403 	lsl.w	r4, r4, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x258>
 8000472:	eb1c 0101 	adds.w	r1, ip, r1
 8000476:	f100 38ff 	add.w	r8, r0, #4294967295
 800047a:	d22f      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 800047c:	428d      	cmp	r5, r1
 800047e:	d92d      	bls.n	80004dc <__udivmoddi4+0x2b0>
 8000480:	3802      	subs	r0, #2
 8000482:	4461      	add	r1, ip
 8000484:	1b49      	subs	r1, r1, r5
 8000486:	b292      	uxth	r2, r2
 8000488:	fbb1 f5f7 	udiv	r5, r1, r7
 800048c:	fb07 1115 	mls	r1, r7, r5, r1
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	fb05 f10e 	mul.w	r1, r5, lr
 8000498:	4291      	cmp	r1, r2
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x282>
 800049c:	eb1c 0202 	adds.w	r2, ip, r2
 80004a0:	f105 38ff 	add.w	r8, r5, #4294967295
 80004a4:	d216      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 80004a6:	4291      	cmp	r1, r2
 80004a8:	d914      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 80004aa:	3d02      	subs	r5, #2
 80004ac:	4462      	add	r2, ip
 80004ae:	1a52      	subs	r2, r2, r1
 80004b0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004b4:	e738      	b.n	8000328 <__udivmoddi4+0xfc>
 80004b6:	4631      	mov	r1, r6
 80004b8:	4630      	mov	r0, r6
 80004ba:	e708      	b.n	80002ce <__udivmoddi4+0xa2>
 80004bc:	4639      	mov	r1, r7
 80004be:	e6e6      	b.n	800028e <__udivmoddi4+0x62>
 80004c0:	4610      	mov	r0, r2
 80004c2:	e6fb      	b.n	80002bc <__udivmoddi4+0x90>
 80004c4:	4548      	cmp	r0, r9
 80004c6:	d2a9      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c8:	ebb9 0802 	subs.w	r8, r9, r2
 80004cc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d0:	3b01      	subs	r3, #1
 80004d2:	e7a3      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d4:	4645      	mov	r5, r8
 80004d6:	e7ea      	b.n	80004ae <__udivmoddi4+0x282>
 80004d8:	462b      	mov	r3, r5
 80004da:	e794      	b.n	8000406 <__udivmoddi4+0x1da>
 80004dc:	4640      	mov	r0, r8
 80004de:	e7d1      	b.n	8000484 <__udivmoddi4+0x258>
 80004e0:	46d0      	mov	r8, sl
 80004e2:	e77b      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e4:	3d02      	subs	r5, #2
 80004e6:	4462      	add	r2, ip
 80004e8:	e732      	b.n	8000350 <__udivmoddi4+0x124>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e70a      	b.n	8000304 <__udivmoddi4+0xd8>
 80004ee:	4464      	add	r4, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e742      	b.n	800037a <__udivmoddi4+0x14e>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fc:	f001 fe94 	bl	8002228 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000500:	f000 f83a 	bl	8000578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000504:	f000 fc1a 	bl	8000d3c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000508:	f000 f970 	bl	80007ec <MX_I2C1_Init>
  MX_I2C2_Init();
 800050c:	f000 f9ae 	bl	800086c <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 8000510:	f000 fa6c 	bl	80009ec <MX_OCTOSPI1_Init>
  MX_OCTOSPI2_Init();
 8000514:	f000 fac0 	bl	8000a98 <MX_OCTOSPI2_Init>
  MX_SPI1_Init();
 8000518:	f000 fb14 	bl	8000b44 <MX_SPI1_Init>
  MX_SPI2_Init();
 800051c:	f000 fb50 	bl	8000bc0 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000520:	f000 fb88 	bl	8000c34 <MX_SPI3_Init>
  MX_UART4_Init();
 8000524:	f000 fbbe 	bl	8000ca4 <MX_UART4_Init>
  MX_DSIHOST_DSI_Init();
 8000528:	f000 f874 	bl	8000614 <MX_DSIHOST_DSI_Init>
  MX_LTDC_Init();
 800052c:	f000 f9de 	bl	80008ec <MX_LTDC_Init>
  /* USER CODE BEGIN 2 */
  mipi_config();
 8000530:	f000 fd2a 	bl	8000f88 <mipi_config>
  HAL_UART_Transmit(&huart4, "slave start", 11, 1000);
 8000534:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000538:	220b      	movs	r2, #11
 800053a:	490b      	ldr	r1, [pc, #44]	; (8000568 <main+0x70>)
 800053c:	480b      	ldr	r0, [pc, #44]	; (800056c <main+0x74>)
 800053e:	f007 f909 	bl	8007754 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    __HAL_SPI_ENABLE(&hspi1);
 8000542:	4b0b      	ldr	r3, [pc, #44]	; (8000570 <main+0x78>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	681a      	ldr	r2, [r3, #0]
 8000548:	4b09      	ldr	r3, [pc, #36]	; (8000570 <main+0x78>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000550:	601a      	str	r2, [r3, #0]
    __HAL_SPI_ENABLE(&hspi3);
 8000552:	4b08      	ldr	r3, [pc, #32]	; (8000574 <main+0x7c>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	681a      	ldr	r2, [r3, #0]
 8000558:	4b06      	ldr	r3, [pc, #24]	; (8000574 <main+0x7c>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000560:	601a      	str	r2, [r3, #0]
			delay_us(10);
			//HAL_Delay(1);
		}
		HAL_UART_Transmit(&huart4, "off ", 4, 1000);
		HAL_Delay(1000);*/
		SPI2PC();
 8000562:	f000 ff1d 	bl	80013a0 <SPI2PC>
 8000566:	e7fc      	b.n	8000562 <main+0x6a>
 8000568:	08008514 	.word	0x08008514
 800056c:	20004e60 	.word	0x20004e60
 8000570:	20004d34 	.word	0x20004d34
 8000574:	20004dfc 	.word	0x20004dfc

08000578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b096      	sub	sp, #88	; 0x58
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	f107 0314 	add.w	r3, r7, #20
 8000582:	2244      	movs	r2, #68	; 0x44
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f007 ff8c 	bl	80084a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058c:	463b      	mov	r3, r7
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]
 8000598:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800059a:	2000      	movs	r0, #0
 800059c:	f004 f912 	bl	80047c4 <HAL_PWREx_ControlVoltageScaling>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <SystemClock_Config+0x32>
  {
    Error_Handler();
 80005a6:	f001 f9e9 	bl	800197c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005aa:	2301      	movs	r3, #1
 80005ac:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005b2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b4:	2302      	movs	r3, #2
 80005b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b8:	2303      	movs	r3, #3
 80005ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005bc:	2301      	movs	r3, #1
 80005be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 80005c0:	231e      	movs	r3, #30
 80005c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c4:	2302      	movs	r3, #2
 80005c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005c8:	2302      	movs	r3, #2
 80005ca:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005cc:	2302      	movs	r3, #2
 80005ce:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d0:	f107 0314 	add.w	r3, r7, #20
 80005d4:	4618      	mov	r0, r3
 80005d6:	f004 f9a9 	bl	800492c <HAL_RCC_OscConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80005e0:	f001 f9cc 	bl	800197c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e4:	230f      	movs	r3, #15
 80005e6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e8:	2303      	movs	r3, #3
 80005ea:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005f8:	463b      	mov	r3, r7
 80005fa:	2105      	movs	r1, #5
 80005fc:	4618      	mov	r0, r3
 80005fe:	f004 fdaf 	bl	8005160 <HAL_RCC_ClockConfig>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000608:	f001 f9b8 	bl	800197c <Error_Handler>
  }
}
 800060c:	bf00      	nop
 800060e:	3758      	adds	r7, #88	; 0x58
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}

08000614 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b0ae      	sub	sp, #184	; 0xb8
 8000618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 800061a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]
 8000624:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000626:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800062a:	2224      	movs	r2, #36	; 0x24
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f007 ff38 	bl	80084a4 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000634:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]
 8000644:	615a      	str	r2, [r3, #20]
  DSI_VidCfgTypeDef VidCfg = {0};
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	226c      	movs	r2, #108	; 0x6c
 800064a:	2100      	movs	r1, #0
 800064c:	4618      	mov	r0, r3
 800064e:	f007 ff29 	bl	80084a4 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8000652:	4b64      	ldr	r3, [pc, #400]	; (80007e4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000654:	4a64      	ldr	r2, [pc, #400]	; (80007e8 <MX_DSIHOST_DSI_Init+0x1d4>)
 8000656:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000658:	4b62      	ldr	r3, [pc, #392]	; (80007e4 <MX_DSIHOST_DSI_Init+0x1d0>)
 800065a:	2200      	movs	r2, #0
 800065c:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 2;
 800065e:	4b61      	ldr	r3, [pc, #388]	; (80007e4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000660:	2202      	movs	r2, #2
 8000662:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 8000664:	4b5f      	ldr	r3, [pc, #380]	; (80007e4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000666:	2200      	movs	r2, #0
 8000668:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 50;
 800066a:	2332      	movs	r3, #50	; 0x32
 800066c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 8000670:	2301      	movs	r3, #1
 8000672:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 8000676:	2301      	movs	r3, #1
 8000678:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 800067c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000680:	4619      	mov	r1, r3
 8000682:	4858      	ldr	r0, [pc, #352]	; (80007e4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000684:	f001 ffca 	bl	800261c <HAL_DSI_Init>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_DSIHOST_DSI_Init+0x7e>
  {
    Error_Handler();
 800068e:	f001 f975 	bl	800197c <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8000692:	2301      	movs	r3, #1
 8000694:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000698:	2300      	movs	r3, #0
 800069a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 800069e:	2300      	movs	r3, #0
 80006a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.HighSpeedReadTimeout = 0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.LowPowerReadTimeout = 0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  HostTimeouts.HighSpeedWriteTimeout = 0;
 80006b0:	2300      	movs	r3, #0
 80006b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 80006b6:	2300      	movs	r3, #0
 80006b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  HostTimeouts.LowPowerWriteTimeout = 0;
 80006bc:	2300      	movs	r3, #0
 80006be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HostTimeouts.BTATimeout = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 80006c8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80006cc:	4619      	mov	r1, r3
 80006ce:	4845      	ldr	r0, [pc, #276]	; (80007e4 <MX_DSIHOST_DSI_Init+0x1d0>)
 80006d0:	f002 fc17 	bl	8002f02 <HAL_DSI_ConfigHostTimeouts>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_DSIHOST_DSI_Init+0xca>
  {
    Error_Handler();
 80006da:	f001 f94f 	bl	800197c <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 19;
 80006de:	2313      	movs	r3, #19
 80006e0:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.ClockLaneLP2HSTime = 15;
 80006e2:	230f      	movs	r3, #15
 80006e4:	677b      	str	r3, [r7, #116]	; 0x74
  PhyTimings.DataLaneHS2LPTime = 9;
 80006e6:	2309      	movs	r3, #9
 80006e8:	67bb      	str	r3, [r7, #120]	; 0x78
  PhyTimings.DataLaneLP2HSTime = 10;
 80006ea:	230a      	movs	r3, #10
 80006ec:	67fb      	str	r3, [r7, #124]	; 0x7c
  PhyTimings.DataLaneMaxReadTime = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PhyTimings.StopWaitTime = 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 80006fa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80006fe:	4619      	mov	r1, r3
 8000700:	4838      	ldr	r0, [pc, #224]	; (80007e4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000702:	f002 fb94 	bl	8002e2e <HAL_DSI_ConfigPhyTimer>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_DSIHOST_DSI_Init+0xfc>
  {
    Error_Handler();
 800070c:	f001 f936 	bl	800197c <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000710:	f242 7110 	movw	r1, #10000	; 0x2710
 8000714:	4833      	ldr	r0, [pc, #204]	; (80007e4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000716:	f002 fdb0 	bl	800327a <HAL_DSI_SetLowPowerRXFilter>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_DSIHOST_DSI_Init+0x110>
  {
    Error_Handler();
 8000720:	f001 f92c 	bl	800197c <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000724:	2100      	movs	r1, #0
 8000726:	482f      	ldr	r0, [pc, #188]	; (80007e4 <MX_DSIHOST_DSI_Init+0x1d0>)
 8000728:	f002 f894 	bl	8002854 <HAL_DSI_ConfigErrorMonitor>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_DSIHOST_DSI_Init+0x122>
  {
    Error_Handler();
 8000732:	f001 f923 	bl	800197c <Error_Handler>
  }
  VidCfg.VirtualChannelID = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	607b      	str	r3, [r7, #4]
  VidCfg.ColorCoding = DSI_RGB888;
 800073a:	2305      	movs	r3, #5
 800073c:	60bb      	str	r3, [r7, #8]
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 800073e:	2300      	movs	r3, #0
 8000740:	60fb      	str	r3, [r7, #12]
  VidCfg.Mode = DSI_VID_MODE_NB_EVENTS;
 8000742:	2301      	movs	r3, #1
 8000744:	613b      	str	r3, [r7, #16]
  VidCfg.PacketSize = 80;
 8000746:	2350      	movs	r3, #80	; 0x50
 8000748:	617b      	str	r3, [r7, #20]
  VidCfg.NumberOfChunks = 1;
 800074a:	2301      	movs	r3, #1
 800074c:	61bb      	str	r3, [r7, #24]
  VidCfg.NullPacketSize = 0;
 800074e:	2300      	movs	r3, #0
 8000750:	61fb      	str	r3, [r7, #28]
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8000752:	2300      	movs	r3, #0
 8000754:	623b      	str	r3, [r7, #32]
  VidCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000756:	2300      	movs	r3, #0
 8000758:	627b      	str	r3, [r7, #36]	; 0x24
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 800075a:	2300      	movs	r3, #0
 800075c:	62bb      	str	r3, [r7, #40]	; 0x28
  VidCfg.HorizontalSyncActive = 252;
 800075e:	23fc      	movs	r3, #252	; 0xfc
 8000760:	62fb      	str	r3, [r7, #44]	; 0x2c
  VidCfg.HorizontalBackPorch = 252;
 8000762:	23fc      	movs	r3, #252	; 0xfc
 8000764:	633b      	str	r3, [r7, #48]	; 0x30
  VidCfg.HorizontalLine = 836;
 8000766:	f44f 7351 	mov.w	r3, #836	; 0x344
 800076a:	637b      	str	r3, [r7, #52]	; 0x34
  VidCfg.VerticalSyncActive = 8;
 800076c:	2308      	movs	r3, #8
 800076e:	63bb      	str	r3, [r7, #56]	; 0x38
  VidCfg.VerticalBackPorch = 8;
 8000770:	2308      	movs	r3, #8
 8000772:	63fb      	str	r3, [r7, #60]	; 0x3c
  VidCfg.VerticalFrontPorch = 8;
 8000774:	2308      	movs	r3, #8
 8000776:	643b      	str	r3, [r7, #64]	; 0x40
  VidCfg.VerticalActive = 80;
 8000778:	2350      	movs	r3, #80	; 0x50
 800077a:	647b      	str	r3, [r7, #68]	; 0x44
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 800077c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000780:	64bb      	str	r3, [r7, #72]	; 0x48
  VidCfg.LPLargestPacketSize = 28;
 8000782:	231c      	movs	r3, #28
 8000784:	64fb      	str	r3, [r7, #76]	; 0x4c
  VidCfg.LPVACTLargestPacketSize = 80;
 8000786:	2350      	movs	r3, #80	; 0x50
 8000788:	653b      	str	r3, [r7, #80]	; 0x50
  VidCfg.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;
 800078a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800078e:	657b      	str	r3, [r7, #84]	; 0x54
  VidCfg.LPHorizontalBackPorchEnable = DSI_LP_HBP_ENABLE;
 8000790:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000794:	65bb      	str	r3, [r7, #88]	; 0x58
  VidCfg.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;
 8000796:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800079a:	65fb      	str	r3, [r7, #92]	; 0x5c
  VidCfg.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;
 800079c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007a0:	663b      	str	r3, [r7, #96]	; 0x60
  VidCfg.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;
 80007a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007a6:	667b      	str	r3, [r7, #100]	; 0x64
  VidCfg.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE;
 80007a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007ac:	66bb      	str	r3, [r7, #104]	; 0x68
  VidCfg.FrameBTAAcknowledgeEnable = DSI_FBTAA_DISABLE;
 80007ae:	2300      	movs	r3, #0
 80007b0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_DSI_ConfigVideoMode(&hdsi, &VidCfg) != HAL_OK)
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	4619      	mov	r1, r3
 80007b6:	480b      	ldr	r0, [pc, #44]	; (80007e4 <MX_DSIHOST_DSI_Init+0x1d0>)
 80007b8:	f002 f931 	bl	8002a1e <HAL_DSI_ConfigVideoMode>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_DSIHOST_DSI_Init+0x1b2>
  {
    Error_Handler();
 80007c2:	f001 f8db 	bl	800197c <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 80007c6:	2100      	movs	r1, #0
 80007c8:	4806      	ldr	r0, [pc, #24]	; (80007e4 <MX_DSIHOST_DSI_Init+0x1d0>)
 80007ca:	f002 f900 	bl	80029ce <HAL_DSI_SetGenericVCID>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_DSIHOST_DSI_Init+0x1c4>
  {
    Error_Handler();
 80007d4:	f001 f8d2 	bl	800197c <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */
	LCD_PowerOn();
 80007d8:	f001 f8b8 	bl	800194c <LCD_PowerOn>
  /* USER CODE END DSIHOST_Init 2 */

}
 80007dc:	bf00      	nop
 80007de:	37b8      	adds	r7, #184	; 0xb8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20004b28 	.word	0x20004b28
 80007e8:	40016c00 	.word	0x40016c00

080007ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007f0:	4b1b      	ldr	r3, [pc, #108]	; (8000860 <MX_I2C1_Init+0x74>)
 80007f2:	4a1c      	ldr	r2, [pc, #112]	; (8000864 <MX_I2C1_Init+0x78>)
 80007f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 80007f6:	4b1a      	ldr	r3, [pc, #104]	; (8000860 <MX_I2C1_Init+0x74>)
 80007f8:	4a1b      	ldr	r2, [pc, #108]	; (8000868 <MX_I2C1_Init+0x7c>)
 80007fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007fc:	4b18      	ldr	r3, [pc, #96]	; (8000860 <MX_I2C1_Init+0x74>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000802:	4b17      	ldr	r3, [pc, #92]	; (8000860 <MX_I2C1_Init+0x74>)
 8000804:	2201      	movs	r2, #1
 8000806:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000808:	4b15      	ldr	r3, [pc, #84]	; (8000860 <MX_I2C1_Init+0x74>)
 800080a:	2200      	movs	r2, #0
 800080c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800080e:	4b14      	ldr	r3, [pc, #80]	; (8000860 <MX_I2C1_Init+0x74>)
 8000810:	2200      	movs	r2, #0
 8000812:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000814:	4b12      	ldr	r3, [pc, #72]	; (8000860 <MX_I2C1_Init+0x74>)
 8000816:	2200      	movs	r2, #0
 8000818:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800081a:	4b11      	ldr	r3, [pc, #68]	; (8000860 <MX_I2C1_Init+0x74>)
 800081c:	2200      	movs	r2, #0
 800081e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000820:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <MX_I2C1_Init+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000826:	480e      	ldr	r0, [pc, #56]	; (8000860 <MX_I2C1_Init+0x74>)
 8000828:	f002 fefe 	bl	8003628 <HAL_I2C_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000832:	f001 f8a3 	bl	800197c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000836:	2100      	movs	r1, #0
 8000838:	4809      	ldr	r0, [pc, #36]	; (8000860 <MX_I2C1_Init+0x74>)
 800083a:	f002 ff90 	bl	800375e <HAL_I2CEx_ConfigAnalogFilter>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000844:	f001 f89a 	bl	800197c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000848:	2100      	movs	r1, #0
 800084a:	4805      	ldr	r0, [pc, #20]	; (8000860 <MX_I2C1_Init+0x74>)
 800084c:	f002 ffd2 	bl	80037f4 <HAL_I2CEx_ConfigDigitalFilter>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000856:	f001 f891 	bl	800197c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20004b44 	.word	0x20004b44
 8000864:	40005400 	.word	0x40005400
 8000868:	307075b1 	.word	0x307075b1

0800086c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000870:	4b1b      	ldr	r3, [pc, #108]	; (80008e0 <MX_I2C2_Init+0x74>)
 8000872:	4a1c      	ldr	r2, [pc, #112]	; (80008e4 <MX_I2C2_Init+0x78>)
 8000874:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8000876:	4b1a      	ldr	r3, [pc, #104]	; (80008e0 <MX_I2C2_Init+0x74>)
 8000878:	4a1b      	ldr	r2, [pc, #108]	; (80008e8 <MX_I2C2_Init+0x7c>)
 800087a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800087c:	4b18      	ldr	r3, [pc, #96]	; (80008e0 <MX_I2C2_Init+0x74>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000882:	4b17      	ldr	r3, [pc, #92]	; (80008e0 <MX_I2C2_Init+0x74>)
 8000884:	2201      	movs	r2, #1
 8000886:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000888:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <MX_I2C2_Init+0x74>)
 800088a:	2200      	movs	r2, #0
 800088c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800088e:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <MX_I2C2_Init+0x74>)
 8000890:	2200      	movs	r2, #0
 8000892:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000894:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <MX_I2C2_Init+0x74>)
 8000896:	2200      	movs	r2, #0
 8000898:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800089a:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MX_I2C2_Init+0x74>)
 800089c:	2200      	movs	r2, #0
 800089e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008a0:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <MX_I2C2_Init+0x74>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008a6:	480e      	ldr	r0, [pc, #56]	; (80008e0 <MX_I2C2_Init+0x74>)
 80008a8:	f002 febe 	bl	8003628 <HAL_I2C_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80008b2:	f001 f863 	bl	800197c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008b6:	2100      	movs	r1, #0
 80008b8:	4809      	ldr	r0, [pc, #36]	; (80008e0 <MX_I2C2_Init+0x74>)
 80008ba:	f002 ff50 	bl	800375e <HAL_I2CEx_ConfigAnalogFilter>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008c4:	f001 f85a 	bl	800197c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008c8:	2100      	movs	r1, #0
 80008ca:	4805      	ldr	r0, [pc, #20]	; (80008e0 <MX_I2C2_Init+0x74>)
 80008cc:	f002 ff92 	bl	80037f4 <HAL_I2CEx_ConfigDigitalFilter>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008d6:	f001 f851 	bl	800197c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20004b98 	.word	0x20004b98
 80008e4:	40005800 	.word	0x40005800
 80008e8:	307075b1 	.word	0x307075b1

080008ec <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08e      	sub	sp, #56	; 0x38
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	2234      	movs	r2, #52	; 0x34
 80008f6:	2100      	movs	r1, #0
 80008f8:	4618      	mov	r0, r3
 80008fa:	f007 fdd3 	bl	80084a4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80008fe:	4b38      	ldr	r3, [pc, #224]	; (80009e0 <MX_LTDC_Init+0xf4>)
 8000900:	4a38      	ldr	r2, [pc, #224]	; (80009e4 <MX_LTDC_Init+0xf8>)
 8000902:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000904:	4b36      	ldr	r3, [pc, #216]	; (80009e0 <MX_LTDC_Init+0xf4>)
 8000906:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800090a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 800090c:	4b34      	ldr	r3, [pc, #208]	; (80009e0 <MX_LTDC_Init+0xf4>)
 800090e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000912:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000914:	4b32      	ldr	r3, [pc, #200]	; (80009e0 <MX_LTDC_Init+0xf4>)
 8000916:	2200      	movs	r2, #0
 8000918:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800091a:	4b31      	ldr	r3, [pc, #196]	; (80009e0 <MX_LTDC_Init+0xf4>)
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 251;
 8000920:	4b2f      	ldr	r3, [pc, #188]	; (80009e0 <MX_LTDC_Init+0xf4>)
 8000922:	22fb      	movs	r2, #251	; 0xfb
 8000924:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 7;
 8000926:	4b2e      	ldr	r3, [pc, #184]	; (80009e0 <MX_LTDC_Init+0xf4>)
 8000928:	2207      	movs	r2, #7
 800092a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 503;
 800092c:	4b2c      	ldr	r3, [pc, #176]	; (80009e0 <MX_LTDC_Init+0xf4>)
 800092e:	f240 12f7 	movw	r2, #503	; 0x1f7
 8000932:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 15;
 8000934:	4b2a      	ldr	r3, [pc, #168]	; (80009e0 <MX_LTDC_Init+0xf4>)
 8000936:	220f      	movs	r2, #15
 8000938:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 583;
 800093a:	4b29      	ldr	r3, [pc, #164]	; (80009e0 <MX_LTDC_Init+0xf4>)
 800093c:	f240 2247 	movw	r2, #583	; 0x247
 8000940:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 95;
 8000942:	4b27      	ldr	r3, [pc, #156]	; (80009e0 <MX_LTDC_Init+0xf4>)
 8000944:	225f      	movs	r2, #95	; 0x5f
 8000946:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 835;
 8000948:	4b25      	ldr	r3, [pc, #148]	; (80009e0 <MX_LTDC_Init+0xf4>)
 800094a:	f240 3243 	movw	r2, #835	; 0x343
 800094e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 97;
 8000950:	4b23      	ldr	r3, [pc, #140]	; (80009e0 <MX_LTDC_Init+0xf4>)
 8000952:	2261      	movs	r2, #97	; 0x61
 8000954:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 255;
 8000956:	4b22      	ldr	r3, [pc, #136]	; (80009e0 <MX_LTDC_Init+0xf4>)
 8000958:	22ff      	movs	r2, #255	; 0xff
 800095a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 255;
 800095e:	4b20      	ldr	r3, [pc, #128]	; (80009e0 <MX_LTDC_Init+0xf4>)
 8000960:	22ff      	movs	r2, #255	; 0xff
 8000962:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 255;
 8000966:	4b1e      	ldr	r3, [pc, #120]	; (80009e0 <MX_LTDC_Init+0xf4>)
 8000968:	22ff      	movs	r2, #255	; 0xff
 800096a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800096e:	481c      	ldr	r0, [pc, #112]	; (80009e0 <MX_LTDC_Init+0xf4>)
 8000970:	f002 ff8c 	bl	800388c <HAL_LTDC_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_LTDC_Init+0x92>
  {
    Error_Handler();
 800097a:	f000 ffff 	bl	800197c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800097e:	2300      	movs	r3, #0
 8000980:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 80;
 8000982:	2350      	movs	r3, #80	; 0x50
 8000984:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 80;
 800098a:	2350      	movs	r3, #80	; 0x50
 800098c:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 800098e:	2301      	movs	r3, #1
 8000990:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000992:	23ff      	movs	r3, #255	; 0xff
 8000994:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800099a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800099e:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80009a0:	2305      	movs	r3, #5
 80009a2:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = (uint32_t *)image_80x80_rgb888;
 80009a4:	4b10      	ldr	r3, [pc, #64]	; (80009e8 <MX_LTDC_Init+0xfc>)
 80009a6:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 80;
 80009a8:	2350      	movs	r3, #80	; 0x50
 80009aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 80;
 80009ac:	2350      	movs	r3, #80	; 0x50
 80009ae:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 255;
 80009b0:	23ff      	movs	r3, #255	; 0xff
 80009b2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 255;
 80009b6:	23ff      	movs	r3, #255	; 0xff
 80009b8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 255;
 80009bc:	23ff      	movs	r3, #255	; 0xff
 80009be:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80009c2:	1d3b      	adds	r3, r7, #4
 80009c4:	2200      	movs	r2, #0
 80009c6:	4619      	mov	r1, r3
 80009c8:	4805      	ldr	r0, [pc, #20]	; (80009e0 <MX_LTDC_Init+0xf4>)
 80009ca:	f003 f82f 	bl	8003a2c <HAL_LTDC_ConfigLayer>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 80009d4:	f000 ffd2 	bl	800197c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */
  //(uint32_t *)image_80x80_rgb888;
  /* USER CODE END LTDC_Init 2 */

}
 80009d8:	bf00      	nop
 80009da:	3738      	adds	r7, #56	; 0x38
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20004bec 	.word	0x20004bec
 80009e4:	40016800 	.word	0x40016800
 80009e8:	20000000 	.word	0x20000000

080009ec <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b086      	sub	sp, #24
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 80009f2:	1d3b      	adds	r3, r7, #4
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8000a00:	4b23      	ldr	r3, [pc, #140]	; (8000a90 <MX_OCTOSPI1_Init+0xa4>)
 8000a02:	4a24      	ldr	r2, [pc, #144]	; (8000a94 <MX_OCTOSPI1_Init+0xa8>)
 8000a04:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 4;
 8000a06:	4b22      	ldr	r3, [pc, #136]	; (8000a90 <MX_OCTOSPI1_Init+0xa4>)
 8000a08:	2204      	movs	r2, #4
 8000a0a:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000a0c:	4b20      	ldr	r3, [pc, #128]	; (8000a90 <MX_OCTOSPI1_Init+0xa4>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8000a12:	4b1f      	ldr	r3, [pc, #124]	; (8000a90 <MX_OCTOSPI1_Init+0xa4>)
 8000a14:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000a18:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 26;
 8000a1a:	4b1d      	ldr	r3, [pc, #116]	; (8000a90 <MX_OCTOSPI1_Init+0xa4>)
 8000a1c:	221a      	movs	r2, #26
 8000a1e:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 2;
 8000a20:	4b1b      	ldr	r3, [pc, #108]	; (8000a90 <MX_OCTOSPI1_Init+0xa4>)
 8000a22:	2202      	movs	r2, #2
 8000a24:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000a26:	4b1a      	ldr	r3, [pc, #104]	; (8000a90 <MX_OCTOSPI1_Init+0xa4>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000a2c:	4b18      	ldr	r3, [pc, #96]	; (8000a90 <MX_OCTOSPI1_Init+0xa4>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 16;
 8000a32:	4b17      	ldr	r3, [pc, #92]	; (8000a90 <MX_OCTOSPI1_Init+0xa4>)
 8000a34:	2210      	movs	r2, #16
 8000a36:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000a38:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <MX_OCTOSPI1_Init+0xa4>)
 8000a3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a3e:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000a40:	4b13      	ldr	r3, [pc, #76]	; (8000a90 <MX_OCTOSPI1_Init+0xa4>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8000a46:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <MX_OCTOSPI1_Init+0xa4>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000a4c:	4b10      	ldr	r3, [pc, #64]	; (8000a90 <MX_OCTOSPI1_Init+0xa4>)
 8000a4e:	2208      	movs	r2, #8
 8000a50:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000a52:	480f      	ldr	r0, [pc, #60]	; (8000a90 <MX_OCTOSPI1_Init+0xa4>)
 8000a54:	f003 f9c0 	bl	8003dd8 <HAL_OSPI_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_OCTOSPI1_Init+0x76>
  {
    Error_Handler();
 8000a5e:	f000 ff8d 	bl	800197c <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8000a62:	2301      	movs	r3, #1
 8000a64:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8000a66:	2301      	movs	r3, #1
 8000a68:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000a6a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8000a6e:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000a70:	1d3b      	adds	r3, r7, #4
 8000a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a76:	4619      	mov	r1, r3
 8000a78:	4805      	ldr	r0, [pc, #20]	; (8000a90 <MX_OCTOSPI1_Init+0xa4>)
 8000a7a:	f003 fa67 	bl	8003f4c <HAL_OSPIM_Config>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_OCTOSPI1_Init+0x9c>
  {
    Error_Handler();
 8000a84:	f000 ff7a 	bl	800197c <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000a88:	bf00      	nop
 8000a8a:	3718      	adds	r7, #24
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20004c94 	.word	0x20004c94
 8000a94:	a0001000 	.word	0xa0001000

08000a98 <MX_OCTOSPI2_Init>:
  * @brief OCTOSPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI2_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI2_Init 0 */

  /* USER CODE END OCTOSPI2_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 8000a9e:	1d3b      	adds	r3, r7, #4
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI2_Init 1 */

  /* USER CODE END OCTOSPI2_Init 1 */
  /* OCTOSPI2 parameter configuration*/
  hospi2.Instance = OCTOSPI2;
 8000aac:	4b22      	ldr	r3, [pc, #136]	; (8000b38 <MX_OCTOSPI2_Init+0xa0>)
 8000aae:	4a23      	ldr	r2, [pc, #140]	; (8000b3c <MX_OCTOSPI2_Init+0xa4>)
 8000ab0:	601a      	str	r2, [r3, #0]
  hospi2.Init.FifoThreshold = 1;
 8000ab2:	4b21      	ldr	r3, [pc, #132]	; (8000b38 <MX_OCTOSPI2_Init+0xa0>)
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	605a      	str	r2, [r3, #4]
  hospi2.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000ab8:	4b1f      	ldr	r3, [pc, #124]	; (8000b38 <MX_OCTOSPI2_Init+0xa0>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	609a      	str	r2, [r3, #8]
  hospi2.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8000abe:	4b1e      	ldr	r3, [pc, #120]	; (8000b38 <MX_OCTOSPI2_Init+0xa0>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	60da      	str	r2, [r3, #12]
  hospi2.Init.DeviceSize = 32;
 8000ac4:	4b1c      	ldr	r3, [pc, #112]	; (8000b38 <MX_OCTOSPI2_Init+0xa0>)
 8000ac6:	2220      	movs	r2, #32
 8000ac8:	611a      	str	r2, [r3, #16]
  hospi2.Init.ChipSelectHighTime = 1;
 8000aca:	4b1b      	ldr	r3, [pc, #108]	; (8000b38 <MX_OCTOSPI2_Init+0xa0>)
 8000acc:	2201      	movs	r2, #1
 8000ace:	615a      	str	r2, [r3, #20]
  hospi2.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000ad0:	4b19      	ldr	r3, [pc, #100]	; (8000b38 <MX_OCTOSPI2_Init+0xa0>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	619a      	str	r2, [r3, #24]
  hospi2.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000ad6:	4b18      	ldr	r3, [pc, #96]	; (8000b38 <MX_OCTOSPI2_Init+0xa0>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	61da      	str	r2, [r3, #28]
  hospi2.Init.ClockPrescaler = 1;
 8000adc:	4b16      	ldr	r3, [pc, #88]	; (8000b38 <MX_OCTOSPI2_Init+0xa0>)
 8000ade:	2201      	movs	r2, #1
 8000ae0:	621a      	str	r2, [r3, #32]
  hospi2.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000ae2:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <MX_OCTOSPI2_Init+0xa0>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	625a      	str	r2, [r3, #36]	; 0x24
  hospi2.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000ae8:	4b13      	ldr	r3, [pc, #76]	; (8000b38 <MX_OCTOSPI2_Init+0xa0>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	629a      	str	r2, [r3, #40]	; 0x28
  hospi2.Init.ChipSelectBoundary = 0;
 8000aee:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <MX_OCTOSPI2_Init+0xa0>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi2.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000af4:	4b10      	ldr	r3, [pc, #64]	; (8000b38 <MX_OCTOSPI2_Init+0xa0>)
 8000af6:	2208      	movs	r2, #8
 8000af8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 8000afa:	480f      	ldr	r0, [pc, #60]	; (8000b38 <MX_OCTOSPI2_Init+0xa0>)
 8000afc:	f003 f96c 	bl	8003dd8 <HAL_OSPI_Init>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_OCTOSPI2_Init+0x72>
  {
    Error_Handler();
 8000b06:	f000 ff39 	bl	800197c <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 2;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 2;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 8000b12:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <MX_OCTOSPI2_Init+0xa8>)
 8000b14:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi2, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000b16:	1d3b      	adds	r3, r7, #4
 8000b18:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4806      	ldr	r0, [pc, #24]	; (8000b38 <MX_OCTOSPI2_Init+0xa0>)
 8000b20:	f003 fa14 	bl	8003f4c <HAL_OSPIM_Config>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_OCTOSPI2_Init+0x96>
  {
    Error_Handler();
 8000b2a:	f000 ff27 	bl	800197c <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI2_Init 2 */

  /* USER CODE END OCTOSPI2_Init 2 */

}
 8000b2e:	bf00      	nop
 8000b30:	3718      	adds	r7, #24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20004ce4 	.word	0x20004ce4
 8000b3c:	a0001400 	.word	0xa0001400
 8000b40:	00010002 	.word	0x00010002

08000b44 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b48:	4b1b      	ldr	r3, [pc, #108]	; (8000bb8 <MX_SPI1_Init+0x74>)
 8000b4a:	4a1c      	ldr	r2, [pc, #112]	; (8000bbc <MX_SPI1_Init+0x78>)
 8000b4c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b4e:	4b1a      	ldr	r3, [pc, #104]	; (8000bb8 <MX_SPI1_Init+0x74>)
 8000b50:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b54:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b56:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <MX_SPI1_Init+0x74>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b5c:	4b16      	ldr	r3, [pc, #88]	; (8000bb8 <MX_SPI1_Init+0x74>)
 8000b5e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000b62:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b64:	4b14      	ldr	r3, [pc, #80]	; (8000bb8 <MX_SPI1_Init+0x74>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b6a:	4b13      	ldr	r3, [pc, #76]	; (8000bb8 <MX_SPI1_Init+0x74>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000b70:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <MX_SPI1_Init+0x74>)
 8000b72:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000b76:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000b78:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <MX_SPI1_Init+0x74>)
 8000b7a:	2220      	movs	r2, #32
 8000b7c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <MX_SPI1_Init+0x74>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b84:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <MX_SPI1_Init+0x74>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b8a:	4b0b      	ldr	r3, [pc, #44]	; (8000bb8 <MX_SPI1_Init+0x74>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000b90:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <MX_SPI1_Init+0x74>)
 8000b92:	2207      	movs	r2, #7
 8000b94:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b96:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <MX_SPI1_Init+0x74>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <MX_SPI1_Init+0x74>)
 8000b9e:	2208      	movs	r2, #8
 8000ba0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ba2:	4805      	ldr	r0, [pc, #20]	; (8000bb8 <MX_SPI1_Init+0x74>)
 8000ba4:	f005 fb12 	bl	80061cc <HAL_SPI_Init>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000bae:	f000 fee5 	bl	800197c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20004d34 	.word	0x20004d34
 8000bbc:	40013000 	.word	0x40013000

08000bc0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000bc4:	4b19      	ldr	r3, [pc, #100]	; (8000c2c <MX_SPI2_Init+0x6c>)
 8000bc6:	4a1a      	ldr	r2, [pc, #104]	; (8000c30 <MX_SPI2_Init+0x70>)
 8000bc8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000bca:	4b18      	ldr	r3, [pc, #96]	; (8000c2c <MX_SPI2_Init+0x6c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000bd0:	4b16      	ldr	r3, [pc, #88]	; (8000c2c <MX_SPI2_Init+0x6c>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bd6:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <MX_SPI2_Init+0x6c>)
 8000bd8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000bdc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bde:	4b13      	ldr	r3, [pc, #76]	; (8000c2c <MX_SPI2_Init+0x6c>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000be4:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <MX_SPI2_Init+0x6c>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000bea:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <MX_SPI2_Init+0x6c>)
 8000bec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bf0:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <MX_SPI2_Init+0x6c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <MX_SPI2_Init+0x6c>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bfe:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <MX_SPI2_Init+0x6c>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000c04:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <MX_SPI2_Init+0x6c>)
 8000c06:	2207      	movs	r2, #7
 8000c08:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c0a:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <MX_SPI2_Init+0x6c>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <MX_SPI2_Init+0x6c>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c16:	4805      	ldr	r0, [pc, #20]	; (8000c2c <MX_SPI2_Init+0x6c>)
 8000c18:	f005 fad8 	bl	80061cc <HAL_SPI_Init>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_SPI2_Init+0x66>
  {
    Error_Handler();
 8000c22:	f000 feab 	bl	800197c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20004d98 	.word	0x20004d98
 8000c30:	40003800 	.word	0x40003800

08000c34 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000c38:	4b18      	ldr	r3, [pc, #96]	; (8000c9c <MX_SPI3_Init+0x68>)
 8000c3a:	4a19      	ldr	r2, [pc, #100]	; (8000ca0 <MX_SPI3_Init+0x6c>)
 8000c3c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8000c3e:	4b17      	ldr	r3, [pc, #92]	; (8000c9c <MX_SPI3_Init+0x68>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000c44:	4b15      	ldr	r3, [pc, #84]	; (8000c9c <MX_SPI3_Init+0x68>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c4a:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <MX_SPI3_Init+0x68>)
 8000c4c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000c50:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c52:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <MX_SPI3_Init+0x68>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c58:	4b10      	ldr	r3, [pc, #64]	; (8000c9c <MX_SPI3_Init+0x68>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 8000c5e:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <MX_SPI3_Init+0x68>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c64:	4b0d      	ldr	r3, [pc, #52]	; (8000c9c <MX_SPI3_Init+0x68>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <MX_SPI3_Init+0x68>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c70:	4b0a      	ldr	r3, [pc, #40]	; (8000c9c <MX_SPI3_Init+0x68>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000c76:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <MX_SPI3_Init+0x68>)
 8000c78:	2207      	movs	r2, #7
 8000c7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c7c:	4b07      	ldr	r3, [pc, #28]	; (8000c9c <MX_SPI3_Init+0x68>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000c82:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <MX_SPI3_Init+0x68>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000c88:	4804      	ldr	r0, [pc, #16]	; (8000c9c <MX_SPI3_Init+0x68>)
 8000c8a:	f005 fa9f 	bl	80061cc <HAL_SPI_Init>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_SPI3_Init+0x64>
  {
    Error_Handler();
 8000c94:	f000 fe72 	bl	800197c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20004dfc 	.word	0x20004dfc
 8000ca0:	40003c00 	.word	0x40003c00

08000ca4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000ca8:	4b22      	ldr	r3, [pc, #136]	; (8000d34 <MX_UART4_Init+0x90>)
 8000caa:	4a23      	ldr	r2, [pc, #140]	; (8000d38 <MX_UART4_Init+0x94>)
 8000cac:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000cae:	4b21      	ldr	r3, [pc, #132]	; (8000d34 <MX_UART4_Init+0x90>)
 8000cb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cb4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000cb6:	4b1f      	ldr	r3, [pc, #124]	; (8000d34 <MX_UART4_Init+0x90>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000cbc:	4b1d      	ldr	r3, [pc, #116]	; (8000d34 <MX_UART4_Init+0x90>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000cc2:	4b1c      	ldr	r3, [pc, #112]	; (8000d34 <MX_UART4_Init+0x90>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000cc8:	4b1a      	ldr	r3, [pc, #104]	; (8000d34 <MX_UART4_Init+0x90>)
 8000cca:	220c      	movs	r2, #12
 8000ccc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cce:	4b19      	ldr	r3, [pc, #100]	; (8000d34 <MX_UART4_Init+0x90>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cd4:	4b17      	ldr	r3, [pc, #92]	; (8000d34 <MX_UART4_Init+0x90>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cda:	4b16      	ldr	r3, [pc, #88]	; (8000d34 <MX_UART4_Init+0x90>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ce0:	4b14      	ldr	r3, [pc, #80]	; (8000d34 <MX_UART4_Init+0x90>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ce6:	4b13      	ldr	r3, [pc, #76]	; (8000d34 <MX_UART4_Init+0x90>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000cec:	4811      	ldr	r0, [pc, #68]	; (8000d34 <MX_UART4_Init+0x90>)
 8000cee:	f006 fce1 	bl	80076b4 <HAL_UART_Init>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000cf8:	f000 fe40 	bl	800197c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	480d      	ldr	r0, [pc, #52]	; (8000d34 <MX_UART4_Init+0x90>)
 8000d00:	f007 fb06 	bl	8008310 <HAL_UARTEx_SetTxFifoThreshold>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000d0a:	f000 fe37 	bl	800197c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d0e:	2100      	movs	r1, #0
 8000d10:	4808      	ldr	r0, [pc, #32]	; (8000d34 <MX_UART4_Init+0x90>)
 8000d12:	f007 fb3b 	bl	800838c <HAL_UARTEx_SetRxFifoThreshold>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000d1c:	f000 fe2e 	bl	800197c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000d20:	4804      	ldr	r0, [pc, #16]	; (8000d34 <MX_UART4_Init+0x90>)
 8000d22:	f007 fabc 	bl	800829e <HAL_UARTEx_DisableFifoMode>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000d2c:	f000 fe26 	bl	800197c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000d30:	bf00      	nop
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20004e60 	.word	0x20004e60
 8000d38:	40004c00 	.word	0x40004c00

08000d3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08e      	sub	sp, #56	; 0x38
 8000d40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
 8000d4e:	60da      	str	r2, [r3, #12]
 8000d50:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d52:	4b87      	ldr	r3, [pc, #540]	; (8000f70 <MX_GPIO_Init+0x234>)
 8000d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d56:	4a86      	ldr	r2, [pc, #536]	; (8000f70 <MX_GPIO_Init+0x234>)
 8000d58:	f043 0302 	orr.w	r3, r3, #2
 8000d5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d5e:	4b84      	ldr	r3, [pc, #528]	; (8000f70 <MX_GPIO_Init+0x234>)
 8000d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d62:	f003 0302 	and.w	r3, r3, #2
 8000d66:	623b      	str	r3, [r7, #32]
 8000d68:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d6a:	4b81      	ldr	r3, [pc, #516]	; (8000f70 <MX_GPIO_Init+0x234>)
 8000d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d6e:	4a80      	ldr	r2, [pc, #512]	; (8000f70 <MX_GPIO_Init+0x234>)
 8000d70:	f043 0308 	orr.w	r3, r3, #8
 8000d74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d76:	4b7e      	ldr	r3, [pc, #504]	; (8000f70 <MX_GPIO_Init+0x234>)
 8000d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7a:	f003 0308 	and.w	r3, r3, #8
 8000d7e:	61fb      	str	r3, [r7, #28]
 8000d80:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d82:	4b7b      	ldr	r3, [pc, #492]	; (8000f70 <MX_GPIO_Init+0x234>)
 8000d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d86:	4a7a      	ldr	r2, [pc, #488]	; (8000f70 <MX_GPIO_Init+0x234>)
 8000d88:	f043 0304 	orr.w	r3, r3, #4
 8000d8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d8e:	4b78      	ldr	r3, [pc, #480]	; (8000f70 <MX_GPIO_Init+0x234>)
 8000d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d92:	f003 0304 	and.w	r3, r3, #4
 8000d96:	61bb      	str	r3, [r7, #24]
 8000d98:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9a:	4b75      	ldr	r3, [pc, #468]	; (8000f70 <MX_GPIO_Init+0x234>)
 8000d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9e:	4a74      	ldr	r2, [pc, #464]	; (8000f70 <MX_GPIO_Init+0x234>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000da6:	4b72      	ldr	r3, [pc, #456]	; (8000f70 <MX_GPIO_Init+0x234>)
 8000da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	617b      	str	r3, [r7, #20]
 8000db0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000db2:	4b6f      	ldr	r3, [pc, #444]	; (8000f70 <MX_GPIO_Init+0x234>)
 8000db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db6:	4a6e      	ldr	r2, [pc, #440]	; (8000f70 <MX_GPIO_Init+0x234>)
 8000db8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dbe:	4b6c      	ldr	r3, [pc, #432]	; (8000f70 <MX_GPIO_Init+0x234>)
 8000dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dc6:	613b      	str	r3, [r7, #16]
 8000dc8:	693b      	ldr	r3, [r7, #16]
  HAL_PWREx_EnableVddIO2();
 8000dca:	f003 fd9f 	bl	800490c <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dce:	4b68      	ldr	r3, [pc, #416]	; (8000f70 <MX_GPIO_Init+0x234>)
 8000dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd2:	4a67      	ldr	r2, [pc, #412]	; (8000f70 <MX_GPIO_Init+0x234>)
 8000dd4:	f043 0320 	orr.w	r3, r3, #32
 8000dd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dda:	4b65      	ldr	r3, [pc, #404]	; (8000f70 <MX_GPIO_Init+0x234>)
 8000ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dde:	f003 0320 	and.w	r3, r3, #32
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000de6:	4b62      	ldr	r3, [pc, #392]	; (8000f70 <MX_GPIO_Init+0x234>)
 8000de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dea:	4a61      	ldr	r2, [pc, #388]	; (8000f70 <MX_GPIO_Init+0x234>)
 8000dec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000df0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000df2:	4b5f      	ldr	r3, [pc, #380]	; (8000f70 <MX_GPIO_Init+0x234>)
 8000df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dfe:	4b5c      	ldr	r3, [pc, #368]	; (8000f70 <MX_GPIO_Init+0x234>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e02:	4a5b      	ldr	r2, [pc, #364]	; (8000f70 <MX_GPIO_Init+0x234>)
 8000e04:	f043 0310 	orr.w	r3, r3, #16
 8000e08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e0a:	4b59      	ldr	r3, [pc, #356]	; (8000f70 <MX_GPIO_Init+0x234>)
 8000e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0e:	f003 0310 	and.w	r3, r3, #16
 8000e12:	607b      	str	r3, [r7, #4]
 8000e14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 8000e16:	2200      	movs	r2, #0
 8000e18:	21a0      	movs	r1, #160	; 0xa0
 8000e1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e1e:	f002 fbeb 	bl	80035f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8000e22:	2200      	movs	r2, #0
 8000e24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e28:	4852      	ldr	r0, [pc, #328]	; (8000f74 <MX_GPIO_Init+0x238>)
 8000e2a:	f002 fbe5 	bl	80035f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000e34:	4850      	ldr	r0, [pc, #320]	; (8000f78 <MX_GPIO_Init+0x23c>)
 8000e36:	f002 fbdf 	bl	80035f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_RESET);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e40:	484e      	ldr	r0, [pc, #312]	; (8000f7c <MX_GPIO_Init+0x240>)
 8000e42:	f002 fbd9 	bl	80035f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8000e46:	2201      	movs	r2, #1
 8000e48:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e4c:	4849      	ldr	r0, [pc, #292]	; (8000f74 <MX_GPIO_Init+0x238>)
 8000e4e:	f002 fbd3 	bl	80035f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000e52:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e64:	4619      	mov	r1, r3
 8000e66:	4846      	ldr	r0, [pc, #280]	; (8000f80 <MX_GPIO_Init+0x244>)
 8000e68:	f002 fa34 	bl	80032d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 8000e6c:	2318      	movs	r3, #24
 8000e6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e70:	2300      	movs	r3, #0
 8000e72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e82:	f002 fa27 	bl	80032d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000e86:	23a0      	movs	r3, #160	; 0xa0
 8000e88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e92:	2300      	movs	r3, #0
 8000e94:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea0:	f002 fa18 	bl	80032d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ea4:	2310      	movs	r3, #16
 8000ea6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4833      	ldr	r0, [pc, #204]	; (8000f84 <MX_GPIO_Init+0x248>)
 8000eb8:	f002 fa0c 	bl	80032d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ebc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ec0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ece:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4827      	ldr	r0, [pc, #156]	; (8000f74 <MX_GPIO_Init+0x238>)
 8000ed6:	f002 f9fd 	bl	80032d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000eda:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000ede:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4821      	ldr	r0, [pc, #132]	; (8000f78 <MX_GPIO_Init+0x23c>)
 8000ef4:	f002 f9ee 	bl	80032d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000efc:	2300      	movs	r3, #0
 8000efe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f08:	4619      	mov	r1, r3
 8000f0a:	481b      	ldr	r0, [pc, #108]	; (8000f78 <MX_GPIO_Init+0x23c>)
 8000f0c:	f002 f9e2 	bl	80032d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000f10:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f16:	2301      	movs	r3, #1
 8000f18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f26:	4619      	mov	r1, r3
 8000f28:	4814      	ldr	r0, [pc, #80]	; (8000f7c <MX_GPIO_Init+0x240>)
 8000f2a:	f002 f9d3 	bl	80032d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f34:	2300      	movs	r3, #0
 8000f36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f40:	4619      	mov	r1, r3
 8000f42:	480c      	ldr	r0, [pc, #48]	; (8000f74 <MX_GPIO_Init+0x238>)
 8000f44:	f002 f9c6 	bl	80032d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000f48:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f52:	2301      	movs	r3, #1
 8000f54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f56:	2303      	movs	r3, #3
 8000f58:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4804      	ldr	r0, [pc, #16]	; (8000f74 <MX_GPIO_Init+0x238>)
 8000f62:	f002 f9b7 	bl	80032d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f66:	bf00      	nop
 8000f68:	3738      	adds	r7, #56	; 0x38
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40021000 	.word	0x40021000
 8000f74:	48001000 	.word	0x48001000
 8000f78:	48000400 	.word	0x48000400
 8000f7c:	48001400 	.word	0x48001400
 8000f80:	48000c00 	.word	0x48000c00
 8000f84:	48000800 	.word	0x48000800

08000f88 <mipi_config>:

/* USER CODE BEGIN 4 */
void mipi_config() {
 8000f88:	b590      	push	{r4, r7, lr}
 8000f8a:	b0af      	sub	sp, #188	; 0xbc
 8000f8c:	af02      	add	r7, sp, #8
	if (HAL_DSI_Start(&hdsi) != HAL_OK) {
 8000f8e:	48c4      	ldr	r0, [pc, #784]	; (80012a0 <mipi_config+0x318>)
 8000f90:	f002 f87d 	bl	800308e <HAL_DSI_Start>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <mipi_config+0x16>
		Error_Handler();
 8000f9a:	f000 fcef 	bl	800197c <Error_Handler>
	}
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xF0, 0xC3);
 8000f9e:	23c3      	movs	r3, #195	; 0xc3
 8000fa0:	9300      	str	r3, [sp, #0]
 8000fa2:	23f0      	movs	r3, #240	; 0xf0
 8000fa4:	2215      	movs	r2, #21
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	48bd      	ldr	r0, [pc, #756]	; (80012a0 <mipi_config+0x318>)
 8000faa:	f002 f8ac 	bl	8003106 <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xF0, 0x96);
 8000fae:	2396      	movs	r3, #150	; 0x96
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	23f0      	movs	r3, #240	; 0xf0
 8000fb4:	2215      	movs	r2, #21
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	48b9      	ldr	r0, [pc, #740]	; (80012a0 <mipi_config+0x318>)
 8000fba:	f002 f8a4 	bl	8003106 <HAL_DSI_ShortWrite>
	uint8_t cmd3[7] = { 0x00, 0x77, 0x1F, 0x04, 0x2A, 0x80, 0x33 };
 8000fbe:	4ab9      	ldr	r2, [pc, #740]	; (80012a4 <mipi_config+0x31c>)
 8000fc0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000fc4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fc8:	6018      	str	r0, [r3, #0]
 8000fca:	3304      	adds	r3, #4
 8000fcc:	8019      	strh	r1, [r3, #0]
 8000fce:	3302      	adds	r3, #2
 8000fd0:	0c0a      	lsrs	r2, r1, #16
 8000fd2:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 8, 0xE7, cmd3);
 8000fd4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000fd8:	9301      	str	r3, [sp, #4]
 8000fda:	23e7      	movs	r3, #231	; 0xe7
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	2308      	movs	r3, #8
 8000fe0:	2239      	movs	r2, #57	; 0x39
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	48ae      	ldr	r0, [pc, #696]	; (80012a0 <mipi_config+0x318>)
 8000fe6:	f002 f8b0 	bl	800314a <HAL_DSI_LongWrite>
	uint8_t cmd4[3] = { 0xC0, 0x68, 0xE0 };
 8000fea:	4aaf      	ldr	r2, [pc, #700]	; (80012a8 <mipi_config+0x320>)
 8000fec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ff0:	6812      	ldr	r2, [r2, #0]
 8000ff2:	4611      	mov	r1, r2
 8000ff4:	8019      	strh	r1, [r3, #0]
 8000ff6:	3302      	adds	r3, #2
 8000ff8:	0c12      	lsrs	r2, r2, #16
 8000ffa:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, 0xA4, cmd4);
 8000ffc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001000:	9301      	str	r3, [sp, #4]
 8001002:	23a4      	movs	r3, #164	; 0xa4
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	2304      	movs	r3, #4
 8001008:	2239      	movs	r2, #57	; 0x39
 800100a:	2100      	movs	r1, #0
 800100c:	48a4      	ldr	r0, [pc, #656]	; (80012a0 <mipi_config+0x318>)
 800100e:	f002 f89c 	bl	800314a <HAL_DSI_LongWrite>
	uint8_t cmd5[4] = { 0x42, 0x05, 0x24, 0x03 };
 8001012:	4ba6      	ldr	r3, [pc, #664]	; (80012ac <mipi_config+0x324>)
 8001014:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC3, cmd5);
 8001018:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800101c:	9301      	str	r3, [sp, #4]
 800101e:	23c3      	movs	r3, #195	; 0xc3
 8001020:	9300      	str	r3, [sp, #0]
 8001022:	2305      	movs	r3, #5
 8001024:	2239      	movs	r2, #57	; 0x39
 8001026:	2100      	movs	r1, #0
 8001028:	489d      	ldr	r0, [pc, #628]	; (80012a0 <mipi_config+0x318>)
 800102a:	f002 f88e 	bl	800314a <HAL_DSI_LongWrite>
	uint8_t cmd6[4] = { 0x42, 0x05, 0x24, 0x03 };
 800102e:	4b9f      	ldr	r3, [pc, #636]	; (80012ac <mipi_config+0x324>)
 8001030:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC4, cmd6);
 8001034:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001038:	9301      	str	r3, [sp, #4]
 800103a:	23c4      	movs	r3, #196	; 0xc4
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	2305      	movs	r3, #5
 8001040:	2239      	movs	r2, #57	; 0x39
 8001042:	2100      	movs	r1, #0
 8001044:	4896      	ldr	r0, [pc, #600]	; (80012a0 <mipi_config+0x318>)
 8001046:	f002 f880 	bl	800314a <HAL_DSI_LongWrite>
	uint8_t cmd7[12] = { 0x0F, 0xF5, 0x10, 0x13, 0x22, 0x25, 0x10, 0x55, 0x55,
 800104a:	4a99      	ldr	r2, [pc, #612]	; (80012b0 <mipi_config+0x328>)
 800104c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001050:	ca07      	ldmia	r2, {r0, r1, r2}
 8001052:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x55, 0x55, 0x55 };
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 13, 0xE5, cmd7);
 8001056:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800105a:	9301      	str	r3, [sp, #4]
 800105c:	23e5      	movs	r3, #229	; 0xe5
 800105e:	9300      	str	r3, [sp, #0]
 8001060:	230d      	movs	r3, #13
 8001062:	2239      	movs	r2, #57	; 0x39
 8001064:	2100      	movs	r1, #0
 8001066:	488e      	ldr	r0, [pc, #568]	; (80012a0 <mipi_config+0x318>)
 8001068:	f002 f86f 	bl	800314a <HAL_DSI_LongWrite>
	uint8_t cmd8[12] = { 0x0F, 0xF5, 0x10, 0x13, 0x22, 0x25, 0x10, 0x55, 0x55,
 800106c:	4a90      	ldr	r2, [pc, #576]	; (80012b0 <mipi_config+0x328>)
 800106e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001072:	ca07      	ldmia	r2, {r0, r1, r2}
 8001074:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x55, 0x55, 0x55 };
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 13, 0xE6, cmd8);
 8001078:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800107c:	9301      	str	r3, [sp, #4]
 800107e:	23e6      	movs	r3, #230	; 0xe6
 8001080:	9300      	str	r3, [sp, #0]
 8001082:	230d      	movs	r3, #13
 8001084:	2239      	movs	r2, #57	; 0x39
 8001086:	2100      	movs	r1, #0
 8001088:	4885      	ldr	r0, [pc, #532]	; (80012a0 <mipi_config+0x318>)
 800108a:	f002 f85e 	bl	800314a <HAL_DSI_LongWrite>
	uint8_t cmd9[7] = { 0x00, 0x55, 0x00, 0x00, 0x00, 0x49, 0x22 };
 800108e:	4a89      	ldr	r2, [pc, #548]	; (80012b4 <mipi_config+0x32c>)
 8001090:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001094:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001098:	6018      	str	r0, [r3, #0]
 800109a:	3304      	adds	r3, #4
 800109c:	8019      	strh	r1, [r3, #0]
 800109e:	3302      	adds	r3, #2
 80010a0:	0c0a      	lsrs	r2, r1, #16
 80010a2:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 8, 0xEC, cmd9);
 80010a4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80010a8:	9301      	str	r3, [sp, #4]
 80010aa:	23ec      	movs	r3, #236	; 0xec
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	2308      	movs	r3, #8
 80010b0:	2239      	movs	r2, #57	; 0x39
 80010b2:	2100      	movs	r1, #0
 80010b4:	487a      	ldr	r0, [pc, #488]	; (80012a0 <mipi_config+0x318>)
 80010b6:	f002 f848 	bl	800314a <HAL_DSI_LongWrite>
	uint8_t cmd10[4] = { 0x88, 0x05, 0x0F, 0x18 };
 80010ba:	4b7f      	ldr	r3, [pc, #508]	; (80012b8 <mipi_config+0x330>)
 80010bc:	67bb      	str	r3, [r7, #120]	; 0x78
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC1, cmd10);
 80010be:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80010c2:	9301      	str	r3, [sp, #4]
 80010c4:	23c1      	movs	r3, #193	; 0xc1
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	2305      	movs	r3, #5
 80010ca:	2239      	movs	r2, #57	; 0x39
 80010cc:	2100      	movs	r1, #0
 80010ce:	4874      	ldr	r0, [pc, #464]	; (80012a0 <mipi_config+0x318>)
 80010d0:	f002 f83b 	bl	800314a <HAL_DSI_LongWrite>
	uint8_t cmd11[4] = { 0x88, 0x05, 0x0F, 0x18 };
 80010d4:	4b78      	ldr	r3, [pc, #480]	; (80012b8 <mipi_config+0x330>)
 80010d6:	677b      	str	r3, [r7, #116]	; 0x74
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xC2, cmd11);
 80010d8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80010dc:	9301      	str	r3, [sp, #4]
 80010de:	23c2      	movs	r3, #194	; 0xc2
 80010e0:	9300      	str	r3, [sp, #0]
 80010e2:	2305      	movs	r3, #5
 80010e4:	2239      	movs	r2, #57	; 0x39
 80010e6:	2100      	movs	r1, #0
 80010e8:	486d      	ldr	r0, [pc, #436]	; (80012a0 <mipi_config+0x318>)
 80010ea:	f002 f82e 	bl	800314a <HAL_DSI_LongWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x36, 0x00);
 80010ee:	2300      	movs	r3, #0
 80010f0:	9300      	str	r3, [sp, #0]
 80010f2:	2336      	movs	r3, #54	; 0x36
 80010f4:	2215      	movs	r2, #21
 80010f6:	2100      	movs	r1, #0
 80010f8:	4869      	ldr	r0, [pc, #420]	; (80012a0 <mipi_config+0x318>)
 80010fa:	f002 f804 	bl	8003106 <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x3A, 0x07);
 80010fe:	2307      	movs	r3, #7
 8001100:	9300      	str	r3, [sp, #0]
 8001102:	233a      	movs	r3, #58	; 0x3a
 8001104:	2215      	movs	r2, #21
 8001106:	2100      	movs	r1, #0
 8001108:	4865      	ldr	r0, [pc, #404]	; (80012a0 <mipi_config+0x318>)
 800110a:	f001 fffc 	bl	8003106 <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xC5, 0xBE);
 800110e:	23be      	movs	r3, #190	; 0xbe
 8001110:	9300      	str	r3, [sp, #0]
 8001112:	23c5      	movs	r3, #197	; 0xc5
 8001114:	2215      	movs	r2, #21
 8001116:	2100      	movs	r1, #0
 8001118:	4861      	ldr	r0, [pc, #388]	; (80012a0 <mipi_config+0x318>)
 800111a:	f001 fff4 	bl	8003106 <HAL_DSI_ShortWrite>
	uint8_t cmd15[14] = { 0xC0, 0x01, 0x04, 0x0B, 0x0B, 0x29, 0x41, 0x55, 0x55,
 800111e:	4b67      	ldr	r3, [pc, #412]	; (80012bc <mipi_config+0x334>)
 8001120:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8001124:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001126:	c407      	stmia	r4!, {r0, r1, r2}
 8001128:	8023      	strh	r3, [r4, #0]
			0x3D, 0x19, 0x18, 0x24, 0x27 };
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 15, 0xE0, cmd15);
 800112a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800112e:	9301      	str	r3, [sp, #4]
 8001130:	23e0      	movs	r3, #224	; 0xe0
 8001132:	9300      	str	r3, [sp, #0]
 8001134:	230f      	movs	r3, #15
 8001136:	2239      	movs	r2, #57	; 0x39
 8001138:	2100      	movs	r1, #0
 800113a:	4859      	ldr	r0, [pc, #356]	; (80012a0 <mipi_config+0x318>)
 800113c:	f002 f805 	bl	800314a <HAL_DSI_LongWrite>
	uint8_t cmd16[14] = { 0xC0, 0x01, 0x05, 0x0B, 0x0C, 0x29, 0x42, 0x55, 0x56,
 8001140:	4b5f      	ldr	r3, [pc, #380]	; (80012c0 <mipi_config+0x338>)
 8001142:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8001146:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001148:	c407      	stmia	r4!, {r0, r1, r2}
 800114a:	8023      	strh	r3, [r4, #0]
			0x3E, 0x1A, 0x18, 0x24, 0x28 };
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 15, 0xE1, cmd16);
 800114c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001150:	9301      	str	r3, [sp, #4]
 8001152:	23e1      	movs	r3, #225	; 0xe1
 8001154:	9300      	str	r3, [sp, #0]
 8001156:	230f      	movs	r3, #15
 8001158:	2239      	movs	r2, #57	; 0x39
 800115a:	2100      	movs	r1, #0
 800115c:	4850      	ldr	r0, [pc, #320]	; (80012a0 <mipi_config+0x318>)
 800115e:	f001 fff4 	bl	800314a <HAL_DSI_LongWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xB2, 0x10);
 8001162:	2310      	movs	r3, #16
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	23b2      	movs	r3, #178	; 0xb2
 8001168:	2215      	movs	r2, #21
 800116a:	2100      	movs	r1, #0
 800116c:	484c      	ldr	r0, [pc, #304]	; (80012a0 <mipi_config+0x318>)
 800116e:	f001 ffca 	bl	8003106 <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xB3, 0x01);
 8001172:	2301      	movs	r3, #1
 8001174:	9300      	str	r3, [sp, #0]
 8001176:	23b3      	movs	r3, #179	; 0xb3
 8001178:	2215      	movs	r2, #21
 800117a:	2100      	movs	r1, #0
 800117c:	4848      	ldr	r0, [pc, #288]	; (80012a0 <mipi_config+0x318>)
 800117e:	f001 ffc2 	bl	8003106 <HAL_DSI_ShortWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xB4, 0x01);
 8001182:	2301      	movs	r3, #1
 8001184:	9300      	str	r3, [sp, #0]
 8001186:	23b4      	movs	r3, #180	; 0xb4
 8001188:	2215      	movs	r2, #21
 800118a:	2100      	movs	r1, #0
 800118c:	4844      	ldr	r0, [pc, #272]	; (80012a0 <mipi_config+0x318>)
 800118e:	f001 ffba 	bl	8003106 <HAL_DSI_ShortWrite>
	uint8_t cmd20[2] = { 0x27, 0x09 };
 8001192:	f640 1327 	movw	r3, #2343	; 0x927
 8001196:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 3, 0xB6, cmd20);
 800119a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800119e:	9301      	str	r3, [sp, #4]
 80011a0:	23b6      	movs	r3, #182	; 0xb6
 80011a2:	9300      	str	r3, [sp, #0]
 80011a4:	2303      	movs	r3, #3
 80011a6:	2239      	movs	r2, #57	; 0x39
 80011a8:	2100      	movs	r1, #0
 80011aa:	483d      	ldr	r0, [pc, #244]	; (80012a0 <mipi_config+0x318>)
 80011ac:	f001 ffcd 	bl	800314a <HAL_DSI_LongWrite>
	uint8_t cmd21[4] = { 0x00, 0x54, 0x00, 0x54 };
 80011b0:	f04f 2354 	mov.w	r3, #1409307648	; 0x54005400
 80011b4:	64fb      	str	r3, [r7, #76]	; 0x4c
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 5, 0xB5, cmd21);
 80011b6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011ba:	9301      	str	r3, [sp, #4]
 80011bc:	23b5      	movs	r3, #181	; 0xb5
 80011be:	9300      	str	r3, [sp, #0]
 80011c0:	2305      	movs	r3, #5
 80011c2:	2239      	movs	r2, #57	; 0x39
 80011c4:	2100      	movs	r1, #0
 80011c6:	4836      	ldr	r0, [pc, #216]	; (80012a0 <mipi_config+0x318>)
 80011c8:	f001 ffbf 	bl	800314a <HAL_DSI_LongWrite>
	uint8_t cmd22[9] = { 0x20, 0x12, 0x40, 0x00, 0x00, 0x2F, 0x2A, 0x0A, 0x00 };
 80011cc:	4a3d      	ldr	r2, [pc, #244]	; (80012c4 <mipi_config+0x33c>)
 80011ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80011d4:	c303      	stmia	r3!, {r0, r1}
 80011d6:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 10, 0xA5, cmd22);
 80011d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011dc:	9301      	str	r3, [sp, #4]
 80011de:	23a5      	movs	r3, #165	; 0xa5
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	230a      	movs	r3, #10
 80011e4:	2239      	movs	r2, #57	; 0x39
 80011e6:	2100      	movs	r1, #0
 80011e8:	482d      	ldr	r0, [pc, #180]	; (80012a0 <mipi_config+0x318>)
 80011ea:	f001 ffae 	bl	800314a <HAL_DSI_LongWrite>
	uint8_t cmd23[9] = { 0x20, 0x12, 0x40, 0x00, 0x00, 0x2F, 0x2A, 0x0A, 0x00 };
 80011ee:	4a35      	ldr	r2, [pc, #212]	; (80012c4 <mipi_config+0x33c>)
 80011f0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80011f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80011f6:	c303      	stmia	r3!, {r0, r1}
 80011f8:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 10, 0xA6, cmd23);
 80011fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80011fe:	9301      	str	r3, [sp, #4]
 8001200:	23a6      	movs	r3, #166	; 0xa6
 8001202:	9300      	str	r3, [sp, #0]
 8001204:	230a      	movs	r3, #10
 8001206:	2239      	movs	r2, #57	; 0x39
 8001208:	2100      	movs	r1, #0
 800120a:	4825      	ldr	r0, [pc, #148]	; (80012a0 <mipi_config+0x318>)
 800120c:	f001 ff9d 	bl	800314a <HAL_DSI_LongWrite>
	uint8_t cmd24[7] = { 0x58, 0x0A, 0x21, 0x00, 0x20, 0x01, 0x00 };
 8001210:	4a2d      	ldr	r2, [pc, #180]	; (80012c8 <mipi_config+0x340>)
 8001212:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001216:	e892 0003 	ldmia.w	r2, {r0, r1}
 800121a:	6018      	str	r0, [r3, #0]
 800121c:	3304      	adds	r3, #4
 800121e:	8019      	strh	r1, [r3, #0]
 8001220:	3302      	adds	r3, #2
 8001222:	0c0a      	lsrs	r2, r1, #16
 8001224:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 8, 0xBA, cmd24);
 8001226:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800122a:	9301      	str	r3, [sp, #4]
 800122c:	23ba      	movs	r3, #186	; 0xba
 800122e:	9300      	str	r3, [sp, #0]
 8001230:	2308      	movs	r3, #8
 8001232:	2239      	movs	r2, #57	; 0x39
 8001234:	2100      	movs	r1, #0
 8001236:	481a      	ldr	r0, [pc, #104]	; (80012a0 <mipi_config+0x318>)
 8001238:	f001 ff87 	bl	800314a <HAL_DSI_LongWrite>
	uint8_t cmd25[8] = { 0x00, 0x45, 0x00, 0x1F, 0x15, 0x87, 0x07, 0x04 };
 800123c:	4a23      	ldr	r2, [pc, #140]	; (80012cc <mipi_config+0x344>)
 800123e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001242:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001246:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 9, 0xBB, cmd25);
 800124a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800124e:	9301      	str	r3, [sp, #4]
 8001250:	23bb      	movs	r3, #187	; 0xbb
 8001252:	9300      	str	r3, [sp, #0]
 8001254:	2309      	movs	r3, #9
 8001256:	2239      	movs	r2, #57	; 0x39
 8001258:	2100      	movs	r1, #0
 800125a:	4811      	ldr	r0, [pc, #68]	; (80012a0 <mipi_config+0x318>)
 800125c:	f001 ff75 	bl	800314a <HAL_DSI_LongWrite>
	uint8_t cmd26[8] = { 0x00, 0x45, 0x00, 0x1F, 0x15, 0x87, 0x07, 0x04 };
 8001260:	4a1a      	ldr	r2, [pc, #104]	; (80012cc <mipi_config+0x344>)
 8001262:	f107 031c 	add.w	r3, r7, #28
 8001266:	e892 0003 	ldmia.w	r2, {r0, r1}
 800126a:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 9, 0xBC, cmd26);
 800126e:	f107 031c 	add.w	r3, r7, #28
 8001272:	9301      	str	r3, [sp, #4]
 8001274:	23bc      	movs	r3, #188	; 0xbc
 8001276:	9300      	str	r3, [sp, #0]
 8001278:	2309      	movs	r3, #9
 800127a:	2239      	movs	r2, #57	; 0x39
 800127c:	2100      	movs	r1, #0
 800127e:	4808      	ldr	r0, [pc, #32]	; (80012a0 <mipi_config+0x318>)
 8001280:	f001 ff63 	bl	800314a <HAL_DSI_LongWrite>
	uint8_t cmd27[11] = { 0x11, 0x77, 0xFF, 0xFF, 0x25, 0x34, 0x43, 0x52, 0xFF,
 8001284:	4a12      	ldr	r2, [pc, #72]	; (80012d0 <mipi_config+0x348>)
 8001286:	f107 0310 	add.w	r3, r7, #16
 800128a:	ca07      	ldmia	r2, {r0, r1, r2}
 800128c:	c303      	stmia	r3!, {r0, r1}
 800128e:	801a      	strh	r2, [r3, #0]
 8001290:	3302      	adds	r3, #2
 8001292:	0c12      	lsrs	r2, r2, #16
 8001294:	701a      	strb	r2, [r3, #0]
			0xFF, 0xF9 };
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 12, 0xBD, cmd27);
 8001296:	f107 0310 	add.w	r3, r7, #16
 800129a:	9301      	str	r3, [sp, #4]
 800129c:	e01a      	b.n	80012d4 <mipi_config+0x34c>
 800129e:	bf00      	nop
 80012a0:	20004b28 	.word	0x20004b28
 80012a4:	08008520 	.word	0x08008520
 80012a8:	08008528 	.word	0x08008528
 80012ac:	03240542 	.word	0x03240542
 80012b0:	0800852c 	.word	0x0800852c
 80012b4:	08008538 	.word	0x08008538
 80012b8:	180f0588 	.word	0x180f0588
 80012bc:	08008540 	.word	0x08008540
 80012c0:	08008550 	.word	0x08008550
 80012c4:	08008560 	.word	0x08008560
 80012c8:	0800856c 	.word	0x0800856c
 80012cc:	08008574 	.word	0x08008574
 80012d0:	0800857c 	.word	0x0800857c
 80012d4:	23bd      	movs	r3, #189	; 0xbd
 80012d6:	9300      	str	r3, [sp, #0]
 80012d8:	230c      	movs	r3, #12
 80012da:	2239      	movs	r2, #57	; 0x39
 80012dc:	2100      	movs	r1, #0
 80012de:	482d      	ldr	r0, [pc, #180]	; (8001394 <mipi_config+0x40c>)
 80012e0:	f001 ff33 	bl	800314a <HAL_DSI_LongWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0xED, 0xC3);
 80012e4:	23c3      	movs	r3, #195	; 0xc3
 80012e6:	9300      	str	r3, [sp, #0]
 80012e8:	23ed      	movs	r3, #237	; 0xed
 80012ea:	2215      	movs	r2, #21
 80012ec:	2100      	movs	r1, #0
 80012ee:	4829      	ldr	r0, [pc, #164]	; (8001394 <mipi_config+0x40c>)
 80012f0:	f001 ff09 	bl	8003106 <HAL_DSI_ShortWrite>
	uint8_t cmd29[3] = { 0x40, 0x0F, 0x00 };
 80012f4:	4a28      	ldr	r2, [pc, #160]	; (8001398 <mipi_config+0x410>)
 80012f6:	f107 030c 	add.w	r3, r7, #12
 80012fa:	6812      	ldr	r2, [r2, #0]
 80012fc:	4611      	mov	r1, r2
 80012fe:	8019      	strh	r1, [r3, #0]
 8001300:	3302      	adds	r3, #2
 8001302:	0c12      	lsrs	r2, r2, #16
 8001304:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, 0xE4, cmd29);
 8001306:	f107 030c 	add.w	r3, r7, #12
 800130a:	9301      	str	r3, [sp, #4]
 800130c:	23e4      	movs	r3, #228	; 0xe4
 800130e:	9300      	str	r3, [sp, #0]
 8001310:	2304      	movs	r3, #4
 8001312:	2239      	movs	r2, #57	; 0x39
 8001314:	2100      	movs	r1, #0
 8001316:	481f      	ldr	r0, [pc, #124]	; (8001394 <mipi_config+0x40c>)
 8001318:	f001 ff17 	bl	800314a <HAL_DSI_LongWrite>
	uint8_t cmd30[9] = { 0x90, 0x00, 0x3F, 0x10, 0x3F, 0x35, 0x7F, 0x7F, 0x25 };
 800131c:	4a1f      	ldr	r2, [pc, #124]	; (800139c <mipi_config+0x414>)
 800131e:	463b      	mov	r3, r7
 8001320:	ca07      	ldmia	r2, {r0, r1, r2}
 8001322:	c303      	stmia	r3!, {r0, r1}
 8001324:	701a      	strb	r2, [r3, #0]
	HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 10, 0xCC, cmd30);
 8001326:	463b      	mov	r3, r7
 8001328:	9301      	str	r3, [sp, #4]
 800132a:	23cc      	movs	r3, #204	; 0xcc
 800132c:	9300      	str	r3, [sp, #0]
 800132e:	230a      	movs	r3, #10
 8001330:	2239      	movs	r2, #57	; 0x39
 8001332:	2100      	movs	r1, #0
 8001334:	4817      	ldr	r0, [pc, #92]	; (8001394 <mipi_config+0x40c>)
 8001336:	f001 ff08 	bl	800314a <HAL_DSI_LongWrite>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x35, 0x00);
 800133a:	2300      	movs	r3, #0
 800133c:	9300      	str	r3, [sp, #0]
 800133e:	2335      	movs	r3, #53	; 0x35
 8001340:	2215      	movs	r2, #21
 8001342:	2100      	movs	r1, #0
 8001344:	4813      	ldr	r0, [pc, #76]	; (8001394 <mipi_config+0x40c>)
 8001346:	f001 fede 	bl	8003106 <HAL_DSI_ShortWrite>
	HAL_Delay(0);
 800134a:	2000      	movs	r0, #0
 800134c:	f000 ffe8 	bl	8002320 <HAL_Delay>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, 0x11, 0x00);
 8001350:	2300      	movs	r3, #0
 8001352:	9300      	str	r3, [sp, #0]
 8001354:	2311      	movs	r3, #17
 8001356:	2205      	movs	r2, #5
 8001358:	2100      	movs	r1, #0
 800135a:	480e      	ldr	r0, [pc, #56]	; (8001394 <mipi_config+0x40c>)
 800135c:	f001 fed3 	bl	8003106 <HAL_DSI_ShortWrite>
	HAL_Delay(120);
 8001360:	2078      	movs	r0, #120	; 0x78
 8001362:	f000 ffdd 	bl	8002320 <HAL_Delay>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, 0x29, 0x00);
 8001366:	2300      	movs	r3, #0
 8001368:	9300      	str	r3, [sp, #0]
 800136a:	2329      	movs	r3, #41	; 0x29
 800136c:	2205      	movs	r2, #5
 800136e:	2100      	movs	r1, #0
 8001370:	4808      	ldr	r0, [pc, #32]	; (8001394 <mipi_config+0x40c>)
 8001372:	f001 fec8 	bl	8003106 <HAL_DSI_ShortWrite>
	HAL_Delay(120);
 8001376:	2078      	movs	r0, #120	; 0x78
 8001378:	f000 ffd2 	bl	8002320 <HAL_Delay>
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x35, 0x00);
 800137c:	2300      	movs	r3, #0
 800137e:	9300      	str	r3, [sp, #0]
 8001380:	2335      	movs	r3, #53	; 0x35
 8001382:	2215      	movs	r2, #21
 8001384:	2100      	movs	r1, #0
 8001386:	4803      	ldr	r0, [pc, #12]	; (8001394 <mipi_config+0x40c>)
 8001388:	f001 febd 	bl	8003106 <HAL_DSI_ShortWrite>
}
 800138c:	bf00      	nop
 800138e:	37b4      	adds	r7, #180	; 0xb4
 8001390:	46bd      	mov	sp, r7
 8001392:	bd90      	pop	{r4, r7, pc}
 8001394:	20004b28 	.word	0x20004b28
 8001398:	08008588 	.word	0x08008588
 800139c:	0800858c 	.word	0x0800858c

080013a0 <SPI2PC>:
	if (HAL_OSPI_Transmit(&hospi1, send_data_Page_Program, 20) == HAL_OK) {
		HAL_UART_Transmit(&huart4, "write OK", 8, 1000);
	}*/
}

void SPI2PC() {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	f5ad 5dc8 	sub.w	sp, sp, #6400	; 0x1900
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
	uint8_t buf[2] = { 0 };
 80013aa:	2300      	movs	r3, #0
 80013ac:	f507 52c8 	add.w	r2, r7, #6400	; 0x1900
 80013b0:	f102 0204 	add.w	r2, r2, #4
 80013b4:	8013      	strh	r3, [r2, #0]
	uint8_t frame_buf[6400] = { 0 };
 80013b6:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 80013ba:	f6a3 130c 	subw	r3, r3, #2316	; 0x90c
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	3304      	adds	r3, #4
 80013c4:	f641 02fc 	movw	r2, #6396	; 0x18fc
 80013c8:	2100      	movs	r1, #0
 80013ca:	4618      	mov	r0, r3
 80013cc:	f007 f86a 	bl	80084a4 <memset>
	int frame_buf_count = 0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	f507 52c8 	add.w	r2, r7, #6400	; 0x1900
 80013d6:	f102 020c 	add.w	r2, r2, #12
 80013da:	6013      	str	r3, [r2, #0]

	if (HAL_SPI_Receive(&hspi3, (uint8_t*) buf, 2, 1000) == HAL_OK) {
 80013dc:	f507 51c8 	add.w	r1, r7, #6400	; 0x1900
 80013e0:	f101 0104 	add.w	r1, r1, #4
 80013e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013e8:	2202      	movs	r2, #2
 80013ea:	48dc      	ldr	r0, [pc, #880]	; (800175c <SPI2PC+0x3bc>)
 80013ec:	f005 f906 	bl	80065fc <HAL_SPI_Receive>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	f040 81f5 	bne.w	80017e2 <SPI2PC+0x442>
		// USB command: Type and command
		switch (buf[0] & 0b11000000) {
 80013f8:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 80013fc:	f103 0304 	add.w	r3, r3, #4
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001406:	2bc0      	cmp	r3, #192	; 0xc0
 8001408:	f000 81ba 	beq.w	8001780 <SPI2PC+0x3e0>
 800140c:	2bc0      	cmp	r3, #192	; 0xc0
 800140e:	f300 81d2 	bgt.w	80017b6 <SPI2PC+0x416>
 8001412:	2b80      	cmp	r3, #128	; 0x80
 8001414:	f000 81a6 	beq.w	8001764 <SPI2PC+0x3c4>
 8001418:	2b80      	cmp	r3, #128	; 0x80
 800141a:	f300 81cc 	bgt.w	80017b6 <SPI2PC+0x416>
 800141e:	2b00      	cmp	r3, #0
 8001420:	d003      	beq.n	800142a <SPI2PC+0x8a>
 8001422:	2b40      	cmp	r3, #64	; 0x40
 8001424:	f000 8085 	beq.w	8001532 <SPI2PC+0x192>
 8001428:	e1c5      	b.n	80017b6 <SPI2PC+0x416>
		case 0b00000000:  //Chain SPI functions
			switch (buf[0] & 0b00111000) {
 800142a:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 800142e:	f103 0304 	add.w	r3, r3, #4
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001438:	2b38      	cmp	r3, #56	; 0x38
 800143a:	f200 81b5 	bhi.w	80017a8 <SPI2PC+0x408>
 800143e:	a201      	add	r2, pc, #4	; (adr r2, 8001444 <SPI2PC+0xa4>)
 8001440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001444:	0800152f 	.word	0x0800152f
 8001448:	080017a9 	.word	0x080017a9
 800144c:	080017a9 	.word	0x080017a9
 8001450:	080017a9 	.word	0x080017a9
 8001454:	080017a9 	.word	0x080017a9
 8001458:	080017a9 	.word	0x080017a9
 800145c:	080017a9 	.word	0x080017a9
 8001460:	080017a9 	.word	0x080017a9
 8001464:	0800152f 	.word	0x0800152f
 8001468:	080017a9 	.word	0x080017a9
 800146c:	080017a9 	.word	0x080017a9
 8001470:	080017a9 	.word	0x080017a9
 8001474:	080017a9 	.word	0x080017a9
 8001478:	080017a9 	.word	0x080017a9
 800147c:	080017a9 	.word	0x080017a9
 8001480:	080017a9 	.word	0x080017a9
 8001484:	08001529 	.word	0x08001529
 8001488:	080017a9 	.word	0x080017a9
 800148c:	080017a9 	.word	0x080017a9
 8001490:	080017a9 	.word	0x080017a9
 8001494:	080017a9 	.word	0x080017a9
 8001498:	080017a9 	.word	0x080017a9
 800149c:	080017a9 	.word	0x080017a9
 80014a0:	080017a9 	.word	0x080017a9
 80014a4:	0800152f 	.word	0x0800152f
 80014a8:	080017a9 	.word	0x080017a9
 80014ac:	080017a9 	.word	0x080017a9
 80014b0:	080017a9 	.word	0x080017a9
 80014b4:	080017a9 	.word	0x080017a9
 80014b8:	080017a9 	.word	0x080017a9
 80014bc:	080017a9 	.word	0x080017a9
 80014c0:	080017a9 	.word	0x080017a9
 80014c4:	0800152f 	.word	0x0800152f
 80014c8:	080017a9 	.word	0x080017a9
 80014cc:	080017a9 	.word	0x080017a9
 80014d0:	080017a9 	.word	0x080017a9
 80014d4:	080017a9 	.word	0x080017a9
 80014d8:	080017a9 	.word	0x080017a9
 80014dc:	080017a9 	.word	0x080017a9
 80014e0:	080017a9 	.word	0x080017a9
 80014e4:	0800152f 	.word	0x0800152f
 80014e8:	080017a9 	.word	0x080017a9
 80014ec:	080017a9 	.word	0x080017a9
 80014f0:	080017a9 	.word	0x080017a9
 80014f4:	080017a9 	.word	0x080017a9
 80014f8:	080017a9 	.word	0x080017a9
 80014fc:	080017a9 	.word	0x080017a9
 8001500:	080017a9 	.word	0x080017a9
 8001504:	0800152f 	.word	0x0800152f
 8001508:	080017a9 	.word	0x080017a9
 800150c:	080017a9 	.word	0x080017a9
 8001510:	080017a9 	.word	0x080017a9
 8001514:	080017a9 	.word	0x080017a9
 8001518:	080017a9 	.word	0x080017a9
 800151c:	080017a9 	.word	0x080017a9
 8001520:	080017a9 	.word	0x080017a9
 8001524:	0800152f 	.word	0x0800152f
			case 0b00000000: //Write content of full frame buffer to fram buffer (0)
				break;
			case 0b00001000: //Write content of full frame buffer to fram buffer (1)
				break;
			case 0b00010000: //Write Registers data
				Write_Registers_data();
 8001528:	f000 f990 	bl	800184c <Write_Registers_data>
				break;
 800152c:	e000      	b.n	8001530 <SPI2PC+0x190>
				break;
 800152e:	bf00      	nop
			case 0b00110000: //Read Registers data
				break;
			case 0b00111000: //Read partial content of frame buffer
				break;
			}
			break;
 8001530:	e13a      	b.n	80017a8 <SPI2PC+0x408>
		case 0b01000000:  //Master SPI functions
			switch (buf[0] & 0b00111000) {
 8001532:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8001536:	f103 0304 	add.w	r3, r3, #4
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001540:	2b28      	cmp	r3, #40	; 0x28
 8001542:	f200 8133 	bhi.w	80017ac <SPI2PC+0x40c>
 8001546:	a201      	add	r2, pc, #4	; (adr r2, 800154c <SPI2PC+0x1ac>)
 8001548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800154c:	080015f1 	.word	0x080015f1
 8001550:	080017ad 	.word	0x080017ad
 8001554:	080017ad 	.word	0x080017ad
 8001558:	080017ad 	.word	0x080017ad
 800155c:	080017ad 	.word	0x080017ad
 8001560:	080017ad 	.word	0x080017ad
 8001564:	080017ad 	.word	0x080017ad
 8001568:	080017ad 	.word	0x080017ad
 800156c:	08001757 	.word	0x08001757
 8001570:	080017ad 	.word	0x080017ad
 8001574:	080017ad 	.word	0x080017ad
 8001578:	080017ad 	.word	0x080017ad
 800157c:	080017ad 	.word	0x080017ad
 8001580:	080017ad 	.word	0x080017ad
 8001584:	080017ad 	.word	0x080017ad
 8001588:	080017ad 	.word	0x080017ad
 800158c:	08001757 	.word	0x08001757
 8001590:	080017ad 	.word	0x080017ad
 8001594:	080017ad 	.word	0x080017ad
 8001598:	080017ad 	.word	0x080017ad
 800159c:	080017ad 	.word	0x080017ad
 80015a0:	080017ad 	.word	0x080017ad
 80015a4:	080017ad 	.word	0x080017ad
 80015a8:	080017ad 	.word	0x080017ad
 80015ac:	08001757 	.word	0x08001757
 80015b0:	080017ad 	.word	0x080017ad
 80015b4:	080017ad 	.word	0x080017ad
 80015b8:	080017ad 	.word	0x080017ad
 80015bc:	080017ad 	.word	0x080017ad
 80015c0:	080017ad 	.word	0x080017ad
 80015c4:	080017ad 	.word	0x080017ad
 80015c8:	080017ad 	.word	0x080017ad
 80015cc:	08001757 	.word	0x08001757
 80015d0:	080017ad 	.word	0x080017ad
 80015d4:	080017ad 	.word	0x080017ad
 80015d8:	080017ad 	.word	0x080017ad
 80015dc:	080017ad 	.word	0x080017ad
 80015e0:	080017ad 	.word	0x080017ad
 80015e4:	080017ad 	.word	0x080017ad
 80015e8:	080017ad 	.word	0x080017ad
 80015ec:	08001757 	.word	0x08001757
			case 0b00000000: //Start SPI write data
				HAL_SPI_Receive(&hspi3, (uint8_t*) frame_buf, 6400, 1000);
 80015f0:	f107 0110 	add.w	r1, r7, #16
 80015f4:	390c      	subs	r1, #12
 80015f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015fa:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 80015fe:	4857      	ldr	r0, [pc, #348]	; (800175c <SPI2PC+0x3bc>)
 8001600:	f004 fffc 	bl	80065fc <HAL_SPI_Receive>
				for (int i = 0; i < 6400;  i += 4)
 8001604:	2300      	movs	r3, #0
 8001606:	f507 52c8 	add.w	r2, r7, #6400	; 0x1900
 800160a:	f102 0208 	add.w	r2, r2, #8
 800160e:	6013      	str	r3, [r2, #0]
 8001610:	e086      	b.n	8001720 <SPI2PC+0x380>
				{
					image_80x80_rgb888[frame_buf_count] = frame_buf[i+1];
 8001612:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8001616:	f103 0308 	add.w	r3, r3, #8
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	3301      	adds	r3, #1
 800161e:	f507 6211 	add.w	r2, r7, #2320	; 0x910
 8001622:	f6a2 120c 	subw	r2, r2, #2316	; 0x90c
 8001626:	5cd1      	ldrb	r1, [r2, r3]
 8001628:	4a4d      	ldr	r2, [pc, #308]	; (8001760 <SPI2PC+0x3c0>)
 800162a:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 800162e:	f103 030c 	add.w	r3, r3, #12
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4413      	add	r3, r2
 8001636:	460a      	mov	r2, r1
 8001638:	701a      	strb	r2, [r3, #0]
					frame_buf_count += 2;
 800163a:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 800163e:	f103 030c 	add.w	r3, r3, #12
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	3302      	adds	r3, #2
 8001646:	f507 52c8 	add.w	r2, r7, #6400	; 0x1900
 800164a:	f102 020c 	add.w	r2, r2, #12
 800164e:	6013      	str	r3, [r2, #0]
					image_80x80_rgb888[frame_buf_count] = frame_buf[i];
 8001650:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8001654:	f6a3 120c 	subw	r2, r3, #2316	; 0x90c
 8001658:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 800165c:	f103 0308 	add.w	r3, r3, #8
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4413      	add	r3, r2
 8001664:	7819      	ldrb	r1, [r3, #0]
 8001666:	4a3e      	ldr	r2, [pc, #248]	; (8001760 <SPI2PC+0x3c0>)
 8001668:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 800166c:	f103 030c 	add.w	r3, r3, #12
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4413      	add	r3, r2
 8001674:	460a      	mov	r2, r1
 8001676:	701a      	strb	r2, [r3, #0]
					frame_buf_count += 4;
 8001678:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 800167c:	f103 030c 	add.w	r3, r3, #12
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	3304      	adds	r3, #4
 8001684:	f507 52c8 	add.w	r2, r7, #6400	; 0x1900
 8001688:	f102 020c 	add.w	r2, r2, #12
 800168c:	6013      	str	r3, [r2, #0]
					image_80x80_rgb888[frame_buf_count] = frame_buf[i+2];
 800168e:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8001692:	f103 0308 	add.w	r3, r3, #8
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	3302      	adds	r3, #2
 800169a:	f507 6211 	add.w	r2, r7, #2320	; 0x910
 800169e:	f6a2 120c 	subw	r2, r2, #2316	; 0x90c
 80016a2:	5cd1      	ldrb	r1, [r2, r3]
 80016a4:	4a2e      	ldr	r2, [pc, #184]	; (8001760 <SPI2PC+0x3c0>)
 80016a6:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 80016aa:	f103 030c 	add.w	r3, r3, #12
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4413      	add	r3, r2
 80016b2:	460a      	mov	r2, r1
 80016b4:	701a      	strb	r2, [r3, #0]
					frame_buf_count += 4;
 80016b6:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 80016ba:	f103 030c 	add.w	r3, r3, #12
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	3304      	adds	r3, #4
 80016c2:	f507 52c8 	add.w	r2, r7, #6400	; 0x1900
 80016c6:	f102 020c 	add.w	r2, r2, #12
 80016ca:	6013      	str	r3, [r2, #0]
					image_80x80_rgb888[frame_buf_count] = frame_buf[i+3];
 80016cc:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 80016d0:	f103 0308 	add.w	r3, r3, #8
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	3303      	adds	r3, #3
 80016d8:	f507 6211 	add.w	r2, r7, #2320	; 0x910
 80016dc:	f6a2 120c 	subw	r2, r2, #2316	; 0x90c
 80016e0:	5cd1      	ldrb	r1, [r2, r3]
 80016e2:	4a1f      	ldr	r2, [pc, #124]	; (8001760 <SPI2PC+0x3c0>)
 80016e4:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 80016e8:	f103 030c 	add.w	r3, r3, #12
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4413      	add	r3, r2
 80016f0:	460a      	mov	r2, r1
 80016f2:	701a      	strb	r2, [r3, #0]
					frame_buf_count += 2;
 80016f4:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 80016f8:	f103 030c 	add.w	r3, r3, #12
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	3302      	adds	r3, #2
 8001700:	f507 52c8 	add.w	r2, r7, #6400	; 0x1900
 8001704:	f102 020c 	add.w	r2, r2, #12
 8001708:	6013      	str	r3, [r2, #0]
				for (int i = 0; i < 6400;  i += 4)
 800170a:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 800170e:	f103 0308 	add.w	r3, r3, #8
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	3304      	adds	r3, #4
 8001716:	f507 52c8 	add.w	r2, r7, #6400	; 0x1900
 800171a:	f102 0208 	add.w	r2, r2, #8
 800171e:	6013      	str	r3, [r2, #0]
 8001720:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8001724:	f103 0308 	add.w	r3, r3, #8
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f5b3 5fc8 	cmp.w	r3, #6400	; 0x1900
 800172e:	f6ff af70 	blt.w	8001612 <SPI2PC+0x272>
				}
				SPI_master2slave(&buf, &frame_buf);
 8001732:	f107 0310 	add.w	r3, r7, #16
 8001736:	3b0c      	subs	r3, #12
 8001738:	f507 52c8 	add.w	r2, r7, #6400	; 0x1900
 800173c:	f102 0204 	add.w	r2, r2, #4
 8001740:	4619      	mov	r1, r3
 8001742:	4610      	mov	r0, r2
 8001744:	f000 f854 	bl	80017f0 <SPI_master2slave>
				frame_buf_count = 0;
 8001748:	2300      	movs	r3, #0
 800174a:	f507 52c8 	add.w	r2, r7, #6400	; 0x1900
 800174e:	f102 020c 	add.w	r2, r2, #12
 8001752:	6013      	str	r3, [r2, #0]
				break;
 8001754:	e000      	b.n	8001758 <SPI2PC+0x3b8>
			case 0b00001000: //Continuous write SPI data
				break;
 8001756:	bf00      	nop
			case 0b00100000: //Continuous Read SPI data
				break;
			case 0b00101000: //End SPI Read data
				break;
			}
			break;
 8001758:	e028      	b.n	80017ac <SPI2PC+0x40c>
 800175a:	bf00      	nop
 800175c:	20004dfc 	.word	0x20004dfc
 8001760:	20000000 	.word	0x20000000
		case 0b10000000:  //I2C command
			switch (buf[0] & 0b00111000) {
 8001764:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8001768:	f103 0304 	add.w	r3, r3, #4
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001772:	2b00      	cmp	r3, #0
 8001774:	d002      	beq.n	800177c <SPI2PC+0x3dc>
 8001776:	2b20      	cmp	r3, #32
 8001778:	d11a      	bne.n	80017b0 <SPI2PC+0x410>
			case 0b00000000: //I2C Write Data
				break;
			case 0b00100000: //I2C Read Data
				break;
 800177a:	e000      	b.n	800177e <SPI2PC+0x3de>
				break;
 800177c:	bf00      	nop
			}
			break;
 800177e:	e017      	b.n	80017b0 <SPI2PC+0x410>
		case 0b11000000:  //SPI flash function & Slave SPI
			switch (buf[0] & 0b00111000) {
 8001780:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8001784:	f103 0304 	add.w	r3, r3, #4
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800178e:	2b20      	cmp	r3, #32
 8001790:	d006      	beq.n	80017a0 <SPI2PC+0x400>
 8001792:	2b20      	cmp	r3, #32
 8001794:	dc0e      	bgt.n	80017b4 <SPI2PC+0x414>
 8001796:	2b00      	cmp	r3, #0
 8001798:	d004      	beq.n	80017a4 <SPI2PC+0x404>
 800179a:	2b08      	cmp	r3, #8
 800179c:	d10a      	bne.n	80017b4 <SPI2PC+0x414>
			case 0b00000000: //Write data to SPI flash
				break;
			case 0b00001000: //Read data from SPI flash
				break;
 800179e:	e002      	b.n	80017a6 <SPI2PC+0x406>
			case 0b00100000: //Display Data by Slave SPI
				break;
 80017a0:	bf00      	nop
 80017a2:	e007      	b.n	80017b4 <SPI2PC+0x414>
				break;
 80017a4:	bf00      	nop
			}
			break;
 80017a6:	e005      	b.n	80017b4 <SPI2PC+0x414>
			break;
 80017a8:	bf00      	nop
 80017aa:	e004      	b.n	80017b6 <SPI2PC+0x416>
			break;
 80017ac:	bf00      	nop
 80017ae:	e002      	b.n	80017b6 <SPI2PC+0x416>
			break;
 80017b0:	bf00      	nop
 80017b2:	e000      	b.n	80017b6 <SPI2PC+0x416>
			break;
 80017b4:	bf00      	nop
		}
		// USB command: ID
		switch (buf[0] & 0b00000111) {
 80017b6:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 80017ba:	f103 0304 	add.w	r3, r3, #4
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	f003 0307 	and.w	r3, r3, #7
 80017c4:	2b03      	cmp	r3, #3
 80017c6:	d80b      	bhi.n	80017e0 <SPI2PC+0x440>
 80017c8:	a201      	add	r2, pc, #4	; (adr r2, 80017d0 <SPI2PC+0x430>)
 80017ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ce:	bf00      	nop
 80017d0:	080017e1 	.word	0x080017e1
 80017d4:	080017e1 	.word	0x080017e1
 80017d8:	080017e1 	.word	0x080017e1
 80017dc:	080017e1 	.word	0x080017e1
		case 0b00000010:  //Command for DIP switch ID = 10
			break;
		case 0b00000011:  //Command for DIP switch ID = 11
			break;
		default:  //Broadcast to every board
			break;
 80017e0:	bf00      	nop
		}
	}
}
 80017e2:	bf00      	nop
 80017e4:	f507 57c8 	add.w	r7, r7, #6400	; 0x1900
 80017e8:	3710      	adds	r7, #16
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop

080017f0 <SPI_master2slave>:

void SPI_master2slave(char * buf, char * frame_buf) {
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&hspi1, &buf[0], 1, 1000);
 80017fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017fe:	2201      	movs	r2, #1
 8001800:	6879      	ldr	r1, [r7, #4]
 8001802:	4811      	ldr	r0, [pc, #68]	; (8001848 <SPI_master2slave+0x58>)
 8001804:	f004 fd85 	bl	8006312 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &buf[1], 1, 1000);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	1c59      	adds	r1, r3, #1
 800180c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001810:	2201      	movs	r2, #1
 8001812:	480d      	ldr	r0, [pc, #52]	; (8001848 <SPI_master2slave+0x58>)
 8001814:	f004 fd7d 	bl	8006312 <HAL_SPI_Transmit>
	for(int i=0; i< 6400; i++)
 8001818:	2300      	movs	r3, #0
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	e00b      	b.n	8001836 <SPI_master2slave+0x46>
	{
		if (HAL_SPI_Transmit(&hspi1, &frame_buf[i], 1, 1000) == HAL_OK) {
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	18d1      	adds	r1, r2, r3
 8001824:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001828:	2201      	movs	r2, #1
 800182a:	4807      	ldr	r0, [pc, #28]	; (8001848 <SPI_master2slave+0x58>)
 800182c:	f004 fd71 	bl	8006312 <HAL_SPI_Transmit>
	for(int i=0; i< 6400; i++)
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	3301      	adds	r3, #1
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	f5b3 5fc8 	cmp.w	r3, #6400	; 0x1900
 800183c:	dbef      	blt.n	800181e <SPI_master2slave+0x2e>
			//HAL_UART_Transmit(&huart4, "SPI_master2slave", 16, 1000);
		}
	}
}
 800183e:	bf00      	nop
 8001840:	bf00      	nop
 8001842:	3710      	adds	r7, #16
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20004d34 	.word	0x20004d34

0800184c <Write_Registers_data>:

void Write_Registers_data() {
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
	uint8_t length[1] = { 0 };
 8001852:	2300      	movs	r3, #0
 8001854:	733b      	strb	r3, [r7, #12]
	uint8_t Register_Address[1] = { 0 };
 8001856:	2300      	movs	r3, #0
 8001858:	723b      	strb	r3, [r7, #8]
	uint8_t data[1] = { 0 };
 800185a:	2300      	movs	r3, #0
 800185c:	713b      	strb	r3, [r7, #4]

	__HAL_SPI_ENABLE(&hspi3);
 800185e:	4b3a      	ldr	r3, [pc, #232]	; (8001948 <Write_Registers_data+0xfc>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	4b38      	ldr	r3, [pc, #224]	; (8001948 <Write_Registers_data+0xfc>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800186c:	601a      	str	r2, [r3, #0]
	HAL_SPI_Receive(&hspi3, (uint8_t *)length, 1, 20);
 800186e:	f107 010c 	add.w	r1, r7, #12
 8001872:	2314      	movs	r3, #20
 8001874:	2201      	movs	r2, #1
 8001876:	4834      	ldr	r0, [pc, #208]	; (8001948 <Write_Registers_data+0xfc>)
 8001878:	f004 fec0 	bl	80065fc <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi3, (uint8_t *)Register_Address, 1, 20);
 800187c:	f107 0108 	add.w	r1, r7, #8
 8001880:	2314      	movs	r3, #20
 8001882:	2201      	movs	r2, #1
 8001884:	4830      	ldr	r0, [pc, #192]	; (8001948 <Write_Registers_data+0xfc>)
 8001886:	f004 feb9 	bl	80065fc <HAL_SPI_Receive>
	switch (Register_Address[0]) {
 800188a:	7a3b      	ldrb	r3, [r7, #8]
 800188c:	2b13      	cmp	r3, #19
 800188e:	d856      	bhi.n	800193e <Write_Registers_data+0xf2>
 8001890:	a201      	add	r2, pc, #4	; (adr r2, 8001898 <Write_Registers_data+0x4c>)
 8001892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001896:	bf00      	nop
 8001898:	08001939 	.word	0x08001939
 800189c:	08001939 	.word	0x08001939
 80018a0:	08001939 	.word	0x08001939
 80018a4:	08001939 	.word	0x08001939
 80018a8:	08001939 	.word	0x08001939
 80018ac:	08001939 	.word	0x08001939
 80018b0:	08001939 	.word	0x08001939
 80018b4:	08001939 	.word	0x08001939
 80018b8:	08001939 	.word	0x08001939
 80018bc:	08001939 	.word	0x08001939
 80018c0:	08001939 	.word	0x08001939
 80018c4:	08001939 	.word	0x08001939
 80018c8:	08001939 	.word	0x08001939
 80018cc:	08001939 	.word	0x08001939
 80018d0:	08001939 	.word	0x08001939
 80018d4:	08001939 	.word	0x08001939
 80018d8:	080018e9 	.word	0x080018e9
 80018dc:	0800193f 	.word	0x0800193f
 80018e0:	0800193f 	.word	0x0800193f
 80018e4:	08001939 	.word	0x08001939
	case 14: //Day of Version
		break;
	case 15: //Month of Version
		break;
	case 16: //Control A
		HAL_SPI_Receive_IT(&hspi3, data, 1);
 80018e8:	1d3b      	adds	r3, r7, #4
 80018ea:	2201      	movs	r2, #1
 80018ec:	4619      	mov	r1, r3
 80018ee:	4816      	ldr	r0, [pc, #88]	; (8001948 <Write_Registers_data+0xfc>)
 80018f0:	f005 f9de 	bl	8006cb0 <HAL_SPI_Receive_IT>
		HAL_NVIC_SetPriority(SPI3_IRQn, 1, 0);
 80018f4:	2200      	movs	r2, #0
 80018f6:	2101      	movs	r1, #1
 80018f8:	2033      	movs	r0, #51	; 0x33
 80018fa:	f000 fe10 	bl	800251e <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80018fe:	2033      	movs	r0, #51	; 0x33
 8001900:	f000 fe29 	bl	8002556 <HAL_NVIC_EnableIRQ>
		__HAL_SPI_ENABLE(&hspi3);
 8001904:	4b10      	ldr	r3, [pc, #64]	; (8001948 <Write_Registers_data+0xfc>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	4b0f      	ldr	r3, [pc, #60]	; (8001948 <Write_Registers_data+0xfc>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001912:	601a      	str	r2, [r3, #0]

		switch (data[0] & 0b00000011) {
 8001914:	793b      	ldrb	r3, [r7, #4]
 8001916:	f003 0303 	and.w	r3, r3, #3
 800191a:	2b03      	cmp	r3, #3
 800191c:	d80e      	bhi.n	800193c <Write_Registers_data+0xf0>
 800191e:	a201      	add	r2, pc, #4	; (adr r2, 8001924 <Write_Registers_data+0xd8>)
 8001920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001924:	08001935 	.word	0x08001935
 8001928:	08001935 	.word	0x08001935
 800192c:	08001935 	.word	0x08001935
 8001930:	08001935 	.word	0x08001935
		case 0b00000000:  //Display content of fram buffer (0)
			break;
 8001934:	bf00      	nop
		case 0b00000010:  //Display SPI input content
			break;
		case 0b00000011:  //Display Flash content
			break;
		}
		break;
 8001936:	e001      	b.n	800193c <Write_Registers_data+0xf0>
		break;
 8001938:	bf00      	nop
 800193a:	e000      	b.n	800193e <Write_Registers_data+0xf2>
		break;
 800193c:	bf00      	nop
	case 19: //Status
		break;
	}
}
 800193e:	bf00      	nop
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20004dfc 	.word	0x20004dfc

0800194c <LCD_PowerOn>:
		}
	}*/
}

static void LCD_PowerOn(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
	/* Activate XRES active low */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8001950:	2200      	movs	r2, #0
 8001952:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001956:	4808      	ldr	r0, [pc, #32]	; (8001978 <LCD_PowerOn+0x2c>)
 8001958:	f001 fe4e 	bl	80035f8 <HAL_GPIO_WritePin>

	HAL_Delay(20); /* wait 20 ms */
 800195c:	2014      	movs	r0, #20
 800195e:	f000 fcdf 	bl	8002320 <HAL_Delay>

	/* Desactivate XRES */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8001962:	2201      	movs	r2, #1
 8001964:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001968:	4803      	ldr	r0, [pc, #12]	; (8001978 <LCD_PowerOn+0x2c>)
 800196a:	f001 fe45 	bl	80035f8 <HAL_GPIO_WritePin>

	/* Wait for 10ms after releasing XRES before sending commands */
	HAL_Delay(120);
 800196e:	2078      	movs	r0, #120	; 0x78
 8001970:	f000 fcd6 	bl	8002320 <HAL_Delay>
}
 8001974:	bf00      	nop
 8001976:	bd80      	pop	{r7, pc}
 8001978:	48001000 	.word	0x48001000

0800197c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001980:	b672      	cpsid	i
}
 8001982:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001984:	e7fe      	b.n	8001984 <Error_Handler+0x8>
	...

08001988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800198e:	4b0f      	ldr	r3, [pc, #60]	; (80019cc <HAL_MspInit+0x44>)
 8001990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001992:	4a0e      	ldr	r2, [pc, #56]	; (80019cc <HAL_MspInit+0x44>)
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	6613      	str	r3, [r2, #96]	; 0x60
 800199a:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <HAL_MspInit+0x44>)
 800199c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	607b      	str	r3, [r7, #4]
 80019a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019a6:	4b09      	ldr	r3, [pc, #36]	; (80019cc <HAL_MspInit+0x44>)
 80019a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019aa:	4a08      	ldr	r2, [pc, #32]	; (80019cc <HAL_MspInit+0x44>)
 80019ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019b0:	6593      	str	r3, [r2, #88]	; 0x58
 80019b2:	4b06      	ldr	r3, [pc, #24]	; (80019cc <HAL_MspInit+0x44>)
 80019b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ba:	603b      	str	r3, [r7, #0]
 80019bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	40021000 	.word	0x40021000

080019d0 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b0aa      	sub	sp, #168	; 0xa8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019d8:	f107 030c 	add.w	r3, r7, #12
 80019dc:	229c      	movs	r2, #156	; 0x9c
 80019de:	2100      	movs	r1, #0
 80019e0:	4618      	mov	r0, r3
 80019e2:	f006 fd5f 	bl	80084a4 <memset>
  if(hdsi->Instance==DSI)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a11      	ldr	r2, [pc, #68]	; (8001a30 <HAL_DSI_MspInit+0x60>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d11b      	bne.n	8001a28 <HAL_DSI_MspInit+0x58>

  /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 80019f0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80019f4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.DsiClockSelection = RCC_DSICLKSOURCE_DSIPHY;
 80019f6:	2300      	movs	r3, #0
 80019f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019fc:	f107 030c 	add.w	r3, r7, #12
 8001a00:	4618      	mov	r0, r3
 8001a02:	f003 fe6b 	bl	80056dc <HAL_RCCEx_PeriphCLKConfig>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <HAL_DSI_MspInit+0x40>
    {
      Error_Handler();
 8001a0c:	f7ff ffb6 	bl	800197c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8001a10:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <HAL_DSI_MspInit+0x64>)
 8001a12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a14:	4a07      	ldr	r2, [pc, #28]	; (8001a34 <HAL_DSI_MspInit+0x64>)
 8001a16:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001a1a:	6613      	str	r3, [r2, #96]	; 0x60
 8001a1c:	4b05      	ldr	r3, [pc, #20]	; (8001a34 <HAL_DSI_MspInit+0x64>)
 8001a1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001a24:	60bb      	str	r3, [r7, #8]
 8001a26:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8001a28:	bf00      	nop
 8001a2a:	37a8      	adds	r7, #168	; 0xa8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40016c00 	.word	0x40016c00
 8001a34:	40021000 	.word	0x40021000

08001a38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b0b2      	sub	sp, #200	; 0xc8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a40:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
 8001a4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a50:	f107 0318 	add.w	r3, r7, #24
 8001a54:	229c      	movs	r2, #156	; 0x9c
 8001a56:	2100      	movs	r1, #0
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f006 fd23 	bl	80084a4 <memset>
  if(hi2c->Instance==I2C1)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a42      	ldr	r2, [pc, #264]	; (8001b6c <HAL_I2C_MspInit+0x134>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d13c      	bne.n	8001ae2 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001a68:	2340      	movs	r3, #64	; 0x40
 8001a6a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a70:	f107 0318 	add.w	r3, r7, #24
 8001a74:	4618      	mov	r0, r3
 8001a76:	f003 fe31 	bl	80056dc <HAL_RCCEx_PeriphCLKConfig>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001a80:	f7ff ff7c 	bl	800197c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a84:	4b3a      	ldr	r3, [pc, #232]	; (8001b70 <HAL_I2C_MspInit+0x138>)
 8001a86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a88:	4a39      	ldr	r2, [pc, #228]	; (8001b70 <HAL_I2C_MspInit+0x138>)
 8001a8a:	f043 0302 	orr.w	r3, r3, #2
 8001a8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a90:	4b37      	ldr	r3, [pc, #220]	; (8001b70 <HAL_I2C_MspInit+0x138>)
 8001a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	617b      	str	r3, [r7, #20]
 8001a9a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8001a9c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001aa0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001aa4:	2312      	movs	r3, #18
 8001aa6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ab6:	2304      	movs	r3, #4
 8001ab8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001abc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	482c      	ldr	r0, [pc, #176]	; (8001b74 <HAL_I2C_MspInit+0x13c>)
 8001ac4:	f001 fc06 	bl	80032d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ac8:	4b29      	ldr	r3, [pc, #164]	; (8001b70 <HAL_I2C_MspInit+0x138>)
 8001aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001acc:	4a28      	ldr	r2, [pc, #160]	; (8001b70 <HAL_I2C_MspInit+0x138>)
 8001ace:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ad2:	6593      	str	r3, [r2, #88]	; 0x58
 8001ad4:	4b26      	ldr	r3, [pc, #152]	; (8001b70 <HAL_I2C_MspInit+0x138>)
 8001ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001adc:	613b      	str	r3, [r7, #16]
 8001ade:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001ae0:	e040      	b.n	8001b64 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a24      	ldr	r2, [pc, #144]	; (8001b78 <HAL_I2C_MspInit+0x140>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d13b      	bne.n	8001b64 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001aec:	2380      	movs	r3, #128	; 0x80
 8001aee:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001af0:	2300      	movs	r3, #0
 8001af2:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001af4:	f107 0318 	add.w	r3, r7, #24
 8001af8:	4618      	mov	r0, r3
 8001afa:	f003 fdef 	bl	80056dc <HAL_RCCEx_PeriphCLKConfig>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8001b04:	f7ff ff3a 	bl	800197c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b08:	4b19      	ldr	r3, [pc, #100]	; (8001b70 <HAL_I2C_MspInit+0x138>)
 8001b0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b0c:	4a18      	ldr	r2, [pc, #96]	; (8001b70 <HAL_I2C_MspInit+0x138>)
 8001b0e:	f043 0302 	orr.w	r3, r3, #2
 8001b12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b14:	4b16      	ldr	r3, [pc, #88]	; (8001b70 <HAL_I2C_MspInit+0x138>)
 8001b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b18:	f003 0302 	and.w	r3, r3, #2
 8001b1c:	60fb      	str	r3, [r7, #12]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8001b20:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b28:	2312      	movs	r3, #18
 8001b2a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b34:	2303      	movs	r3, #3
 8001b36:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001b3a:	2304      	movs	r3, #4
 8001b3c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b40:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001b44:	4619      	mov	r1, r3
 8001b46:	480b      	ldr	r0, [pc, #44]	; (8001b74 <HAL_I2C_MspInit+0x13c>)
 8001b48:	f001 fbc4 	bl	80032d4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001b4c:	4b08      	ldr	r3, [pc, #32]	; (8001b70 <HAL_I2C_MspInit+0x138>)
 8001b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b50:	4a07      	ldr	r2, [pc, #28]	; (8001b70 <HAL_I2C_MspInit+0x138>)
 8001b52:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b56:	6593      	str	r3, [r2, #88]	; 0x58
 8001b58:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <HAL_I2C_MspInit+0x138>)
 8001b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b60:	60bb      	str	r3, [r7, #8]
 8001b62:	68bb      	ldr	r3, [r7, #8]
}
 8001b64:	bf00      	nop
 8001b66:	37c8      	adds	r7, #200	; 0xc8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40005400 	.word	0x40005400
 8001b70:	40021000 	.word	0x40021000
 8001b74:	48000400 	.word	0x48000400
 8001b78:	40005800 	.word	0x40005800

08001b7c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b0aa      	sub	sp, #168	; 0xa8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b84:	f107 030c 	add.w	r3, r7, #12
 8001b88:	229c      	movs	r2, #156	; 0x9c
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f006 fc89 	bl	80084a4 <memset>
  if(hltdc->Instance==LTDC)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a19      	ldr	r2, [pc, #100]	; (8001bfc <HAL_LTDC_MspInit+0x80>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d12a      	bne.n	8001bf2 <HAL_LTDC_MspInit+0x76>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001b9c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ba0:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLLSAI2_DIV2;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    PeriphClkInit.PLLSAI2.PLLSAI2Source = RCC_PLLSOURCE_HSE;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI2.PLLSAI2M = 1;
 8001bac:	2301      	movs	r3, #1
 8001bae:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI2.PLLSAI2N = 8;
 8001bb0:	2308      	movs	r3, #8
 8001bb2:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.PLLSAI2.PLLSAI2P = RCC_PLLP_DIV2;
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.PLLSAI2.PLLSAI2R = RCC_PLLR_DIV2;
 8001bb8:	2302      	movs	r3, #2
 8001bba:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInit.PLLSAI2.PLLSAI2Q = RCC_PLLQ_DIV2;
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInit.PLLSAI2.PLLSAI2ClockOut = RCC_PLLSAI2_LTDCCLK;
 8001bc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bc4:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bc6:	f107 030c 	add.w	r3, r7, #12
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f003 fd86 	bl	80056dc <HAL_RCCEx_PeriphCLKConfig>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <HAL_LTDC_MspInit+0x5e>
    {
      Error_Handler();
 8001bd6:	f7ff fed1 	bl	800197c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001bda:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <HAL_LTDC_MspInit+0x84>)
 8001bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bde:	4a08      	ldr	r2, [pc, #32]	; (8001c00 <HAL_LTDC_MspInit+0x84>)
 8001be0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001be4:	6613      	str	r3, [r2, #96]	; 0x60
 8001be6:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <HAL_LTDC_MspInit+0x84>)
 8001be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001bee:	60bb      	str	r3, [r7, #8]
 8001bf0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001bf2:	bf00      	nop
 8001bf4:	37a8      	adds	r7, #168	; 0xa8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40016800 	.word	0x40016800
 8001c00:	40021000 	.word	0x40021000

08001c04 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b0b6      	sub	sp, #216	; 0xd8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	609a      	str	r2, [r3, #8]
 8001c18:	60da      	str	r2, [r3, #12]
 8001c1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c1c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c20:	229c      	movs	r2, #156	; 0x9c
 8001c22:	2100      	movs	r1, #0
 8001c24:	4618      	mov	r0, r3
 8001c26:	f006 fc3d 	bl	80084a4 <memset>
  if(hospi->Instance==OCTOSPI1)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a86      	ldr	r2, [pc, #536]	; (8001e48 <HAL_OSPI_MspInit+0x244>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	f040 808c 	bne.w	8001d4e <HAL_OSPI_MspInit+0x14a>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8001c36:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c3a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c46:	4618      	mov	r0, r3
 8001c48:	f003 fd48 	bl	80056dc <HAL_RCCEx_PeriphCLKConfig>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <HAL_OSPI_MspInit+0x52>
    {
      Error_Handler();
 8001c52:	f7ff fe93 	bl	800197c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_OSPIM_CLK_ENABLED++;
 8001c56:	4b7d      	ldr	r3, [pc, #500]	; (8001e4c <HAL_OSPI_MspInit+0x248>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	4a7b      	ldr	r2, [pc, #492]	; (8001e4c <HAL_OSPI_MspInit+0x248>)
 8001c5e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OSPIM_CLK_ENABLED==1){
 8001c60:	4b7a      	ldr	r3, [pc, #488]	; (8001e4c <HAL_OSPI_MspInit+0x248>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d10b      	bne.n	8001c80 <HAL_OSPI_MspInit+0x7c>
      __HAL_RCC_OSPIM_CLK_ENABLE();
 8001c68:	4b79      	ldr	r3, [pc, #484]	; (8001e50 <HAL_OSPI_MspInit+0x24c>)
 8001c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c6c:	4a78      	ldr	r2, [pc, #480]	; (8001e50 <HAL_OSPI_MspInit+0x24c>)
 8001c6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c74:	4b76      	ldr	r3, [pc, #472]	; (8001e50 <HAL_OSPI_MspInit+0x24c>)
 8001c76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001c80:	4b73      	ldr	r3, [pc, #460]	; (8001e50 <HAL_OSPI_MspInit+0x24c>)
 8001c82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c84:	4a72      	ldr	r2, [pc, #456]	; (8001e50 <HAL_OSPI_MspInit+0x24c>)
 8001c86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c8a:	6513      	str	r3, [r2, #80]	; 0x50
 8001c8c:	4b70      	ldr	r3, [pc, #448]	; (8001e50 <HAL_OSPI_MspInit+0x24c>)
 8001c8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c94:	623b      	str	r3, [r7, #32]
 8001c96:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c98:	4b6d      	ldr	r3, [pc, #436]	; (8001e50 <HAL_OSPI_MspInit+0x24c>)
 8001c9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c9c:	4a6c      	ldr	r2, [pc, #432]	; (8001e50 <HAL_OSPI_MspInit+0x24c>)
 8001c9e:	f043 0304 	orr.w	r3, r3, #4
 8001ca2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ca4:	4b6a      	ldr	r3, [pc, #424]	; (8001e50 <HAL_OSPI_MspInit+0x24c>)
 8001ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca8:	f003 0304 	and.w	r3, r3, #4
 8001cac:	61fb      	str	r3, [r7, #28]
 8001cae:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cb0:	4b67      	ldr	r3, [pc, #412]	; (8001e50 <HAL_OSPI_MspInit+0x24c>)
 8001cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb4:	4a66      	ldr	r2, [pc, #408]	; (8001e50 <HAL_OSPI_MspInit+0x24c>)
 8001cb6:	f043 0320 	orr.w	r3, r3, #32
 8001cba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cbc:	4b64      	ldr	r3, [pc, #400]	; (8001e50 <HAL_OSPI_MspInit+0x24c>)
 8001cbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc0:	f003 0320 	and.w	r3, r3, #32
 8001cc4:	61bb      	str	r3, [r7, #24]
 8001cc6:	69bb      	ldr	r3, [r7, #24]
    PF6     ------> OCTOSPIM_P1_IO3
    PF7     ------> OCTOSPIM_P1_IO2
    PF10     ------> OCTOSPIM_P1_CLK
    PF9     ------> OCTOSPIM_P1_IO1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001cc8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ccc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P1;
 8001ce2:	2305      	movs	r3, #5
 8001ce4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ce8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001cec:	4619      	mov	r1, r3
 8001cee:	4859      	ldr	r0, [pc, #356]	; (8001e54 <HAL_OSPI_MspInit+0x250>)
 8001cf0:	f001 faf0 	bl	80032d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 8001cf4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001cf8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d02:	2300      	movs	r3, #0
 8001d04:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001d0e:	230a      	movs	r3, #10
 8001d10:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d14:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001d18:	4619      	mov	r1, r3
 8001d1a:	484f      	ldr	r0, [pc, #316]	; (8001e58 <HAL_OSPI_MspInit+0x254>)
 8001d1c:	f001 fada 	bl	80032d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d24:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d28:	2302      	movs	r3, #2
 8001d2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d34:	2303      	movs	r3, #3
 8001d36:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPIM_P1;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d40:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001d44:	4619      	mov	r1, r3
 8001d46:	4844      	ldr	r0, [pc, #272]	; (8001e58 <HAL_OSPI_MspInit+0x254>)
 8001d48:	f001 fac4 	bl	80032d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI2_MspInit 1 */

  /* USER CODE END OCTOSPI2_MspInit 1 */
  }

}
 8001d4c:	e077      	b.n	8001e3e <HAL_OSPI_MspInit+0x23a>
  else if(hospi->Instance==OCTOSPI2)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a42      	ldr	r2, [pc, #264]	; (8001e5c <HAL_OSPI_MspInit+0x258>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d172      	bne.n	8001e3e <HAL_OSPI_MspInit+0x23a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8001d58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d5c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f003 fcb7 	bl	80056dc <HAL_RCCEx_PeriphCLKConfig>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <HAL_OSPI_MspInit+0x174>
      Error_Handler();
 8001d74:	f7ff fe02 	bl	800197c <Error_Handler>
    HAL_RCC_OSPIM_CLK_ENABLED++;
 8001d78:	4b34      	ldr	r3, [pc, #208]	; (8001e4c <HAL_OSPI_MspInit+0x248>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	4a33      	ldr	r2, [pc, #204]	; (8001e4c <HAL_OSPI_MspInit+0x248>)
 8001d80:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OSPIM_CLK_ENABLED==1){
 8001d82:	4b32      	ldr	r3, [pc, #200]	; (8001e4c <HAL_OSPI_MspInit+0x248>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d10b      	bne.n	8001da2 <HAL_OSPI_MspInit+0x19e>
      __HAL_RCC_OSPIM_CLK_ENABLE();
 8001d8a:	4b31      	ldr	r3, [pc, #196]	; (8001e50 <HAL_OSPI_MspInit+0x24c>)
 8001d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8e:	4a30      	ldr	r2, [pc, #192]	; (8001e50 <HAL_OSPI_MspInit+0x24c>)
 8001d90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d96:	4b2e      	ldr	r3, [pc, #184]	; (8001e50 <HAL_OSPI_MspInit+0x24c>)
 8001d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d9e:	617b      	str	r3, [r7, #20]
 8001da0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI2_CLK_ENABLE();
 8001da2:	4b2b      	ldr	r3, [pc, #172]	; (8001e50 <HAL_OSPI_MspInit+0x24c>)
 8001da4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001da6:	4a2a      	ldr	r2, [pc, #168]	; (8001e50 <HAL_OSPI_MspInit+0x24c>)
 8001da8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dac:	6513      	str	r3, [r2, #80]	; 0x50
 8001dae:	4b28      	ldr	r3, [pc, #160]	; (8001e50 <HAL_OSPI_MspInit+0x24c>)
 8001db0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001db2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001db6:	613b      	str	r3, [r7, #16]
 8001db8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dba:	4b25      	ldr	r3, [pc, #148]	; (8001e50 <HAL_OSPI_MspInit+0x24c>)
 8001dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dbe:	4a24      	ldr	r2, [pc, #144]	; (8001e50 <HAL_OSPI_MspInit+0x24c>)
 8001dc0:	f043 0308 	orr.w	r3, r3, #8
 8001dc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dc6:	4b22      	ldr	r3, [pc, #136]	; (8001e50 <HAL_OSPI_MspInit+0x24c>)
 8001dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dca:	f003 0308 	and.w	r3, r3, #8
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001dd2:	4b1f      	ldr	r3, [pc, #124]	; (8001e50 <HAL_OSPI_MspInit+0x24c>)
 8001dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd6:	4a1e      	ldr	r2, [pc, #120]	; (8001e50 <HAL_OSPI_MspInit+0x24c>)
 8001dd8:	f043 0320 	orr.w	r3, r3, #32
 8001ddc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dde:	4b1c      	ldr	r3, [pc, #112]	; (8001e50 <HAL_OSPI_MspInit+0x24c>)
 8001de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de2:	f003 0320 	and.w	r3, r3, #32
 8001de6:	60bb      	str	r3, [r7, #8]
 8001de8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001dea:	2308      	movs	r3, #8
 8001dec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df0:	2302      	movs	r3, #2
 8001df2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df6:	2300      	movs	r3, #0
 8001df8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P2;
 8001e02:	230a      	movs	r3, #10
 8001e04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e08:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4814      	ldr	r0, [pc, #80]	; (8001e60 <HAL_OSPI_MspInit+0x25c>)
 8001e10:	f001 fa60 	bl	80032d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_4;
 8001e14:	2313      	movs	r3, #19
 8001e16:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e26:	2303      	movs	r3, #3
 8001e28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8001e2c:	2305      	movs	r3, #5
 8001e2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e32:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001e36:	4619      	mov	r1, r3
 8001e38:	4807      	ldr	r0, [pc, #28]	; (8001e58 <HAL_OSPI_MspInit+0x254>)
 8001e3a:	f001 fa4b 	bl	80032d4 <HAL_GPIO_Init>
}
 8001e3e:	bf00      	nop
 8001e40:	37d8      	adds	r7, #216	; 0xd8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	a0001000 	.word	0xa0001000
 8001e4c:	20004ef4 	.word	0x20004ef4
 8001e50:	40021000 	.word	0x40021000
 8001e54:	48000800 	.word	0x48000800
 8001e58:	48001400 	.word	0x48001400
 8001e5c:	a0001400 	.word	0xa0001400
 8001e60:	48000c00 	.word	0x48000c00

08001e64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b092      	sub	sp, #72	; 0x48
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e6c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	605a      	str	r2, [r3, #4]
 8001e76:	609a      	str	r2, [r3, #8]
 8001e78:	60da      	str	r2, [r3, #12]
 8001e7a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a80      	ldr	r2, [pc, #512]	; (8002084 <HAL_SPI_MspInit+0x220>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d146      	bne.n	8001f14 <HAL_SPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e86:	4b80      	ldr	r3, [pc, #512]	; (8002088 <HAL_SPI_MspInit+0x224>)
 8001e88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e8a:	4a7f      	ldr	r2, [pc, #508]	; (8002088 <HAL_SPI_MspInit+0x224>)
 8001e8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e90:	6613      	str	r3, [r2, #96]	; 0x60
 8001e92:	4b7d      	ldr	r3, [pc, #500]	; (8002088 <HAL_SPI_MspInit+0x224>)
 8001e94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e9a:	633b      	str	r3, [r7, #48]	; 0x30
 8001e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e9e:	4b7a      	ldr	r3, [pc, #488]	; (8002088 <HAL_SPI_MspInit+0x224>)
 8001ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea2:	4a79      	ldr	r2, [pc, #484]	; (8002088 <HAL_SPI_MspInit+0x224>)
 8001ea4:	f043 0302 	orr.w	r3, r3, #2
 8001ea8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eaa:	4b77      	ldr	r3, [pc, #476]	; (8002088 <HAL_SPI_MspInit+0x224>)
 8001eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb6:	4b74      	ldr	r3, [pc, #464]	; (8002088 <HAL_SPI_MspInit+0x224>)
 8001eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eba:	4a73      	ldr	r2, [pc, #460]	; (8002088 <HAL_SPI_MspInit+0x224>)
 8001ebc:	f043 0301 	orr.w	r3, r3, #1
 8001ec0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ec2:	4b71      	ldr	r3, [pc, #452]	; (8002088 <HAL_SPI_MspInit+0x224>)
 8001ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PA15 (JTDI)     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_3;
 8001ece:	2338      	movs	r3, #56	; 0x38
 8001ed0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eda:	2303      	movs	r3, #3
 8001edc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ede:	2305      	movs	r3, #5
 8001ee0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	4868      	ldr	r0, [pc, #416]	; (800208c <HAL_SPI_MspInit+0x228>)
 8001eea:	f001 f9f3 	bl	80032d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001eee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ef2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001efc:	2303      	movs	r3, #3
 8001efe:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f00:	2305      	movs	r3, #5
 8001f02:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f04:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f08:	4619      	mov	r1, r3
 8001f0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f0e:	f001 f9e1 	bl	80032d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001f12:	e0b2      	b.n	800207a <HAL_SPI_MspInit+0x216>
  else if(hspi->Instance==SPI2)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a5d      	ldr	r2, [pc, #372]	; (8002090 <HAL_SPI_MspInit+0x22c>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d144      	bne.n	8001fa8 <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f1e:	4b5a      	ldr	r3, [pc, #360]	; (8002088 <HAL_SPI_MspInit+0x224>)
 8001f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f22:	4a59      	ldr	r2, [pc, #356]	; (8002088 <HAL_SPI_MspInit+0x224>)
 8001f24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f28:	6593      	str	r3, [r2, #88]	; 0x58
 8001f2a:	4b57      	ldr	r3, [pc, #348]	; (8002088 <HAL_SPI_MspInit+0x224>)
 8001f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
 8001f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f36:	4b54      	ldr	r3, [pc, #336]	; (8002088 <HAL_SPI_MspInit+0x224>)
 8001f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f3a:	4a53      	ldr	r2, [pc, #332]	; (8002088 <HAL_SPI_MspInit+0x224>)
 8001f3c:	f043 0308 	orr.w	r3, r3, #8
 8001f40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f42:	4b51      	ldr	r3, [pc, #324]	; (8002088 <HAL_SPI_MspInit+0x224>)
 8001f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f46:	f003 0308 	and.w	r3, r3, #8
 8001f4a:	623b      	str	r3, [r7, #32]
 8001f4c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f4e:	4b4e      	ldr	r3, [pc, #312]	; (8002088 <HAL_SPI_MspInit+0x224>)
 8001f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f52:	4a4d      	ldr	r2, [pc, #308]	; (8002088 <HAL_SPI_MspInit+0x224>)
 8001f54:	f043 0304 	orr.w	r3, r3, #4
 8001f58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f5a:	4b4b      	ldr	r3, [pc, #300]	; (8002088 <HAL_SPI_MspInit+0x224>)
 8001f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f5e:	f003 0304 	and.w	r3, r3, #4
 8001f62:	61fb      	str	r3, [r7, #28]
 8001f64:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 8001f66:	2312      	movs	r3, #18
 8001f68:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f72:	2303      	movs	r3, #3
 8001f74:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f76:	2305      	movs	r3, #5
 8001f78:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f7a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4844      	ldr	r0, [pc, #272]	; (8002094 <HAL_SPI_MspInit+0x230>)
 8001f82:	f001 f9a7 	bl	80032d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f86:	2304      	movs	r3, #4
 8001f88:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f92:	2303      	movs	r3, #3
 8001f94:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f96:	2305      	movs	r3, #5
 8001f98:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f9a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	483d      	ldr	r0, [pc, #244]	; (8002098 <HAL_SPI_MspInit+0x234>)
 8001fa2:	f001 f997 	bl	80032d4 <HAL_GPIO_Init>
}
 8001fa6:	e068      	b.n	800207a <HAL_SPI_MspInit+0x216>
  else if(hspi->Instance==SPI3)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a3b      	ldr	r2, [pc, #236]	; (800209c <HAL_SPI_MspInit+0x238>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d163      	bne.n	800207a <HAL_SPI_MspInit+0x216>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001fb2:	4b35      	ldr	r3, [pc, #212]	; (8002088 <HAL_SPI_MspInit+0x224>)
 8001fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb6:	4a34      	ldr	r2, [pc, #208]	; (8002088 <HAL_SPI_MspInit+0x224>)
 8001fb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fbc:	6593      	str	r3, [r2, #88]	; 0x58
 8001fbe:	4b32      	ldr	r3, [pc, #200]	; (8002088 <HAL_SPI_MspInit+0x224>)
 8001fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fc6:	61bb      	str	r3, [r7, #24]
 8001fc8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fca:	4b2f      	ldr	r3, [pc, #188]	; (8002088 <HAL_SPI_MspInit+0x224>)
 8001fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fce:	4a2e      	ldr	r2, [pc, #184]	; (8002088 <HAL_SPI_MspInit+0x224>)
 8001fd0:	f043 0308 	orr.w	r3, r3, #8
 8001fd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fd6:	4b2c      	ldr	r3, [pc, #176]	; (8002088 <HAL_SPI_MspInit+0x224>)
 8001fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fda:	f003 0308 	and.w	r3, r3, #8
 8001fde:	617b      	str	r3, [r7, #20]
 8001fe0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fe2:	4b29      	ldr	r3, [pc, #164]	; (8002088 <HAL_SPI_MspInit+0x224>)
 8001fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe6:	4a28      	ldr	r2, [pc, #160]	; (8002088 <HAL_SPI_MspInit+0x224>)
 8001fe8:	f043 0304 	orr.w	r3, r3, #4
 8001fec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fee:	4b26      	ldr	r3, [pc, #152]	; (8002088 <HAL_SPI_MspInit+0x224>)
 8001ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff2:	f003 0304 	and.w	r3, r3, #4
 8001ff6:	613b      	str	r3, [r7, #16]
 8001ff8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ffa:	4b23      	ldr	r3, [pc, #140]	; (8002088 <HAL_SPI_MspInit+0x224>)
 8001ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ffe:	4a22      	ldr	r2, [pc, #136]	; (8002088 <HAL_SPI_MspInit+0x224>)
 8002000:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002004:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002006:	4b20      	ldr	r3, [pc, #128]	; (8002088 <HAL_SPI_MspInit+0x224>)
 8002008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800200a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 8002012:	f002 fc7b 	bl	800490c <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002016:	2340      	movs	r3, #64	; 0x40
 8002018:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201a:	2302      	movs	r3, #2
 800201c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201e:	2300      	movs	r3, #0
 8002020:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002022:	2303      	movs	r3, #3
 8002024:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI3;
 8002026:	2305      	movs	r3, #5
 8002028:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800202a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800202e:	4619      	mov	r1, r3
 8002030:	4818      	ldr	r0, [pc, #96]	; (8002094 <HAL_SPI_MspInit+0x230>)
 8002032:	f001 f94f 	bl	80032d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002036:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800203a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203c:	2302      	movs	r3, #2
 800203e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002040:	2300      	movs	r3, #0
 8002042:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002044:	2303      	movs	r3, #3
 8002046:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002048:	2306      	movs	r3, #6
 800204a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800204c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002050:	4619      	mov	r1, r3
 8002052:	4811      	ldr	r0, [pc, #68]	; (8002098 <HAL_SPI_MspInit+0x234>)
 8002054:	f001 f93e 	bl	80032d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_10;
 8002058:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800205c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205e:	2302      	movs	r3, #2
 8002060:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002062:	2300      	movs	r3, #0
 8002064:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002066:	2303      	movs	r3, #3
 8002068:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800206a:	2306      	movs	r3, #6
 800206c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800206e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002072:	4619      	mov	r1, r3
 8002074:	480a      	ldr	r0, [pc, #40]	; (80020a0 <HAL_SPI_MspInit+0x23c>)
 8002076:	f001 f92d 	bl	80032d4 <HAL_GPIO_Init>
}
 800207a:	bf00      	nop
 800207c:	3748      	adds	r7, #72	; 0x48
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	40013000 	.word	0x40013000
 8002088:	40021000 	.word	0x40021000
 800208c:	48000400 	.word	0x48000400
 8002090:	40003800 	.word	0x40003800
 8002094:	48000c00 	.word	0x48000c00
 8002098:	48000800 	.word	0x48000800
 800209c:	40003c00 	.word	0x40003c00
 80020a0:	48001800 	.word	0x48001800

080020a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b0b0      	sub	sp, #192	; 0xc0
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ac:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	605a      	str	r2, [r3, #4]
 80020b6:	609a      	str	r2, [r3, #8]
 80020b8:	60da      	str	r2, [r3, #12]
 80020ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020bc:	f107 0310 	add.w	r3, r7, #16
 80020c0:	229c      	movs	r2, #156	; 0x9c
 80020c2:	2100      	movs	r1, #0
 80020c4:	4618      	mov	r0, r3
 80020c6:	f006 f9ed 	bl	80084a4 <memset>
  if(huart->Instance==UART4)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a21      	ldr	r2, [pc, #132]	; (8002154 <HAL_UART_MspInit+0xb0>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d13b      	bne.n	800214c <HAL_UART_MspInit+0xa8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80020d4:	2308      	movs	r3, #8
 80020d6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80020d8:	2300      	movs	r3, #0
 80020da:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020dc:	f107 0310 	add.w	r3, r7, #16
 80020e0:	4618      	mov	r0, r3
 80020e2:	f003 fafb 	bl	80056dc <HAL_RCCEx_PeriphCLKConfig>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80020ec:	f7ff fc46 	bl	800197c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80020f0:	4b19      	ldr	r3, [pc, #100]	; (8002158 <HAL_UART_MspInit+0xb4>)
 80020f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f4:	4a18      	ldr	r2, [pc, #96]	; (8002158 <HAL_UART_MspInit+0xb4>)
 80020f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80020fa:	6593      	str	r3, [r2, #88]	; 0x58
 80020fc:	4b16      	ldr	r3, [pc, #88]	; (8002158 <HAL_UART_MspInit+0xb4>)
 80020fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002100:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002104:	60fb      	str	r3, [r7, #12]
 8002106:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002108:	4b13      	ldr	r3, [pc, #76]	; (8002158 <HAL_UART_MspInit+0xb4>)
 800210a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800210c:	4a12      	ldr	r2, [pc, #72]	; (8002158 <HAL_UART_MspInit+0xb4>)
 800210e:	f043 0301 	orr.w	r3, r3, #1
 8002112:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002114:	4b10      	ldr	r3, [pc, #64]	; (8002158 <HAL_UART_MspInit+0xb4>)
 8002116:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002118:	f003 0301 	and.w	r3, r3, #1
 800211c:	60bb      	str	r3, [r7, #8]
 800211e:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002120:	2303      	movs	r3, #3
 8002122:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002126:	2302      	movs	r3, #2
 8002128:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212c:	2300      	movs	r3, #0
 800212e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002132:	2303      	movs	r3, #3
 8002134:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002138:	2308      	movs	r3, #8
 800213a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800213e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002142:	4619      	mov	r1, r3
 8002144:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002148:	f001 f8c4 	bl	80032d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 800214c:	bf00      	nop
 800214e:	37c0      	adds	r7, #192	; 0xc0
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40004c00 	.word	0x40004c00
 8002158:	40021000 	.word	0x40021000

0800215c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002160:	e7fe      	b.n	8002160 <NMI_Handler+0x4>

08002162 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002162:	b480      	push	{r7}
 8002164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002166:	e7fe      	b.n	8002166 <HardFault_Handler+0x4>

08002168 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800216c:	e7fe      	b.n	800216c <MemManage_Handler+0x4>

0800216e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800216e:	b480      	push	{r7}
 8002170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002172:	e7fe      	b.n	8002172 <BusFault_Handler+0x4>

08002174 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002178:	e7fe      	b.n	8002178 <UsageFault_Handler+0x4>

0800217a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800217a:	b480      	push	{r7}
 800217c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800217e:	bf00      	nop
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800218c:	bf00      	nop
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002196:	b480      	push	{r7}
 8002198:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800219a:	bf00      	nop
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021a8:	f000 f89a 	bl	80022e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021ac:	bf00      	nop
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80021b4:	4b06      	ldr	r3, [pc, #24]	; (80021d0 <SystemInit+0x20>)
 80021b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ba:	4a05      	ldr	r2, [pc, #20]	; (80021d0 <SystemInit+0x20>)
 80021bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80021c4:	bf00      	nop
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	e000ed00 	.word	0xe000ed00

080021d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80021d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800220c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80021d8:	f7ff ffea 	bl	80021b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021dc:	480c      	ldr	r0, [pc, #48]	; (8002210 <LoopForever+0x6>)
  ldr r1, =_edata
 80021de:	490d      	ldr	r1, [pc, #52]	; (8002214 <LoopForever+0xa>)
  ldr r2, =_sidata
 80021e0:	4a0d      	ldr	r2, [pc, #52]	; (8002218 <LoopForever+0xe>)
  movs r3, #0
 80021e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021e4:	e002      	b.n	80021ec <LoopCopyDataInit>

080021e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021ea:	3304      	adds	r3, #4

080021ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021f0:	d3f9      	bcc.n	80021e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021f2:	4a0a      	ldr	r2, [pc, #40]	; (800221c <LoopForever+0x12>)
  ldr r4, =_ebss
 80021f4:	4c0a      	ldr	r4, [pc, #40]	; (8002220 <LoopForever+0x16>)
  movs r3, #0
 80021f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021f8:	e001      	b.n	80021fe <LoopFillZerobss>

080021fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021fc:	3204      	adds	r2, #4

080021fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002200:	d3fb      	bcc.n	80021fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002202:	f006 f957 	bl	80084b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002206:	f7fe f977 	bl	80004f8 <main>

0800220a <LoopForever>:

LoopForever:
    b LoopForever
 800220a:	e7fe      	b.n	800220a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800220c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002210:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002214:	20004b0c 	.word	0x20004b0c
  ldr r2, =_sidata
 8002218:	08008628 	.word	0x08008628
  ldr r2, =_sbss
 800221c:	20004b0c 	.word	0x20004b0c
  ldr r4, =_ebss
 8002220:	20004efc 	.word	0x20004efc

08002224 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002224:	e7fe      	b.n	8002224 <ADC1_IRQHandler>
	...

08002228 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800222e:	2300      	movs	r3, #0
 8002230:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002232:	4b0c      	ldr	r3, [pc, #48]	; (8002264 <HAL_Init+0x3c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a0b      	ldr	r2, [pc, #44]	; (8002264 <HAL_Init+0x3c>)
 8002238:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800223c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800223e:	2003      	movs	r0, #3
 8002240:	f000 f962 	bl	8002508 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002244:	200f      	movs	r0, #15
 8002246:	f000 f80f 	bl	8002268 <HAL_InitTick>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d002      	beq.n	8002256 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	71fb      	strb	r3, [r7, #7]
 8002254:	e001      	b.n	800225a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002256:	f7ff fb97 	bl	8001988 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800225a:	79fb      	ldrb	r3, [r7, #7]
}
 800225c:	4618      	mov	r0, r3
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40022000 	.word	0x40022000

08002268 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002270:	2300      	movs	r3, #0
 8002272:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002274:	4b17      	ldr	r3, [pc, #92]	; (80022d4 <HAL_InitTick+0x6c>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d023      	beq.n	80022c4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800227c:	4b16      	ldr	r3, [pc, #88]	; (80022d8 <HAL_InitTick+0x70>)
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	4b14      	ldr	r3, [pc, #80]	; (80022d4 <HAL_InitTick+0x6c>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	4619      	mov	r1, r3
 8002286:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800228a:	fbb3 f3f1 	udiv	r3, r3, r1
 800228e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002292:	4618      	mov	r0, r3
 8002294:	f000 f96d 	bl	8002572 <HAL_SYSTICK_Config>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d10f      	bne.n	80022be <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2b0f      	cmp	r3, #15
 80022a2:	d809      	bhi.n	80022b8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022a4:	2200      	movs	r2, #0
 80022a6:	6879      	ldr	r1, [r7, #4]
 80022a8:	f04f 30ff 	mov.w	r0, #4294967295
 80022ac:	f000 f937 	bl	800251e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022b0:	4a0a      	ldr	r2, [pc, #40]	; (80022dc <HAL_InitTick+0x74>)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6013      	str	r3, [r2, #0]
 80022b6:	e007      	b.n	80022c8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	73fb      	strb	r3, [r7, #15]
 80022bc:	e004      	b.n	80022c8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	73fb      	strb	r3, [r7, #15]
 80022c2:	e001      	b.n	80022c8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80022c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	20004b08 	.word	0x20004b08
 80022d8:	20004b00 	.word	0x20004b00
 80022dc:	20004b04 	.word	0x20004b04

080022e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022e4:	4b06      	ldr	r3, [pc, #24]	; (8002300 <HAL_IncTick+0x20>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	461a      	mov	r2, r3
 80022ea:	4b06      	ldr	r3, [pc, #24]	; (8002304 <HAL_IncTick+0x24>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4413      	add	r3, r2
 80022f0:	4a04      	ldr	r2, [pc, #16]	; (8002304 <HAL_IncTick+0x24>)
 80022f2:	6013      	str	r3, [r2, #0]
}
 80022f4:	bf00      	nop
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	20004b08 	.word	0x20004b08
 8002304:	20004ef8 	.word	0x20004ef8

08002308 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  return uwTick;
 800230c:	4b03      	ldr	r3, [pc, #12]	; (800231c <HAL_GetTick+0x14>)
 800230e:	681b      	ldr	r3, [r3, #0]
}
 8002310:	4618      	mov	r0, r3
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	20004ef8 	.word	0x20004ef8

08002320 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002328:	f7ff ffee 	bl	8002308 <HAL_GetTick>
 800232c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002338:	d005      	beq.n	8002346 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800233a:	4b0a      	ldr	r3, [pc, #40]	; (8002364 <HAL_Delay+0x44>)
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	461a      	mov	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	4413      	add	r3, r2
 8002344:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002346:	bf00      	nop
 8002348:	f7ff ffde 	bl	8002308 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	68fa      	ldr	r2, [r7, #12]
 8002354:	429a      	cmp	r2, r3
 8002356:	d8f7      	bhi.n	8002348 <HAL_Delay+0x28>
  {
  }
}
 8002358:	bf00      	nop
 800235a:	bf00      	nop
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	20004b08 	.word	0x20004b08

08002368 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f003 0307 	and.w	r3, r3, #7
 8002376:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002378:	4b0c      	ldr	r3, [pc, #48]	; (80023ac <__NVIC_SetPriorityGrouping+0x44>)
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002384:	4013      	ands	r3, r2
 8002386:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002390:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002394:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002398:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800239a:	4a04      	ldr	r2, [pc, #16]	; (80023ac <__NVIC_SetPriorityGrouping+0x44>)
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	60d3      	str	r3, [r2, #12]
}
 80023a0:	bf00      	nop
 80023a2:	3714      	adds	r7, #20
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr
 80023ac:	e000ed00 	.word	0xe000ed00

080023b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023b4:	4b04      	ldr	r3, [pc, #16]	; (80023c8 <__NVIC_GetPriorityGrouping+0x18>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	0a1b      	lsrs	r3, r3, #8
 80023ba:	f003 0307 	and.w	r3, r3, #7
}
 80023be:	4618      	mov	r0, r3
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr
 80023c8:	e000ed00 	.word	0xe000ed00

080023cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	4603      	mov	r3, r0
 80023d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	db0b      	blt.n	80023f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023de:	79fb      	ldrb	r3, [r7, #7]
 80023e0:	f003 021f 	and.w	r2, r3, #31
 80023e4:	4907      	ldr	r1, [pc, #28]	; (8002404 <__NVIC_EnableIRQ+0x38>)
 80023e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ea:	095b      	lsrs	r3, r3, #5
 80023ec:	2001      	movs	r0, #1
 80023ee:	fa00 f202 	lsl.w	r2, r0, r2
 80023f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023f6:	bf00      	nop
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	e000e100 	.word	0xe000e100

08002408 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	4603      	mov	r3, r0
 8002410:	6039      	str	r1, [r7, #0]
 8002412:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002418:	2b00      	cmp	r3, #0
 800241a:	db0a      	blt.n	8002432 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	b2da      	uxtb	r2, r3
 8002420:	490c      	ldr	r1, [pc, #48]	; (8002454 <__NVIC_SetPriority+0x4c>)
 8002422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002426:	0112      	lsls	r2, r2, #4
 8002428:	b2d2      	uxtb	r2, r2
 800242a:	440b      	add	r3, r1
 800242c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002430:	e00a      	b.n	8002448 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	b2da      	uxtb	r2, r3
 8002436:	4908      	ldr	r1, [pc, #32]	; (8002458 <__NVIC_SetPriority+0x50>)
 8002438:	79fb      	ldrb	r3, [r7, #7]
 800243a:	f003 030f 	and.w	r3, r3, #15
 800243e:	3b04      	subs	r3, #4
 8002440:	0112      	lsls	r2, r2, #4
 8002442:	b2d2      	uxtb	r2, r2
 8002444:	440b      	add	r3, r1
 8002446:	761a      	strb	r2, [r3, #24]
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr
 8002454:	e000e100 	.word	0xe000e100
 8002458:	e000ed00 	.word	0xe000ed00

0800245c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800245c:	b480      	push	{r7}
 800245e:	b089      	sub	sp, #36	; 0x24
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f003 0307 	and.w	r3, r3, #7
 800246e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	f1c3 0307 	rsb	r3, r3, #7
 8002476:	2b04      	cmp	r3, #4
 8002478:	bf28      	it	cs
 800247a:	2304      	movcs	r3, #4
 800247c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	3304      	adds	r3, #4
 8002482:	2b06      	cmp	r3, #6
 8002484:	d902      	bls.n	800248c <NVIC_EncodePriority+0x30>
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	3b03      	subs	r3, #3
 800248a:	e000      	b.n	800248e <NVIC_EncodePriority+0x32>
 800248c:	2300      	movs	r3, #0
 800248e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002490:	f04f 32ff 	mov.w	r2, #4294967295
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	43da      	mvns	r2, r3
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	401a      	ands	r2, r3
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024a4:	f04f 31ff 	mov.w	r1, #4294967295
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	fa01 f303 	lsl.w	r3, r1, r3
 80024ae:	43d9      	mvns	r1, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b4:	4313      	orrs	r3, r2
         );
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3724      	adds	r7, #36	; 0x24
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
	...

080024c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	3b01      	subs	r3, #1
 80024d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024d4:	d301      	bcc.n	80024da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024d6:	2301      	movs	r3, #1
 80024d8:	e00f      	b.n	80024fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024da:	4a0a      	ldr	r2, [pc, #40]	; (8002504 <SysTick_Config+0x40>)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	3b01      	subs	r3, #1
 80024e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024e2:	210f      	movs	r1, #15
 80024e4:	f04f 30ff 	mov.w	r0, #4294967295
 80024e8:	f7ff ff8e 	bl	8002408 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024ec:	4b05      	ldr	r3, [pc, #20]	; (8002504 <SysTick_Config+0x40>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024f2:	4b04      	ldr	r3, [pc, #16]	; (8002504 <SysTick_Config+0x40>)
 80024f4:	2207      	movs	r2, #7
 80024f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	e000e010 	.word	0xe000e010

08002508 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f7ff ff29 	bl	8002368 <__NVIC_SetPriorityGrouping>
}
 8002516:	bf00      	nop
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b086      	sub	sp, #24
 8002522:	af00      	add	r7, sp, #0
 8002524:	4603      	mov	r3, r0
 8002526:	60b9      	str	r1, [r7, #8]
 8002528:	607a      	str	r2, [r7, #4]
 800252a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800252c:	2300      	movs	r3, #0
 800252e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002530:	f7ff ff3e 	bl	80023b0 <__NVIC_GetPriorityGrouping>
 8002534:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	68b9      	ldr	r1, [r7, #8]
 800253a:	6978      	ldr	r0, [r7, #20]
 800253c:	f7ff ff8e 	bl	800245c <NVIC_EncodePriority>
 8002540:	4602      	mov	r2, r0
 8002542:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002546:	4611      	mov	r1, r2
 8002548:	4618      	mov	r0, r3
 800254a:	f7ff ff5d 	bl	8002408 <__NVIC_SetPriority>
}
 800254e:	bf00      	nop
 8002550:	3718      	adds	r7, #24
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b082      	sub	sp, #8
 800255a:	af00      	add	r7, sp, #0
 800255c:	4603      	mov	r3, r0
 800255e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff ff31 	bl	80023cc <__NVIC_EnableIRQ>
}
 800256a:	bf00      	nop
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b082      	sub	sp, #8
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f7ff ffa2 	bl	80024c4 <SysTick_Config>
 8002580:	4603      	mov	r3, r0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 800258a:	b480      	push	{r7}
 800258c:	b085      	sub	sp, #20
 800258e:	af00      	add	r7, sp, #0
 8002590:	60f8      	str	r0, [r7, #12]
 8002592:	60b9      	str	r1, [r7, #8]
 8002594:	607a      	str	r2, [r7, #4]
 8002596:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	019a      	lsls	r2, r3, #6
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	431a      	orrs	r2, r3
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	021b      	lsls	r3, r3, #8
 80025a4:	431a      	orrs	r2, r3
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	041b      	lsls	r3, r3, #16
 80025aa:	431a      	orrs	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	66da      	str	r2, [r3, #108]	; 0x6c
}
 80025b0:	bf00      	nop
 80025b2:	3714      	adds	r7, #20
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
 80025c8:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80025ca:	f7ff fe9d 	bl	8002308 <HAL_GetTick>
 80025ce:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80025d0:	e009      	b.n	80025e6 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80025d2:	f7ff fe99 	bl	8002308 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025e0:	d901      	bls.n	80025e6 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e015      	b.n	8002612 <DSI_ShortWrite+0x56>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025ec:	f003 0301 	and.w	r3, r3, #1
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d0ee      	beq.n	80025d2 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	019a      	lsls	r2, r3, #6
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	431a      	orrs	r2, r3
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	021b      	lsls	r3, r3, #8
 8002600:	ea42 0103 	orr.w	r1, r2, r3
 8002604:	6a3b      	ldr	r3, [r7, #32]
 8002606:	041a      	lsls	r2, r3, #16
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	430a      	orrs	r2, r1
 800260e:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3718      	adds	r7, #24
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
	...

0800261c <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b088      	sub	sp, #32
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e10b      	b.n	8002848 <HAL_DSI_Init+0x22c>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	7c5b      	ldrb	r3, [r3, #17]
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d102      	bne.n	8002640 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f7ff f9c8 	bl	80019d0 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2203      	movs	r2, #3
 8002644:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8002646:	2300      	movs	r3, #0
 8002648:	613b      	str	r3, [r7, #16]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800265a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002666:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800266a:	613b      	str	r3, [r7, #16]
 800266c:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800266e:	f7ff fe4b 	bl	8002308 <HAL_GetTick>
 8002672:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8002674:	e009      	b.n	800268a <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002676:	f7ff fe47 	bl	8002308 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002684:	d901      	bls.n	800268a <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e0de      	b.n	8002848 <HAL_DSI_Init+0x22c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002692:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d0ed      	beq.n	8002676 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	6812      	ldr	r2, [r2, #0]
 80026a6:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 80026aa:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 80026ae:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80026c6:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80026ce:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	430a      	orrs	r2, r1
 80026d6:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 80026da:	2300      	movs	r3, #0
 80026dc:	60fb      	str	r3, [r7, #12]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f042 0201 	orr.w	r2, r2, #1
 80026ee:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	68fb      	ldr	r3, [r7, #12]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8002702:	2001      	movs	r0, #1
 8002704:	f7ff fe0c 	bl	8002320 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8002708:	f7ff fdfe 	bl	8002308 <HAL_GetTick>
 800270c:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800270e:	e009      	b.n	8002724 <HAL_DSI_Init+0x108>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002710:	f7ff fdfa 	bl	8002308 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800271e:	d901      	bls.n	8002724 <HAL_DSI_Init+0x108>
    {
      return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e091      	b.n	8002848 <HAL_DSI_Init+0x22c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800272c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002730:	2b00      	cmp	r3, #0
 8002732:	d0ed      	beq.n	8002710 <HAL_DSI_Init+0xf4>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f042 0206 	orr.w	r2, r2, #6
 8002744:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f022 0203 	bic.w	r2, r2, #3
 8002758:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	431a      	orrs	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f042 0201 	orr.w	r2, r2, #1
 8002772:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f022 0203 	bic.w	r2, r2, #3
 8002786:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68da      	ldr	r2, [r3, #12]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	430a      	orrs	r2, r1
 800279c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	689a      	ldr	r2, [r3, #8]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80027ae:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	6899      	ldr	r1, [r3, #8]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	689a      	ldr	r2, [r3, #8]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	430a      	orrs	r2, r1
 80027c0:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d002      	beq.n	80027d0 <HAL_DSI_Init+0x1b4>
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	e000      	b.n	80027d2 <HAL_DSI_Init+0x1b6>
 80027d0:	2301      	movs	r3, #1
 80027d2:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	4a1e      	ldr	r2, [pc, #120]	; (8002850 <HAL_DSI_Init+0x234>)
 80027d8:	fb03 f202 	mul.w	r2, r3, r2
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f003 0303 	and.w	r3, r3, #3
 80027e4:	409a      	lsls	r2, r3
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 80027ee:	fb01 f303 	mul.w	r3, r1, r3
 80027f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f6:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002808:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	697a      	ldr	r2, [r7, #20]
 800281a:	430a      	orrs	r2, r1
 800281c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2200      	movs	r2, #0
 8002826:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2200      	movs	r2, #0
 8002830:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3720      	adds	r7, #32
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	003d0900 	.word	0x003d0900

08002854 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	7c1b      	ldrb	r3, [r3, #16]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d101      	bne.n	800286a <HAL_DSI_ConfigErrorMonitor+0x16>
 8002866:	2302      	movs	r3, #2
 8002868:	e0ab      	b.n	80029c2 <HAL_DSI_ConfigErrorMonitor+0x16e>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2201      	movs	r2, #1
 800286e:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2200      	movs	r2, #0
 8002876:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2200      	movs	r2, #0
 8002880:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	2b00      	cmp	r3, #0
 8002892:	d00b      	beq.n	80028ac <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	6812      	ldr	r2, [r2, #0]
 80028a0:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 80028a4:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 80028a8:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d009      	beq.n	80028ca <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 80028c6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	f003 0304 	and.w	r3, r3, #4
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d009      	beq.n	80028e8 <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f042 0201 	orr.w	r2, r2, #1
 80028e4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	f003 0308 	and.w	r3, r3, #8
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d009      	beq.n	8002906 <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f042 0202 	orr.w	r2, r2, #2
 8002902:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	f003 0310 	and.w	r3, r3, #16
 800290c:	2b00      	cmp	r3, #0
 800290e:	d009      	beq.n	8002924 <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f042 020c 	orr.w	r2, r2, #12
 8002920:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	f003 0320 	and.w	r3, r3, #32
 800292a:	2b00      	cmp	r3, #0
 800292c:	d009      	beq.n	8002942 <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f042 0210 	orr.w	r2, r2, #16
 800293e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002948:	2b00      	cmp	r3, #0
 800294a:	d009      	beq.n	8002960 <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f042 0220 	orr.w	r2, r2, #32
 800295c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002966:	2b00      	cmp	r3, #0
 8002968:	d009      	beq.n	800297e <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800297a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002984:	2b00      	cmp	r3, #0
 8002986:	d009      	beq.n	800299c <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002998:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d009      	beq.n	80029ba <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 80029b6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr

080029ce <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b083      	sub	sp, #12
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
 80029d6:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	7c1b      	ldrb	r3, [r3, #16]
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d101      	bne.n	80029e4 <HAL_DSI_SetGenericVCID+0x16>
 80029e0:	2302      	movs	r3, #2
 80029e2:	e016      	b.n	8002a12 <HAL_DSI_SetGenericVCID+0x44>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 0203 	bic.w	r2, r2, #3
 80029f8:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	430a      	orrs	r2, r1
 8002a08:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr

08002a1e <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b083      	sub	sp, #12
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
 8002a26:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	7c1b      	ldrb	r3, [r3, #16]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d101      	bne.n	8002a34 <HAL_DSI_ConfigVideoMode+0x16>
 8002a30:	2302      	movs	r3, #2
 8002a32:	e1f6      	b.n	8002e22 <HAL_DSI_ConfigVideoMode+0x404>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f022 0201 	bic.w	r2, r2, #1
 8002a48:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 0201 	bic.w	r2, r2, #1
 8002a5a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 0203 	bic.w	r2, r2, #3
 8002a6c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	68da      	ldr	r2, [r3, #12]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	6812      	ldr	r2, [r2, #0]
 8002a8a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002a8e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a92:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	691a      	ldr	r2, [r3, #16]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	6812      	ldr	r2, [r2, #0]
 8002ab0:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002ab4:	f023 031f 	bic.w	r3, r3, #31
 8002ab8:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	695a      	ldr	r2, [r3, #20]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	6812      	ldr	r2, [r2, #0]
 8002ad6:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002ada:	f023 031f 	bic.w	r3, r3, #31
 8002ade:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	699a      	ldr	r2, [r3, #24]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	430a      	orrs	r2, r1
 8002af0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68da      	ldr	r2, [r3, #12]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f022 0203 	bic.w	r2, r2, #3
 8002b00:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68d9      	ldr	r1, [r3, #12]
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	430a      	orrs	r2, r1
 8002b12:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	695a      	ldr	r2, [r3, #20]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f022 0207 	bic.w	r2, r2, #7
 8002b22:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6959      	ldr	r1, [r3, #20]
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	6a1b      	ldr	r3, [r3, #32]
 8002b32:	431a      	orrs	r2, r3
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	69db      	ldr	r3, [r3, #28]
 8002b38:	431a      	orrs	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	691a      	ldr	r2, [r3, #16]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f022 020f 	bic.w	r2, r2, #15
 8002b50:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	6919      	ldr	r1, [r3, #16]
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685a      	ldr	r2, [r3, #4]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	430a      	orrs	r2, r1
 8002b62:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f022 020e 	bic.w	r2, r2, #14
 8002b74:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	005a      	lsls	r2, r3, #1
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	2b03      	cmp	r3, #3
 8002b96:	d110      	bne.n	8002bba <HAL_DSI_ConfigVideoMode+0x19c>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	691a      	ldr	r2, [r3, #16]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ba6:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6919      	ldr	r1, [r3, #16]
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	689a      	ldr	r2, [r3, #8]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	6812      	ldr	r2, [r2, #0]
 8002bc4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002bc8:	f023 030f 	bic.w	r3, r3, #15
 8002bcc:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	6812      	ldr	r2, [r2, #0]
 8002bea:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002bee:	f023 030f 	bic.w	r3, r3, #15
 8002bf2:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	430a      	orrs	r2, r1
 8002c04:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	6812      	ldr	r2, [r2, #0]
 8002c10:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002c14:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002c18:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	6812      	ldr	r2, [r2, #0]
 8002c36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c3a:	f023 0303 	bic.w	r3, r3, #3
 8002c3e:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	6812      	ldr	r2, [r2, #0]
 8002c5c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c60:	f023 0303 	bic.w	r3, r3, #3
 8002c64:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	430a      	orrs	r2, r1
 8002c76:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	6812      	ldr	r2, [r2, #0]
 8002c82:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c86:	f023 0303 	bic.w	r3, r3, #3
 8002c8a:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	6812      	ldr	r2, [r2, #0]
 8002ca8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002cac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002cb0:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002cd2:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	699a      	ldr	r2, [r3, #24]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8002cf4:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	6999      	ldr	r1, [r3, #24]
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d00:	041a      	lsls	r2, r3, #16
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	430a      	orrs	r2, r1
 8002d08:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	699a      	ldr	r2, [r3, #24]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d18:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	6999      	ldr	r1, [r3, #24]
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d3a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d5c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d7e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002da0:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	430a      	orrs	r2, r1
 8002db2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002dc2:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002de4:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	430a      	orrs	r2, r1
 8002df6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002e06:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	430a      	orrs	r2, r1
 8002e18:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr

08002e2e <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	b085      	sub	sp, #20
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
 8002e36:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	7c1b      	ldrb	r3, [r3, #16]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d101      	bne.n	8002e44 <HAL_DSI_ConfigPhyTimer+0x16>
 8002e40:	2302      	movs	r3, #2
 8002e42:	e058      	b.n	8002ef6 <HAL_DSI_ConfigPhyTimer+0xc8>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	4293      	cmp	r3, r2
 8002e54:	bf38      	it	cc
 8002e56:	4613      	movcc	r3, r2
 8002e58:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8002e6a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	041a      	lsls	r2, r3, #16
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	431a      	orrs	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	430a      	orrs	r2, r1
 8002e84:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8002e98:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	691a      	ldr	r2, [r3, #16]
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	041b      	lsls	r3, r3, #16
 8002eae:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8002eb6:	431a      	orrs	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002ed2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	021a      	lsls	r2, r3, #8
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3714      	adds	r7, #20
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr

08002f02 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8002f02:	b480      	push	{r7}
 8002f04:	b083      	sub	sp, #12
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
 8002f0a:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	7c1b      	ldrb	r3, [r3, #16]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d101      	bne.n	8002f18 <HAL_DSI_ConfigHostTimeouts+0x16>
 8002f14:	2302      	movs	r3, #2
 8002f16:	e0b4      	b.n	8003082 <HAL_DSI_ConfigHostTimeouts+0x180>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	689a      	ldr	r2, [r3, #8]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002f2c:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	6899      	ldr	r1, [r3, #8]
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	021a      	lsls	r2, r3, #8
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	b292      	uxth	r2, r2
 8002f4e:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	041a      	lsls	r2, r3, #16
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	430a      	orrs	r2, r1
 8002f62:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	6812      	ldr	r2, [r2, #0]
 8002f6e:	0c1b      	lsrs	r3, r3, #16
 8002f70:	041b      	lsls	r3, r3, #16
 8002f72:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	689a      	ldr	r2, [r3, #8]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	430a      	orrs	r2, r1
 8002f84:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	6812      	ldr	r2, [r2, #0]
 8002f90:	0c1b      	lsrs	r3, r3, #16
 8002f92:	041b      	lsls	r3, r3, #16
 8002f94:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	68da      	ldr	r2, [r3, #12]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	6812      	ldr	r2, [r2, #0]
 8002fb4:	0c1b      	lsrs	r3, r3, #16
 8002fb6:	041b      	lsls	r3, r3, #16
 8002fb8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	691a      	ldr	r2, [r3, #16]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	6812      	ldr	r2, [r2, #0]
 8002fde:	0c1b      	lsrs	r3, r3, #16
 8002fe0:	041b      	lsls	r3, r3, #16
 8002fe2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	695a      	ldr	r2, [r3, #20]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800300c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	699a      	ldr	r2, [r3, #24]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	430a      	orrs	r2, r1
 8003022:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	6812      	ldr	r2, [r2, #0]
 8003032:	0c1b      	lsrs	r3, r3, #16
 8003034:	041b      	lsls	r3, r3, #16
 8003036:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	69da      	ldr	r2, [r3, #28]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	430a      	orrs	r2, r1
 800304c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	6812      	ldr	r2, [r2, #0]
 800305c:	0c1b      	lsrs	r3, r3, #16
 800305e:	041b      	lsls	r3, r3, #16
 8003060:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	6a1a      	ldr	r2, [r3, #32]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	430a      	orrs	r2, r1
 8003076:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr

0800308e <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 800308e:	b480      	push	{r7}
 8003090:	b085      	sub	sp, #20
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	7c1b      	ldrb	r3, [r3, #16]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d101      	bne.n	80030a2 <HAL_DSI_Start+0x14>
 800309e:	2302      	movs	r3, #2
 80030a0:	e02b      	b.n	80030fa <HAL_DSI_Start+0x6c>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2201      	movs	r2, #1
 80030a6:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 80030a8:	2300      	movs	r3, #0
 80030aa:	60fb      	str	r3, [r7, #12]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	685a      	ldr	r2, [r3, #4]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f042 0201 	orr.w	r2, r2, #1
 80030ba:	605a      	str	r2, [r3, #4]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	60fb      	str	r3, [r7, #12]
 80030c8:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80030ca:	2300      	movs	r3, #0
 80030cc:	60bb      	str	r3, [r7, #8]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f042 0208 	orr.w	r2, r2, #8
 80030de:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80030ea:	f003 0308 	and.w	r3, r3, #8
 80030ee:	60bb      	str	r3, [r7, #8]
 80030f0:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3714      	adds	r7, #20
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr

08003106 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8003106:	b580      	push	{r7, lr}
 8003108:	b088      	sub	sp, #32
 800310a:	af02      	add	r7, sp, #8
 800310c:	60f8      	str	r0, [r7, #12]
 800310e:	60b9      	str	r1, [r7, #8]
 8003110:	607a      	str	r2, [r7, #4]
 8003112:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	7c1b      	ldrb	r3, [r3, #16]
 8003118:	2b01      	cmp	r3, #1
 800311a:	d101      	bne.n	8003120 <HAL_DSI_ShortWrite+0x1a>
 800311c:	2302      	movs	r3, #2
 800311e:	e010      	b.n	8003142 <HAL_DSI_ShortWrite+0x3c>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2201      	movs	r2, #1
 8003124:	741a      	strb	r2, [r3, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8003126:	6a3b      	ldr	r3, [r7, #32]
 8003128:	9300      	str	r3, [sp, #0]
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	68b9      	ldr	r1, [r7, #8]
 8003130:	68f8      	ldr	r0, [r7, #12]
 8003132:	f7ff fa43 	bl	80025bc <DSI_ShortWrite>
 8003136:	4603      	mov	r3, r0
 8003138:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2200      	movs	r2, #0
 800313e:	741a      	strb	r2, [r3, #16]

  return status;
 8003140:	7dfb      	ldrb	r3, [r7, #23]
}
 8003142:	4618      	mov	r0, r3
 8003144:	3718      	adds	r7, #24
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 800314a:	b580      	push	{r7, lr}
 800314c:	b08c      	sub	sp, #48	; 0x30
 800314e:	af02      	add	r7, sp, #8
 8003150:	60f8      	str	r0, [r7, #12]
 8003152:	60b9      	str	r1, [r7, #8]
 8003154:	607a      	str	r2, [r7, #4]
 8003156:	603b      	str	r3, [r7, #0]
  uint32_t uicounter;
  uint32_t nbBytes;
  uint32_t count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 8003158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800315a:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	7c1b      	ldrb	r3, [r3, #16]
 8003160:	2b01      	cmp	r3, #1
 8003162:	d101      	bne.n	8003168 <HAL_DSI_LongWrite+0x1e>
 8003164:	2302      	movs	r3, #2
 8003166:	e084      	b.n	8003272 <HAL_DSI_LongWrite+0x128>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2201      	movs	r2, #1
 800316c:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 800316e:	f7ff f8cb 	bl	8002308 <HAL_GetTick>
 8003172:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003174:	e00c      	b.n	8003190 <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003176:	f7ff f8c7 	bl	8002308 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003184:	d904      	bls.n	8003190 <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e070      	b.n	8003272 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	2b00      	cmp	r3, #0
 800319c:	d0eb      	beq.n	8003176 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 800319e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a0:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	2b03      	cmp	r3, #3
 80031a6:	bf28      	it	cs
 80031a8:	2303      	movcs	r3, #3
 80031aa:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 80031ac:	2300      	movs	r3, #0
 80031ae:	623b      	str	r3, [r7, #32]
 80031b0:	e00f      	b.n	80031d2 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	6a3b      	ldr	r3, [r7, #32]
 80031b6:	4413      	add	r3, r2
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	461a      	mov	r2, r3
 80031bc:	6a3b      	ldr	r3, [r7, #32]
 80031be:	3301      	adds	r3, #1
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	fa02 f303 	lsl.w	r3, r2, r3
 80031c6:	69fa      	ldr	r2, [r7, #28]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 80031cc:	6a3b      	ldr	r3, [r7, #32]
 80031ce:	3301      	adds	r3, #1
 80031d0:	623b      	str	r3, [r7, #32]
 80031d2:	6a3a      	ldr	r2, [r7, #32]
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d3eb      	bcc.n	80031b2 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	69fa      	ldr	r2, [r7, #28]
 80031e0:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 80031e2:	683a      	ldr	r2, [r7, #0]
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	4413      	add	r3, r2
 80031f0:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 80031f2:	e028      	b.n	8003246 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80031f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f6:	2b04      	cmp	r3, #4
 80031f8:	bf28      	it	cs
 80031fa:	2304      	movcs	r3, #4
 80031fc:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 80031fe:	2300      	movs	r3, #0
 8003200:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8003202:	2300      	movs	r3, #0
 8003204:	623b      	str	r3, [r7, #32]
 8003206:	e00e      	b.n	8003226 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	6a3b      	ldr	r3, [r7, #32]
 800320c:	4413      	add	r3, r2
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	461a      	mov	r2, r3
 8003212:	6a3b      	ldr	r3, [r7, #32]
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	fa02 f303 	lsl.w	r3, r2, r3
 800321a:	69fa      	ldr	r2, [r7, #28]
 800321c:	4313      	orrs	r3, r2
 800321e:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8003220:	6a3b      	ldr	r3, [r7, #32]
 8003222:	3301      	adds	r3, #1
 8003224:	623b      	str	r3, [r7, #32]
 8003226:	6a3a      	ldr	r2, [r7, #32]
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	429a      	cmp	r2, r3
 800322c:	d3ec      	bcc.n	8003208 <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	69fa      	ldr	r2, [r7, #28]
 8003234:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8003236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	4413      	add	r3, r2
 8003244:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8003246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003248:	2b00      	cmp	r3, #0
 800324a:	d1d3      	bne.n	80031f4 <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8003254:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	3301      	adds	r3, #1
 800325a:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 800325c:	b2db      	uxtb	r3, r3
 800325e:	9300      	str	r3, [sp, #0]
 8003260:	4613      	mov	r3, r2
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	68b9      	ldr	r1, [r7, #8]
 8003266:	f7ff f990 	bl	800258a <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3728      	adds	r7, #40	; 0x28
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 800327a:	b480      	push	{r7}
 800327c:	b083      	sub	sp, #12
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
 8003282:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	7c1b      	ldrb	r3, [r3, #16]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d101      	bne.n	8003290 <HAL_DSI_SetLowPowerRXFilter+0x16>
 800328c:	2302      	movs	r3, #2
 800328e:	e01b      	b.n	80032c8 <HAL_DSI_SetLowPowerRXFilter+0x4e>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 80032a6:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	065a      	lsls	r2, r3, #25
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	430a      	orrs	r2, r1
 80032bc:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b087      	sub	sp, #28
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032de:	2300      	movs	r3, #0
 80032e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032e2:	e166      	b.n	80035b2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	2101      	movs	r1, #1
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	fa01 f303 	lsl.w	r3, r1, r3
 80032f0:	4013      	ands	r3, r2
 80032f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f000 8158 	beq.w	80035ac <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f003 0303 	and.w	r3, r3, #3
 8003304:	2b01      	cmp	r3, #1
 8003306:	d005      	beq.n	8003314 <HAL_GPIO_Init+0x40>
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f003 0303 	and.w	r3, r3, #3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d130      	bne.n	8003376 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	2203      	movs	r2, #3
 8003320:	fa02 f303 	lsl.w	r3, r2, r3
 8003324:	43db      	mvns	r3, r3
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	4013      	ands	r3, r2
 800332a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	68da      	ldr	r2, [r3, #12]
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	fa02 f303 	lsl.w	r3, r2, r3
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	4313      	orrs	r3, r2
 800333c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800334a:	2201      	movs	r2, #1
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	fa02 f303 	lsl.w	r3, r2, r3
 8003352:	43db      	mvns	r3, r3
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	4013      	ands	r3, r2
 8003358:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	091b      	lsrs	r3, r3, #4
 8003360:	f003 0201 	and.w	r2, r3, #1
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	fa02 f303 	lsl.w	r3, r2, r3
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	4313      	orrs	r3, r2
 800336e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f003 0303 	and.w	r3, r3, #3
 800337e:	2b03      	cmp	r3, #3
 8003380:	d017      	beq.n	80033b2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	005b      	lsls	r3, r3, #1
 800338c:	2203      	movs	r2, #3
 800338e:	fa02 f303 	lsl.w	r3, r2, r3
 8003392:	43db      	mvns	r3, r3
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	4013      	ands	r3, r2
 8003398:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	689a      	ldr	r2, [r3, #8]
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	005b      	lsls	r3, r3, #1
 80033a2:	fa02 f303 	lsl.w	r3, r2, r3
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f003 0303 	and.w	r3, r3, #3
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d123      	bne.n	8003406 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	08da      	lsrs	r2, r3, #3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	3208      	adds	r2, #8
 80033c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	f003 0307 	and.w	r3, r3, #7
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	220f      	movs	r2, #15
 80033d6:	fa02 f303 	lsl.w	r3, r2, r3
 80033da:	43db      	mvns	r3, r3
 80033dc:	693a      	ldr	r2, [r7, #16]
 80033de:	4013      	ands	r3, r2
 80033e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	691a      	ldr	r2, [r3, #16]
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	f003 0307 	and.w	r3, r3, #7
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	fa02 f303 	lsl.w	r3, r2, r3
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	08da      	lsrs	r2, r3, #3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	3208      	adds	r2, #8
 8003400:	6939      	ldr	r1, [r7, #16]
 8003402:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	005b      	lsls	r3, r3, #1
 8003410:	2203      	movs	r2, #3
 8003412:	fa02 f303 	lsl.w	r3, r2, r3
 8003416:	43db      	mvns	r3, r3
 8003418:	693a      	ldr	r2, [r7, #16]
 800341a:	4013      	ands	r3, r2
 800341c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f003 0203 	and.w	r2, r3, #3
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	fa02 f303 	lsl.w	r3, r2, r3
 800342e:	693a      	ldr	r2, [r7, #16]
 8003430:	4313      	orrs	r3, r2
 8003432:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003442:	2b00      	cmp	r3, #0
 8003444:	f000 80b2 	beq.w	80035ac <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003448:	4b61      	ldr	r3, [pc, #388]	; (80035d0 <HAL_GPIO_Init+0x2fc>)
 800344a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800344c:	4a60      	ldr	r2, [pc, #384]	; (80035d0 <HAL_GPIO_Init+0x2fc>)
 800344e:	f043 0301 	orr.w	r3, r3, #1
 8003452:	6613      	str	r3, [r2, #96]	; 0x60
 8003454:	4b5e      	ldr	r3, [pc, #376]	; (80035d0 <HAL_GPIO_Init+0x2fc>)
 8003456:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003458:	f003 0301 	and.w	r3, r3, #1
 800345c:	60bb      	str	r3, [r7, #8]
 800345e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003460:	4a5c      	ldr	r2, [pc, #368]	; (80035d4 <HAL_GPIO_Init+0x300>)
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	089b      	lsrs	r3, r3, #2
 8003466:	3302      	adds	r3, #2
 8003468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800346c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	f003 0303 	and.w	r3, r3, #3
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	220f      	movs	r2, #15
 8003478:	fa02 f303 	lsl.w	r3, r2, r3
 800347c:	43db      	mvns	r3, r3
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	4013      	ands	r3, r2
 8003482:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800348a:	d02b      	beq.n	80034e4 <HAL_GPIO_Init+0x210>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a52      	ldr	r2, [pc, #328]	; (80035d8 <HAL_GPIO_Init+0x304>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d025      	beq.n	80034e0 <HAL_GPIO_Init+0x20c>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a51      	ldr	r2, [pc, #324]	; (80035dc <HAL_GPIO_Init+0x308>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d01f      	beq.n	80034dc <HAL_GPIO_Init+0x208>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a50      	ldr	r2, [pc, #320]	; (80035e0 <HAL_GPIO_Init+0x30c>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d019      	beq.n	80034d8 <HAL_GPIO_Init+0x204>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a4f      	ldr	r2, [pc, #316]	; (80035e4 <HAL_GPIO_Init+0x310>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d013      	beq.n	80034d4 <HAL_GPIO_Init+0x200>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a4e      	ldr	r2, [pc, #312]	; (80035e8 <HAL_GPIO_Init+0x314>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d00d      	beq.n	80034d0 <HAL_GPIO_Init+0x1fc>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a4d      	ldr	r2, [pc, #308]	; (80035ec <HAL_GPIO_Init+0x318>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d007      	beq.n	80034cc <HAL_GPIO_Init+0x1f8>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a4c      	ldr	r2, [pc, #304]	; (80035f0 <HAL_GPIO_Init+0x31c>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d101      	bne.n	80034c8 <HAL_GPIO_Init+0x1f4>
 80034c4:	2307      	movs	r3, #7
 80034c6:	e00e      	b.n	80034e6 <HAL_GPIO_Init+0x212>
 80034c8:	2308      	movs	r3, #8
 80034ca:	e00c      	b.n	80034e6 <HAL_GPIO_Init+0x212>
 80034cc:	2306      	movs	r3, #6
 80034ce:	e00a      	b.n	80034e6 <HAL_GPIO_Init+0x212>
 80034d0:	2305      	movs	r3, #5
 80034d2:	e008      	b.n	80034e6 <HAL_GPIO_Init+0x212>
 80034d4:	2304      	movs	r3, #4
 80034d6:	e006      	b.n	80034e6 <HAL_GPIO_Init+0x212>
 80034d8:	2303      	movs	r3, #3
 80034da:	e004      	b.n	80034e6 <HAL_GPIO_Init+0x212>
 80034dc:	2302      	movs	r3, #2
 80034de:	e002      	b.n	80034e6 <HAL_GPIO_Init+0x212>
 80034e0:	2301      	movs	r3, #1
 80034e2:	e000      	b.n	80034e6 <HAL_GPIO_Init+0x212>
 80034e4:	2300      	movs	r3, #0
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	f002 0203 	and.w	r2, r2, #3
 80034ec:	0092      	lsls	r2, r2, #2
 80034ee:	4093      	lsls	r3, r2
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80034f6:	4937      	ldr	r1, [pc, #220]	; (80035d4 <HAL_GPIO_Init+0x300>)
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	089b      	lsrs	r3, r3, #2
 80034fc:	3302      	adds	r3, #2
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003504:	4b3b      	ldr	r3, [pc, #236]	; (80035f4 <HAL_GPIO_Init+0x320>)
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	43db      	mvns	r3, r3
 800350e:	693a      	ldr	r2, [r7, #16]
 8003510:	4013      	ands	r3, r2
 8003512:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d003      	beq.n	8003528 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	4313      	orrs	r3, r2
 8003526:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003528:	4a32      	ldr	r2, [pc, #200]	; (80035f4 <HAL_GPIO_Init+0x320>)
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800352e:	4b31      	ldr	r3, [pc, #196]	; (80035f4 <HAL_GPIO_Init+0x320>)
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	43db      	mvns	r3, r3
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	4013      	ands	r3, r2
 800353c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d003      	beq.n	8003552 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	4313      	orrs	r3, r2
 8003550:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003552:	4a28      	ldr	r2, [pc, #160]	; (80035f4 <HAL_GPIO_Init+0x320>)
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003558:	4b26      	ldr	r3, [pc, #152]	; (80035f4 <HAL_GPIO_Init+0x320>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	43db      	mvns	r3, r3
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	4013      	ands	r3, r2
 8003566:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d003      	beq.n	800357c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	4313      	orrs	r3, r2
 800357a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800357c:	4a1d      	ldr	r2, [pc, #116]	; (80035f4 <HAL_GPIO_Init+0x320>)
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003582:	4b1c      	ldr	r3, [pc, #112]	; (80035f4 <HAL_GPIO_Init+0x320>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	43db      	mvns	r3, r3
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	4013      	ands	r3, r2
 8003590:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d003      	beq.n	80035a6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80035a6:	4a13      	ldr	r2, [pc, #76]	; (80035f4 <HAL_GPIO_Init+0x320>)
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	3301      	adds	r3, #1
 80035b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	fa22 f303 	lsr.w	r3, r2, r3
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f47f ae91 	bne.w	80032e4 <HAL_GPIO_Init+0x10>
  }
}
 80035c2:	bf00      	nop
 80035c4:	bf00      	nop
 80035c6:	371c      	adds	r7, #28
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr
 80035d0:	40021000 	.word	0x40021000
 80035d4:	40010000 	.word	0x40010000
 80035d8:	48000400 	.word	0x48000400
 80035dc:	48000800 	.word	0x48000800
 80035e0:	48000c00 	.word	0x48000c00
 80035e4:	48001000 	.word	0x48001000
 80035e8:	48001400 	.word	0x48001400
 80035ec:	48001800 	.word	0x48001800
 80035f0:	48001c00 	.word	0x48001c00
 80035f4:	40010400 	.word	0x40010400

080035f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	460b      	mov	r3, r1
 8003602:	807b      	strh	r3, [r7, #2]
 8003604:	4613      	mov	r3, r2
 8003606:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003608:	787b      	ldrb	r3, [r7, #1]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d003      	beq.n	8003616 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800360e:	887a      	ldrh	r2, [r7, #2]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003614:	e002      	b.n	800361c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003616:	887a      	ldrh	r2, [r7, #2]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e08d      	b.n	8003756 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d106      	bne.n	8003654 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7fe f9f2 	bl	8001a38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2224      	movs	r2, #36	; 0x24
 8003658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f022 0201 	bic.w	r2, r2, #1
 800366a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685a      	ldr	r2, [r3, #4]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003678:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	689a      	ldr	r2, [r3, #8]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003688:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d107      	bne.n	80036a2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	689a      	ldr	r2, [r3, #8]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800369e:	609a      	str	r2, [r3, #8]
 80036a0:	e006      	b.n	80036b0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	689a      	ldr	r2, [r3, #8]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80036ae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d108      	bne.n	80036ca <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	685a      	ldr	r2, [r3, #4]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036c6:	605a      	str	r2, [r3, #4]
 80036c8:	e007      	b.n	80036da <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	685a      	ldr	r2, [r3, #4]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	6812      	ldr	r2, [r2, #0]
 80036e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80036e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68da      	ldr	r2, [r3, #12]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	691a      	ldr	r2, [r3, #16]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	430a      	orrs	r2, r1
 8003716:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	69d9      	ldr	r1, [r3, #28]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a1a      	ldr	r2, [r3, #32]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	430a      	orrs	r2, r1
 8003726:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f042 0201 	orr.w	r2, r2, #1
 8003736:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2220      	movs	r2, #32
 8003742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3708      	adds	r7, #8
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800375e:	b480      	push	{r7}
 8003760:	b083      	sub	sp, #12
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
 8003766:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800376e:	b2db      	uxtb	r3, r3
 8003770:	2b20      	cmp	r3, #32
 8003772:	d138      	bne.n	80037e6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800377a:	2b01      	cmp	r3, #1
 800377c:	d101      	bne.n	8003782 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800377e:	2302      	movs	r3, #2
 8003780:	e032      	b.n	80037e8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2224      	movs	r2, #36	; 0x24
 800378e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f022 0201 	bic.w	r2, r2, #1
 80037a0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80037b0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	6819      	ldr	r1, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	683a      	ldr	r2, [r7, #0]
 80037be:	430a      	orrs	r2, r1
 80037c0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f042 0201 	orr.w	r2, r2, #1
 80037d0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2220      	movs	r2, #32
 80037d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037e2:	2300      	movs	r3, #0
 80037e4:	e000      	b.n	80037e8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80037e6:	2302      	movs	r3, #2
  }
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b20      	cmp	r3, #32
 8003808:	d139      	bne.n	800387e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003810:	2b01      	cmp	r3, #1
 8003812:	d101      	bne.n	8003818 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003814:	2302      	movs	r3, #2
 8003816:	e033      	b.n	8003880 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2224      	movs	r2, #36	; 0x24
 8003824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f022 0201 	bic.w	r2, r2, #1
 8003836:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003846:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	021b      	lsls	r3, r3, #8
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	4313      	orrs	r3, r2
 8003850:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f042 0201 	orr.w	r2, r2, #1
 8003868:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2220      	movs	r2, #32
 800386e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800387a:	2300      	movs	r3, #0
 800387c:	e000      	b.n	8003880 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800387e:	2302      	movs	r3, #2
  }
}
 8003880:	4618      	mov	r0, r3
 8003882:	3714      	adds	r7, #20
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d101      	bne.n	800389e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e0bf      	b.n	8003a1e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d106      	bne.n	80038b8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f7fe f962 	bl	8001b7c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2202      	movs	r2, #2
 80038bc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	699a      	ldr	r2, [r3, #24]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80038ce:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6999      	ldr	r1, [r3, #24]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685a      	ldr	r2, [r3, #4]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80038e4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	430a      	orrs	r2, r1
 80038f2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6899      	ldr	r1, [r3, #8]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	4b4a      	ldr	r3, [pc, #296]	; (8003a28 <HAL_LTDC_Init+0x19c>)
 8003900:	400b      	ands	r3, r1
 8003902:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	695b      	ldr	r3, [r3, #20]
 8003908:	041b      	lsls	r3, r3, #16
 800390a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	6899      	ldr	r1, [r3, #8]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	699a      	ldr	r2, [r3, #24]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	431a      	orrs	r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	430a      	orrs	r2, r1
 8003920:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68d9      	ldr	r1, [r3, #12]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	4b3e      	ldr	r3, [pc, #248]	; (8003a28 <HAL_LTDC_Init+0x19c>)
 800392e:	400b      	ands	r3, r1
 8003930:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	69db      	ldr	r3, [r3, #28]
 8003936:	041b      	lsls	r3, r3, #16
 8003938:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68d9      	ldr	r1, [r3, #12]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a1a      	ldr	r2, [r3, #32]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	431a      	orrs	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	430a      	orrs	r2, r1
 800394e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	6919      	ldr	r1, [r3, #16]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	4b33      	ldr	r3, [pc, #204]	; (8003a28 <HAL_LTDC_Init+0x19c>)
 800395c:	400b      	ands	r3, r1
 800395e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003964:	041b      	lsls	r3, r3, #16
 8003966:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6919      	ldr	r1, [r3, #16]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	431a      	orrs	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	430a      	orrs	r2, r1
 800397c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	6959      	ldr	r1, [r3, #20]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	4b27      	ldr	r3, [pc, #156]	; (8003a28 <HAL_LTDC_Init+0x19c>)
 800398a:	400b      	ands	r3, r1
 800398c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003992:	041b      	lsls	r3, r3, #16
 8003994:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	6959      	ldr	r1, [r3, #20]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	431a      	orrs	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	430a      	orrs	r2, r1
 80039aa:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039b2:	021b      	lsls	r3, r3, #8
 80039b4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80039bc:	041b      	lsls	r3, r3, #16
 80039be:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80039ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80039d6:	68ba      	ldr	r2, [r7, #8]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	4313      	orrs	r3, r2
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80039e2:	431a      	orrs	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	430a      	orrs	r2, r1
 80039ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f042 0206 	orr.w	r2, r2, #6
 80039fa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	699a      	ldr	r2, [r3, #24]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f042 0201 	orr.w	r2, r2, #1
 8003a0a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3710      	adds	r7, #16
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	f000f800 	.word	0xf000f800

08003a2c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003a2c:	b5b0      	push	{r4, r5, r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d101      	bne.n	8003a46 <HAL_LTDC_ConfigLayer+0x1a>
 8003a42:	2302      	movs	r3, #2
 8003a44:	e02c      	b.n	8003aa0 <HAL_LTDC_ConfigLayer+0x74>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2202      	movs	r2, #2
 8003a52:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2134      	movs	r1, #52	; 0x34
 8003a5c:	fb01 f303 	mul.w	r3, r1, r3
 8003a60:	4413      	add	r3, r2
 8003a62:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	4614      	mov	r4, r2
 8003a6a:	461d      	mov	r5, r3
 8003a6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a78:	682b      	ldr	r3, [r5, #0]
 8003a7a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	68b9      	ldr	r1, [r7, #8]
 8003a80:	68f8      	ldr	r0, [r7, #12]
 8003a82:	f000 f811 	bl	8003aa8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3710      	adds	r7, #16
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bdb0      	pop	{r4, r5, r7, pc}

08003aa8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b089      	sub	sp, #36	; 0x24
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	685a      	ldr	r2, [r3, #4]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	0c1b      	lsrs	r3, r3, #16
 8003ac0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ac4:	4413      	add	r3, r2
 8003ac6:	041b      	lsls	r3, r3, #16
 8003ac8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	461a      	mov	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	01db      	lsls	r3, r3, #7
 8003ad4:	4413      	add	r3, r2
 8003ad6:	3384      	adds	r3, #132	; 0x84
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	6812      	ldr	r2, [r2, #0]
 8003ade:	4611      	mov	r1, r2
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	01d2      	lsls	r2, r2, #7
 8003ae4:	440a      	add	r2, r1
 8003ae6:	3284      	adds	r2, #132	; 0x84
 8003ae8:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 8003aec:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	0c1b      	lsrs	r3, r3, #16
 8003afa:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003afe:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003b00:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4619      	mov	r1, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	01db      	lsls	r3, r3, #7
 8003b0c:	440b      	add	r3, r1
 8003b0e:	3384      	adds	r3, #132	; 0x84
 8003b10:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003b16:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	68da      	ldr	r2, [r3, #12]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b26:	4413      	add	r3, r2
 8003b28:	041b      	lsls	r3, r3, #16
 8003b2a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	461a      	mov	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	01db      	lsls	r3, r3, #7
 8003b36:	4413      	add	r3, r2
 8003b38:	3384      	adds	r3, #132	; 0x84
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	6812      	ldr	r2, [r2, #0]
 8003b40:	4611      	mov	r1, r2
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	01d2      	lsls	r2, r2, #7
 8003b46:	440a      	add	r2, r1
 8003b48:	3284      	adds	r2, #132	; 0x84
 8003b4a:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 8003b4e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	689a      	ldr	r2, [r3, #8]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b5e:	4413      	add	r3, r2
 8003b60:	1c5a      	adds	r2, r3, #1
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4619      	mov	r1, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	01db      	lsls	r3, r3, #7
 8003b6c:	440b      	add	r3, r1
 8003b6e:	3384      	adds	r3, #132	; 0x84
 8003b70:	4619      	mov	r1, r3
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	01db      	lsls	r3, r3, #7
 8003b82:	4413      	add	r3, r2
 8003b84:	3384      	adds	r3, #132	; 0x84
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	6812      	ldr	r2, [r2, #0]
 8003b8c:	4611      	mov	r1, r2
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	01d2      	lsls	r2, r2, #7
 8003b92:	440a      	add	r2, r1
 8003b94:	3284      	adds	r2, #132	; 0x84
 8003b96:	f023 0307 	bic.w	r3, r3, #7
 8003b9a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	01db      	lsls	r3, r3, #7
 8003ba6:	4413      	add	r3, r2
 8003ba8:	3384      	adds	r3, #132	; 0x84
 8003baa:	461a      	mov	r2, r3
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003bb8:	021b      	lsls	r3, r3, #8
 8003bba:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003bc2:	041b      	lsls	r3, r3, #16
 8003bc4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	061b      	lsls	r3, r3, #24
 8003bcc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	01db      	lsls	r3, r3, #7
 8003bd8:	4413      	add	r3, r2
 8003bda:	3384      	adds	r3, #132	; 0x84
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	461a      	mov	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	01db      	lsls	r3, r3, #7
 8003be8:	4413      	add	r3, r2
 8003bea:	3384      	adds	r3, #132	; 0x84
 8003bec:	461a      	mov	r2, r3
 8003bee:	2300      	movs	r3, #0
 8003bf0:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	431a      	orrs	r2, r3
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	431a      	orrs	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4619      	mov	r1, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	01db      	lsls	r3, r3, #7
 8003c0c:	440b      	add	r3, r1
 8003c0e:	3384      	adds	r3, #132	; 0x84
 8003c10:	4619      	mov	r1, r3
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	01db      	lsls	r3, r3, #7
 8003c22:	4413      	add	r3, r2
 8003c24:	3384      	adds	r3, #132	; 0x84
 8003c26:	695b      	ldr	r3, [r3, #20]
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	6812      	ldr	r2, [r2, #0]
 8003c2c:	4611      	mov	r1, r2
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	01d2      	lsls	r2, r2, #7
 8003c32:	440a      	add	r2, r1
 8003c34:	3284      	adds	r2, #132	; 0x84
 8003c36:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c3a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	461a      	mov	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	01db      	lsls	r3, r3, #7
 8003c46:	4413      	add	r3, r2
 8003c48:	3384      	adds	r3, #132	; 0x84
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	695b      	ldr	r3, [r3, #20]
 8003c50:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	461a      	mov	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	01db      	lsls	r3, r3, #7
 8003c5c:	4413      	add	r3, r2
 8003c5e:	3384      	adds	r3, #132	; 0x84
 8003c60:	69db      	ldr	r3, [r3, #28]
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	6812      	ldr	r2, [r2, #0]
 8003c66:	4611      	mov	r1, r2
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	01d2      	lsls	r2, r2, #7
 8003c6c:	440a      	add	r2, r1
 8003c6e:	3284      	adds	r2, #132	; 0x84
 8003c70:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003c74:	f023 0307 	bic.w	r3, r3, #7
 8003c78:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	69da      	ldr	r2, [r3, #28]
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	68f9      	ldr	r1, [r7, #12]
 8003c84:	6809      	ldr	r1, [r1, #0]
 8003c86:	4608      	mov	r0, r1
 8003c88:	6879      	ldr	r1, [r7, #4]
 8003c8a:	01c9      	lsls	r1, r1, #7
 8003c8c:	4401      	add	r1, r0
 8003c8e:	3184      	adds	r1, #132	; 0x84
 8003c90:	4313      	orrs	r3, r2
 8003c92:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	461a      	mov	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	01db      	lsls	r3, r3, #7
 8003c9e:	4413      	add	r3, r2
 8003ca0:	3384      	adds	r3, #132	; 0x84
 8003ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	461a      	mov	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	01db      	lsls	r3, r3, #7
 8003cae:	4413      	add	r3, r2
 8003cb0:	3384      	adds	r3, #132	; 0x84
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	01db      	lsls	r3, r3, #7
 8003cc2:	4413      	add	r3, r2
 8003cc4:	3384      	adds	r3, #132	; 0x84
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ccc:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d102      	bne.n	8003cdc <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8003cd6:	2304      	movs	r3, #4
 8003cd8:	61fb      	str	r3, [r7, #28]
 8003cda:	e01b      	b.n	8003d14 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d102      	bne.n	8003cea <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	61fb      	str	r3, [r7, #28]
 8003ce8:	e014      	b.n	8003d14 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	2b04      	cmp	r3, #4
 8003cf0:	d00b      	beq.n	8003d0a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d007      	beq.n	8003d0a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003cfe:	2b03      	cmp	r3, #3
 8003d00:	d003      	beq.n	8003d0a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003d06:	2b07      	cmp	r3, #7
 8003d08:	d102      	bne.n	8003d10 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	61fb      	str	r3, [r7, #28]
 8003d0e:	e001      	b.n	8003d14 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8003d10:	2301      	movs	r3, #1
 8003d12:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	461a      	mov	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	01db      	lsls	r3, r3, #7
 8003d1e:	4413      	add	r3, r2
 8003d20:	3384      	adds	r3, #132	; 0x84
 8003d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	6812      	ldr	r2, [r2, #0]
 8003d28:	4611      	mov	r1, r2
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	01d2      	lsls	r2, r2, #7
 8003d2e:	440a      	add	r2, r1
 8003d30:	3284      	adds	r2, #132	; 0x84
 8003d32:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8003d36:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d3c:	69fa      	ldr	r2, [r7, #28]
 8003d3e:	fb02 f303 	mul.w	r3, r2, r3
 8003d42:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	6859      	ldr	r1, [r3, #4]
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	1acb      	subs	r3, r1, r3
 8003d4e:	69f9      	ldr	r1, [r7, #28]
 8003d50:	fb01 f303 	mul.w	r3, r1, r3
 8003d54:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003d56:	68f9      	ldr	r1, [r7, #12]
 8003d58:	6809      	ldr	r1, [r1, #0]
 8003d5a:	4608      	mov	r0, r1
 8003d5c:	6879      	ldr	r1, [r7, #4]
 8003d5e:	01c9      	lsls	r1, r1, #7
 8003d60:	4401      	add	r1, r0
 8003d62:	3184      	adds	r1, #132	; 0x84
 8003d64:	4313      	orrs	r3, r2
 8003d66:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	01db      	lsls	r3, r3, #7
 8003d72:	4413      	add	r3, r2
 8003d74:	3384      	adds	r3, #132	; 0x84
 8003d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	6812      	ldr	r2, [r2, #0]
 8003d7c:	4611      	mov	r1, r2
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	01d2      	lsls	r2, r2, #7
 8003d82:	440a      	add	r2, r1
 8003d84:	3284      	adds	r2, #132	; 0x84
 8003d86:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003d8a:	f023 0307 	bic.w	r3, r3, #7
 8003d8e:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	461a      	mov	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	01db      	lsls	r3, r3, #7
 8003d9a:	4413      	add	r3, r2
 8003d9c:	3384      	adds	r3, #132	; 0x84
 8003d9e:	461a      	mov	r2, r3
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	461a      	mov	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	01db      	lsls	r3, r3, #7
 8003db0:	4413      	add	r3, r2
 8003db2:	3384      	adds	r3, #132	; 0x84
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	6812      	ldr	r2, [r2, #0]
 8003dba:	4611      	mov	r1, r2
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	01d2      	lsls	r2, r2, #7
 8003dc0:	440a      	add	r2, r1
 8003dc2:	3284      	adds	r2, #132	; 0x84
 8003dc4:	f043 0301 	orr.w	r3, r3, #1
 8003dc8:	6013      	str	r3, [r2, #0]
}
 8003dca:	bf00      	nop
 8003dcc:	3724      	adds	r7, #36	; 0x24
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
	...

08003dd8 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af02      	add	r7, sp, #8
 8003dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003de0:	2300      	movs	r3, #0
 8003de2:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8003de4:	f7fe fa90 	bl	8002308 <HAL_GetTick>
 8003de8:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d102      	bne.n	8003df6 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	73fb      	strb	r3, [r7, #15]
 8003df4:	e092      	b.n	8003f1c <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	f040 808b 	bne.w	8003f1c <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f7fd fefc 	bl	8001c04 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8003e0c:	f241 3188 	movw	r1, #5000	; 0x1388
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 f88b 	bl	8003f2c <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	689a      	ldr	r2, [r3, #8]
 8003e1c:	4b42      	ldr	r3, [pc, #264]	; (8003f28 <HAL_OSPI_Init+0x150>)
 8003e1e:	4013      	ands	r3, r2
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	68d1      	ldr	r1, [r2, #12]
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	6912      	ldr	r2, [r2, #16]
 8003e28:	3a01      	subs	r2, #1
 8003e2a:	0412      	lsls	r2, r2, #16
 8003e2c:	4311      	orrs	r1, r2
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	6952      	ldr	r2, [r2, #20]
 8003e32:	3a01      	subs	r2, #1
 8003e34:	0212      	lsls	r2, r2, #8
 8003e36:	4311      	orrs	r1, r2
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003e3c:	4311      	orrs	r1, r2
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	69d2      	ldr	r2, [r2, #28]
 8003e42:	4311      	orrs	r1, r2
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	6812      	ldr	r2, [r2, #0]
 8003e48:	430b      	orrs	r3, r1
 8003e4a:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	0412      	lsls	r2, r2, #16
 8003e56:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	3b01      	subs	r3, #1
 8003e68:	021a      	lsls	r2, r3, #8
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e76:	9300      	str	r3, [sp, #0]
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	2120      	movs	r1, #32
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 fb98 	bl	80045b4 <OSPI_WaitFlagStateUntilTimeout>
 8003e84:	4603      	mov	r3, r0
 8003e86:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003e88:	7bfb      	ldrb	r3, [r7, #15]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d146      	bne.n	8003f1c <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a1b      	ldr	r3, [r3, #32]
 8003e9c:	1e5a      	subs	r2, r3, #1
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	689a      	ldr	r2, [r3, #8]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	430a      	orrs	r2, r1
 8003eba:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003ec4:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed0:	431a      	orrs	r2, r3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	430a      	orrs	r2, r1
 8003ed8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f042 0201 	orr.w	r2, r2, #1
 8003eea:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d107      	bne.n	8003f04 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	689a      	ldr	r2, [r3, #8]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f042 0202 	orr.w	r2, r2, #2
 8003f02:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f0c:	d103      	bne.n	8003f16 <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2201      	movs	r2, #1
 8003f12:	645a      	str	r2, [r3, #68]	; 0x44
 8003f14:	e002      	b.n	8003f1c <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2202      	movs	r2, #2
 8003f1a:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 8003f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3710      	adds	r7, #16
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	f8e0f8f4 	.word	0xf8e0f8f4

08003f2c <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	683a      	ldr	r2, [r7, #0]
 8003f3a:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	370c      	adds	r7, #12
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
	...

08003f4c <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b092      	sub	sp, #72	; 0x48
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a08      	ldr	r2, [pc, #32]	; (8003f8c <HAL_OSPIM_Config+0x40>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d105      	bne.n	8003f7a <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 8003f72:	2301      	movs	r3, #1
 8003f74:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8003f78:	e004      	b.n	8003f84 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003f84:	2300      	movs	r3, #0
 8003f86:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003f8a:	e01f      	b.n	8003fcc <HAL_OSPIM_Config+0x80>
 8003f8c:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8003f90:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003f94:	3301      	adds	r3, #1
 8003f96:	b2d8      	uxtb	r0, r3
 8003f98:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003f9c:	f107 0114 	add.w	r1, r7, #20
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	4413      	add	r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	440b      	add	r3, r1
 8003faa:	4619      	mov	r1, r3
 8003fac:	f000 fb3a 	bl	8004624 <OSPIM_GetConfig>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d005      	beq.n	8003fc2 <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2208      	movs	r2, #8
 8003fc0:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003fc2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003fcc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d9dd      	bls.n	8003f90 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8003fd4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	f040 82de 	bne.w	800459a <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8003fde:	4bc6      	ldr	r3, [pc, #792]	; (80042f8 <HAL_OSPIM_Config+0x3ac>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00b      	beq.n	8004002 <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8003fea:	4bc3      	ldr	r3, [pc, #780]	; (80042f8 <HAL_OSPIM_Config+0x3ac>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4ac2      	ldr	r2, [pc, #776]	; (80042f8 <HAL_OSPIM_Config+0x3ac>)
 8003ff0:	f023 0301 	bic.w	r3, r3, #1
 8003ff4:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8003ff6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003ffa:	f043 0301 	orr.w	r3, r3, #1
 8003ffe:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8004002:	4bbe      	ldr	r3, [pc, #760]	; (80042fc <HAL_OSPIM_Config+0x3b0>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00b      	beq.n	8004026 <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800400e:	4bbb      	ldr	r3, [pc, #748]	; (80042fc <HAL_OSPIM_Config+0x3b0>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4aba      	ldr	r2, [pc, #744]	; (80042fc <HAL_OSPIM_Config+0x3b0>)
 8004014:	f023 0301 	bic.w	r3, r3, #1
 8004018:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 800401a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800401e:	f043 0302 	orr.w	r3, r3, #2
 8004022:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8004026:	49b6      	ldr	r1, [pc, #728]	; (8004300 <HAL_OSPIM_Config+0x3b4>)
 8004028:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800402a:	4613      	mov	r3, r2
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	4413      	add	r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	3348      	adds	r3, #72	; 0x48
 8004034:	443b      	add	r3, r7
 8004036:	3b2c      	subs	r3, #44	; 0x2c
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	3b01      	subs	r3, #1
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	440b      	add	r3, r1
 8004040:	6859      	ldr	r1, [r3, #4]
 8004042:	48af      	ldr	r0, [pc, #700]	; (8004300 <HAL_OSPIM_Config+0x3b4>)
 8004044:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004046:	4613      	mov	r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	4413      	add	r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	3348      	adds	r3, #72	; 0x48
 8004050:	443b      	add	r3, r7
 8004052:	3b2c      	subs	r3, #44	; 0x2c
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	3b01      	subs	r3, #1
 8004058:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	4403      	add	r3, r0
 8004060:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 8004062:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004064:	4613      	mov	r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	4413      	add	r3, r2
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	3348      	adds	r3, #72	; 0x48
 800406e:	443b      	add	r3, r7
 8004070:	3b34      	subs	r3, #52	; 0x34
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	f000 80a1 	beq.w	80041bc <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 800407a:	49a1      	ldr	r1, [pc, #644]	; (8004300 <HAL_OSPIM_Config+0x3b4>)
 800407c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800407e:	4613      	mov	r3, r2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	4413      	add	r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	3348      	adds	r3, #72	; 0x48
 8004088:	443b      	add	r3, r7
 800408a:	3b34      	subs	r3, #52	; 0x34
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	3b01      	subs	r3, #1
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	440b      	add	r3, r1
 8004094:	6859      	ldr	r1, [r3, #4]
 8004096:	489a      	ldr	r0, [pc, #616]	; (8004300 <HAL_OSPIM_Config+0x3b4>)
 8004098:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800409a:	4613      	mov	r3, r2
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	4413      	add	r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	3348      	adds	r3, #72	; 0x48
 80040a4:	443b      	add	r3, r7
 80040a6:	3b34      	subs	r3, #52	; 0x34
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	3b01      	subs	r3, #1
 80040ac:	f021 0201 	bic.w	r2, r1, #1
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	4403      	add	r3, r0
 80040b4:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 80040b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040b8:	4613      	mov	r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	4413      	add	r3, r2
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	3348      	adds	r3, #72	; 0x48
 80040c2:	443b      	add	r3, r7
 80040c4:	3b30      	subs	r3, #48	; 0x30
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d01d      	beq.n	8004108 <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 80040cc:	498c      	ldr	r1, [pc, #560]	; (8004300 <HAL_OSPIM_Config+0x3b4>)
 80040ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040d0:	4613      	mov	r3, r2
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	4413      	add	r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	3348      	adds	r3, #72	; 0x48
 80040da:	443b      	add	r3, r7
 80040dc:	3b30      	subs	r3, #48	; 0x30
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	3b01      	subs	r3, #1
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	440b      	add	r3, r1
 80040e6:	6859      	ldr	r1, [r3, #4]
 80040e8:	4885      	ldr	r0, [pc, #532]	; (8004300 <HAL_OSPIM_Config+0x3b4>)
 80040ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040ec:	4613      	mov	r3, r2
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	4413      	add	r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	3348      	adds	r3, #72	; 0x48
 80040f6:	443b      	add	r3, r7
 80040f8:	3b30      	subs	r3, #48	; 0x30
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	3b01      	subs	r3, #1
 80040fe:	f021 0210 	bic.w	r2, r1, #16
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4403      	add	r3, r0
 8004106:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004108:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800410a:	4613      	mov	r3, r2
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	4413      	add	r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	3348      	adds	r3, #72	; 0x48
 8004114:	443b      	add	r3, r7
 8004116:	3b28      	subs	r3, #40	; 0x28
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d021      	beq.n	8004162 <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 800411e:	4978      	ldr	r1, [pc, #480]	; (8004300 <HAL_OSPIM_Config+0x3b4>)
 8004120:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004122:	4613      	mov	r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	4413      	add	r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	3348      	adds	r3, #72	; 0x48
 800412c:	443b      	add	r3, r7
 800412e:	3b28      	subs	r3, #40	; 0x28
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	3b01      	subs	r3, #1
 8004134:	f003 0301 	and.w	r3, r3, #1
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	440b      	add	r3, r1
 800413c:	6859      	ldr	r1, [r3, #4]
 800413e:	4870      	ldr	r0, [pc, #448]	; (8004300 <HAL_OSPIM_Config+0x3b4>)
 8004140:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004142:	4613      	mov	r3, r2
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	4413      	add	r3, r2
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	3348      	adds	r3, #72	; 0x48
 800414c:	443b      	add	r3, r7
 800414e:	3b28      	subs	r3, #40	; 0x28
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	3b01      	subs	r3, #1
 8004154:	f003 0301 	and.w	r3, r3, #1
 8004158:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	4403      	add	r3, r0
 8004160:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004162:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004164:	4613      	mov	r3, r2
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	4413      	add	r3, r2
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	3348      	adds	r3, #72	; 0x48
 800416e:	443b      	add	r3, r7
 8004170:	3b24      	subs	r3, #36	; 0x24
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d021      	beq.n	80041bc <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8004178:	4961      	ldr	r1, [pc, #388]	; (8004300 <HAL_OSPIM_Config+0x3b4>)
 800417a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800417c:	4613      	mov	r3, r2
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	4413      	add	r3, r2
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	3348      	adds	r3, #72	; 0x48
 8004186:	443b      	add	r3, r7
 8004188:	3b24      	subs	r3, #36	; 0x24
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	3b01      	subs	r3, #1
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	440b      	add	r3, r1
 8004196:	6859      	ldr	r1, [r3, #4]
 8004198:	4859      	ldr	r0, [pc, #356]	; (8004300 <HAL_OSPIM_Config+0x3b4>)
 800419a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800419c:	4613      	mov	r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	4413      	add	r3, r2
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	3348      	adds	r3, #72	; 0x48
 80041a6:	443b      	add	r3, r7
 80041a8:	3b24      	subs	r3, #36	; 0x24
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	3b01      	subs	r3, #1
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	4403      	add	r3, r0
 80041ba:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	6819      	ldr	r1, [r3, #0]
 80041c0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80041c4:	4613      	mov	r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	4413      	add	r3, r2
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	3348      	adds	r3, #72	; 0x48
 80041ce:	443b      	add	r3, r7
 80041d0:	3b34      	subs	r3, #52	; 0x34
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4299      	cmp	r1, r3
 80041d6:	d038      	beq.n	800424a <HAL_OSPIM_Config+0x2fe>
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	6859      	ldr	r1, [r3, #4]
 80041dc:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80041e0:	4613      	mov	r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	4413      	add	r3, r2
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	3348      	adds	r3, #72	; 0x48
 80041ea:	443b      	add	r3, r7
 80041ec:	3b30      	subs	r3, #48	; 0x30
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4299      	cmp	r1, r3
 80041f2:	d02a      	beq.n	800424a <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	6899      	ldr	r1, [r3, #8]
 80041f8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80041fc:	4613      	mov	r3, r2
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	4413      	add	r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	3348      	adds	r3, #72	; 0x48
 8004206:	443b      	add	r3, r7
 8004208:	3b2c      	subs	r3, #44	; 0x2c
 800420a:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800420c:	4299      	cmp	r1, r3
 800420e:	d01c      	beq.n	800424a <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	68d9      	ldr	r1, [r3, #12]
 8004214:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004218:	4613      	mov	r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	4413      	add	r3, r2
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	3348      	adds	r3, #72	; 0x48
 8004222:	443b      	add	r3, r7
 8004224:	3b28      	subs	r3, #40	; 0x28
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4299      	cmp	r1, r3
 800422a:	d00e      	beq.n	800424a <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	6919      	ldr	r1, [r3, #16]
 8004230:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004234:	4613      	mov	r3, r2
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	4413      	add	r3, r2
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	3348      	adds	r3, #72	; 0x48
 800423e:	443b      	add	r3, r7
 8004240:	3b24      	subs	r3, #36	; 0x24
 8004242:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004244:	4299      	cmp	r1, r3
 8004246:	f040 80d3 	bne.w	80043f0 <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 800424a:	492d      	ldr	r1, [pc, #180]	; (8004300 <HAL_OSPIM_Config+0x3b4>)
 800424c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004250:	4613      	mov	r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	4413      	add	r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	3348      	adds	r3, #72	; 0x48
 800425a:	443b      	add	r3, r7
 800425c:	3b34      	subs	r3, #52	; 0x34
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	3b01      	subs	r3, #1
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	440b      	add	r3, r1
 8004266:	6859      	ldr	r1, [r3, #4]
 8004268:	4825      	ldr	r0, [pc, #148]	; (8004300 <HAL_OSPIM_Config+0x3b4>)
 800426a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800426e:	4613      	mov	r3, r2
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	4413      	add	r3, r2
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	3348      	adds	r3, #72	; 0x48
 8004278:	443b      	add	r3, r7
 800427a:	3b34      	subs	r3, #52	; 0x34
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	3b01      	subs	r3, #1
 8004280:	f021 0201 	bic.w	r2, r1, #1
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	4403      	add	r3, r0
 8004288:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800428a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800428e:	4613      	mov	r3, r2
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	4413      	add	r3, r2
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	3348      	adds	r3, #72	; 0x48
 8004298:	443b      	add	r3, r7
 800429a:	3b30      	subs	r3, #48	; 0x30
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d01f      	beq.n	80042e2 <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 80042a2:	4917      	ldr	r1, [pc, #92]	; (8004300 <HAL_OSPIM_Config+0x3b4>)
 80042a4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80042a8:	4613      	mov	r3, r2
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	4413      	add	r3, r2
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	3348      	adds	r3, #72	; 0x48
 80042b2:	443b      	add	r3, r7
 80042b4:	3b30      	subs	r3, #48	; 0x30
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	3b01      	subs	r3, #1
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	440b      	add	r3, r1
 80042be:	6859      	ldr	r1, [r3, #4]
 80042c0:	480f      	ldr	r0, [pc, #60]	; (8004300 <HAL_OSPIM_Config+0x3b4>)
 80042c2:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80042c6:	4613      	mov	r3, r2
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	4413      	add	r3, r2
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	3348      	adds	r3, #72	; 0x48
 80042d0:	443b      	add	r3, r7
 80042d2:	3b30      	subs	r3, #48	; 0x30
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	3b01      	subs	r3, #1
 80042d8:	f021 0210 	bic.w	r2, r1, #16
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	4403      	add	r3, r0
 80042e0:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 80042e2:	4907      	ldr	r1, [pc, #28]	; (8004300 <HAL_OSPIM_Config+0x3b4>)
 80042e4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80042e8:	4613      	mov	r3, r2
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	4413      	add	r3, r2
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	3348      	adds	r3, #72	; 0x48
 80042f2:	443b      	add	r3, r7
 80042f4:	3b2c      	subs	r3, #44	; 0x2c
 80042f6:	e005      	b.n	8004304 <HAL_OSPIM_Config+0x3b8>
 80042f8:	a0001000 	.word	0xa0001000
 80042fc:	a0001400 	.word	0xa0001400
 8004300:	50061c00 	.word	0x50061c00
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	3b01      	subs	r3, #1
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	440b      	add	r3, r1
 800430c:	6859      	ldr	r1, [r3, #4]
 800430e:	48a6      	ldr	r0, [pc, #664]	; (80045a8 <HAL_OSPIM_Config+0x65c>)
 8004310:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004314:	4613      	mov	r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	4413      	add	r3, r2
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	3348      	adds	r3, #72	; 0x48
 800431e:	443b      	add	r3, r7
 8004320:	3b2c      	subs	r3, #44	; 0x2c
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	3b01      	subs	r3, #1
 8004326:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	4403      	add	r3, r0
 800432e:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004330:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004334:	4613      	mov	r3, r2
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	4413      	add	r3, r2
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	3348      	adds	r3, #72	; 0x48
 800433e:	443b      	add	r3, r7
 8004340:	3b28      	subs	r3, #40	; 0x28
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d023      	beq.n	8004390 <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004348:	4997      	ldr	r1, [pc, #604]	; (80045a8 <HAL_OSPIM_Config+0x65c>)
 800434a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800434e:	4613      	mov	r3, r2
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	4413      	add	r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	3348      	adds	r3, #72	; 0x48
 8004358:	443b      	add	r3, r7
 800435a:	3b28      	subs	r3, #40	; 0x28
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	3b01      	subs	r3, #1
 8004360:	f003 0301 	and.w	r3, r3, #1
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	440b      	add	r3, r1
 8004368:	6859      	ldr	r1, [r3, #4]
 800436a:	488f      	ldr	r0, [pc, #572]	; (80045a8 <HAL_OSPIM_Config+0x65c>)
 800436c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004370:	4613      	mov	r3, r2
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	4413      	add	r3, r2
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	3348      	adds	r3, #72	; 0x48
 800437a:	443b      	add	r3, r7
 800437c:	3b28      	subs	r3, #40	; 0x28
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	3b01      	subs	r3, #1
 8004382:	f003 0301 	and.w	r3, r3, #1
 8004386:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	4403      	add	r3, r0
 800438e:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004390:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004394:	4613      	mov	r3, r2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	4413      	add	r3, r2
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	3348      	adds	r3, #72	; 0x48
 800439e:	443b      	add	r3, r7
 80043a0:	3b24      	subs	r3, #36	; 0x24
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d023      	beq.n	80043f0 <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80043a8:	497f      	ldr	r1, [pc, #508]	; (80045a8 <HAL_OSPIM_Config+0x65c>)
 80043aa:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80043ae:	4613      	mov	r3, r2
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	4413      	add	r3, r2
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	3348      	adds	r3, #72	; 0x48
 80043b8:	443b      	add	r3, r7
 80043ba:	3b24      	subs	r3, #36	; 0x24
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	3b01      	subs	r3, #1
 80043c0:	f003 0301 	and.w	r3, r3, #1
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	440b      	add	r3, r1
 80043c8:	6859      	ldr	r1, [r3, #4]
 80043ca:	4877      	ldr	r0, [pc, #476]	; (80045a8 <HAL_OSPIM_Config+0x65c>)
 80043cc:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80043d0:	4613      	mov	r3, r2
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	4413      	add	r3, r2
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	3348      	adds	r3, #72	; 0x48
 80043da:	443b      	add	r3, r7
 80043dc:	3b24      	subs	r3, #36	; 0x24
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	3b01      	subs	r3, #1
 80043e2:	f003 0301 	and.w	r3, r3, #1
 80043e6:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	4403      	add	r3, r0
 80043ee:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 80043f0:	4a6d      	ldr	r2, [pc, #436]	; (80045a8 <HAL_OSPIM_Config+0x65c>)
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	3b01      	subs	r3, #1
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	4413      	add	r3, r2
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004402:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004404:	025b      	lsls	r3, r3, #9
 8004406:	431a      	orrs	r2, r3
 8004408:	4967      	ldr	r1, [pc, #412]	; (80045a8 <HAL_OSPIM_Config+0x65c>)
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	3b01      	subs	r3, #1
 8004410:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	440b      	add	r3, r1
 8004418:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 800441a:	4a63      	ldr	r2, [pc, #396]	; (80045a8 <HAL_OSPIM_Config+0x65c>)
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	3b01      	subs	r3, #1
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	4413      	add	r3, r2
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f023 0203 	bic.w	r2, r3, #3
 800442c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800442e:	005b      	lsls	r3, r3, #1
 8004430:	431a      	orrs	r2, r3
 8004432:	495d      	ldr	r1, [pc, #372]	; (80045a8 <HAL_OSPIM_Config+0x65c>)
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	3b01      	subs	r3, #1
 800443a:	f042 0201 	orr.w	r2, r2, #1
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	440b      	add	r3, r1
 8004442:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d014      	beq.n	8004476 <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 800444c:	4a56      	ldr	r2, [pc, #344]	; (80045a8 <HAL_OSPIM_Config+0x65c>)
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	3b01      	subs	r3, #1
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	4413      	add	r3, r2
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800445e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004460:	015b      	lsls	r3, r3, #5
 8004462:	431a      	orrs	r2, r3
 8004464:	4950      	ldr	r1, [pc, #320]	; (80045a8 <HAL_OSPIM_Config+0x65c>)
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	3b01      	subs	r3, #1
 800446c:	f042 0210 	orr.w	r2, r2, #16
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	440b      	add	r3, r1
 8004474:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d019      	beq.n	80044b6 <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004482:	4a49      	ldr	r2, [pc, #292]	; (80045a8 <HAL_OSPIM_Config+0x65c>)
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	3b01      	subs	r3, #1
 800448a:	f003 0301 	and.w	r3, r3, #1
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	4413      	add	r3, r2
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004498:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800449a:	049b      	lsls	r3, r3, #18
 800449c:	431a      	orrs	r2, r3
 800449e:	4942      	ldr	r1, [pc, #264]	; (80045a8 <HAL_OSPIM_Config+0x65c>)
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	3b01      	subs	r3, #1
 80044a6:	f003 0301 	and.w	r3, r3, #1
 80044aa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	440b      	add	r3, r1
 80044b2:	605a      	str	r2, [r3, #4]
 80044b4:	e01c      	b.n	80044f0 <HAL_OSPIM_Config+0x5a4>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d018      	beq.n	80044f0 <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80044be:	4a3a      	ldr	r2, [pc, #232]	; (80045a8 <HAL_OSPIM_Config+0x65c>)
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	3b01      	subs	r3, #1
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	4413      	add	r3, r2
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80044d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044d6:	069b      	lsls	r3, r3, #26
 80044d8:	431a      	orrs	r2, r3
 80044da:	4933      	ldr	r1, [pc, #204]	; (80045a8 <HAL_OSPIM_Config+0x65c>)
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	3b01      	subs	r3, #1
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	440b      	add	r3, r1
 80044ee:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d019      	beq.n	8004530 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80044fc:	4a2a      	ldr	r2, [pc, #168]	; (80045a8 <HAL_OSPIM_Config+0x65c>)
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	3b01      	subs	r3, #1
 8004504:	f003 0301 	and.w	r3, r3, #1
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	4413      	add	r3, r2
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004512:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004514:	049b      	lsls	r3, r3, #18
 8004516:	431a      	orrs	r2, r3
 8004518:	4923      	ldr	r1, [pc, #140]	; (80045a8 <HAL_OSPIM_Config+0x65c>)
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	3b01      	subs	r3, #1
 8004520:	f003 0301 	and.w	r3, r3, #1
 8004524:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	440b      	add	r3, r1
 800452c:	605a      	str	r2, [r3, #4]
 800452e:	e01c      	b.n	800456a <HAL_OSPIM_Config+0x61e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	691b      	ldr	r3, [r3, #16]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d018      	beq.n	800456a <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004538:	4a1b      	ldr	r2, [pc, #108]	; (80045a8 <HAL_OSPIM_Config+0x65c>)
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	3b01      	subs	r3, #1
 8004540:	f003 0301 	and.w	r3, r3, #1
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	4413      	add	r3, r2
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800454e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004550:	069b      	lsls	r3, r3, #26
 8004552:	431a      	orrs	r2, r3
 8004554:	4914      	ldr	r1, [pc, #80]	; (80045a8 <HAL_OSPIM_Config+0x65c>)
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	3b01      	subs	r3, #1
 800455c:	f003 0301 	and.w	r3, r3, #1
 8004560:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	440b      	add	r3, r1
 8004568:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 800456a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800456e:	f003 0301 	and.w	r3, r3, #1
 8004572:	2b00      	cmp	r3, #0
 8004574:	d005      	beq.n	8004582 <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8004576:	4b0d      	ldr	r3, [pc, #52]	; (80045ac <HAL_OSPIM_Config+0x660>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a0c      	ldr	r2, [pc, #48]	; (80045ac <HAL_OSPIM_Config+0x660>)
 800457c:	f043 0301 	orr.w	r3, r3, #1
 8004580:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8004582:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b00      	cmp	r3, #0
 800458c:	d005      	beq.n	800459a <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800458e:	4b08      	ldr	r3, [pc, #32]	; (80045b0 <HAL_OSPIM_Config+0x664>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a07      	ldr	r2, [pc, #28]	; (80045b0 <HAL_OSPIM_Config+0x664>)
 8004594:	f043 0301 	orr.w	r3, r3, #1
 8004598:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 800459a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3748      	adds	r7, #72	; 0x48
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	50061c00 	.word	0x50061c00
 80045ac:	a0001000 	.word	0xa0001000
 80045b0:	a0001400 	.word	0xa0001400

080045b4 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	603b      	str	r3, [r7, #0]
 80045c0:	4613      	mov	r3, r2
 80045c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80045c4:	e01a      	b.n	80045fc <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045cc:	d016      	beq.n	80045fc <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ce:	f7fd fe9b 	bl	8002308 <HAL_GetTick>
 80045d2:	4602      	mov	r2, r0
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	69ba      	ldr	r2, [r7, #24]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d302      	bcc.n	80045e4 <OSPI_WaitFlagStateUntilTimeout+0x30>
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d10b      	bne.n	80045fc <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045ea:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045f0:	f043 0201 	orr.w	r2, r3, #1
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e00e      	b.n	800461a <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	6a1a      	ldr	r2, [r3, #32]
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	4013      	ands	r3, r2
 8004606:	2b00      	cmp	r3, #0
 8004608:	bf14      	ite	ne
 800460a:	2301      	movne	r3, #1
 800460c:	2300      	moveq	r3, #0
 800460e:	b2db      	uxtb	r3, r3
 8004610:	461a      	mov	r2, r3
 8004612:	79fb      	ldrb	r3, [r7, #7]
 8004614:	429a      	cmp	r2, r3
 8004616:	d1d6      	bne.n	80045c6 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3710      	adds	r7, #16
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
	...

08004624 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8004624:	b480      	push	{r7}
 8004626:	b087      	sub	sp, #28
 8004628:	af00      	add	r7, sp, #0
 800462a:	4603      	mov	r3, r0
 800462c:	6039      	str	r1, [r7, #0]
 800462e:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8004630:	2300      	movs	r3, #0
 8004632:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8004634:	2300      	movs	r3, #0
 8004636:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8004638:	79fb      	ldrb	r3, [r7, #7]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d005      	beq.n	800464a <OSPIM_GetConfig+0x26>
 800463e:	79fb      	ldrb	r3, [r7, #7]
 8004640:	2b02      	cmp	r3, #2
 8004642:	d802      	bhi.n	800464a <OSPIM_GetConfig+0x26>
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d102      	bne.n	8004650 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	75fb      	strb	r3, [r7, #23]
 800464e:	e08e      	b.n	800476e <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	2200      	movs	r2, #0
 8004654:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	2200      	movs	r2, #0
 800465a:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	2200      	movs	r2, #0
 8004660:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	2200      	movs	r2, #0
 8004666:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	2200      	movs	r2, #0
 800466c:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 800466e:	79fb      	ldrb	r3, [r7, #7]
 8004670:	2b02      	cmp	r3, #2
 8004672:	d101      	bne.n	8004678 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8004674:	4b41      	ldr	r3, [pc, #260]	; (800477c <OSPIM_GetConfig+0x158>)
 8004676:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8004678:	2300      	movs	r3, #0
 800467a:	60fb      	str	r3, [r7, #12]
 800467c:	e074      	b.n	8004768 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 800467e:	4a40      	ldr	r2, [pc, #256]	; (8004780 <OSPIM_GetConfig+0x15c>)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	4413      	add	r3, r2
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	f003 0301 	and.w	r3, r3, #1
 8004690:	2b00      	cmp	r3, #0
 8004692:	d00a      	beq.n	80046aa <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8004694:	68ba      	ldr	r2, [r7, #8]
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	4053      	eors	r3, r2
 800469a:	f003 0302 	and.w	r3, r3, #2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d103      	bne.n	80046aa <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	1c5a      	adds	r2, r3, #1
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	f003 0310 	and.w	r3, r3, #16
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00a      	beq.n	80046ca <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 80046b4:	68ba      	ldr	r2, [r7, #8]
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	4053      	eors	r3, r2
 80046ba:	f003 0320 	and.w	r3, r3, #32
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d103      	bne.n	80046ca <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	1c5a      	adds	r2, r3, #1
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d00a      	beq.n	80046ea <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 80046d4:	68ba      	ldr	r2, [r7, #8]
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	4053      	eors	r3, r2
 80046da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d103      	bne.n	80046ea <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	1c5a      	adds	r2, r3, #1
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d018      	beq.n	8004726 <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 80046f4:	68ba      	ldr	r2, [r7, #8]
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	4053      	eors	r3, r2
 80046fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d111      	bne.n	8004726 <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d106      	bne.n	800471a <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	3301      	adds	r3, #1
 8004710:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	60da      	str	r2, [r3, #12]
 8004718:	e005      	b.n	8004726 <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	3301      	adds	r3, #1
 800471e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d018      	beq.n	8004762 <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8004730:	68ba      	ldr	r2, [r7, #8]
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	4053      	eors	r3, r2
 8004736:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d111      	bne.n	8004762 <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d106      	bne.n	8004756 <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	3301      	adds	r3, #1
 800474c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	611a      	str	r2, [r3, #16]
 8004754:	e005      	b.n	8004762 <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	3301      	adds	r3, #1
 800475a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	3301      	adds	r3, #1
 8004766:	60fb      	str	r3, [r7, #12]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2b01      	cmp	r3, #1
 800476c:	d987      	bls.n	800467e <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 800476e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004770:	4618      	mov	r0, r3
 8004772:	371c      	adds	r7, #28
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr
 800477c:	04040222 	.word	0x04040222
 8004780:	50061c00 	.word	0x50061c00

08004784 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004784:	b480      	push	{r7}
 8004786:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004788:	4b0d      	ldr	r3, [pc, #52]	; (80047c0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004790:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004794:	d102      	bne.n	800479c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004796:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800479a:	e00b      	b.n	80047b4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800479c:	4b08      	ldr	r3, [pc, #32]	; (80047c0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800479e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047aa:	d102      	bne.n	80047b2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80047ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047b0:	e000      	b.n	80047b4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80047b2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	40007000 	.word	0x40007000

080047c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d141      	bne.n	8004856 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80047d2:	4b4b      	ldr	r3, [pc, #300]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80047da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047de:	d131      	bne.n	8004844 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80047e0:	4b47      	ldr	r3, [pc, #284]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047e6:	4a46      	ldr	r2, [pc, #280]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80047f0:	4b43      	ldr	r3, [pc, #268]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80047f8:	4a41      	ldr	r2, [pc, #260]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004800:	4b40      	ldr	r3, [pc, #256]	; (8004904 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2232      	movs	r2, #50	; 0x32
 8004806:	fb02 f303 	mul.w	r3, r2, r3
 800480a:	4a3f      	ldr	r2, [pc, #252]	; (8004908 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800480c:	fba2 2303 	umull	r2, r3, r2, r3
 8004810:	0c9b      	lsrs	r3, r3, #18
 8004812:	3301      	adds	r3, #1
 8004814:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004816:	e002      	b.n	800481e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	3b01      	subs	r3, #1
 800481c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800481e:	4b38      	ldr	r3, [pc, #224]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004826:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800482a:	d102      	bne.n	8004832 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1f2      	bne.n	8004818 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004832:	4b33      	ldr	r3, [pc, #204]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800483a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800483e:	d158      	bne.n	80048f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e057      	b.n	80048f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004844:	4b2e      	ldr	r3, [pc, #184]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004846:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800484a:	4a2d      	ldr	r2, [pc, #180]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800484c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004850:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004854:	e04d      	b.n	80048f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800485c:	d141      	bne.n	80048e2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800485e:	4b28      	ldr	r3, [pc, #160]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004866:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800486a:	d131      	bne.n	80048d0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800486c:	4b24      	ldr	r3, [pc, #144]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800486e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004872:	4a23      	ldr	r2, [pc, #140]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004878:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800487c:	4b20      	ldr	r3, [pc, #128]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004884:	4a1e      	ldr	r2, [pc, #120]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004886:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800488a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800488c:	4b1d      	ldr	r3, [pc, #116]	; (8004904 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2232      	movs	r2, #50	; 0x32
 8004892:	fb02 f303 	mul.w	r3, r2, r3
 8004896:	4a1c      	ldr	r2, [pc, #112]	; (8004908 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004898:	fba2 2303 	umull	r2, r3, r2, r3
 800489c:	0c9b      	lsrs	r3, r3, #18
 800489e:	3301      	adds	r3, #1
 80048a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048a2:	e002      	b.n	80048aa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	3b01      	subs	r3, #1
 80048a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048aa:	4b15      	ldr	r3, [pc, #84]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048b6:	d102      	bne.n	80048be <HAL_PWREx_ControlVoltageScaling+0xfa>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1f2      	bne.n	80048a4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80048be:	4b10      	ldr	r3, [pc, #64]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048c0:	695b      	ldr	r3, [r3, #20]
 80048c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048ca:	d112      	bne.n	80048f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e011      	b.n	80048f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80048d0:	4b0b      	ldr	r3, [pc, #44]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048d6:	4a0a      	ldr	r2, [pc, #40]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80048e0:	e007      	b.n	80048f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80048e2:	4b07      	ldr	r3, [pc, #28]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80048ea:	4a05      	ldr	r2, [pc, #20]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048f0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80048f2:	2300      	movs	r3, #0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3714      	adds	r7, #20
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr
 8004900:	40007000 	.word	0x40007000
 8004904:	20004b00 	.word	0x20004b00
 8004908:	431bde83 	.word	0x431bde83

0800490c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800490c:	b480      	push	{r7}
 800490e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004910:	4b05      	ldr	r3, [pc, #20]	; (8004928 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	4a04      	ldr	r2, [pc, #16]	; (8004928 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004916:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800491a:	6053      	str	r3, [r2, #4]
}
 800491c:	bf00      	nop
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	40007000 	.word	0x40007000

0800492c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b088      	sub	sp, #32
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d102      	bne.n	8004940 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	f000 bc08 	b.w	8005150 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004940:	4b96      	ldr	r3, [pc, #600]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	f003 030c 	and.w	r3, r3, #12
 8004948:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800494a:	4b94      	ldr	r3, [pc, #592]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	f003 0303 	and.w	r3, r3, #3
 8004952:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0310 	and.w	r3, r3, #16
 800495c:	2b00      	cmp	r3, #0
 800495e:	f000 80e4 	beq.w	8004b2a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d007      	beq.n	8004978 <HAL_RCC_OscConfig+0x4c>
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	2b0c      	cmp	r3, #12
 800496c:	f040 808b 	bne.w	8004a86 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	2b01      	cmp	r3, #1
 8004974:	f040 8087 	bne.w	8004a86 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004978:	4b88      	ldr	r3, [pc, #544]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0302 	and.w	r3, r3, #2
 8004980:	2b00      	cmp	r3, #0
 8004982:	d005      	beq.n	8004990 <HAL_RCC_OscConfig+0x64>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d101      	bne.n	8004990 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e3df      	b.n	8005150 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a1a      	ldr	r2, [r3, #32]
 8004994:	4b81      	ldr	r3, [pc, #516]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0308 	and.w	r3, r3, #8
 800499c:	2b00      	cmp	r3, #0
 800499e:	d004      	beq.n	80049aa <HAL_RCC_OscConfig+0x7e>
 80049a0:	4b7e      	ldr	r3, [pc, #504]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049a8:	e005      	b.n	80049b6 <HAL_RCC_OscConfig+0x8a>
 80049aa:	4b7c      	ldr	r3, [pc, #496]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 80049ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049b0:	091b      	lsrs	r3, r3, #4
 80049b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d223      	bcs.n	8004a02 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a1b      	ldr	r3, [r3, #32]
 80049be:	4618      	mov	r0, r3
 80049c0:	f000 fdcc 	bl	800555c <RCC_SetFlashLatencyFromMSIRange>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d001      	beq.n	80049ce <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e3c0      	b.n	8005150 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80049ce:	4b73      	ldr	r3, [pc, #460]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a72      	ldr	r2, [pc, #456]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 80049d4:	f043 0308 	orr.w	r3, r3, #8
 80049d8:	6013      	str	r3, [r2, #0]
 80049da:	4b70      	ldr	r3, [pc, #448]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a1b      	ldr	r3, [r3, #32]
 80049e6:	496d      	ldr	r1, [pc, #436]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049ec:	4b6b      	ldr	r3, [pc, #428]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	69db      	ldr	r3, [r3, #28]
 80049f8:	021b      	lsls	r3, r3, #8
 80049fa:	4968      	ldr	r1, [pc, #416]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	604b      	str	r3, [r1, #4]
 8004a00:	e025      	b.n	8004a4e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a02:	4b66      	ldr	r3, [pc, #408]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a65      	ldr	r2, [pc, #404]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 8004a08:	f043 0308 	orr.w	r3, r3, #8
 8004a0c:	6013      	str	r3, [r2, #0]
 8004a0e:	4b63      	ldr	r3, [pc, #396]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a1b      	ldr	r3, [r3, #32]
 8004a1a:	4960      	ldr	r1, [pc, #384]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a20:	4b5e      	ldr	r3, [pc, #376]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	69db      	ldr	r3, [r3, #28]
 8004a2c:	021b      	lsls	r3, r3, #8
 8004a2e:	495b      	ldr	r1, [pc, #364]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d109      	bne.n	8004a4e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a1b      	ldr	r3, [r3, #32]
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f000 fd8c 	bl	800555c <RCC_SetFlashLatencyFromMSIRange>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d001      	beq.n	8004a4e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e380      	b.n	8005150 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a4e:	f000 fcc1 	bl	80053d4 <HAL_RCC_GetSysClockFreq>
 8004a52:	4602      	mov	r2, r0
 8004a54:	4b51      	ldr	r3, [pc, #324]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	091b      	lsrs	r3, r3, #4
 8004a5a:	f003 030f 	and.w	r3, r3, #15
 8004a5e:	4950      	ldr	r1, [pc, #320]	; (8004ba0 <HAL_RCC_OscConfig+0x274>)
 8004a60:	5ccb      	ldrb	r3, [r1, r3]
 8004a62:	f003 031f 	and.w	r3, r3, #31
 8004a66:	fa22 f303 	lsr.w	r3, r2, r3
 8004a6a:	4a4e      	ldr	r2, [pc, #312]	; (8004ba4 <HAL_RCC_OscConfig+0x278>)
 8004a6c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004a6e:	4b4e      	ldr	r3, [pc, #312]	; (8004ba8 <HAL_RCC_OscConfig+0x27c>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7fd fbf8 	bl	8002268 <HAL_InitTick>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004a7c:	7bfb      	ldrb	r3, [r7, #15]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d052      	beq.n	8004b28 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004a82:	7bfb      	ldrb	r3, [r7, #15]
 8004a84:	e364      	b.n	8005150 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	699b      	ldr	r3, [r3, #24]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d032      	beq.n	8004af4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004a8e:	4b43      	ldr	r3, [pc, #268]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a42      	ldr	r2, [pc, #264]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 8004a94:	f043 0301 	orr.w	r3, r3, #1
 8004a98:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a9a:	f7fd fc35 	bl	8002308 <HAL_GetTick>
 8004a9e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004aa0:	e008      	b.n	8004ab4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004aa2:	f7fd fc31 	bl	8002308 <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d901      	bls.n	8004ab4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e34d      	b.n	8005150 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ab4:	4b39      	ldr	r3, [pc, #228]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0302 	and.w	r3, r3, #2
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d0f0      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ac0:	4b36      	ldr	r3, [pc, #216]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a35      	ldr	r2, [pc, #212]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 8004ac6:	f043 0308 	orr.w	r3, r3, #8
 8004aca:	6013      	str	r3, [r2, #0]
 8004acc:	4b33      	ldr	r3, [pc, #204]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a1b      	ldr	r3, [r3, #32]
 8004ad8:	4930      	ldr	r1, [pc, #192]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ade:	4b2f      	ldr	r3, [pc, #188]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	69db      	ldr	r3, [r3, #28]
 8004aea:	021b      	lsls	r3, r3, #8
 8004aec:	492b      	ldr	r1, [pc, #172]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	604b      	str	r3, [r1, #4]
 8004af2:	e01a      	b.n	8004b2a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004af4:	4b29      	ldr	r3, [pc, #164]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a28      	ldr	r2, [pc, #160]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 8004afa:	f023 0301 	bic.w	r3, r3, #1
 8004afe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b00:	f7fd fc02 	bl	8002308 <HAL_GetTick>
 8004b04:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004b06:	e008      	b.n	8004b1a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b08:	f7fd fbfe 	bl	8002308 <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d901      	bls.n	8004b1a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e31a      	b.n	8005150 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004b1a:	4b20      	ldr	r3, [pc, #128]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0302 	and.w	r3, r3, #2
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1f0      	bne.n	8004b08 <HAL_RCC_OscConfig+0x1dc>
 8004b26:	e000      	b.n	8004b2a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b28:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0301 	and.w	r3, r3, #1
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d073      	beq.n	8004c1e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	2b08      	cmp	r3, #8
 8004b3a:	d005      	beq.n	8004b48 <HAL_RCC_OscConfig+0x21c>
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	2b0c      	cmp	r3, #12
 8004b40:	d10e      	bne.n	8004b60 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	2b03      	cmp	r3, #3
 8004b46:	d10b      	bne.n	8004b60 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b48:	4b14      	ldr	r3, [pc, #80]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d063      	beq.n	8004c1c <HAL_RCC_OscConfig+0x2f0>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d15f      	bne.n	8004c1c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e2f7      	b.n	8005150 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b68:	d106      	bne.n	8004b78 <HAL_RCC_OscConfig+0x24c>
 8004b6a:	4b0c      	ldr	r3, [pc, #48]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a0b      	ldr	r2, [pc, #44]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 8004b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b74:	6013      	str	r3, [r2, #0]
 8004b76:	e025      	b.n	8004bc4 <HAL_RCC_OscConfig+0x298>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b80:	d114      	bne.n	8004bac <HAL_RCC_OscConfig+0x280>
 8004b82:	4b06      	ldr	r3, [pc, #24]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a05      	ldr	r2, [pc, #20]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 8004b88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b8c:	6013      	str	r3, [r2, #0]
 8004b8e:	4b03      	ldr	r3, [pc, #12]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a02      	ldr	r2, [pc, #8]	; (8004b9c <HAL_RCC_OscConfig+0x270>)
 8004b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b98:	6013      	str	r3, [r2, #0]
 8004b9a:	e013      	b.n	8004bc4 <HAL_RCC_OscConfig+0x298>
 8004b9c:	40021000 	.word	0x40021000
 8004ba0:	080085a8 	.word	0x080085a8
 8004ba4:	20004b00 	.word	0x20004b00
 8004ba8:	20004b04 	.word	0x20004b04
 8004bac:	4ba0      	ldr	r3, [pc, #640]	; (8004e30 <HAL_RCC_OscConfig+0x504>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a9f      	ldr	r2, [pc, #636]	; (8004e30 <HAL_RCC_OscConfig+0x504>)
 8004bb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bb6:	6013      	str	r3, [r2, #0]
 8004bb8:	4b9d      	ldr	r3, [pc, #628]	; (8004e30 <HAL_RCC_OscConfig+0x504>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a9c      	ldr	r2, [pc, #624]	; (8004e30 <HAL_RCC_OscConfig+0x504>)
 8004bbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d013      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bcc:	f7fd fb9c 	bl	8002308 <HAL_GetTick>
 8004bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bd2:	e008      	b.n	8004be6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bd4:	f7fd fb98 	bl	8002308 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	2b64      	cmp	r3, #100	; 0x64
 8004be0:	d901      	bls.n	8004be6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e2b4      	b.n	8005150 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004be6:	4b92      	ldr	r3, [pc, #584]	; (8004e30 <HAL_RCC_OscConfig+0x504>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d0f0      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x2a8>
 8004bf2:	e014      	b.n	8004c1e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf4:	f7fd fb88 	bl	8002308 <HAL_GetTick>
 8004bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004bfa:	e008      	b.n	8004c0e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bfc:	f7fd fb84 	bl	8002308 <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	2b64      	cmp	r3, #100	; 0x64
 8004c08:	d901      	bls.n	8004c0e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e2a0      	b.n	8005150 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c0e:	4b88      	ldr	r3, [pc, #544]	; (8004e30 <HAL_RCC_OscConfig+0x504>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d1f0      	bne.n	8004bfc <HAL_RCC_OscConfig+0x2d0>
 8004c1a:	e000      	b.n	8004c1e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0302 	and.w	r3, r3, #2
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d060      	beq.n	8004cec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	2b04      	cmp	r3, #4
 8004c2e:	d005      	beq.n	8004c3c <HAL_RCC_OscConfig+0x310>
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	2b0c      	cmp	r3, #12
 8004c34:	d119      	bne.n	8004c6a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d116      	bne.n	8004c6a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c3c:	4b7c      	ldr	r3, [pc, #496]	; (8004e30 <HAL_RCC_OscConfig+0x504>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d005      	beq.n	8004c54 <HAL_RCC_OscConfig+0x328>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d101      	bne.n	8004c54 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e27d      	b.n	8005150 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c54:	4b76      	ldr	r3, [pc, #472]	; (8004e30 <HAL_RCC_OscConfig+0x504>)
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	061b      	lsls	r3, r3, #24
 8004c62:	4973      	ldr	r1, [pc, #460]	; (8004e30 <HAL_RCC_OscConfig+0x504>)
 8004c64:	4313      	orrs	r3, r2
 8004c66:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c68:	e040      	b.n	8004cec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d023      	beq.n	8004cba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c72:	4b6f      	ldr	r3, [pc, #444]	; (8004e30 <HAL_RCC_OscConfig+0x504>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a6e      	ldr	r2, [pc, #440]	; (8004e30 <HAL_RCC_OscConfig+0x504>)
 8004c78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c7e:	f7fd fb43 	bl	8002308 <HAL_GetTick>
 8004c82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c84:	e008      	b.n	8004c98 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c86:	f7fd fb3f 	bl	8002308 <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d901      	bls.n	8004c98 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e25b      	b.n	8005150 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c98:	4b65      	ldr	r3, [pc, #404]	; (8004e30 <HAL_RCC_OscConfig+0x504>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d0f0      	beq.n	8004c86 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ca4:	4b62      	ldr	r3, [pc, #392]	; (8004e30 <HAL_RCC_OscConfig+0x504>)
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	061b      	lsls	r3, r3, #24
 8004cb2:	495f      	ldr	r1, [pc, #380]	; (8004e30 <HAL_RCC_OscConfig+0x504>)
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	604b      	str	r3, [r1, #4]
 8004cb8:	e018      	b.n	8004cec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cba:	4b5d      	ldr	r3, [pc, #372]	; (8004e30 <HAL_RCC_OscConfig+0x504>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a5c      	ldr	r2, [pc, #368]	; (8004e30 <HAL_RCC_OscConfig+0x504>)
 8004cc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc6:	f7fd fb1f 	bl	8002308 <HAL_GetTick>
 8004cca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ccc:	e008      	b.n	8004ce0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cce:	f7fd fb1b 	bl	8002308 <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d901      	bls.n	8004ce0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e237      	b.n	8005150 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ce0:	4b53      	ldr	r3, [pc, #332]	; (8004e30 <HAL_RCC_OscConfig+0x504>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d1f0      	bne.n	8004cce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0308 	and.w	r3, r3, #8
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d03c      	beq.n	8004d72 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	695b      	ldr	r3, [r3, #20]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d01c      	beq.n	8004d3a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d00:	4b4b      	ldr	r3, [pc, #300]	; (8004e30 <HAL_RCC_OscConfig+0x504>)
 8004d02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d06:	4a4a      	ldr	r2, [pc, #296]	; (8004e30 <HAL_RCC_OscConfig+0x504>)
 8004d08:	f043 0301 	orr.w	r3, r3, #1
 8004d0c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d10:	f7fd fafa 	bl	8002308 <HAL_GetTick>
 8004d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d16:	e008      	b.n	8004d2a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d18:	f7fd faf6 	bl	8002308 <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d901      	bls.n	8004d2a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e212      	b.n	8005150 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d2a:	4b41      	ldr	r3, [pc, #260]	; (8004e30 <HAL_RCC_OscConfig+0x504>)
 8004d2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d30:	f003 0302 	and.w	r3, r3, #2
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d0ef      	beq.n	8004d18 <HAL_RCC_OscConfig+0x3ec>
 8004d38:	e01b      	b.n	8004d72 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d3a:	4b3d      	ldr	r3, [pc, #244]	; (8004e30 <HAL_RCC_OscConfig+0x504>)
 8004d3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d40:	4a3b      	ldr	r2, [pc, #236]	; (8004e30 <HAL_RCC_OscConfig+0x504>)
 8004d42:	f023 0301 	bic.w	r3, r3, #1
 8004d46:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d4a:	f7fd fadd 	bl	8002308 <HAL_GetTick>
 8004d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d50:	e008      	b.n	8004d64 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d52:	f7fd fad9 	bl	8002308 <HAL_GetTick>
 8004d56:	4602      	mov	r2, r0
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	1ad3      	subs	r3, r2, r3
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d901      	bls.n	8004d64 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e1f5      	b.n	8005150 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d64:	4b32      	ldr	r3, [pc, #200]	; (8004e30 <HAL_RCC_OscConfig+0x504>)
 8004d66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d6a:	f003 0302 	and.w	r3, r3, #2
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1ef      	bne.n	8004d52 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0304 	and.w	r3, r3, #4
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	f000 80a6 	beq.w	8004ecc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d80:	2300      	movs	r3, #0
 8004d82:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004d84:	4b2a      	ldr	r3, [pc, #168]	; (8004e30 <HAL_RCC_OscConfig+0x504>)
 8004d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d10d      	bne.n	8004dac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d90:	4b27      	ldr	r3, [pc, #156]	; (8004e30 <HAL_RCC_OscConfig+0x504>)
 8004d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d94:	4a26      	ldr	r2, [pc, #152]	; (8004e30 <HAL_RCC_OscConfig+0x504>)
 8004d96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d9a:	6593      	str	r3, [r2, #88]	; 0x58
 8004d9c:	4b24      	ldr	r3, [pc, #144]	; (8004e30 <HAL_RCC_OscConfig+0x504>)
 8004d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004da4:	60bb      	str	r3, [r7, #8]
 8004da6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004da8:	2301      	movs	r3, #1
 8004daa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dac:	4b21      	ldr	r3, [pc, #132]	; (8004e34 <HAL_RCC_OscConfig+0x508>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d118      	bne.n	8004dea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004db8:	4b1e      	ldr	r3, [pc, #120]	; (8004e34 <HAL_RCC_OscConfig+0x508>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a1d      	ldr	r2, [pc, #116]	; (8004e34 <HAL_RCC_OscConfig+0x508>)
 8004dbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dc2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dc4:	f7fd faa0 	bl	8002308 <HAL_GetTick>
 8004dc8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dca:	e008      	b.n	8004dde <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dcc:	f7fd fa9c 	bl	8002308 <HAL_GetTick>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d901      	bls.n	8004dde <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e1b8      	b.n	8005150 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dde:	4b15      	ldr	r3, [pc, #84]	; (8004e34 <HAL_RCC_OscConfig+0x508>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d0f0      	beq.n	8004dcc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d108      	bne.n	8004e04 <HAL_RCC_OscConfig+0x4d8>
 8004df2:	4b0f      	ldr	r3, [pc, #60]	; (8004e30 <HAL_RCC_OscConfig+0x504>)
 8004df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004df8:	4a0d      	ldr	r2, [pc, #52]	; (8004e30 <HAL_RCC_OscConfig+0x504>)
 8004dfa:	f043 0301 	orr.w	r3, r3, #1
 8004dfe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e02:	e029      	b.n	8004e58 <HAL_RCC_OscConfig+0x52c>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	2b05      	cmp	r3, #5
 8004e0a:	d115      	bne.n	8004e38 <HAL_RCC_OscConfig+0x50c>
 8004e0c:	4b08      	ldr	r3, [pc, #32]	; (8004e30 <HAL_RCC_OscConfig+0x504>)
 8004e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e12:	4a07      	ldr	r2, [pc, #28]	; (8004e30 <HAL_RCC_OscConfig+0x504>)
 8004e14:	f043 0304 	orr.w	r3, r3, #4
 8004e18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e1c:	4b04      	ldr	r3, [pc, #16]	; (8004e30 <HAL_RCC_OscConfig+0x504>)
 8004e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e22:	4a03      	ldr	r2, [pc, #12]	; (8004e30 <HAL_RCC_OscConfig+0x504>)
 8004e24:	f043 0301 	orr.w	r3, r3, #1
 8004e28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e2c:	e014      	b.n	8004e58 <HAL_RCC_OscConfig+0x52c>
 8004e2e:	bf00      	nop
 8004e30:	40021000 	.word	0x40021000
 8004e34:	40007000 	.word	0x40007000
 8004e38:	4b9d      	ldr	r3, [pc, #628]	; (80050b0 <HAL_RCC_OscConfig+0x784>)
 8004e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e3e:	4a9c      	ldr	r2, [pc, #624]	; (80050b0 <HAL_RCC_OscConfig+0x784>)
 8004e40:	f023 0301 	bic.w	r3, r3, #1
 8004e44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e48:	4b99      	ldr	r3, [pc, #612]	; (80050b0 <HAL_RCC_OscConfig+0x784>)
 8004e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e4e:	4a98      	ldr	r2, [pc, #608]	; (80050b0 <HAL_RCC_OscConfig+0x784>)
 8004e50:	f023 0304 	bic.w	r3, r3, #4
 8004e54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d016      	beq.n	8004e8e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e60:	f7fd fa52 	bl	8002308 <HAL_GetTick>
 8004e64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e66:	e00a      	b.n	8004e7e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e68:	f7fd fa4e 	bl	8002308 <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d901      	bls.n	8004e7e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e168      	b.n	8005150 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e7e:	4b8c      	ldr	r3, [pc, #560]	; (80050b0 <HAL_RCC_OscConfig+0x784>)
 8004e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e84:	f003 0302 	and.w	r3, r3, #2
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d0ed      	beq.n	8004e68 <HAL_RCC_OscConfig+0x53c>
 8004e8c:	e015      	b.n	8004eba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e8e:	f7fd fa3b 	bl	8002308 <HAL_GetTick>
 8004e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e94:	e00a      	b.n	8004eac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e96:	f7fd fa37 	bl	8002308 <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d901      	bls.n	8004eac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e151      	b.n	8005150 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004eac:	4b80      	ldr	r3, [pc, #512]	; (80050b0 <HAL_RCC_OscConfig+0x784>)
 8004eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eb2:	f003 0302 	and.w	r3, r3, #2
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d1ed      	bne.n	8004e96 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004eba:	7ffb      	ldrb	r3, [r7, #31]
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d105      	bne.n	8004ecc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ec0:	4b7b      	ldr	r3, [pc, #492]	; (80050b0 <HAL_RCC_OscConfig+0x784>)
 8004ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ec4:	4a7a      	ldr	r2, [pc, #488]	; (80050b0 <HAL_RCC_OscConfig+0x784>)
 8004ec6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004eca:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0320 	and.w	r3, r3, #32
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d03c      	beq.n	8004f52 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d01c      	beq.n	8004f1a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004ee0:	4b73      	ldr	r3, [pc, #460]	; (80050b0 <HAL_RCC_OscConfig+0x784>)
 8004ee2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ee6:	4a72      	ldr	r2, [pc, #456]	; (80050b0 <HAL_RCC_OscConfig+0x784>)
 8004ee8:	f043 0301 	orr.w	r3, r3, #1
 8004eec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ef0:	f7fd fa0a 	bl	8002308 <HAL_GetTick>
 8004ef4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004ef6:	e008      	b.n	8004f0a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ef8:	f7fd fa06 	bl	8002308 <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d901      	bls.n	8004f0a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e122      	b.n	8005150 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f0a:	4b69      	ldr	r3, [pc, #420]	; (80050b0 <HAL_RCC_OscConfig+0x784>)
 8004f0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f10:	f003 0302 	and.w	r3, r3, #2
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d0ef      	beq.n	8004ef8 <HAL_RCC_OscConfig+0x5cc>
 8004f18:	e01b      	b.n	8004f52 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004f1a:	4b65      	ldr	r3, [pc, #404]	; (80050b0 <HAL_RCC_OscConfig+0x784>)
 8004f1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f20:	4a63      	ldr	r2, [pc, #396]	; (80050b0 <HAL_RCC_OscConfig+0x784>)
 8004f22:	f023 0301 	bic.w	r3, r3, #1
 8004f26:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f2a:	f7fd f9ed 	bl	8002308 <HAL_GetTick>
 8004f2e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f30:	e008      	b.n	8004f44 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f32:	f7fd f9e9 	bl	8002308 <HAL_GetTick>
 8004f36:	4602      	mov	r2, r0
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d901      	bls.n	8004f44 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e105      	b.n	8005150 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f44:	4b5a      	ldr	r3, [pc, #360]	; (80050b0 <HAL_RCC_OscConfig+0x784>)
 8004f46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f4a:	f003 0302 	and.w	r3, r3, #2
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d1ef      	bne.n	8004f32 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	f000 80f9 	beq.w	800514e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	f040 80cf 	bne.w	8005104 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004f66:	4b52      	ldr	r3, [pc, #328]	; (80050b0 <HAL_RCC_OscConfig+0x784>)
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	f003 0203 	and.w	r2, r3, #3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d12c      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f84:	3b01      	subs	r3, #1
 8004f86:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d123      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f96:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d11b      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d113      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fb6:	085b      	lsrs	r3, r3, #1
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d109      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fca:	085b      	lsrs	r3, r3, #1
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d071      	beq.n	80050b8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	2b0c      	cmp	r3, #12
 8004fd8:	d068      	beq.n	80050ac <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004fda:	4b35      	ldr	r3, [pc, #212]	; (80050b0 <HAL_RCC_OscConfig+0x784>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d105      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004fe6:	4b32      	ldr	r3, [pc, #200]	; (80050b0 <HAL_RCC_OscConfig+0x784>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d001      	beq.n	8004ff6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e0ac      	b.n	8005150 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004ff6:	4b2e      	ldr	r3, [pc, #184]	; (80050b0 <HAL_RCC_OscConfig+0x784>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a2d      	ldr	r2, [pc, #180]	; (80050b0 <HAL_RCC_OscConfig+0x784>)
 8004ffc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005000:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005002:	f7fd f981 	bl	8002308 <HAL_GetTick>
 8005006:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005008:	e008      	b.n	800501c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800500a:	f7fd f97d 	bl	8002308 <HAL_GetTick>
 800500e:	4602      	mov	r2, r0
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	2b02      	cmp	r3, #2
 8005016:	d901      	bls.n	800501c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005018:	2303      	movs	r3, #3
 800501a:	e099      	b.n	8005150 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800501c:	4b24      	ldr	r3, [pc, #144]	; (80050b0 <HAL_RCC_OscConfig+0x784>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005024:	2b00      	cmp	r3, #0
 8005026:	d1f0      	bne.n	800500a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005028:	4b21      	ldr	r3, [pc, #132]	; (80050b0 <HAL_RCC_OscConfig+0x784>)
 800502a:	68da      	ldr	r2, [r3, #12]
 800502c:	4b21      	ldr	r3, [pc, #132]	; (80050b4 <HAL_RCC_OscConfig+0x788>)
 800502e:	4013      	ands	r3, r2
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005038:	3a01      	subs	r2, #1
 800503a:	0112      	lsls	r2, r2, #4
 800503c:	4311      	orrs	r1, r2
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005042:	0212      	lsls	r2, r2, #8
 8005044:	4311      	orrs	r1, r2
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800504a:	0852      	lsrs	r2, r2, #1
 800504c:	3a01      	subs	r2, #1
 800504e:	0552      	lsls	r2, r2, #21
 8005050:	4311      	orrs	r1, r2
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005056:	0852      	lsrs	r2, r2, #1
 8005058:	3a01      	subs	r2, #1
 800505a:	0652      	lsls	r2, r2, #25
 800505c:	4311      	orrs	r1, r2
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005062:	06d2      	lsls	r2, r2, #27
 8005064:	430a      	orrs	r2, r1
 8005066:	4912      	ldr	r1, [pc, #72]	; (80050b0 <HAL_RCC_OscConfig+0x784>)
 8005068:	4313      	orrs	r3, r2
 800506a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800506c:	4b10      	ldr	r3, [pc, #64]	; (80050b0 <HAL_RCC_OscConfig+0x784>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a0f      	ldr	r2, [pc, #60]	; (80050b0 <HAL_RCC_OscConfig+0x784>)
 8005072:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005076:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005078:	4b0d      	ldr	r3, [pc, #52]	; (80050b0 <HAL_RCC_OscConfig+0x784>)
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	4a0c      	ldr	r2, [pc, #48]	; (80050b0 <HAL_RCC_OscConfig+0x784>)
 800507e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005082:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005084:	f7fd f940 	bl	8002308 <HAL_GetTick>
 8005088:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800508a:	e008      	b.n	800509e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800508c:	f7fd f93c 	bl	8002308 <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	2b02      	cmp	r3, #2
 8005098:	d901      	bls.n	800509e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e058      	b.n	8005150 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800509e:	4b04      	ldr	r3, [pc, #16]	; (80050b0 <HAL_RCC_OscConfig+0x784>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d0f0      	beq.n	800508c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80050aa:	e050      	b.n	800514e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e04f      	b.n	8005150 <HAL_RCC_OscConfig+0x824>
 80050b0:	40021000 	.word	0x40021000
 80050b4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050b8:	4b27      	ldr	r3, [pc, #156]	; (8005158 <HAL_RCC_OscConfig+0x82c>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d144      	bne.n	800514e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80050c4:	4b24      	ldr	r3, [pc, #144]	; (8005158 <HAL_RCC_OscConfig+0x82c>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a23      	ldr	r2, [pc, #140]	; (8005158 <HAL_RCC_OscConfig+0x82c>)
 80050ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050ce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80050d0:	4b21      	ldr	r3, [pc, #132]	; (8005158 <HAL_RCC_OscConfig+0x82c>)
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	4a20      	ldr	r2, [pc, #128]	; (8005158 <HAL_RCC_OscConfig+0x82c>)
 80050d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050da:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80050dc:	f7fd f914 	bl	8002308 <HAL_GetTick>
 80050e0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050e2:	e008      	b.n	80050f6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050e4:	f7fd f910 	bl	8002308 <HAL_GetTick>
 80050e8:	4602      	mov	r2, r0
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	2b02      	cmp	r3, #2
 80050f0:	d901      	bls.n	80050f6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e02c      	b.n	8005150 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050f6:	4b18      	ldr	r3, [pc, #96]	; (8005158 <HAL_RCC_OscConfig+0x82c>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d0f0      	beq.n	80050e4 <HAL_RCC_OscConfig+0x7b8>
 8005102:	e024      	b.n	800514e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	2b0c      	cmp	r3, #12
 8005108:	d01f      	beq.n	800514a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800510a:	4b13      	ldr	r3, [pc, #76]	; (8005158 <HAL_RCC_OscConfig+0x82c>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a12      	ldr	r2, [pc, #72]	; (8005158 <HAL_RCC_OscConfig+0x82c>)
 8005110:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005114:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005116:	f7fd f8f7 	bl	8002308 <HAL_GetTick>
 800511a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800511c:	e008      	b.n	8005130 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800511e:	f7fd f8f3 	bl	8002308 <HAL_GetTick>
 8005122:	4602      	mov	r2, r0
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	2b02      	cmp	r3, #2
 800512a:	d901      	bls.n	8005130 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	e00f      	b.n	8005150 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005130:	4b09      	ldr	r3, [pc, #36]	; (8005158 <HAL_RCC_OscConfig+0x82c>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005138:	2b00      	cmp	r3, #0
 800513a:	d1f0      	bne.n	800511e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800513c:	4b06      	ldr	r3, [pc, #24]	; (8005158 <HAL_RCC_OscConfig+0x82c>)
 800513e:	68da      	ldr	r2, [r3, #12]
 8005140:	4905      	ldr	r1, [pc, #20]	; (8005158 <HAL_RCC_OscConfig+0x82c>)
 8005142:	4b06      	ldr	r3, [pc, #24]	; (800515c <HAL_RCC_OscConfig+0x830>)
 8005144:	4013      	ands	r3, r2
 8005146:	60cb      	str	r3, [r1, #12]
 8005148:	e001      	b.n	800514e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e000      	b.n	8005150 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	3720      	adds	r7, #32
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}
 8005158:	40021000 	.word	0x40021000
 800515c:	feeefffc 	.word	0xfeeefffc

08005160 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b086      	sub	sp, #24
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800516a:	2300      	movs	r3, #0
 800516c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d101      	bne.n	8005178 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e11d      	b.n	80053b4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005178:	4b90      	ldr	r3, [pc, #576]	; (80053bc <HAL_RCC_ClockConfig+0x25c>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 030f 	and.w	r3, r3, #15
 8005180:	683a      	ldr	r2, [r7, #0]
 8005182:	429a      	cmp	r2, r3
 8005184:	d910      	bls.n	80051a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005186:	4b8d      	ldr	r3, [pc, #564]	; (80053bc <HAL_RCC_ClockConfig+0x25c>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f023 020f 	bic.w	r2, r3, #15
 800518e:	498b      	ldr	r1, [pc, #556]	; (80053bc <HAL_RCC_ClockConfig+0x25c>)
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	4313      	orrs	r3, r2
 8005194:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005196:	4b89      	ldr	r3, [pc, #548]	; (80053bc <HAL_RCC_ClockConfig+0x25c>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 030f 	and.w	r3, r3, #15
 800519e:	683a      	ldr	r2, [r7, #0]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d001      	beq.n	80051a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e105      	b.n	80053b4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0302 	and.w	r3, r3, #2
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d010      	beq.n	80051d6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	689a      	ldr	r2, [r3, #8]
 80051b8:	4b81      	ldr	r3, [pc, #516]	; (80053c0 <HAL_RCC_ClockConfig+0x260>)
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d908      	bls.n	80051d6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051c4:	4b7e      	ldr	r3, [pc, #504]	; (80053c0 <HAL_RCC_ClockConfig+0x260>)
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	497b      	ldr	r1, [pc, #492]	; (80053c0 <HAL_RCC_ClockConfig+0x260>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 0301 	and.w	r3, r3, #1
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d079      	beq.n	80052d6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	2b03      	cmp	r3, #3
 80051e8:	d11e      	bne.n	8005228 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051ea:	4b75      	ldr	r3, [pc, #468]	; (80053c0 <HAL_RCC_ClockConfig+0x260>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d101      	bne.n	80051fa <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e0dc      	b.n	80053b4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80051fa:	f000 fa09 	bl	8005610 <RCC_GetSysClockFreqFromPLLSource>
 80051fe:	4603      	mov	r3, r0
 8005200:	4a70      	ldr	r2, [pc, #448]	; (80053c4 <HAL_RCC_ClockConfig+0x264>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d946      	bls.n	8005294 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005206:	4b6e      	ldr	r3, [pc, #440]	; (80053c0 <HAL_RCC_ClockConfig+0x260>)
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d140      	bne.n	8005294 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005212:	4b6b      	ldr	r3, [pc, #428]	; (80053c0 <HAL_RCC_ClockConfig+0x260>)
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800521a:	4a69      	ldr	r2, [pc, #420]	; (80053c0 <HAL_RCC_ClockConfig+0x260>)
 800521c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005220:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005222:	2380      	movs	r3, #128	; 0x80
 8005224:	617b      	str	r3, [r7, #20]
 8005226:	e035      	b.n	8005294 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	2b02      	cmp	r3, #2
 800522e:	d107      	bne.n	8005240 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005230:	4b63      	ldr	r3, [pc, #396]	; (80053c0 <HAL_RCC_ClockConfig+0x260>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d115      	bne.n	8005268 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e0b9      	b.n	80053b4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d107      	bne.n	8005258 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005248:	4b5d      	ldr	r3, [pc, #372]	; (80053c0 <HAL_RCC_ClockConfig+0x260>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0302 	and.w	r3, r3, #2
 8005250:	2b00      	cmp	r3, #0
 8005252:	d109      	bne.n	8005268 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	e0ad      	b.n	80053b4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005258:	4b59      	ldr	r3, [pc, #356]	; (80053c0 <HAL_RCC_ClockConfig+0x260>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005260:	2b00      	cmp	r3, #0
 8005262:	d101      	bne.n	8005268 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e0a5      	b.n	80053b4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005268:	f000 f8b4 	bl	80053d4 <HAL_RCC_GetSysClockFreq>
 800526c:	4603      	mov	r3, r0
 800526e:	4a55      	ldr	r2, [pc, #340]	; (80053c4 <HAL_RCC_ClockConfig+0x264>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d90f      	bls.n	8005294 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005274:	4b52      	ldr	r3, [pc, #328]	; (80053c0 <HAL_RCC_ClockConfig+0x260>)
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d109      	bne.n	8005294 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005280:	4b4f      	ldr	r3, [pc, #316]	; (80053c0 <HAL_RCC_ClockConfig+0x260>)
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005288:	4a4d      	ldr	r2, [pc, #308]	; (80053c0 <HAL_RCC_ClockConfig+0x260>)
 800528a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800528e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005290:	2380      	movs	r3, #128	; 0x80
 8005292:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005294:	4b4a      	ldr	r3, [pc, #296]	; (80053c0 <HAL_RCC_ClockConfig+0x260>)
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	f023 0203 	bic.w	r2, r3, #3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	4947      	ldr	r1, [pc, #284]	; (80053c0 <HAL_RCC_ClockConfig+0x260>)
 80052a2:	4313      	orrs	r3, r2
 80052a4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052a6:	f7fd f82f 	bl	8002308 <HAL_GetTick>
 80052aa:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052ac:	e00a      	b.n	80052c4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052ae:	f7fd f82b 	bl	8002308 <HAL_GetTick>
 80052b2:	4602      	mov	r2, r0
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80052bc:	4293      	cmp	r3, r2
 80052be:	d901      	bls.n	80052c4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80052c0:	2303      	movs	r3, #3
 80052c2:	e077      	b.n	80053b4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052c4:	4b3e      	ldr	r3, [pc, #248]	; (80053c0 <HAL_RCC_ClockConfig+0x260>)
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	f003 020c 	and.w	r2, r3, #12
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d1eb      	bne.n	80052ae <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	2b80      	cmp	r3, #128	; 0x80
 80052da:	d105      	bne.n	80052e8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80052dc:	4b38      	ldr	r3, [pc, #224]	; (80053c0 <HAL_RCC_ClockConfig+0x260>)
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	4a37      	ldr	r2, [pc, #220]	; (80053c0 <HAL_RCC_ClockConfig+0x260>)
 80052e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052e6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 0302 	and.w	r3, r3, #2
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d010      	beq.n	8005316 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	689a      	ldr	r2, [r3, #8]
 80052f8:	4b31      	ldr	r3, [pc, #196]	; (80053c0 <HAL_RCC_ClockConfig+0x260>)
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005300:	429a      	cmp	r2, r3
 8005302:	d208      	bcs.n	8005316 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005304:	4b2e      	ldr	r3, [pc, #184]	; (80053c0 <HAL_RCC_ClockConfig+0x260>)
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	492b      	ldr	r1, [pc, #172]	; (80053c0 <HAL_RCC_ClockConfig+0x260>)
 8005312:	4313      	orrs	r3, r2
 8005314:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005316:	4b29      	ldr	r3, [pc, #164]	; (80053bc <HAL_RCC_ClockConfig+0x25c>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 030f 	and.w	r3, r3, #15
 800531e:	683a      	ldr	r2, [r7, #0]
 8005320:	429a      	cmp	r2, r3
 8005322:	d210      	bcs.n	8005346 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005324:	4b25      	ldr	r3, [pc, #148]	; (80053bc <HAL_RCC_ClockConfig+0x25c>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f023 020f 	bic.w	r2, r3, #15
 800532c:	4923      	ldr	r1, [pc, #140]	; (80053bc <HAL_RCC_ClockConfig+0x25c>)
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	4313      	orrs	r3, r2
 8005332:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005334:	4b21      	ldr	r3, [pc, #132]	; (80053bc <HAL_RCC_ClockConfig+0x25c>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 030f 	and.w	r3, r3, #15
 800533c:	683a      	ldr	r2, [r7, #0]
 800533e:	429a      	cmp	r2, r3
 8005340:	d001      	beq.n	8005346 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e036      	b.n	80053b4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 0304 	and.w	r3, r3, #4
 800534e:	2b00      	cmp	r3, #0
 8005350:	d008      	beq.n	8005364 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005352:	4b1b      	ldr	r3, [pc, #108]	; (80053c0 <HAL_RCC_ClockConfig+0x260>)
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	4918      	ldr	r1, [pc, #96]	; (80053c0 <HAL_RCC_ClockConfig+0x260>)
 8005360:	4313      	orrs	r3, r2
 8005362:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0308 	and.w	r3, r3, #8
 800536c:	2b00      	cmp	r3, #0
 800536e:	d009      	beq.n	8005384 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005370:	4b13      	ldr	r3, [pc, #76]	; (80053c0 <HAL_RCC_ClockConfig+0x260>)
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	00db      	lsls	r3, r3, #3
 800537e:	4910      	ldr	r1, [pc, #64]	; (80053c0 <HAL_RCC_ClockConfig+0x260>)
 8005380:	4313      	orrs	r3, r2
 8005382:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005384:	f000 f826 	bl	80053d4 <HAL_RCC_GetSysClockFreq>
 8005388:	4602      	mov	r2, r0
 800538a:	4b0d      	ldr	r3, [pc, #52]	; (80053c0 <HAL_RCC_ClockConfig+0x260>)
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	091b      	lsrs	r3, r3, #4
 8005390:	f003 030f 	and.w	r3, r3, #15
 8005394:	490c      	ldr	r1, [pc, #48]	; (80053c8 <HAL_RCC_ClockConfig+0x268>)
 8005396:	5ccb      	ldrb	r3, [r1, r3]
 8005398:	f003 031f 	and.w	r3, r3, #31
 800539c:	fa22 f303 	lsr.w	r3, r2, r3
 80053a0:	4a0a      	ldr	r2, [pc, #40]	; (80053cc <HAL_RCC_ClockConfig+0x26c>)
 80053a2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80053a4:	4b0a      	ldr	r3, [pc, #40]	; (80053d0 <HAL_RCC_ClockConfig+0x270>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4618      	mov	r0, r3
 80053aa:	f7fc ff5d 	bl	8002268 <HAL_InitTick>
 80053ae:	4603      	mov	r3, r0
 80053b0:	73fb      	strb	r3, [r7, #15]

  return status;
 80053b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3718      	adds	r7, #24
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	40022000 	.word	0x40022000
 80053c0:	40021000 	.word	0x40021000
 80053c4:	04c4b400 	.word	0x04c4b400
 80053c8:	080085a8 	.word	0x080085a8
 80053cc:	20004b00 	.word	0x20004b00
 80053d0:	20004b04 	.word	0x20004b04

080053d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b089      	sub	sp, #36	; 0x24
 80053d8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80053da:	2300      	movs	r3, #0
 80053dc:	61fb      	str	r3, [r7, #28]
 80053de:	2300      	movs	r3, #0
 80053e0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053e2:	4b3e      	ldr	r3, [pc, #248]	; (80054dc <HAL_RCC_GetSysClockFreq+0x108>)
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	f003 030c 	and.w	r3, r3, #12
 80053ea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053ec:	4b3b      	ldr	r3, [pc, #236]	; (80054dc <HAL_RCC_GetSysClockFreq+0x108>)
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	f003 0303 	and.w	r3, r3, #3
 80053f4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d005      	beq.n	8005408 <HAL_RCC_GetSysClockFreq+0x34>
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	2b0c      	cmp	r3, #12
 8005400:	d121      	bne.n	8005446 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2b01      	cmp	r3, #1
 8005406:	d11e      	bne.n	8005446 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005408:	4b34      	ldr	r3, [pc, #208]	; (80054dc <HAL_RCC_GetSysClockFreq+0x108>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0308 	and.w	r3, r3, #8
 8005410:	2b00      	cmp	r3, #0
 8005412:	d107      	bne.n	8005424 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005414:	4b31      	ldr	r3, [pc, #196]	; (80054dc <HAL_RCC_GetSysClockFreq+0x108>)
 8005416:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800541a:	0a1b      	lsrs	r3, r3, #8
 800541c:	f003 030f 	and.w	r3, r3, #15
 8005420:	61fb      	str	r3, [r7, #28]
 8005422:	e005      	b.n	8005430 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005424:	4b2d      	ldr	r3, [pc, #180]	; (80054dc <HAL_RCC_GetSysClockFreq+0x108>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	091b      	lsrs	r3, r3, #4
 800542a:	f003 030f 	and.w	r3, r3, #15
 800542e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005430:	4a2b      	ldr	r2, [pc, #172]	; (80054e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005438:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d10d      	bne.n	800545c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005444:	e00a      	b.n	800545c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	2b04      	cmp	r3, #4
 800544a:	d102      	bne.n	8005452 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800544c:	4b25      	ldr	r3, [pc, #148]	; (80054e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800544e:	61bb      	str	r3, [r7, #24]
 8005450:	e004      	b.n	800545c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	2b08      	cmp	r3, #8
 8005456:	d101      	bne.n	800545c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005458:	4b23      	ldr	r3, [pc, #140]	; (80054e8 <HAL_RCC_GetSysClockFreq+0x114>)
 800545a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	2b0c      	cmp	r3, #12
 8005460:	d134      	bne.n	80054cc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005462:	4b1e      	ldr	r3, [pc, #120]	; (80054dc <HAL_RCC_GetSysClockFreq+0x108>)
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	f003 0303 	and.w	r3, r3, #3
 800546a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	2b02      	cmp	r3, #2
 8005470:	d003      	beq.n	800547a <HAL_RCC_GetSysClockFreq+0xa6>
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	2b03      	cmp	r3, #3
 8005476:	d003      	beq.n	8005480 <HAL_RCC_GetSysClockFreq+0xac>
 8005478:	e005      	b.n	8005486 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800547a:	4b1a      	ldr	r3, [pc, #104]	; (80054e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800547c:	617b      	str	r3, [r7, #20]
      break;
 800547e:	e005      	b.n	800548c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005480:	4b19      	ldr	r3, [pc, #100]	; (80054e8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005482:	617b      	str	r3, [r7, #20]
      break;
 8005484:	e002      	b.n	800548c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	617b      	str	r3, [r7, #20]
      break;
 800548a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800548c:	4b13      	ldr	r3, [pc, #76]	; (80054dc <HAL_RCC_GetSysClockFreq+0x108>)
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	091b      	lsrs	r3, r3, #4
 8005492:	f003 030f 	and.w	r3, r3, #15
 8005496:	3301      	adds	r3, #1
 8005498:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800549a:	4b10      	ldr	r3, [pc, #64]	; (80054dc <HAL_RCC_GetSysClockFreq+0x108>)
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	0a1b      	lsrs	r3, r3, #8
 80054a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054a4:	697a      	ldr	r2, [r7, #20]
 80054a6:	fb03 f202 	mul.w	r2, r3, r2
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80054b2:	4b0a      	ldr	r3, [pc, #40]	; (80054dc <HAL_RCC_GetSysClockFreq+0x108>)
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	0e5b      	lsrs	r3, r3, #25
 80054b8:	f003 0303 	and.w	r3, r3, #3
 80054bc:	3301      	adds	r3, #1
 80054be:	005b      	lsls	r3, r3, #1
 80054c0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80054c2:	697a      	ldr	r2, [r7, #20]
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80054cc:	69bb      	ldr	r3, [r7, #24]
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3724      	adds	r7, #36	; 0x24
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop
 80054dc:	40021000 	.word	0x40021000
 80054e0:	080085c0 	.word	0x080085c0
 80054e4:	00f42400 	.word	0x00f42400
 80054e8:	007a1200 	.word	0x007a1200

080054ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054ec:	b480      	push	{r7}
 80054ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054f0:	4b03      	ldr	r3, [pc, #12]	; (8005500 <HAL_RCC_GetHCLKFreq+0x14>)
 80054f2:	681b      	ldr	r3, [r3, #0]
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	20004b00 	.word	0x20004b00

08005504 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005508:	f7ff fff0 	bl	80054ec <HAL_RCC_GetHCLKFreq>
 800550c:	4602      	mov	r2, r0
 800550e:	4b06      	ldr	r3, [pc, #24]	; (8005528 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	0a1b      	lsrs	r3, r3, #8
 8005514:	f003 0307 	and.w	r3, r3, #7
 8005518:	4904      	ldr	r1, [pc, #16]	; (800552c <HAL_RCC_GetPCLK1Freq+0x28>)
 800551a:	5ccb      	ldrb	r3, [r1, r3]
 800551c:	f003 031f 	and.w	r3, r3, #31
 8005520:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005524:	4618      	mov	r0, r3
 8005526:	bd80      	pop	{r7, pc}
 8005528:	40021000 	.word	0x40021000
 800552c:	080085b8 	.word	0x080085b8

08005530 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005534:	f7ff ffda 	bl	80054ec <HAL_RCC_GetHCLKFreq>
 8005538:	4602      	mov	r2, r0
 800553a:	4b06      	ldr	r3, [pc, #24]	; (8005554 <HAL_RCC_GetPCLK2Freq+0x24>)
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	0adb      	lsrs	r3, r3, #11
 8005540:	f003 0307 	and.w	r3, r3, #7
 8005544:	4904      	ldr	r1, [pc, #16]	; (8005558 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005546:	5ccb      	ldrb	r3, [r1, r3]
 8005548:	f003 031f 	and.w	r3, r3, #31
 800554c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005550:	4618      	mov	r0, r3
 8005552:	bd80      	pop	{r7, pc}
 8005554:	40021000 	.word	0x40021000
 8005558:	080085b8 	.word	0x080085b8

0800555c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b086      	sub	sp, #24
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005564:	2300      	movs	r3, #0
 8005566:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005568:	4b27      	ldr	r3, [pc, #156]	; (8005608 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800556a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800556c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d003      	beq.n	800557c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005574:	f7ff f906 	bl	8004784 <HAL_PWREx_GetVoltageRange>
 8005578:	6178      	str	r0, [r7, #20]
 800557a:	e014      	b.n	80055a6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800557c:	4b22      	ldr	r3, [pc, #136]	; (8005608 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800557e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005580:	4a21      	ldr	r2, [pc, #132]	; (8005608 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005586:	6593      	str	r3, [r2, #88]	; 0x58
 8005588:	4b1f      	ldr	r3, [pc, #124]	; (8005608 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800558a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800558c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005590:	60fb      	str	r3, [r7, #12]
 8005592:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005594:	f7ff f8f6 	bl	8004784 <HAL_PWREx_GetVoltageRange>
 8005598:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800559a:	4b1b      	ldr	r3, [pc, #108]	; (8005608 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800559c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800559e:	4a1a      	ldr	r2, [pc, #104]	; (8005608 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80055a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055a4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055ac:	d10b      	bne.n	80055c6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2b80      	cmp	r3, #128	; 0x80
 80055b2:	d913      	bls.n	80055dc <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2ba0      	cmp	r3, #160	; 0xa0
 80055b8:	d902      	bls.n	80055c0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80055ba:	2302      	movs	r3, #2
 80055bc:	613b      	str	r3, [r7, #16]
 80055be:	e00d      	b.n	80055dc <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80055c0:	2301      	movs	r3, #1
 80055c2:	613b      	str	r3, [r7, #16]
 80055c4:	e00a      	b.n	80055dc <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2b7f      	cmp	r3, #127	; 0x7f
 80055ca:	d902      	bls.n	80055d2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80055cc:	2302      	movs	r3, #2
 80055ce:	613b      	str	r3, [r7, #16]
 80055d0:	e004      	b.n	80055dc <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2b70      	cmp	r3, #112	; 0x70
 80055d6:	d101      	bne.n	80055dc <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80055d8:	2301      	movs	r3, #1
 80055da:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80055dc:	4b0b      	ldr	r3, [pc, #44]	; (800560c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f023 020f 	bic.w	r2, r3, #15
 80055e4:	4909      	ldr	r1, [pc, #36]	; (800560c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80055ec:	4b07      	ldr	r3, [pc, #28]	; (800560c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 030f 	and.w	r3, r3, #15
 80055f4:	693a      	ldr	r2, [r7, #16]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d001      	beq.n	80055fe <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e000      	b.n	8005600 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	3718      	adds	r7, #24
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	40021000 	.word	0x40021000
 800560c:	40022000 	.word	0x40022000

08005610 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005610:	b480      	push	{r7}
 8005612:	b087      	sub	sp, #28
 8005614:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005616:	4b2d      	ldr	r3, [pc, #180]	; (80056cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	f003 0303 	and.w	r3, r3, #3
 800561e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2b03      	cmp	r3, #3
 8005624:	d00b      	beq.n	800563e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2b03      	cmp	r3, #3
 800562a:	d825      	bhi.n	8005678 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2b01      	cmp	r3, #1
 8005630:	d008      	beq.n	8005644 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2b02      	cmp	r3, #2
 8005636:	d11f      	bne.n	8005678 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005638:	4b25      	ldr	r3, [pc, #148]	; (80056d0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800563a:	613b      	str	r3, [r7, #16]
    break;
 800563c:	e01f      	b.n	800567e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800563e:	4b25      	ldr	r3, [pc, #148]	; (80056d4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005640:	613b      	str	r3, [r7, #16]
    break;
 8005642:	e01c      	b.n	800567e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005644:	4b21      	ldr	r3, [pc, #132]	; (80056cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 0308 	and.w	r3, r3, #8
 800564c:	2b00      	cmp	r3, #0
 800564e:	d107      	bne.n	8005660 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005650:	4b1e      	ldr	r3, [pc, #120]	; (80056cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005652:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005656:	0a1b      	lsrs	r3, r3, #8
 8005658:	f003 030f 	and.w	r3, r3, #15
 800565c:	617b      	str	r3, [r7, #20]
 800565e:	e005      	b.n	800566c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005660:	4b1a      	ldr	r3, [pc, #104]	; (80056cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	091b      	lsrs	r3, r3, #4
 8005666:	f003 030f 	and.w	r3, r3, #15
 800566a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800566c:	4a1a      	ldr	r2, [pc, #104]	; (80056d8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005674:	613b      	str	r3, [r7, #16]
    break;
 8005676:	e002      	b.n	800567e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005678:	2300      	movs	r3, #0
 800567a:	613b      	str	r3, [r7, #16]
    break;
 800567c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800567e:	4b13      	ldr	r3, [pc, #76]	; (80056cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	091b      	lsrs	r3, r3, #4
 8005684:	f003 030f 	and.w	r3, r3, #15
 8005688:	3301      	adds	r3, #1
 800568a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800568c:	4b0f      	ldr	r3, [pc, #60]	; (80056cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	0a1b      	lsrs	r3, r3, #8
 8005692:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005696:	693a      	ldr	r2, [r7, #16]
 8005698:	fb03 f202 	mul.w	r2, r3, r2
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	fbb2 f3f3 	udiv	r3, r2, r3
 80056a2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80056a4:	4b09      	ldr	r3, [pc, #36]	; (80056cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	0e5b      	lsrs	r3, r3, #25
 80056aa:	f003 0303 	and.w	r3, r3, #3
 80056ae:	3301      	adds	r3, #1
 80056b0:	005b      	lsls	r3, r3, #1
 80056b2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80056b4:	693a      	ldr	r2, [r7, #16]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056bc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80056be:	683b      	ldr	r3, [r7, #0]
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	371c      	adds	r7, #28
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr
 80056cc:	40021000 	.word	0x40021000
 80056d0:	00f42400 	.word	0x00f42400
 80056d4:	007a1200 	.word	0x007a1200
 80056d8:	080085c0 	.word	0x080085c0

080056dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b086      	sub	sp, #24
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80056e4:	2300      	movs	r3, #0
 80056e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80056e8:	2300      	movs	r3, #0
 80056ea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d040      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056fc:	2b80      	cmp	r3, #128	; 0x80
 80056fe:	d02a      	beq.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005700:	2b80      	cmp	r3, #128	; 0x80
 8005702:	d825      	bhi.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005704:	2b60      	cmp	r3, #96	; 0x60
 8005706:	d026      	beq.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005708:	2b60      	cmp	r3, #96	; 0x60
 800570a:	d821      	bhi.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800570c:	2b40      	cmp	r3, #64	; 0x40
 800570e:	d006      	beq.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005710:	2b40      	cmp	r3, #64	; 0x40
 8005712:	d81d      	bhi.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005714:	2b00      	cmp	r3, #0
 8005716:	d009      	beq.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005718:	2b20      	cmp	r3, #32
 800571a:	d010      	beq.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800571c:	e018      	b.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800571e:	4b89      	ldr	r3, [pc, #548]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	4a88      	ldr	r2, [pc, #544]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005728:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800572a:	e015      	b.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	3304      	adds	r3, #4
 8005730:	2100      	movs	r1, #0
 8005732:	4618      	mov	r0, r3
 8005734:	f000 fb62 	bl	8005dfc <RCCEx_PLLSAI1_Config>
 8005738:	4603      	mov	r3, r0
 800573a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800573c:	e00c      	b.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	3320      	adds	r3, #32
 8005742:	2100      	movs	r1, #0
 8005744:	4618      	mov	r0, r3
 8005746:	f000 fc4d 	bl	8005fe4 <RCCEx_PLLSAI2_Config>
 800574a:	4603      	mov	r3, r0
 800574c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800574e:	e003      	b.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	74fb      	strb	r3, [r7, #19]
      break;
 8005754:	e000      	b.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005756:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005758:	7cfb      	ldrb	r3, [r7, #19]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d10b      	bne.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800575e:	4b79      	ldr	r3, [pc, #484]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005760:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005764:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800576c:	4975      	ldr	r1, [pc, #468]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800576e:	4313      	orrs	r3, r2
 8005770:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005774:	e001      	b.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005776:	7cfb      	ldrb	r3, [r7, #19]
 8005778:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005782:	2b00      	cmp	r3, #0
 8005784:	d047      	beq.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800578a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800578e:	d030      	beq.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005790:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005794:	d82a      	bhi.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005796:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800579a:	d02a      	beq.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800579c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057a0:	d824      	bhi.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x110>
 80057a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057a6:	d008      	beq.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0xde>
 80057a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057ac:	d81e      	bhi.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x110>
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00a      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80057b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057b6:	d010      	beq.n	80057da <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80057b8:	e018      	b.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80057ba:	4b62      	ldr	r3, [pc, #392]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	4a61      	ldr	r2, [pc, #388]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057c4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80057c6:	e015      	b.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	3304      	adds	r3, #4
 80057cc:	2100      	movs	r1, #0
 80057ce:	4618      	mov	r0, r3
 80057d0:	f000 fb14 	bl	8005dfc <RCCEx_PLLSAI1_Config>
 80057d4:	4603      	mov	r3, r0
 80057d6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80057d8:	e00c      	b.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	3320      	adds	r3, #32
 80057de:	2100      	movs	r1, #0
 80057e0:	4618      	mov	r0, r3
 80057e2:	f000 fbff 	bl	8005fe4 <RCCEx_PLLSAI2_Config>
 80057e6:	4603      	mov	r3, r0
 80057e8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80057ea:	e003      	b.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	74fb      	strb	r3, [r7, #19]
      break;
 80057f0:	e000      	b.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80057f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057f4:	7cfb      	ldrb	r3, [r7, #19]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d10b      	bne.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80057fa:	4b52      	ldr	r3, [pc, #328]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005800:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005808:	494e      	ldr	r1, [pc, #312]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800580a:	4313      	orrs	r3, r2
 800580c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005810:	e001      	b.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005812:	7cfb      	ldrb	r3, [r7, #19]
 8005814:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800581e:	2b00      	cmp	r3, #0
 8005820:	f000 809f 	beq.w	8005962 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005824:	2300      	movs	r3, #0
 8005826:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005828:	4b46      	ldr	r3, [pc, #280]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800582a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800582c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005830:	2b00      	cmp	r3, #0
 8005832:	d101      	bne.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005834:	2301      	movs	r3, #1
 8005836:	e000      	b.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005838:	2300      	movs	r3, #0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00d      	beq.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800583e:	4b41      	ldr	r3, [pc, #260]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005842:	4a40      	ldr	r2, [pc, #256]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005848:	6593      	str	r3, [r2, #88]	; 0x58
 800584a:	4b3e      	ldr	r3, [pc, #248]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800584c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800584e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005852:	60bb      	str	r3, [r7, #8]
 8005854:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005856:	2301      	movs	r3, #1
 8005858:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800585a:	4b3b      	ldr	r3, [pc, #236]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a3a      	ldr	r2, [pc, #232]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005864:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005866:	f7fc fd4f 	bl	8002308 <HAL_GetTick>
 800586a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800586c:	e009      	b.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800586e:	f7fc fd4b 	bl	8002308 <HAL_GetTick>
 8005872:	4602      	mov	r2, r0
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	1ad3      	subs	r3, r2, r3
 8005878:	2b02      	cmp	r3, #2
 800587a:	d902      	bls.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800587c:	2303      	movs	r3, #3
 800587e:	74fb      	strb	r3, [r7, #19]
        break;
 8005880:	e005      	b.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005882:	4b31      	ldr	r3, [pc, #196]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800588a:	2b00      	cmp	r3, #0
 800588c:	d0ef      	beq.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800588e:	7cfb      	ldrb	r3, [r7, #19]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d15b      	bne.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005894:	4b2b      	ldr	r3, [pc, #172]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800589a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800589e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d01f      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80058ac:	697a      	ldr	r2, [r7, #20]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d019      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80058b2:	4b24      	ldr	r3, [pc, #144]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80058b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058bc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80058be:	4b21      	ldr	r3, [pc, #132]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80058c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058c4:	4a1f      	ldr	r2, [pc, #124]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80058c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80058ce:	4b1d      	ldr	r3, [pc, #116]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80058d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058d4:	4a1b      	ldr	r2, [pc, #108]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80058d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80058de:	4a19      	ldr	r2, [pc, #100]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	f003 0301 	and.w	r3, r3, #1
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d016      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058f0:	f7fc fd0a 	bl	8002308 <HAL_GetTick>
 80058f4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058f6:	e00b      	b.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058f8:	f7fc fd06 	bl	8002308 <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	f241 3288 	movw	r2, #5000	; 0x1388
 8005906:	4293      	cmp	r3, r2
 8005908:	d902      	bls.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	74fb      	strb	r3, [r7, #19]
            break;
 800590e:	e006      	b.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005910:	4b0c      	ldr	r3, [pc, #48]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005916:	f003 0302 	and.w	r3, r3, #2
 800591a:	2b00      	cmp	r3, #0
 800591c:	d0ec      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800591e:	7cfb      	ldrb	r3, [r7, #19]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d10c      	bne.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005924:	4b07      	ldr	r3, [pc, #28]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800592a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005934:	4903      	ldr	r1, [pc, #12]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005936:	4313      	orrs	r3, r2
 8005938:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800593c:	e008      	b.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800593e:	7cfb      	ldrb	r3, [r7, #19]
 8005940:	74bb      	strb	r3, [r7, #18]
 8005942:	e005      	b.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005944:	40021000 	.word	0x40021000
 8005948:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800594c:	7cfb      	ldrb	r3, [r7, #19]
 800594e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005950:	7c7b      	ldrb	r3, [r7, #17]
 8005952:	2b01      	cmp	r3, #1
 8005954:	d105      	bne.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005956:	4ba0      	ldr	r3, [pc, #640]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800595a:	4a9f      	ldr	r2, [pc, #636]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800595c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005960:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 0301 	and.w	r3, r3, #1
 800596a:	2b00      	cmp	r3, #0
 800596c:	d00a      	beq.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800596e:	4b9a      	ldr	r3, [pc, #616]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005974:	f023 0203 	bic.w	r2, r3, #3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800597c:	4996      	ldr	r1, [pc, #600]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800597e:	4313      	orrs	r3, r2
 8005980:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0302 	and.w	r3, r3, #2
 800598c:	2b00      	cmp	r3, #0
 800598e:	d00a      	beq.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005990:	4b91      	ldr	r3, [pc, #580]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005996:	f023 020c 	bic.w	r2, r3, #12
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599e:	498e      	ldr	r1, [pc, #568]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059a0:	4313      	orrs	r3, r2
 80059a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 0304 	and.w	r3, r3, #4
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00a      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80059b2:	4b89      	ldr	r3, [pc, #548]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059c0:	4985      	ldr	r1, [pc, #532]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059c2:	4313      	orrs	r3, r2
 80059c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 0308 	and.w	r3, r3, #8
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d00a      	beq.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80059d4:	4b80      	ldr	r3, [pc, #512]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059da:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059e2:	497d      	ldr	r1, [pc, #500]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059e4:	4313      	orrs	r3, r2
 80059e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0310 	and.w	r3, r3, #16
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d00a      	beq.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80059f6:	4b78      	ldr	r3, [pc, #480]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a04:	4974      	ldr	r1, [pc, #464]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a06:	4313      	orrs	r3, r2
 8005a08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 0320 	and.w	r3, r3, #32
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d00a      	beq.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a18:	4b6f      	ldr	r3, [pc, #444]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a1e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a26:	496c      	ldr	r1, [pc, #432]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00a      	beq.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a3a:	4b67      	ldr	r3, [pc, #412]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a40:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a48:	4963      	ldr	r1, [pc, #396]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d00a      	beq.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005a5c:	4b5e      	ldr	r3, [pc, #376]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a62:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a6a:	495b      	ldr	r1, [pc, #364]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00a      	beq.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a7e:	4b56      	ldr	r3, [pc, #344]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a84:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a8c:	4952      	ldr	r1, [pc, #328]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d00a      	beq.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005aa0:	4b4d      	ldr	r3, [pc, #308]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aa6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aae:	494a      	ldr	r1, [pc, #296]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d00a      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005ac2:	4b45      	ldr	r3, [pc, #276]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ac8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ad0:	4941      	ldr	r1, [pc, #260]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d00a      	beq.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005ae4:	4b3c      	ldr	r3, [pc, #240]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ae6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005aea:	f023 0203 	bic.w	r2, r3, #3
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005af2:	4939      	ldr	r1, [pc, #228]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005af4:	4313      	orrs	r3, r2
 8005af6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d028      	beq.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b06:	4b34      	ldr	r3, [pc, #208]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b0c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b14:	4930      	ldr	r1, [pc, #192]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b16:	4313      	orrs	r3, r2
 8005b18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b24:	d106      	bne.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b26:	4b2c      	ldr	r3, [pc, #176]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	4a2b      	ldr	r2, [pc, #172]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b30:	60d3      	str	r3, [r2, #12]
 8005b32:	e011      	b.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b3c:	d10c      	bne.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	3304      	adds	r3, #4
 8005b42:	2101      	movs	r1, #1
 8005b44:	4618      	mov	r0, r3
 8005b46:	f000 f959 	bl	8005dfc <RCCEx_PLLSAI1_Config>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005b4e:	7cfb      	ldrb	r3, [r7, #19]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d001      	beq.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005b54:	7cfb      	ldrb	r3, [r7, #19]
 8005b56:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d04d      	beq.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b6c:	d108      	bne.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005b6e:	4b1a      	ldr	r3, [pc, #104]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b70:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b74:	4a18      	ldr	r2, [pc, #96]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b7a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005b7e:	e012      	b.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005b80:	4b15      	ldr	r3, [pc, #84]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b86:	4a14      	ldr	r2, [pc, #80]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b8c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005b90:	4b11      	ldr	r3, [pc, #68]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b96:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b9e:	490e      	ldr	r1, [pc, #56]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005baa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005bae:	d106      	bne.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bb0:	4b09      	ldr	r3, [pc, #36]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	4a08      	ldr	r2, [pc, #32]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005bb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bba:	60d3      	str	r3, [r2, #12]
 8005bbc:	e020      	b.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bc6:	d109      	bne.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005bc8:	4b03      	ldr	r3, [pc, #12]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	4a02      	ldr	r2, [pc, #8]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005bce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bd2:	60d3      	str	r3, [r2, #12]
 8005bd4:	e014      	b.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005bd6:	bf00      	nop
 8005bd8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005be0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005be4:	d10c      	bne.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	3304      	adds	r3, #4
 8005bea:	2101      	movs	r1, #1
 8005bec:	4618      	mov	r0, r3
 8005bee:	f000 f905 	bl	8005dfc <RCCEx_PLLSAI1_Config>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005bf6:	7cfb      	ldrb	r3, [r7, #19]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d001      	beq.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005bfc:	7cfb      	ldrb	r3, [r7, #19]
 8005bfe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d028      	beq.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005c0c:	4b7a      	ldr	r3, [pc, #488]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c12:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c1a:	4977      	ldr	r1, [pc, #476]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c2a:	d106      	bne.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c2c:	4b72      	ldr	r3, [pc, #456]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	4a71      	ldr	r2, [pc, #452]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005c32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c36:	60d3      	str	r3, [r2, #12]
 8005c38:	e011      	b.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c3e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c42:	d10c      	bne.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	3304      	adds	r3, #4
 8005c48:	2101      	movs	r1, #1
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f000 f8d6 	bl	8005dfc <RCCEx_PLLSAI1_Config>
 8005c50:	4603      	mov	r3, r0
 8005c52:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c54:	7cfb      	ldrb	r3, [r7, #19]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d001      	beq.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005c5a:	7cfb      	ldrb	r3, [r7, #19]
 8005c5c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d01e      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005c6a:	4b63      	ldr	r3, [pc, #396]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c70:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c7a:	495f      	ldr	r1, [pc, #380]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c8c:	d10c      	bne.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	3304      	adds	r3, #4
 8005c92:	2102      	movs	r1, #2
 8005c94:	4618      	mov	r0, r3
 8005c96:	f000 f8b1 	bl	8005dfc <RCCEx_PLLSAI1_Config>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c9e:	7cfb      	ldrb	r3, [r7, #19]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d001      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005ca4:	7cfb      	ldrb	r3, [r7, #19]
 8005ca6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d00b      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005cb4:	4b50      	ldr	r3, [pc, #320]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005cb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005cba:	f023 0204 	bic.w	r2, r3, #4
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cc4:	494c      	ldr	r1, [pc, #304]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d00b      	beq.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005cd8:	4b47      	ldr	r3, [pc, #284]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005cda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005cde:	f023 0218 	bic.w	r2, r3, #24
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ce8:	4943      	ldr	r1, [pc, #268]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005cea:	4313      	orrs	r3, r2
 8005cec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d035      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005cfc:	4b3e      	ldr	r3, [pc, #248]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a3d      	ldr	r2, [pc, #244]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005d02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d08:	f7fc fafe 	bl	8002308 <HAL_GetTick>
 8005d0c:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005d0e:	e009      	b.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005d10:	f7fc fafa 	bl	8002308 <HAL_GetTick>
 8005d14:	4602      	mov	r2, r0
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	1ad3      	subs	r3, r2, r3
 8005d1a:	2b02      	cmp	r3, #2
 8005d1c:	d902      	bls.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	74fb      	strb	r3, [r7, #19]
        break;
 8005d22:	e005      	b.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005d24:	4b34      	ldr	r3, [pc, #208]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d1ef      	bne.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8005d30:	7cfb      	ldrb	r3, [r7, #19]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d113      	bne.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8005d36:	4b30      	ldr	r3, [pc, #192]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005d38:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d46:	492c      	ldr	r1, [pc, #176]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	3320      	adds	r3, #32
 8005d52:	2102      	movs	r1, #2
 8005d54:	4618      	mov	r0, r3
 8005d56:	f000 f945 	bl	8005fe4 <RCCEx_PLLSAI2_Config>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8005d5e:	7cfb      	ldrb	r3, [r7, #19]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d001      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8005d64:	7cfb      	ldrb	r3, [r7, #19]
 8005d66:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d01e      	beq.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8005d74:	4b20      	ldr	r3, [pc, #128]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005d76:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d84:	491c      	ldr	r1, [pc, #112]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005d86:	4313      	orrs	r3, r2
 8005d88:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d96:	d10c      	bne.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	3320      	adds	r3, #32
 8005d9c:	2101      	movs	r1, #1
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f000 f920 	bl	8005fe4 <RCCEx_PLLSAI2_Config>
 8005da4:	4603      	mov	r3, r0
 8005da6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005da8:	7cfb      	ldrb	r3, [r7, #19]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d001      	beq.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 8005dae:	7cfb      	ldrb	r3, [r7, #19]
 8005db0:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d017      	beq.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005dbe:	4b0e      	ldr	r3, [pc, #56]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005dc0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005dc4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dce:	490a      	ldr	r1, [pc, #40]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ddc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005de0:	d105      	bne.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005de2:	4b05      	ldr	r3, [pc, #20]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	4a04      	ldr	r2, [pc, #16]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005de8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005dec:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005dee:	7cbb      	ldrb	r3, [r7, #18]
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3718      	adds	r7, #24
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	40021000 	.word	0x40021000

08005dfc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e06:	2300      	movs	r3, #0
 8005e08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005e0a:	4b72      	ldr	r3, [pc, #456]	; (8005fd4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	f003 0303 	and.w	r3, r3, #3
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d00e      	beq.n	8005e34 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005e16:	4b6f      	ldr	r3, [pc, #444]	; (8005fd4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	f003 0203 	and.w	r2, r3, #3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d103      	bne.n	8005e2e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
       ||
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d142      	bne.n	8005eb4 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	73fb      	strb	r3, [r7, #15]
 8005e32:	e03f      	b.n	8005eb4 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2b03      	cmp	r3, #3
 8005e3a:	d018      	beq.n	8005e6e <RCCEx_PLLSAI1_Config+0x72>
 8005e3c:	2b03      	cmp	r3, #3
 8005e3e:	d825      	bhi.n	8005e8c <RCCEx_PLLSAI1_Config+0x90>
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d002      	beq.n	8005e4a <RCCEx_PLLSAI1_Config+0x4e>
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	d009      	beq.n	8005e5c <RCCEx_PLLSAI1_Config+0x60>
 8005e48:	e020      	b.n	8005e8c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005e4a:	4b62      	ldr	r3, [pc, #392]	; (8005fd4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 0302 	and.w	r3, r3, #2
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d11d      	bne.n	8005e92 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e5a:	e01a      	b.n	8005e92 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005e5c:	4b5d      	ldr	r3, [pc, #372]	; (8005fd4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d116      	bne.n	8005e96 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e6c:	e013      	b.n	8005e96 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005e6e:	4b59      	ldr	r3, [pc, #356]	; (8005fd4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d10f      	bne.n	8005e9a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005e7a:	4b56      	ldr	r3, [pc, #344]	; (8005fd4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d109      	bne.n	8005e9a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005e8a:	e006      	b.n	8005e9a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	73fb      	strb	r3, [r7, #15]
      break;
 8005e90:	e004      	b.n	8005e9c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005e92:	bf00      	nop
 8005e94:	e002      	b.n	8005e9c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005e96:	bf00      	nop
 8005e98:	e000      	b.n	8005e9c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005e9a:	bf00      	nop
    }

    if(status == HAL_OK)
 8005e9c:	7bfb      	ldrb	r3, [r7, #15]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d108      	bne.n	8005eb4 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005ea2:	4b4c      	ldr	r3, [pc, #304]	; (8005fd4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	f023 0203 	bic.w	r2, r3, #3
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4949      	ldr	r1, [pc, #292]	; (8005fd4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005eb4:	7bfb      	ldrb	r3, [r7, #15]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	f040 8086 	bne.w	8005fc8 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005ebc:	4b45      	ldr	r3, [pc, #276]	; (8005fd4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a44      	ldr	r2, [pc, #272]	; (8005fd4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ec2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005ec6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ec8:	f7fc fa1e 	bl	8002308 <HAL_GetTick>
 8005ecc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005ece:	e009      	b.n	8005ee4 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ed0:	f7fc fa1a 	bl	8002308 <HAL_GetTick>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d902      	bls.n	8005ee4 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	73fb      	strb	r3, [r7, #15]
        break;
 8005ee2:	e005      	b.n	8005ef0 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005ee4:	4b3b      	ldr	r3, [pc, #236]	; (8005fd4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d1ef      	bne.n	8005ed0 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005ef0:	7bfb      	ldrb	r3, [r7, #15]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d168      	bne.n	8005fc8 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d113      	bne.n	8005f24 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005efc:	4b35      	ldr	r3, [pc, #212]	; (8005fd4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005efe:	691a      	ldr	r2, [r3, #16]
 8005f00:	4b35      	ldr	r3, [pc, #212]	; (8005fd8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005f02:	4013      	ands	r3, r2
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	6892      	ldr	r2, [r2, #8]
 8005f08:	0211      	lsls	r1, r2, #8
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	68d2      	ldr	r2, [r2, #12]
 8005f0e:	06d2      	lsls	r2, r2, #27
 8005f10:	4311      	orrs	r1, r2
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	6852      	ldr	r2, [r2, #4]
 8005f16:	3a01      	subs	r2, #1
 8005f18:	0112      	lsls	r2, r2, #4
 8005f1a:	430a      	orrs	r2, r1
 8005f1c:	492d      	ldr	r1, [pc, #180]	; (8005fd4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	610b      	str	r3, [r1, #16]
 8005f22:	e02d      	b.n	8005f80 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d115      	bne.n	8005f56 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005f2a:	4b2a      	ldr	r3, [pc, #168]	; (8005fd4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f2c:	691a      	ldr	r2, [r3, #16]
 8005f2e:	4b2b      	ldr	r3, [pc, #172]	; (8005fdc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f30:	4013      	ands	r3, r2
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	6892      	ldr	r2, [r2, #8]
 8005f36:	0211      	lsls	r1, r2, #8
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	6912      	ldr	r2, [r2, #16]
 8005f3c:	0852      	lsrs	r2, r2, #1
 8005f3e:	3a01      	subs	r2, #1
 8005f40:	0552      	lsls	r2, r2, #21
 8005f42:	4311      	orrs	r1, r2
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	6852      	ldr	r2, [r2, #4]
 8005f48:	3a01      	subs	r2, #1
 8005f4a:	0112      	lsls	r2, r2, #4
 8005f4c:	430a      	orrs	r2, r1
 8005f4e:	4921      	ldr	r1, [pc, #132]	; (8005fd4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f50:	4313      	orrs	r3, r2
 8005f52:	610b      	str	r3, [r1, #16]
 8005f54:	e014      	b.n	8005f80 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005f56:	4b1f      	ldr	r3, [pc, #124]	; (8005fd4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f58:	691a      	ldr	r2, [r3, #16]
 8005f5a:	4b21      	ldr	r3, [pc, #132]	; (8005fe0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	6892      	ldr	r2, [r2, #8]
 8005f62:	0211      	lsls	r1, r2, #8
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	6952      	ldr	r2, [r2, #20]
 8005f68:	0852      	lsrs	r2, r2, #1
 8005f6a:	3a01      	subs	r2, #1
 8005f6c:	0652      	lsls	r2, r2, #25
 8005f6e:	4311      	orrs	r1, r2
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	6852      	ldr	r2, [r2, #4]
 8005f74:	3a01      	subs	r2, #1
 8005f76:	0112      	lsls	r2, r2, #4
 8005f78:	430a      	orrs	r2, r1
 8005f7a:	4916      	ldr	r1, [pc, #88]	; (8005fd4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005f80:	4b14      	ldr	r3, [pc, #80]	; (8005fd4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a13      	ldr	r2, [pc, #76]	; (8005fd4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f86:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005f8a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f8c:	f7fc f9bc 	bl	8002308 <HAL_GetTick>
 8005f90:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005f92:	e009      	b.n	8005fa8 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f94:	f7fc f9b8 	bl	8002308 <HAL_GetTick>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	2b02      	cmp	r3, #2
 8005fa0:	d902      	bls.n	8005fa8 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	73fb      	strb	r3, [r7, #15]
          break;
 8005fa6:	e005      	b.n	8005fb4 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005fa8:	4b0a      	ldr	r3, [pc, #40]	; (8005fd4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d0ef      	beq.n	8005f94 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005fb4:	7bfb      	ldrb	r3, [r7, #15]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d106      	bne.n	8005fc8 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005fba:	4b06      	ldr	r3, [pc, #24]	; (8005fd4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005fbc:	691a      	ldr	r2, [r3, #16]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	4904      	ldr	r1, [pc, #16]	; (8005fd4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3710      	adds	r7, #16
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	bf00      	nop
 8005fd4:	40021000 	.word	0x40021000
 8005fd8:	07ff800f 	.word	0x07ff800f
 8005fdc:	ff9f800f 	.word	0xff9f800f
 8005fe0:	f9ff800f 	.word	0xf9ff800f

08005fe4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005ff2:	4b72      	ldr	r3, [pc, #456]	; (80061bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	f003 0303 	and.w	r3, r3, #3
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d00e      	beq.n	800601c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005ffe:	4b6f      	ldr	r3, [pc, #444]	; (80061bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	f003 0203 	and.w	r2, r3, #3
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	429a      	cmp	r2, r3
 800600c:	d103      	bne.n	8006016 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
       ||
 8006012:	2b00      	cmp	r3, #0
 8006014:	d142      	bne.n	800609c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	73fb      	strb	r3, [r7, #15]
 800601a:	e03f      	b.n	800609c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2b03      	cmp	r3, #3
 8006022:	d018      	beq.n	8006056 <RCCEx_PLLSAI2_Config+0x72>
 8006024:	2b03      	cmp	r3, #3
 8006026:	d825      	bhi.n	8006074 <RCCEx_PLLSAI2_Config+0x90>
 8006028:	2b01      	cmp	r3, #1
 800602a:	d002      	beq.n	8006032 <RCCEx_PLLSAI2_Config+0x4e>
 800602c:	2b02      	cmp	r3, #2
 800602e:	d009      	beq.n	8006044 <RCCEx_PLLSAI2_Config+0x60>
 8006030:	e020      	b.n	8006074 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006032:	4b62      	ldr	r3, [pc, #392]	; (80061bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f003 0302 	and.w	r3, r3, #2
 800603a:	2b00      	cmp	r3, #0
 800603c:	d11d      	bne.n	800607a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006042:	e01a      	b.n	800607a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006044:	4b5d      	ldr	r3, [pc, #372]	; (80061bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800604c:	2b00      	cmp	r3, #0
 800604e:	d116      	bne.n	800607e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006054:	e013      	b.n	800607e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006056:	4b59      	ldr	r3, [pc, #356]	; (80061bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800605e:	2b00      	cmp	r3, #0
 8006060:	d10f      	bne.n	8006082 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006062:	4b56      	ldr	r3, [pc, #344]	; (80061bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800606a:	2b00      	cmp	r3, #0
 800606c:	d109      	bne.n	8006082 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006072:	e006      	b.n	8006082 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	73fb      	strb	r3, [r7, #15]
      break;
 8006078:	e004      	b.n	8006084 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800607a:	bf00      	nop
 800607c:	e002      	b.n	8006084 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800607e:	bf00      	nop
 8006080:	e000      	b.n	8006084 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006082:	bf00      	nop
    }

    if(status == HAL_OK)
 8006084:	7bfb      	ldrb	r3, [r7, #15]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d108      	bne.n	800609c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800608a:	4b4c      	ldr	r3, [pc, #304]	; (80061bc <RCCEx_PLLSAI2_Config+0x1d8>)
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	f023 0203 	bic.w	r2, r3, #3
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4949      	ldr	r1, [pc, #292]	; (80061bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006098:	4313      	orrs	r3, r2
 800609a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800609c:	7bfb      	ldrb	r3, [r7, #15]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	f040 8086 	bne.w	80061b0 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80060a4:	4b45      	ldr	r3, [pc, #276]	; (80061bc <RCCEx_PLLSAI2_Config+0x1d8>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a44      	ldr	r2, [pc, #272]	; (80061bc <RCCEx_PLLSAI2_Config+0x1d8>)
 80060aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060b0:	f7fc f92a 	bl	8002308 <HAL_GetTick>
 80060b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80060b6:	e009      	b.n	80060cc <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80060b8:	f7fc f926 	bl	8002308 <HAL_GetTick>
 80060bc:	4602      	mov	r2, r0
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	2b02      	cmp	r3, #2
 80060c4:	d902      	bls.n	80060cc <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	73fb      	strb	r3, [r7, #15]
        break;
 80060ca:	e005      	b.n	80060d8 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80060cc:	4b3b      	ldr	r3, [pc, #236]	; (80061bc <RCCEx_PLLSAI2_Config+0x1d8>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d1ef      	bne.n	80060b8 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80060d8:	7bfb      	ldrb	r3, [r7, #15]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d168      	bne.n	80061b0 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d113      	bne.n	800610c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80060e4:	4b35      	ldr	r3, [pc, #212]	; (80061bc <RCCEx_PLLSAI2_Config+0x1d8>)
 80060e6:	695a      	ldr	r2, [r3, #20]
 80060e8:	4b35      	ldr	r3, [pc, #212]	; (80061c0 <RCCEx_PLLSAI2_Config+0x1dc>)
 80060ea:	4013      	ands	r3, r2
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	6892      	ldr	r2, [r2, #8]
 80060f0:	0211      	lsls	r1, r2, #8
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	68d2      	ldr	r2, [r2, #12]
 80060f6:	06d2      	lsls	r2, r2, #27
 80060f8:	4311      	orrs	r1, r2
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	6852      	ldr	r2, [r2, #4]
 80060fe:	3a01      	subs	r2, #1
 8006100:	0112      	lsls	r2, r2, #4
 8006102:	430a      	orrs	r2, r1
 8006104:	492d      	ldr	r1, [pc, #180]	; (80061bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006106:	4313      	orrs	r3, r2
 8006108:	614b      	str	r3, [r1, #20]
 800610a:	e02d      	b.n	8006168 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	2b01      	cmp	r3, #1
 8006110:	d115      	bne.n	800613e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006112:	4b2a      	ldr	r3, [pc, #168]	; (80061bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006114:	695a      	ldr	r2, [r3, #20]
 8006116:	4b2b      	ldr	r3, [pc, #172]	; (80061c4 <RCCEx_PLLSAI2_Config+0x1e0>)
 8006118:	4013      	ands	r3, r2
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	6892      	ldr	r2, [r2, #8]
 800611e:	0211      	lsls	r1, r2, #8
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	6912      	ldr	r2, [r2, #16]
 8006124:	0852      	lsrs	r2, r2, #1
 8006126:	3a01      	subs	r2, #1
 8006128:	0552      	lsls	r2, r2, #21
 800612a:	4311      	orrs	r1, r2
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	6852      	ldr	r2, [r2, #4]
 8006130:	3a01      	subs	r2, #1
 8006132:	0112      	lsls	r2, r2, #4
 8006134:	430a      	orrs	r2, r1
 8006136:	4921      	ldr	r1, [pc, #132]	; (80061bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006138:	4313      	orrs	r3, r2
 800613a:	614b      	str	r3, [r1, #20]
 800613c:	e014      	b.n	8006168 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800613e:	4b1f      	ldr	r3, [pc, #124]	; (80061bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006140:	695a      	ldr	r2, [r3, #20]
 8006142:	4b21      	ldr	r3, [pc, #132]	; (80061c8 <RCCEx_PLLSAI2_Config+0x1e4>)
 8006144:	4013      	ands	r3, r2
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	6892      	ldr	r2, [r2, #8]
 800614a:	0211      	lsls	r1, r2, #8
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	6952      	ldr	r2, [r2, #20]
 8006150:	0852      	lsrs	r2, r2, #1
 8006152:	3a01      	subs	r2, #1
 8006154:	0652      	lsls	r2, r2, #25
 8006156:	4311      	orrs	r1, r2
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	6852      	ldr	r2, [r2, #4]
 800615c:	3a01      	subs	r2, #1
 800615e:	0112      	lsls	r2, r2, #4
 8006160:	430a      	orrs	r2, r1
 8006162:	4916      	ldr	r1, [pc, #88]	; (80061bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006164:	4313      	orrs	r3, r2
 8006166:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006168:	4b14      	ldr	r3, [pc, #80]	; (80061bc <RCCEx_PLLSAI2_Config+0x1d8>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a13      	ldr	r2, [pc, #76]	; (80061bc <RCCEx_PLLSAI2_Config+0x1d8>)
 800616e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006172:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006174:	f7fc f8c8 	bl	8002308 <HAL_GetTick>
 8006178:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800617a:	e009      	b.n	8006190 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800617c:	f7fc f8c4 	bl	8002308 <HAL_GetTick>
 8006180:	4602      	mov	r2, r0
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	1ad3      	subs	r3, r2, r3
 8006186:	2b02      	cmp	r3, #2
 8006188:	d902      	bls.n	8006190 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800618a:	2303      	movs	r3, #3
 800618c:	73fb      	strb	r3, [r7, #15]
          break;
 800618e:	e005      	b.n	800619c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006190:	4b0a      	ldr	r3, [pc, #40]	; (80061bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006198:	2b00      	cmp	r3, #0
 800619a:	d0ef      	beq.n	800617c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800619c:	7bfb      	ldrb	r3, [r7, #15]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d106      	bne.n	80061b0 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80061a2:	4b06      	ldr	r3, [pc, #24]	; (80061bc <RCCEx_PLLSAI2_Config+0x1d8>)
 80061a4:	695a      	ldr	r2, [r3, #20]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	699b      	ldr	r3, [r3, #24]
 80061aa:	4904      	ldr	r1, [pc, #16]	; (80061bc <RCCEx_PLLSAI2_Config+0x1d8>)
 80061ac:	4313      	orrs	r3, r2
 80061ae:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80061b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3710      	adds	r7, #16
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	40021000 	.word	0x40021000
 80061c0:	07ff800f 	.word	0x07ff800f
 80061c4:	ff9f800f 	.word	0xff9f800f
 80061c8:	f9ff800f 	.word	0xf9ff800f

080061cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d101      	bne.n	80061de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	e095      	b.n	800630a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d108      	bne.n	80061f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061ee:	d009      	beq.n	8006204 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	61da      	str	r2, [r3, #28]
 80061f6:	e005      	b.n	8006204 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006210:	b2db      	uxtb	r3, r3
 8006212:	2b00      	cmp	r3, #0
 8006214:	d106      	bne.n	8006224 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f7fb fe20 	bl	8001e64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2202      	movs	r2, #2
 8006228:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800623a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006244:	d902      	bls.n	800624c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006246:	2300      	movs	r3, #0
 8006248:	60fb      	str	r3, [r7, #12]
 800624a:	e002      	b.n	8006252 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800624c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006250:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800625a:	d007      	beq.n	800626c <HAL_SPI_Init+0xa0>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	68db      	ldr	r3, [r3, #12]
 8006260:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006264:	d002      	beq.n	800626c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800627c:	431a      	orrs	r2, r3
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	691b      	ldr	r3, [r3, #16]
 8006282:	f003 0302 	and.w	r3, r3, #2
 8006286:	431a      	orrs	r2, r3
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	695b      	ldr	r3, [r3, #20]
 800628c:	f003 0301 	and.w	r3, r3, #1
 8006290:	431a      	orrs	r2, r3
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	699b      	ldr	r3, [r3, #24]
 8006296:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800629a:	431a      	orrs	r2, r3
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	69db      	ldr	r3, [r3, #28]
 80062a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80062a4:	431a      	orrs	r2, r3
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6a1b      	ldr	r3, [r3, #32]
 80062aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ae:	ea42 0103 	orr.w	r1, r2, r3
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	430a      	orrs	r2, r1
 80062c0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	699b      	ldr	r3, [r3, #24]
 80062c6:	0c1b      	lsrs	r3, r3, #16
 80062c8:	f003 0204 	and.w	r2, r3, #4
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d0:	f003 0310 	and.w	r3, r3, #16
 80062d4:	431a      	orrs	r2, r3
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062da:	f003 0308 	and.w	r3, r3, #8
 80062de:	431a      	orrs	r2, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80062e8:	ea42 0103 	orr.w	r1, r2, r3
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	430a      	orrs	r2, r1
 80062f8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	3710      	adds	r7, #16
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}

08006312 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006312:	b580      	push	{r7, lr}
 8006314:	b088      	sub	sp, #32
 8006316:	af00      	add	r7, sp, #0
 8006318:	60f8      	str	r0, [r7, #12]
 800631a:	60b9      	str	r1, [r7, #8]
 800631c:	603b      	str	r3, [r7, #0]
 800631e:	4613      	mov	r3, r2
 8006320:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006322:	2300      	movs	r3, #0
 8006324:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800632c:	2b01      	cmp	r3, #1
 800632e:	d101      	bne.n	8006334 <HAL_SPI_Transmit+0x22>
 8006330:	2302      	movs	r3, #2
 8006332:	e15f      	b.n	80065f4 <HAL_SPI_Transmit+0x2e2>
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2201      	movs	r2, #1
 8006338:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800633c:	f7fb ffe4 	bl	8002308 <HAL_GetTick>
 8006340:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006342:	88fb      	ldrh	r3, [r7, #6]
 8006344:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800634c:	b2db      	uxtb	r3, r3
 800634e:	2b01      	cmp	r3, #1
 8006350:	d002      	beq.n	8006358 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006352:	2302      	movs	r3, #2
 8006354:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006356:	e148      	b.n	80065ea <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d002      	beq.n	8006364 <HAL_SPI_Transmit+0x52>
 800635e:	88fb      	ldrh	r3, [r7, #6]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d102      	bne.n	800636a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006368:	e13f      	b.n	80065ea <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2203      	movs	r2, #3
 800636e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2200      	movs	r2, #0
 8006376:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	68ba      	ldr	r2, [r7, #8]
 800637c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	88fa      	ldrh	r2, [r7, #6]
 8006382:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	88fa      	ldrh	r2, [r7, #6]
 8006388:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2200      	movs	r2, #0
 800638e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2200      	movs	r2, #0
 8006394:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2200      	movs	r2, #0
 800639c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2200      	movs	r2, #0
 80063a4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2200      	movs	r2, #0
 80063aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063b4:	d10f      	bne.n	80063d6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063d4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e0:	2b40      	cmp	r3, #64	; 0x40
 80063e2:	d007      	beq.n	80063f4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80063fc:	d94f      	bls.n	800649e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d002      	beq.n	800640c <HAL_SPI_Transmit+0xfa>
 8006406:	8afb      	ldrh	r3, [r7, #22]
 8006408:	2b01      	cmp	r3, #1
 800640a:	d142      	bne.n	8006492 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006410:	881a      	ldrh	r2, [r3, #0]
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800641c:	1c9a      	adds	r2, r3, #2
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006426:	b29b      	uxth	r3, r3
 8006428:	3b01      	subs	r3, #1
 800642a:	b29a      	uxth	r2, r3
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006430:	e02f      	b.n	8006492 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	f003 0302 	and.w	r3, r3, #2
 800643c:	2b02      	cmp	r3, #2
 800643e:	d112      	bne.n	8006466 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006444:	881a      	ldrh	r2, [r3, #0]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006450:	1c9a      	adds	r2, r3, #2
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800645a:	b29b      	uxth	r3, r3
 800645c:	3b01      	subs	r3, #1
 800645e:	b29a      	uxth	r2, r3
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006464:	e015      	b.n	8006492 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006466:	f7fb ff4f 	bl	8002308 <HAL_GetTick>
 800646a:	4602      	mov	r2, r0
 800646c:	69bb      	ldr	r3, [r7, #24]
 800646e:	1ad3      	subs	r3, r2, r3
 8006470:	683a      	ldr	r2, [r7, #0]
 8006472:	429a      	cmp	r2, r3
 8006474:	d803      	bhi.n	800647e <HAL_SPI_Transmit+0x16c>
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800647c:	d102      	bne.n	8006484 <HAL_SPI_Transmit+0x172>
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d106      	bne.n	8006492 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8006484:	2303      	movs	r3, #3
 8006486:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006490:	e0ab      	b.n	80065ea <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006496:	b29b      	uxth	r3, r3
 8006498:	2b00      	cmp	r3, #0
 800649a:	d1ca      	bne.n	8006432 <HAL_SPI_Transmit+0x120>
 800649c:	e080      	b.n	80065a0 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d002      	beq.n	80064ac <HAL_SPI_Transmit+0x19a>
 80064a6:	8afb      	ldrh	r3, [r7, #22]
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d174      	bne.n	8006596 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d912      	bls.n	80064dc <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ba:	881a      	ldrh	r2, [r3, #0]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c6:	1c9a      	adds	r2, r3, #2
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	3b02      	subs	r3, #2
 80064d4:	b29a      	uxth	r2, r3
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80064da:	e05c      	b.n	8006596 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	330c      	adds	r3, #12
 80064e6:	7812      	ldrb	r2, [r2, #0]
 80064e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ee:	1c5a      	adds	r2, r3, #1
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	3b01      	subs	r3, #1
 80064fc:	b29a      	uxth	r2, r3
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006502:	e048      	b.n	8006596 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	f003 0302 	and.w	r3, r3, #2
 800650e:	2b02      	cmp	r3, #2
 8006510:	d12b      	bne.n	800656a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006516:	b29b      	uxth	r3, r3
 8006518:	2b01      	cmp	r3, #1
 800651a:	d912      	bls.n	8006542 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006520:	881a      	ldrh	r2, [r3, #0]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800652c:	1c9a      	adds	r2, r3, #2
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006536:	b29b      	uxth	r3, r3
 8006538:	3b02      	subs	r3, #2
 800653a:	b29a      	uxth	r2, r3
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006540:	e029      	b.n	8006596 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	330c      	adds	r3, #12
 800654c:	7812      	ldrb	r2, [r2, #0]
 800654e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006554:	1c5a      	adds	r2, r3, #1
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800655e:	b29b      	uxth	r3, r3
 8006560:	3b01      	subs	r3, #1
 8006562:	b29a      	uxth	r2, r3
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006568:	e015      	b.n	8006596 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800656a:	f7fb fecd 	bl	8002308 <HAL_GetTick>
 800656e:	4602      	mov	r2, r0
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	1ad3      	subs	r3, r2, r3
 8006574:	683a      	ldr	r2, [r7, #0]
 8006576:	429a      	cmp	r2, r3
 8006578:	d803      	bhi.n	8006582 <HAL_SPI_Transmit+0x270>
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006580:	d102      	bne.n	8006588 <HAL_SPI_Transmit+0x276>
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d106      	bne.n	8006596 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8006588:	2303      	movs	r3, #3
 800658a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2201      	movs	r2, #1
 8006590:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006594:	e029      	b.n	80065ea <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800659a:	b29b      	uxth	r3, r3
 800659c:	2b00      	cmp	r3, #0
 800659e:	d1b1      	bne.n	8006504 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80065a0:	69ba      	ldr	r2, [r7, #24]
 80065a2:	6839      	ldr	r1, [r7, #0]
 80065a4:	68f8      	ldr	r0, [r7, #12]
 80065a6:	f000 ffcd 	bl	8007544 <SPI_EndRxTxTransaction>
 80065aa:	4603      	mov	r3, r0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d002      	beq.n	80065b6 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2220      	movs	r2, #32
 80065b4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d10a      	bne.n	80065d4 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80065be:	2300      	movs	r3, #0
 80065c0:	613b      	str	r3, [r7, #16]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	613b      	str	r3, [r7, #16]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	613b      	str	r3, [r7, #16]
 80065d2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d002      	beq.n	80065e2 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	77fb      	strb	r3, [r7, #31]
 80065e0:	e003      	b.n	80065ea <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2201      	movs	r2, #1
 80065e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2200      	movs	r2, #0
 80065ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80065f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3720      	adds	r7, #32
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b088      	sub	sp, #32
 8006600:	af02      	add	r7, sp, #8
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	603b      	str	r3, [r7, #0]
 8006608:	4613      	mov	r3, r2
 800660a:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800660c:	2300      	movs	r3, #0
 800660e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006616:	b2db      	uxtb	r3, r3
 8006618:	2b01      	cmp	r3, #1
 800661a:	d002      	beq.n	8006622 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800661c:	2302      	movs	r3, #2
 800661e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006620:	e11a      	b.n	8006858 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800662a:	d112      	bne.n	8006652 <HAL_SPI_Receive+0x56>
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d10e      	bne.n	8006652 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2204      	movs	r2, #4
 8006638:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800663c:	88fa      	ldrh	r2, [r7, #6]
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	9300      	str	r3, [sp, #0]
 8006642:	4613      	mov	r3, r2
 8006644:	68ba      	ldr	r2, [r7, #8]
 8006646:	68b9      	ldr	r1, [r7, #8]
 8006648:	68f8      	ldr	r0, [r7, #12]
 800664a:	f000 f90e 	bl	800686a <HAL_SPI_TransmitReceive>
 800664e:	4603      	mov	r3, r0
 8006650:	e107      	b.n	8006862 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006658:	2b01      	cmp	r3, #1
 800665a:	d101      	bne.n	8006660 <HAL_SPI_Receive+0x64>
 800665c:	2302      	movs	r3, #2
 800665e:	e100      	b.n	8006862 <HAL_SPI_Receive+0x266>
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2201      	movs	r2, #1
 8006664:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006668:	f7fb fe4e 	bl	8002308 <HAL_GetTick>
 800666c:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d002      	beq.n	800667a <HAL_SPI_Receive+0x7e>
 8006674:	88fb      	ldrh	r3, [r7, #6]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d102      	bne.n	8006680 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800667e:	e0eb      	b.n	8006858 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2204      	movs	r2, #4
 8006684:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2200      	movs	r2, #0
 800668c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	68ba      	ldr	r2, [r7, #8]
 8006692:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	88fa      	ldrh	r2, [r7, #6]
 8006698:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	88fa      	ldrh	r2, [r7, #6]
 80066a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2200      	movs	r2, #0
 80066a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2200      	movs	r2, #0
 80066ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2200      	movs	r2, #0
 80066b4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2200      	movs	r2, #0
 80066ba:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2200      	movs	r2, #0
 80066c0:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	68db      	ldr	r3, [r3, #12]
 80066c6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80066ca:	d908      	bls.n	80066de <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	685a      	ldr	r2, [r3, #4]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80066da:	605a      	str	r2, [r3, #4]
 80066dc:	e007      	b.n	80066ee <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	685a      	ldr	r2, [r3, #4]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80066ec:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066f6:	d10f      	bne.n	8006718 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006706:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006716:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006722:	2b40      	cmp	r3, #64	; 0x40
 8006724:	d007      	beq.n	8006736 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006734:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800673e:	d86f      	bhi.n	8006820 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006740:	e034      	b.n	80067ac <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	f003 0301 	and.w	r3, r3, #1
 800674c:	2b01      	cmp	r3, #1
 800674e:	d117      	bne.n	8006780 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f103 020c 	add.w	r2, r3, #12
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800675c:	7812      	ldrb	r2, [r2, #0]
 800675e:	b2d2      	uxtb	r2, r2
 8006760:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006766:	1c5a      	adds	r2, r3, #1
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006772:	b29b      	uxth	r3, r3
 8006774:	3b01      	subs	r3, #1
 8006776:	b29a      	uxth	r2, r3
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800677e:	e015      	b.n	80067ac <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006780:	f7fb fdc2 	bl	8002308 <HAL_GetTick>
 8006784:	4602      	mov	r2, r0
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	1ad3      	subs	r3, r2, r3
 800678a:	683a      	ldr	r2, [r7, #0]
 800678c:	429a      	cmp	r2, r3
 800678e:	d803      	bhi.n	8006798 <HAL_SPI_Receive+0x19c>
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006796:	d102      	bne.n	800679e <HAL_SPI_Receive+0x1a2>
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d106      	bne.n	80067ac <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 800679e:	2303      	movs	r3, #3
 80067a0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2201      	movs	r2, #1
 80067a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80067aa:	e055      	b.n	8006858 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d1c4      	bne.n	8006742 <HAL_SPI_Receive+0x146>
 80067b8:	e038      	b.n	800682c <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	f003 0301 	and.w	r3, r3, #1
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d115      	bne.n	80067f4 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	68da      	ldr	r2, [r3, #12]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d2:	b292      	uxth	r2, r2
 80067d4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067da:	1c9a      	adds	r2, r3, #2
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	3b01      	subs	r3, #1
 80067ea:	b29a      	uxth	r2, r3
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80067f2:	e015      	b.n	8006820 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067f4:	f7fb fd88 	bl	8002308 <HAL_GetTick>
 80067f8:	4602      	mov	r2, r0
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	1ad3      	subs	r3, r2, r3
 80067fe:	683a      	ldr	r2, [r7, #0]
 8006800:	429a      	cmp	r2, r3
 8006802:	d803      	bhi.n	800680c <HAL_SPI_Receive+0x210>
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800680a:	d102      	bne.n	8006812 <HAL_SPI_Receive+0x216>
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d106      	bne.n	8006820 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8006812:	2303      	movs	r3, #3
 8006814:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2201      	movs	r2, #1
 800681a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800681e:	e01b      	b.n	8006858 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006826:	b29b      	uxth	r3, r3
 8006828:	2b00      	cmp	r3, #0
 800682a:	d1c6      	bne.n	80067ba <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800682c:	693a      	ldr	r2, [r7, #16]
 800682e:	6839      	ldr	r1, [r7, #0]
 8006830:	68f8      	ldr	r0, [r7, #12]
 8006832:	f000 fe2f 	bl	8007494 <SPI_EndRxTransaction>
 8006836:	4603      	mov	r3, r0
 8006838:	2b00      	cmp	r3, #0
 800683a:	d002      	beq.n	8006842 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2220      	movs	r2, #32
 8006840:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006846:	2b00      	cmp	r3, #0
 8006848:	d002      	beq.n	8006850 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	75fb      	strb	r3, [r7, #23]
 800684e:	e003      	b.n	8006858 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2201      	movs	r2, #1
 8006854:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2200      	movs	r2, #0
 800685c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006860:	7dfb      	ldrb	r3, [r7, #23]
}
 8006862:	4618      	mov	r0, r3
 8006864:	3718      	adds	r7, #24
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}

0800686a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800686a:	b580      	push	{r7, lr}
 800686c:	b08a      	sub	sp, #40	; 0x28
 800686e:	af00      	add	r7, sp, #0
 8006870:	60f8      	str	r0, [r7, #12]
 8006872:	60b9      	str	r1, [r7, #8]
 8006874:	607a      	str	r2, [r7, #4]
 8006876:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006878:	2301      	movs	r3, #1
 800687a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800687c:	2300      	movs	r3, #0
 800687e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006888:	2b01      	cmp	r3, #1
 800688a:	d101      	bne.n	8006890 <HAL_SPI_TransmitReceive+0x26>
 800688c:	2302      	movs	r3, #2
 800688e:	e20a      	b.n	8006ca6 <HAL_SPI_TransmitReceive+0x43c>
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006898:	f7fb fd36 	bl	8002308 <HAL_GetTick>
 800689c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80068a4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80068ac:	887b      	ldrh	r3, [r7, #2]
 80068ae:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80068b0:	887b      	ldrh	r3, [r7, #2]
 80068b2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80068b4:	7efb      	ldrb	r3, [r7, #27]
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d00e      	beq.n	80068d8 <HAL_SPI_TransmitReceive+0x6e>
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068c0:	d106      	bne.n	80068d0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d102      	bne.n	80068d0 <HAL_SPI_TransmitReceive+0x66>
 80068ca:	7efb      	ldrb	r3, [r7, #27]
 80068cc:	2b04      	cmp	r3, #4
 80068ce:	d003      	beq.n	80068d8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80068d0:	2302      	movs	r3, #2
 80068d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80068d6:	e1e0      	b.n	8006c9a <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d005      	beq.n	80068ea <HAL_SPI_TransmitReceive+0x80>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d002      	beq.n	80068ea <HAL_SPI_TransmitReceive+0x80>
 80068e4:	887b      	ldrh	r3, [r7, #2]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d103      	bne.n	80068f2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80068f0:	e1d3      	b.n	8006c9a <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	2b04      	cmp	r3, #4
 80068fc:	d003      	beq.n	8006906 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2205      	movs	r2, #5
 8006902:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2200      	movs	r2, #0
 800690a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	887a      	ldrh	r2, [r7, #2]
 8006916:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	887a      	ldrh	r2, [r7, #2]
 800691e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	68ba      	ldr	r2, [r7, #8]
 8006926:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	887a      	ldrh	r2, [r7, #2]
 800692c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	887a      	ldrh	r2, [r7, #2]
 8006932:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2200      	movs	r2, #0
 8006938:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2200      	movs	r2, #0
 800693e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006948:	d802      	bhi.n	8006950 <HAL_SPI_TransmitReceive+0xe6>
 800694a:	8a3b      	ldrh	r3, [r7, #16]
 800694c:	2b01      	cmp	r3, #1
 800694e:	d908      	bls.n	8006962 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	685a      	ldr	r2, [r3, #4]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800695e:	605a      	str	r2, [r3, #4]
 8006960:	e007      	b.n	8006972 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	685a      	ldr	r2, [r3, #4]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006970:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800697c:	2b40      	cmp	r3, #64	; 0x40
 800697e:	d007      	beq.n	8006990 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800698e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006998:	f240 8081 	bls.w	8006a9e <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d002      	beq.n	80069aa <HAL_SPI_TransmitReceive+0x140>
 80069a4:	8a7b      	ldrh	r3, [r7, #18]
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	d16d      	bne.n	8006a86 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ae:	881a      	ldrh	r2, [r3, #0]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ba:	1c9a      	adds	r2, r3, #2
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	3b01      	subs	r3, #1
 80069c8:	b29a      	uxth	r2, r3
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069ce:	e05a      	b.n	8006a86 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	f003 0302 	and.w	r3, r3, #2
 80069da:	2b02      	cmp	r3, #2
 80069dc:	d11b      	bne.n	8006a16 <HAL_SPI_TransmitReceive+0x1ac>
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d016      	beq.n	8006a16 <HAL_SPI_TransmitReceive+0x1ac>
 80069e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d113      	bne.n	8006a16 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f2:	881a      	ldrh	r2, [r3, #0]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069fe:	1c9a      	adds	r2, r3, #2
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	3b01      	subs	r3, #1
 8006a0c:	b29a      	uxth	r2, r3
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a12:	2300      	movs	r3, #0
 8006a14:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	f003 0301 	and.w	r3, r3, #1
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d11c      	bne.n	8006a5e <HAL_SPI_TransmitReceive+0x1f4>
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d016      	beq.n	8006a5e <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	68da      	ldr	r2, [r3, #12]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a3a:	b292      	uxth	r2, r2
 8006a3c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a42:	1c9a      	adds	r2, r3, #2
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	3b01      	subs	r3, #1
 8006a52:	b29a      	uxth	r2, r3
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006a5e:	f7fb fc53 	bl	8002308 <HAL_GetTick>
 8006a62:	4602      	mov	r2, r0
 8006a64:	69fb      	ldr	r3, [r7, #28]
 8006a66:	1ad3      	subs	r3, r2, r3
 8006a68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d80b      	bhi.n	8006a86 <HAL_SPI_TransmitReceive+0x21c>
 8006a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a74:	d007      	beq.n	8006a86 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8006a76:	2303      	movs	r3, #3
 8006a78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8006a84:	e109      	b.n	8006c9a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d19f      	bne.n	80069d0 <HAL_SPI_TransmitReceive+0x166>
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d199      	bne.n	80069d0 <HAL_SPI_TransmitReceive+0x166>
 8006a9c:	e0e3      	b.n	8006c66 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d003      	beq.n	8006aae <HAL_SPI_TransmitReceive+0x244>
 8006aa6:	8a7b      	ldrh	r3, [r7, #18]
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	f040 80cf 	bne.w	8006c4c <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d912      	bls.n	8006ade <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006abc:	881a      	ldrh	r2, [r3, #0]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac8:	1c9a      	adds	r2, r3, #2
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	3b02      	subs	r3, #2
 8006ad6:	b29a      	uxth	r2, r3
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006adc:	e0b6      	b.n	8006c4c <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	330c      	adds	r3, #12
 8006ae8:	7812      	ldrb	r2, [r2, #0]
 8006aea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af0:	1c5a      	adds	r2, r3, #1
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	3b01      	subs	r3, #1
 8006afe:	b29a      	uxth	r2, r3
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b04:	e0a2      	b.n	8006c4c <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	f003 0302 	and.w	r3, r3, #2
 8006b10:	2b02      	cmp	r3, #2
 8006b12:	d134      	bne.n	8006b7e <HAL_SPI_TransmitReceive+0x314>
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d02f      	beq.n	8006b7e <HAL_SPI_TransmitReceive+0x314>
 8006b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d12c      	bne.n	8006b7e <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d912      	bls.n	8006b54 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b32:	881a      	ldrh	r2, [r3, #0]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b3e:	1c9a      	adds	r2, r3, #2
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	3b02      	subs	r3, #2
 8006b4c:	b29a      	uxth	r2, r3
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006b52:	e012      	b.n	8006b7a <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	330c      	adds	r3, #12
 8006b5e:	7812      	ldrb	r2, [r2, #0]
 8006b60:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b66:	1c5a      	adds	r2, r3, #1
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	3b01      	subs	r3, #1
 8006b74:	b29a      	uxth	r2, r3
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	f003 0301 	and.w	r3, r3, #1
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d148      	bne.n	8006c1e <HAL_SPI_TransmitReceive+0x3b4>
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d042      	beq.n	8006c1e <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d923      	bls.n	8006bec <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	68da      	ldr	r2, [r3, #12]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bae:	b292      	uxth	r2, r2
 8006bb0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb6:	1c9a      	adds	r2, r3, #2
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	3b02      	subs	r3, #2
 8006bc6:	b29a      	uxth	r2, r3
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d81f      	bhi.n	8006c1a <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	685a      	ldr	r2, [r3, #4]
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006be8:	605a      	str	r2, [r3, #4]
 8006bea:	e016      	b.n	8006c1a <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f103 020c 	add.w	r2, r3, #12
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf8:	7812      	ldrb	r2, [r2, #0]
 8006bfa:	b2d2      	uxtb	r2, r2
 8006bfc:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c02:	1c5a      	adds	r2, r3, #1
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	3b01      	subs	r3, #1
 8006c12:	b29a      	uxth	r2, r3
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006c1e:	f7fb fb73 	bl	8002308 <HAL_GetTick>
 8006c22:	4602      	mov	r2, r0
 8006c24:	69fb      	ldr	r3, [r7, #28]
 8006c26:	1ad3      	subs	r3, r2, r3
 8006c28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d803      	bhi.n	8006c36 <HAL_SPI_TransmitReceive+0x3cc>
 8006c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c34:	d102      	bne.n	8006c3c <HAL_SPI_TransmitReceive+0x3d2>
 8006c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d107      	bne.n	8006c4c <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8006c3c:	2303      	movs	r3, #3
 8006c3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2201      	movs	r2, #1
 8006c46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8006c4a:	e026      	b.n	8006c9a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	f47f af57 	bne.w	8006b06 <HAL_SPI_TransmitReceive+0x29c>
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	f47f af50 	bne.w	8006b06 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c66:	69fa      	ldr	r2, [r7, #28]
 8006c68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c6a:	68f8      	ldr	r0, [r7, #12]
 8006c6c:	f000 fc6a 	bl	8007544 <SPI_EndRxTxTransaction>
 8006c70:	4603      	mov	r3, r0
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d005      	beq.n	8006c82 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2220      	movs	r2, #32
 8006c80:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d003      	beq.n	8006c92 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c90:	e003      	b.n	8006c9a <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2201      	movs	r2, #1
 8006c96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006ca2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3728      	adds	r7, #40	; 0x28
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
	...

08006cb0 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b086      	sub	sp, #24
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	60b9      	str	r1, [r7, #8]
 8006cba:	4613      	mov	r3, r2
 8006cbc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	75fb      	strb	r3, [r7, #23]


  if (hspi->State != HAL_SPI_STATE_READY)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d002      	beq.n	8006cd4 <HAL_SPI_Receive_IT+0x24>
  {
    errorcode = HAL_BUSY;
 8006cce:	2302      	movs	r3, #2
 8006cd0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006cd2:	e092      	b.n	8006dfa <HAL_SPI_Receive_IT+0x14a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d110      	bne.n	8006cfe <HAL_SPI_Receive_IT+0x4e>
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ce4:	d10b      	bne.n	8006cfe <HAL_SPI_Receive_IT+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2204      	movs	r2, #4
 8006cea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8006cee:	88fb      	ldrh	r3, [r7, #6]
 8006cf0:	68ba      	ldr	r2, [r7, #8]
 8006cf2:	68b9      	ldr	r1, [r7, #8]
 8006cf4:	68f8      	ldr	r0, [r7, #12]
 8006cf6:	f000 f889 	bl	8006e0c <HAL_SPI_TransmitReceive_IT>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	e07e      	b.n	8006dfc <HAL_SPI_Receive_IT+0x14c>
  }


  if ((pData == NULL) || (Size == 0U))
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d002      	beq.n	8006d0a <HAL_SPI_Receive_IT+0x5a>
 8006d04:	88fb      	ldrh	r3, [r7, #6]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d102      	bne.n	8006d10 <HAL_SPI_Receive_IT+0x60>
  {
    errorcode = HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006d0e:	e074      	b.n	8006dfa <HAL_SPI_Receive_IT+0x14a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d101      	bne.n	8006d1e <HAL_SPI_Receive_IT+0x6e>
 8006d1a:	2302      	movs	r3, #2
 8006d1c:	e06e      	b.n	8006dfc <HAL_SPI_Receive_IT+0x14c>
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2201      	movs	r2, #1
 8006d22:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2204      	movs	r2, #4
 8006d2a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2200      	movs	r2, #0
 8006d32:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	68ba      	ldr	r2, [r7, #8]
 8006d38:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	88fa      	ldrh	r2, [r7, #6]
 8006d3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	88fa      	ldrh	r2, [r7, #6]
 8006d46:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2200      	movs	r2, #0
 8006d54:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	68db      	ldr	r3, [r3, #12]
 8006d66:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006d6a:	d90b      	bls.n	8006d84 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	685a      	ldr	r2, [r3, #4]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006d7a:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	4a21      	ldr	r2, [pc, #132]	; (8006e04 <HAL_SPI_Receive_IT+0x154>)
 8006d80:	64da      	str	r2, [r3, #76]	; 0x4c
 8006d82:	e00a      	b.n	8006d9a <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	685a      	ldr	r2, [r3, #4]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006d92:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	4a1c      	ldr	r2, [pc, #112]	; (8006e08 <HAL_SPI_Receive_IT+0x158>)
 8006d98:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006da2:	d10f      	bne.n	8006dc4 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006db2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006dc2:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dce:	2b40      	cmp	r3, #64	; 0x40
 8006dd0:	d007      	beq.n	8006de2 <HAL_SPI_Receive_IT+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006de0:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2200      	movs	r2, #0
 8006de6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	685a      	ldr	r2, [r3, #4]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8006df8:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8006dfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3718      	adds	r7, #24
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	0800720b 	.word	0x0800720b
 8006e08:	080071bb 	.word	0x080071bb

08006e0c <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b087      	sub	sp, #28
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	60b9      	str	r1, [r7, #8]
 8006e16:	607a      	str	r2, [r7, #4]
 8006e18:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006e24:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006e2c:	7dbb      	ldrb	r3, [r7, #22]
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d00d      	beq.n	8006e4e <HAL_SPI_TransmitReceive_IT+0x42>
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e38:	d106      	bne.n	8006e48 <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d102      	bne.n	8006e48 <HAL_SPI_TransmitReceive_IT+0x3c>
 8006e42:	7dbb      	ldrb	r3, [r7, #22]
 8006e44:	2b04      	cmp	r3, #4
 8006e46:	d002      	beq.n	8006e4e <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 8006e48:	2302      	movs	r3, #2
 8006e4a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006e4c:	e07d      	b.n	8006f4a <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d005      	beq.n	8006e60 <HAL_SPI_TransmitReceive_IT+0x54>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d002      	beq.n	8006e60 <HAL_SPI_TransmitReceive_IT+0x54>
 8006e5a:	887b      	ldrh	r3, [r7, #2]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d102      	bne.n	8006e66 <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 8006e60:	2301      	movs	r3, #1
 8006e62:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006e64:	e071      	b.n	8006f4a <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d101      	bne.n	8006e74 <HAL_SPI_TransmitReceive_IT+0x68>
 8006e70:	2302      	movs	r3, #2
 8006e72:	e06b      	b.n	8006f4c <HAL_SPI_TransmitReceive_IT+0x140>
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	2b04      	cmp	r3, #4
 8006e86:	d003      	beq.n	8006e90 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2205      	movs	r2, #5
 8006e8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2200      	movs	r2, #0
 8006e94:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	68ba      	ldr	r2, [r7, #8]
 8006e9a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	887a      	ldrh	r2, [r7, #2]
 8006ea0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	887a      	ldrh	r2, [r7, #2]
 8006ea6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	887a      	ldrh	r2, [r7, #2]
 8006eb2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	887a      	ldrh	r2, [r7, #2]
 8006eba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	68db      	ldr	r3, [r3, #12]
 8006ec2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006ec6:	d906      	bls.n	8006ed6 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	4a23      	ldr	r2, [pc, #140]	; (8006f58 <HAL_SPI_TransmitReceive_IT+0x14c>)
 8006ecc:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	4a22      	ldr	r2, [pc, #136]	; (8006f5c <HAL_SPI_TransmitReceive_IT+0x150>)
 8006ed2:	651a      	str	r2, [r3, #80]	; 0x50
 8006ed4:	e005      	b.n	8006ee2 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	4a21      	ldr	r2, [pc, #132]	; (8006f60 <HAL_SPI_TransmitReceive_IT+0x154>)
 8006eda:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	4a21      	ldr	r2, [pc, #132]	; (8006f64 <HAL_SPI_TransmitReceive_IT+0x158>)
 8006ee0:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006eea:	d802      	bhi.n	8006ef2 <HAL_SPI_TransmitReceive_IT+0xe6>
 8006eec:	887b      	ldrh	r3, [r7, #2]
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d908      	bls.n	8006f04 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	685a      	ldr	r2, [r3, #4]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006f00:	605a      	str	r2, [r3, #4]
 8006f02:	e007      	b.n	8006f14 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	685a      	ldr	r2, [r3, #4]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006f12:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f1e:	2b40      	cmp	r3, #64	; 0x40
 8006f20:	d007      	beq.n	8006f32 <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f30:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2200      	movs	r2, #0
 8006f36:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	685a      	ldr	r2, [r3, #4]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8006f48:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8006f4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	371c      	adds	r7, #28
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr
 8006f58:	080070f5 	.word	0x080070f5
 8006f5c:	0800715b 	.word	0x0800715b
 8006f60:	08006fa5 	.word	0x08006fa5
 8006f64:	08007063 	.word	0x08007063

08006f68 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8006f70:	bf00      	nop
 8006f72:	370c      	adds	r7, #12
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr

08006f7c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006f84:	bf00      	nop
 8006f86:	370c      	adds	r7, #12
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b083      	sub	sp, #12
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006f98:	bf00      	nop
 8006f9a:	370c      	adds	r7, #12
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b082      	sub	sp, #8
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d923      	bls.n	8007000 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	68da      	ldr	r2, [r3, #12]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc2:	b292      	uxth	r2, r2
 8006fc4:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fca:	1c9a      	adds	r2, r3, #2
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	3b02      	subs	r3, #2
 8006fda:	b29a      	uxth	r2, r3
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d11f      	bne.n	800702e <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	685a      	ldr	r2, [r3, #4]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006ffc:	605a      	str	r2, [r3, #4]
 8006ffe:	e016      	b.n	800702e <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f103 020c 	add.w	r2, r3, #12
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800700c:	7812      	ldrb	r2, [r2, #0]
 800700e:	b2d2      	uxtb	r2, r2
 8007010:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007016:	1c5a      	adds	r2, r3, #1
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007022:	b29b      	uxth	r3, r3
 8007024:	3b01      	subs	r3, #1
 8007026:	b29a      	uxth	r2, r3
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007034:	b29b      	uxth	r3, r3
 8007036:	2b00      	cmp	r3, #0
 8007038:	d10f      	bne.n	800705a <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	685a      	ldr	r2, [r3, #4]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007048:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800704e:	b29b      	uxth	r3, r3
 8007050:	2b00      	cmp	r3, #0
 8007052:	d102      	bne.n	800705a <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f000 fabb 	bl	80075d0 <SPI_CloseRxTx_ISR>
    }
  }
}
 800705a:	bf00      	nop
 800705c:	3708      	adds	r7, #8
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}

08007062 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007062:	b580      	push	{r7, lr}
 8007064:	b082      	sub	sp, #8
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800706e:	b29b      	uxth	r3, r3
 8007070:	2b01      	cmp	r3, #1
 8007072:	d912      	bls.n	800709a <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007078:	881a      	ldrh	r2, [r3, #0]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007084:	1c9a      	adds	r2, r3, #2
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800708e:	b29b      	uxth	r3, r3
 8007090:	3b02      	subs	r3, #2
 8007092:	b29a      	uxth	r2, r3
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007098:	e012      	b.n	80070c0 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	330c      	adds	r3, #12
 80070a4:	7812      	ldrb	r2, [r2, #0]
 80070a6:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ac:	1c5a      	adds	r2, r3, #1
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	3b01      	subs	r3, #1
 80070ba:	b29a      	uxth	r2, r3
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d110      	bne.n	80070ec <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	685a      	ldr	r2, [r3, #4]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80070d8:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d102      	bne.n	80070ec <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 fa72 	bl	80075d0 <SPI_CloseRxTx_ISR>
    }
  }
}
 80070ec:	bf00      	nop
 80070ee:	3708      	adds	r7, #8
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	68da      	ldr	r2, [r3, #12]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007106:	b292      	uxth	r2, r2
 8007108:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800710e:	1c9a      	adds	r2, r3, #2
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800711a:	b29b      	uxth	r3, r3
 800711c:	3b01      	subs	r3, #1
 800711e:	b29a      	uxth	r2, r3
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800712c:	b29b      	uxth	r3, r3
 800712e:	2b00      	cmp	r3, #0
 8007130:	d10f      	bne.n	8007152 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	685a      	ldr	r2, [r3, #4]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007140:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007146:	b29b      	uxth	r3, r3
 8007148:	2b00      	cmp	r3, #0
 800714a:	d102      	bne.n	8007152 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 fa3f 	bl	80075d0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8007152:	bf00      	nop
 8007154:	3708      	adds	r7, #8
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}

0800715a <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800715a:	b580      	push	{r7, lr}
 800715c:	b082      	sub	sp, #8
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007166:	881a      	ldrh	r2, [r3, #0]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007172:	1c9a      	adds	r2, r3, #2
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800717c:	b29b      	uxth	r3, r3
 800717e:	3b01      	subs	r3, #1
 8007180:	b29a      	uxth	r2, r3
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800718a:	b29b      	uxth	r3, r3
 800718c:	2b00      	cmp	r3, #0
 800718e:	d110      	bne.n	80071b2 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	685a      	ldr	r2, [r3, #4]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800719e:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d102      	bne.n	80071b2 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 fa0f 	bl	80075d0 <SPI_CloseRxTx_ISR>
    }
  }
}
 80071b2:	bf00      	nop
 80071b4:	3708      	adds	r7, #8
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}

080071ba <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80071ba:	b580      	push	{r7, lr}
 80071bc:	b082      	sub	sp, #8
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f103 020c 	add.w	r2, r3, #12
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ce:	7812      	ldrb	r2, [r2, #0]
 80071d0:	b2d2      	uxtb	r2, r2
 80071d2:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d8:	1c5a      	adds	r2, r3, #1
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	3b01      	subs	r3, #1
 80071e8:	b29a      	uxth	r2, r3
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d102      	bne.n	8007202 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f000 fa29 	bl	8007654 <SPI_CloseRx_ISR>
  }
}
 8007202:	bf00      	nop
 8007204:	3708      	adds	r7, #8
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}

0800720a <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800720a:	b580      	push	{r7, lr}
 800720c:	b082      	sub	sp, #8
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	68da      	ldr	r2, [r3, #12]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800721c:	b292      	uxth	r2, r2
 800721e:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007224:	1c9a      	adds	r2, r3, #2
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007230:	b29b      	uxth	r3, r3
 8007232:	3b01      	subs	r3, #1
 8007234:	b29a      	uxth	r2, r3
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007242:	b29b      	uxth	r3, r3
 8007244:	2b00      	cmp	r3, #0
 8007246:	d102      	bne.n	800724e <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 fa03 	bl	8007654 <SPI_CloseRx_ISR>
  }
}
 800724e:	bf00      	nop
 8007250:	3708      	adds	r7, #8
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
	...

08007258 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b088      	sub	sp, #32
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	603b      	str	r3, [r7, #0]
 8007264:	4613      	mov	r3, r2
 8007266:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007268:	f7fb f84e 	bl	8002308 <HAL_GetTick>
 800726c:	4602      	mov	r2, r0
 800726e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007270:	1a9b      	subs	r3, r3, r2
 8007272:	683a      	ldr	r2, [r7, #0]
 8007274:	4413      	add	r3, r2
 8007276:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007278:	f7fb f846 	bl	8002308 <HAL_GetTick>
 800727c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800727e:	4b39      	ldr	r3, [pc, #228]	; (8007364 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	015b      	lsls	r3, r3, #5
 8007284:	0d1b      	lsrs	r3, r3, #20
 8007286:	69fa      	ldr	r2, [r7, #28]
 8007288:	fb02 f303 	mul.w	r3, r2, r3
 800728c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800728e:	e054      	b.n	800733a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007296:	d050      	beq.n	800733a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007298:	f7fb f836 	bl	8002308 <HAL_GetTick>
 800729c:	4602      	mov	r2, r0
 800729e:	69bb      	ldr	r3, [r7, #24]
 80072a0:	1ad3      	subs	r3, r2, r3
 80072a2:	69fa      	ldr	r2, [r7, #28]
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d902      	bls.n	80072ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80072a8:	69fb      	ldr	r3, [r7, #28]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d13d      	bne.n	800732a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	685a      	ldr	r2, [r3, #4]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80072bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072c6:	d111      	bne.n	80072ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072d0:	d004      	beq.n	80072dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072da:	d107      	bne.n	80072ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072f4:	d10f      	bne.n	8007316 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007304:	601a      	str	r2, [r3, #0]
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007314:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2201      	movs	r2, #1
 800731a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2200      	movs	r2, #0
 8007322:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007326:	2303      	movs	r3, #3
 8007328:	e017      	b.n	800735a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d101      	bne.n	8007334 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007330:	2300      	movs	r3, #0
 8007332:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	3b01      	subs	r3, #1
 8007338:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	689a      	ldr	r2, [r3, #8]
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	4013      	ands	r3, r2
 8007344:	68ba      	ldr	r2, [r7, #8]
 8007346:	429a      	cmp	r2, r3
 8007348:	bf0c      	ite	eq
 800734a:	2301      	moveq	r3, #1
 800734c:	2300      	movne	r3, #0
 800734e:	b2db      	uxtb	r3, r3
 8007350:	461a      	mov	r2, r3
 8007352:	79fb      	ldrb	r3, [r7, #7]
 8007354:	429a      	cmp	r2, r3
 8007356:	d19b      	bne.n	8007290 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007358:	2300      	movs	r3, #0
}
 800735a:	4618      	mov	r0, r3
 800735c:	3720      	adds	r7, #32
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
 8007362:	bf00      	nop
 8007364:	20004b00 	.word	0x20004b00

08007368 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b08a      	sub	sp, #40	; 0x28
 800736c:	af00      	add	r7, sp, #0
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	60b9      	str	r1, [r7, #8]
 8007372:	607a      	str	r2, [r7, #4]
 8007374:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007376:	2300      	movs	r3, #0
 8007378:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800737a:	f7fa ffc5 	bl	8002308 <HAL_GetTick>
 800737e:	4602      	mov	r2, r0
 8007380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007382:	1a9b      	subs	r3, r3, r2
 8007384:	683a      	ldr	r2, [r7, #0]
 8007386:	4413      	add	r3, r2
 8007388:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800738a:	f7fa ffbd 	bl	8002308 <HAL_GetTick>
 800738e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	330c      	adds	r3, #12
 8007396:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007398:	4b3d      	ldr	r3, [pc, #244]	; (8007490 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800739a:	681a      	ldr	r2, [r3, #0]
 800739c:	4613      	mov	r3, r2
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	4413      	add	r3, r2
 80073a2:	00da      	lsls	r2, r3, #3
 80073a4:	1ad3      	subs	r3, r2, r3
 80073a6:	0d1b      	lsrs	r3, r3, #20
 80073a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073aa:	fb02 f303 	mul.w	r3, r2, r3
 80073ae:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80073b0:	e060      	b.n	8007474 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80073b8:	d107      	bne.n	80073ca <SPI_WaitFifoStateUntilTimeout+0x62>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d104      	bne.n	80073ca <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80073c0:	69fb      	ldr	r3, [r7, #28]
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80073c8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073d0:	d050      	beq.n	8007474 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80073d2:	f7fa ff99 	bl	8002308 <HAL_GetTick>
 80073d6:	4602      	mov	r2, r0
 80073d8:	6a3b      	ldr	r3, [r7, #32]
 80073da:	1ad3      	subs	r3, r2, r3
 80073dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073de:	429a      	cmp	r2, r3
 80073e0:	d902      	bls.n	80073e8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80073e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d13d      	bne.n	8007464 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	685a      	ldr	r2, [r3, #4]
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80073f6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007400:	d111      	bne.n	8007426 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800740a:	d004      	beq.n	8007416 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007414:	d107      	bne.n	8007426 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007424:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800742a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800742e:	d10f      	bne.n	8007450 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	681a      	ldr	r2, [r3, #0]
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800743e:	601a      	str	r2, [r3, #0]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800744e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2201      	movs	r2, #1
 8007454:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2200      	movs	r2, #0
 800745c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007460:	2303      	movs	r3, #3
 8007462:	e010      	b.n	8007486 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007464:	69bb      	ldr	r3, [r7, #24]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d101      	bne.n	800746e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800746a:	2300      	movs	r3, #0
 800746c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800746e:	69bb      	ldr	r3, [r7, #24]
 8007470:	3b01      	subs	r3, #1
 8007472:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	689a      	ldr	r2, [r3, #8]
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	4013      	ands	r3, r2
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	429a      	cmp	r2, r3
 8007482:	d196      	bne.n	80073b2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007484:	2300      	movs	r3, #0
}
 8007486:	4618      	mov	r0, r3
 8007488:	3728      	adds	r7, #40	; 0x28
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
 800748e:	bf00      	nop
 8007490:	20004b00 	.word	0x20004b00

08007494 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b086      	sub	sp, #24
 8007498:	af02      	add	r7, sp, #8
 800749a:	60f8      	str	r0, [r7, #12]
 800749c:	60b9      	str	r1, [r7, #8]
 800749e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074a8:	d111      	bne.n	80074ce <SPI_EndRxTransaction+0x3a>
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074b2:	d004      	beq.n	80074be <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074bc:	d107      	bne.n	80074ce <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	681a      	ldr	r2, [r3, #0]
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074cc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	9300      	str	r3, [sp, #0]
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	2200      	movs	r2, #0
 80074d6:	2180      	movs	r1, #128	; 0x80
 80074d8:	68f8      	ldr	r0, [r7, #12]
 80074da:	f7ff febd 	bl	8007258 <SPI_WaitFlagStateUntilTimeout>
 80074de:	4603      	mov	r3, r0
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d007      	beq.n	80074f4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074e8:	f043 0220 	orr.w	r2, r3, #32
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80074f0:	2303      	movs	r3, #3
 80074f2:	e023      	b.n	800753c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074fc:	d11d      	bne.n	800753a <SPI_EndRxTransaction+0xa6>
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007506:	d004      	beq.n	8007512 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007510:	d113      	bne.n	800753a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	9300      	str	r3, [sp, #0]
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	2200      	movs	r2, #0
 800751a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800751e:	68f8      	ldr	r0, [r7, #12]
 8007520:	f7ff ff22 	bl	8007368 <SPI_WaitFifoStateUntilTimeout>
 8007524:	4603      	mov	r3, r0
 8007526:	2b00      	cmp	r3, #0
 8007528:	d007      	beq.n	800753a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800752e:	f043 0220 	orr.w	r2, r3, #32
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007536:	2303      	movs	r3, #3
 8007538:	e000      	b.n	800753c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800753a:	2300      	movs	r3, #0
}
 800753c:	4618      	mov	r0, r3
 800753e:	3710      	adds	r7, #16
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}

08007544 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b086      	sub	sp, #24
 8007548:	af02      	add	r7, sp, #8
 800754a:	60f8      	str	r0, [r7, #12]
 800754c:	60b9      	str	r1, [r7, #8]
 800754e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	9300      	str	r3, [sp, #0]
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	2200      	movs	r2, #0
 8007558:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800755c:	68f8      	ldr	r0, [r7, #12]
 800755e:	f7ff ff03 	bl	8007368 <SPI_WaitFifoStateUntilTimeout>
 8007562:	4603      	mov	r3, r0
 8007564:	2b00      	cmp	r3, #0
 8007566:	d007      	beq.n	8007578 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800756c:	f043 0220 	orr.w	r2, r3, #32
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007574:	2303      	movs	r3, #3
 8007576:	e027      	b.n	80075c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	9300      	str	r3, [sp, #0]
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	2200      	movs	r2, #0
 8007580:	2180      	movs	r1, #128	; 0x80
 8007582:	68f8      	ldr	r0, [r7, #12]
 8007584:	f7ff fe68 	bl	8007258 <SPI_WaitFlagStateUntilTimeout>
 8007588:	4603      	mov	r3, r0
 800758a:	2b00      	cmp	r3, #0
 800758c:	d007      	beq.n	800759e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007592:	f043 0220 	orr.w	r2, r3, #32
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800759a:	2303      	movs	r3, #3
 800759c:	e014      	b.n	80075c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	9300      	str	r3, [sp, #0]
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	2200      	movs	r2, #0
 80075a6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80075aa:	68f8      	ldr	r0, [r7, #12]
 80075ac:	f7ff fedc 	bl	8007368 <SPI_WaitFifoStateUntilTimeout>
 80075b0:	4603      	mov	r3, r0
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d007      	beq.n	80075c6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075ba:	f043 0220 	orr.w	r2, r3, #32
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80075c2:	2303      	movs	r3, #3
 80075c4:	e000      	b.n	80075c8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80075c6:	2300      	movs	r3, #0
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3710      	adds	r7, #16
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b084      	sub	sp, #16
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80075d8:	f7fa fe96 	bl	8002308 <HAL_GetTick>
 80075dc:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	685a      	ldr	r2, [r3, #4]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f022 0220 	bic.w	r2, r2, #32
 80075ec:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80075ee:	68fa      	ldr	r2, [r7, #12]
 80075f0:	2164      	movs	r1, #100	; 0x64
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f7ff ffa6 	bl	8007544 <SPI_EndRxTxTransaction>
 80075f8:	4603      	mov	r3, r0
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d005      	beq.n	800760a <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007602:	f043 0220 	orr.w	r2, r3, #32
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800760e:	2b00      	cmp	r3, #0
 8007610:	d115      	bne.n	800763e <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007618:	b2db      	uxtb	r3, r3
 800761a:	2b04      	cmp	r3, #4
 800761c:	d107      	bne.n	800762e <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2201      	movs	r2, #1
 8007622:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f7ff fc9e 	bl	8006f68 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800762c:	e00e      	b.n	800764c <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2201      	movs	r2, #1
 8007632:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f7ff fca0 	bl	8006f7c <HAL_SPI_TxRxCpltCallback>
}
 800763c:	e006      	b.n	800764c <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2201      	movs	r2, #1
 8007642:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f7ff fca2 	bl	8006f90 <HAL_SPI_ErrorCallback>
}
 800764c:	bf00      	nop
 800764e:	3710      	adds	r7, #16
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}

08007654 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b082      	sub	sp, #8
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	685a      	ldr	r2, [r3, #4]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800766a:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800766c:	f7fa fe4c 	bl	8002308 <HAL_GetTick>
 8007670:	4603      	mov	r3, r0
 8007672:	461a      	mov	r2, r3
 8007674:	2164      	movs	r1, #100	; 0x64
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f7ff ff0c 	bl	8007494 <SPI_EndRxTransaction>
 800767c:	4603      	mov	r3, r0
 800767e:	2b00      	cmp	r3, #0
 8007680:	d005      	beq.n	800768e <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007686:	f043 0220 	orr.w	r2, r3, #32
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2201      	movs	r2, #1
 8007692:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800769a:	2b00      	cmp	r3, #0
 800769c:	d103      	bne.n	80076a6 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f7ff fc62 	bl	8006f68 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80076a4:	e002      	b.n	80076ac <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f7ff fc72 	bl	8006f90 <HAL_SPI_ErrorCallback>
}
 80076ac:	bf00      	nop
 80076ae:	3708      	adds	r7, #8
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b082      	sub	sp, #8
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d101      	bne.n	80076c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076c2:	2301      	movs	r3, #1
 80076c4:	e042      	b.n	800774c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d106      	bne.n	80076de <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f7fa fce3 	bl	80020a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2224      	movs	r2, #36	; 0x24
 80076e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f022 0201 	bic.w	r2, r2, #1
 80076f4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d002      	beq.n	8007704 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 fbb4 	bl	8007e6c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 f8b5 	bl	8007874 <UART_SetConfig>
 800770a:	4603      	mov	r3, r0
 800770c:	2b01      	cmp	r3, #1
 800770e:	d101      	bne.n	8007714 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	e01b      	b.n	800774c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	685a      	ldr	r2, [r3, #4]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007722:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	689a      	ldr	r2, [r3, #8]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007732:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f042 0201 	orr.w	r2, r2, #1
 8007742:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 fc33 	bl	8007fb0 <UART_CheckIdleState>
 800774a:	4603      	mov	r3, r0
}
 800774c:	4618      	mov	r0, r3
 800774e:	3708      	adds	r7, #8
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b08a      	sub	sp, #40	; 0x28
 8007758:	af02      	add	r7, sp, #8
 800775a:	60f8      	str	r0, [r7, #12]
 800775c:	60b9      	str	r1, [r7, #8]
 800775e:	603b      	str	r3, [r7, #0]
 8007760:	4613      	mov	r3, r2
 8007762:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800776a:	2b20      	cmp	r3, #32
 800776c:	d17c      	bne.n	8007868 <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d002      	beq.n	800777a <HAL_UART_Transmit+0x26>
 8007774:	88fb      	ldrh	r3, [r7, #6]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d101      	bne.n	800777e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	e075      	b.n	800786a <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2200      	movs	r2, #0
 8007782:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2221      	movs	r2, #33	; 0x21
 800778a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800778e:	f7fa fdbb 	bl	8002308 <HAL_GetTick>
 8007792:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	88fa      	ldrh	r2, [r7, #6]
 8007798:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	88fa      	ldrh	r2, [r7, #6]
 80077a0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077ac:	d108      	bne.n	80077c0 <HAL_UART_Transmit+0x6c>
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	691b      	ldr	r3, [r3, #16]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d104      	bne.n	80077c0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80077b6:	2300      	movs	r3, #0
 80077b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	61bb      	str	r3, [r7, #24]
 80077be:	e003      	b.n	80077c8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80077c4:	2300      	movs	r3, #0
 80077c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80077c8:	e031      	b.n	800782e <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	9300      	str	r3, [sp, #0]
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	2200      	movs	r2, #0
 80077d2:	2180      	movs	r1, #128	; 0x80
 80077d4:	68f8      	ldr	r0, [r7, #12]
 80077d6:	f000 fc95 	bl	8008104 <UART_WaitOnFlagUntilTimeout>
 80077da:	4603      	mov	r3, r0
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d005      	beq.n	80077ec <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2220      	movs	r2, #32
 80077e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80077e8:	2303      	movs	r3, #3
 80077ea:	e03e      	b.n	800786a <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d10b      	bne.n	800780a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80077f2:	69bb      	ldr	r3, [r7, #24]
 80077f4:	881a      	ldrh	r2, [r3, #0]
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80077fe:	b292      	uxth	r2, r2
 8007800:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007802:	69bb      	ldr	r3, [r7, #24]
 8007804:	3302      	adds	r3, #2
 8007806:	61bb      	str	r3, [r7, #24]
 8007808:	e008      	b.n	800781c <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800780a:	69fb      	ldr	r3, [r7, #28]
 800780c:	781a      	ldrb	r2, [r3, #0]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	b292      	uxth	r2, r2
 8007814:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007816:	69fb      	ldr	r3, [r7, #28]
 8007818:	3301      	adds	r3, #1
 800781a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007822:	b29b      	uxth	r3, r3
 8007824:	3b01      	subs	r3, #1
 8007826:	b29a      	uxth	r2, r3
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007834:	b29b      	uxth	r3, r3
 8007836:	2b00      	cmp	r3, #0
 8007838:	d1c7      	bne.n	80077ca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	9300      	str	r3, [sp, #0]
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	2200      	movs	r2, #0
 8007842:	2140      	movs	r1, #64	; 0x40
 8007844:	68f8      	ldr	r0, [r7, #12]
 8007846:	f000 fc5d 	bl	8008104 <UART_WaitOnFlagUntilTimeout>
 800784a:	4603      	mov	r3, r0
 800784c:	2b00      	cmp	r3, #0
 800784e:	d005      	beq.n	800785c <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2220      	movs	r2, #32
 8007854:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8007858:	2303      	movs	r3, #3
 800785a:	e006      	b.n	800786a <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2220      	movs	r2, #32
 8007860:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007864:	2300      	movs	r3, #0
 8007866:	e000      	b.n	800786a <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 8007868:	2302      	movs	r3, #2
  }
}
 800786a:	4618      	mov	r0, r3
 800786c:	3720      	adds	r7, #32
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}
	...

08007874 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007874:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007878:	b08c      	sub	sp, #48	; 0x30
 800787a:	af00      	add	r7, sp, #0
 800787c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800787e:	2300      	movs	r3, #0
 8007880:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	689a      	ldr	r2, [r3, #8]
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	691b      	ldr	r3, [r3, #16]
 800788c:	431a      	orrs	r2, r3
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	695b      	ldr	r3, [r3, #20]
 8007892:	431a      	orrs	r2, r3
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	69db      	ldr	r3, [r3, #28]
 8007898:	4313      	orrs	r3, r2
 800789a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	681a      	ldr	r2, [r3, #0]
 80078a2:	4baa      	ldr	r3, [pc, #680]	; (8007b4c <UART_SetConfig+0x2d8>)
 80078a4:	4013      	ands	r3, r2
 80078a6:	697a      	ldr	r2, [r7, #20]
 80078a8:	6812      	ldr	r2, [r2, #0]
 80078aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80078ac:	430b      	orrs	r3, r1
 80078ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	68da      	ldr	r2, [r3, #12]
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	430a      	orrs	r2, r1
 80078c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	699b      	ldr	r3, [r3, #24]
 80078ca:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a9f      	ldr	r2, [pc, #636]	; (8007b50 <UART_SetConfig+0x2dc>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d004      	beq.n	80078e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	6a1b      	ldr	r3, [r3, #32]
 80078da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078dc:	4313      	orrs	r3, r2
 80078de:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	689b      	ldr	r3, [r3, #8]
 80078e6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80078ea:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80078ee:	697a      	ldr	r2, [r7, #20]
 80078f0:	6812      	ldr	r2, [r2, #0]
 80078f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80078f4:	430b      	orrs	r3, r1
 80078f6:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078fe:	f023 010f 	bic.w	r1, r3, #15
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	430a      	orrs	r2, r1
 800790c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a90      	ldr	r2, [pc, #576]	; (8007b54 <UART_SetConfig+0x2e0>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d125      	bne.n	8007964 <UART_SetConfig+0xf0>
 8007918:	4b8f      	ldr	r3, [pc, #572]	; (8007b58 <UART_SetConfig+0x2e4>)
 800791a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800791e:	f003 0303 	and.w	r3, r3, #3
 8007922:	2b03      	cmp	r3, #3
 8007924:	d81a      	bhi.n	800795c <UART_SetConfig+0xe8>
 8007926:	a201      	add	r2, pc, #4	; (adr r2, 800792c <UART_SetConfig+0xb8>)
 8007928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800792c:	0800793d 	.word	0x0800793d
 8007930:	0800794d 	.word	0x0800794d
 8007934:	08007945 	.word	0x08007945
 8007938:	08007955 	.word	0x08007955
 800793c:	2301      	movs	r3, #1
 800793e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007942:	e116      	b.n	8007b72 <UART_SetConfig+0x2fe>
 8007944:	2302      	movs	r3, #2
 8007946:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800794a:	e112      	b.n	8007b72 <UART_SetConfig+0x2fe>
 800794c:	2304      	movs	r3, #4
 800794e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007952:	e10e      	b.n	8007b72 <UART_SetConfig+0x2fe>
 8007954:	2308      	movs	r3, #8
 8007956:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800795a:	e10a      	b.n	8007b72 <UART_SetConfig+0x2fe>
 800795c:	2310      	movs	r3, #16
 800795e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007962:	e106      	b.n	8007b72 <UART_SetConfig+0x2fe>
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a7c      	ldr	r2, [pc, #496]	; (8007b5c <UART_SetConfig+0x2e8>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d138      	bne.n	80079e0 <UART_SetConfig+0x16c>
 800796e:	4b7a      	ldr	r3, [pc, #488]	; (8007b58 <UART_SetConfig+0x2e4>)
 8007970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007974:	f003 030c 	and.w	r3, r3, #12
 8007978:	2b0c      	cmp	r3, #12
 800797a:	d82d      	bhi.n	80079d8 <UART_SetConfig+0x164>
 800797c:	a201      	add	r2, pc, #4	; (adr r2, 8007984 <UART_SetConfig+0x110>)
 800797e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007982:	bf00      	nop
 8007984:	080079b9 	.word	0x080079b9
 8007988:	080079d9 	.word	0x080079d9
 800798c:	080079d9 	.word	0x080079d9
 8007990:	080079d9 	.word	0x080079d9
 8007994:	080079c9 	.word	0x080079c9
 8007998:	080079d9 	.word	0x080079d9
 800799c:	080079d9 	.word	0x080079d9
 80079a0:	080079d9 	.word	0x080079d9
 80079a4:	080079c1 	.word	0x080079c1
 80079a8:	080079d9 	.word	0x080079d9
 80079ac:	080079d9 	.word	0x080079d9
 80079b0:	080079d9 	.word	0x080079d9
 80079b4:	080079d1 	.word	0x080079d1
 80079b8:	2300      	movs	r3, #0
 80079ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80079be:	e0d8      	b.n	8007b72 <UART_SetConfig+0x2fe>
 80079c0:	2302      	movs	r3, #2
 80079c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80079c6:	e0d4      	b.n	8007b72 <UART_SetConfig+0x2fe>
 80079c8:	2304      	movs	r3, #4
 80079ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80079ce:	e0d0      	b.n	8007b72 <UART_SetConfig+0x2fe>
 80079d0:	2308      	movs	r3, #8
 80079d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80079d6:	e0cc      	b.n	8007b72 <UART_SetConfig+0x2fe>
 80079d8:	2310      	movs	r3, #16
 80079da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80079de:	e0c8      	b.n	8007b72 <UART_SetConfig+0x2fe>
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a5e      	ldr	r2, [pc, #376]	; (8007b60 <UART_SetConfig+0x2ec>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d125      	bne.n	8007a36 <UART_SetConfig+0x1c2>
 80079ea:	4b5b      	ldr	r3, [pc, #364]	; (8007b58 <UART_SetConfig+0x2e4>)
 80079ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079f0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80079f4:	2b30      	cmp	r3, #48	; 0x30
 80079f6:	d016      	beq.n	8007a26 <UART_SetConfig+0x1b2>
 80079f8:	2b30      	cmp	r3, #48	; 0x30
 80079fa:	d818      	bhi.n	8007a2e <UART_SetConfig+0x1ba>
 80079fc:	2b20      	cmp	r3, #32
 80079fe:	d00a      	beq.n	8007a16 <UART_SetConfig+0x1a2>
 8007a00:	2b20      	cmp	r3, #32
 8007a02:	d814      	bhi.n	8007a2e <UART_SetConfig+0x1ba>
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d002      	beq.n	8007a0e <UART_SetConfig+0x19a>
 8007a08:	2b10      	cmp	r3, #16
 8007a0a:	d008      	beq.n	8007a1e <UART_SetConfig+0x1aa>
 8007a0c:	e00f      	b.n	8007a2e <UART_SetConfig+0x1ba>
 8007a0e:	2300      	movs	r3, #0
 8007a10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a14:	e0ad      	b.n	8007b72 <UART_SetConfig+0x2fe>
 8007a16:	2302      	movs	r3, #2
 8007a18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a1c:	e0a9      	b.n	8007b72 <UART_SetConfig+0x2fe>
 8007a1e:	2304      	movs	r3, #4
 8007a20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a24:	e0a5      	b.n	8007b72 <UART_SetConfig+0x2fe>
 8007a26:	2308      	movs	r3, #8
 8007a28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a2c:	e0a1      	b.n	8007b72 <UART_SetConfig+0x2fe>
 8007a2e:	2310      	movs	r3, #16
 8007a30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a34:	e09d      	b.n	8007b72 <UART_SetConfig+0x2fe>
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a4a      	ldr	r2, [pc, #296]	; (8007b64 <UART_SetConfig+0x2f0>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d125      	bne.n	8007a8c <UART_SetConfig+0x218>
 8007a40:	4b45      	ldr	r3, [pc, #276]	; (8007b58 <UART_SetConfig+0x2e4>)
 8007a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a46:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007a4a:	2bc0      	cmp	r3, #192	; 0xc0
 8007a4c:	d016      	beq.n	8007a7c <UART_SetConfig+0x208>
 8007a4e:	2bc0      	cmp	r3, #192	; 0xc0
 8007a50:	d818      	bhi.n	8007a84 <UART_SetConfig+0x210>
 8007a52:	2b80      	cmp	r3, #128	; 0x80
 8007a54:	d00a      	beq.n	8007a6c <UART_SetConfig+0x1f8>
 8007a56:	2b80      	cmp	r3, #128	; 0x80
 8007a58:	d814      	bhi.n	8007a84 <UART_SetConfig+0x210>
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d002      	beq.n	8007a64 <UART_SetConfig+0x1f0>
 8007a5e:	2b40      	cmp	r3, #64	; 0x40
 8007a60:	d008      	beq.n	8007a74 <UART_SetConfig+0x200>
 8007a62:	e00f      	b.n	8007a84 <UART_SetConfig+0x210>
 8007a64:	2300      	movs	r3, #0
 8007a66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a6a:	e082      	b.n	8007b72 <UART_SetConfig+0x2fe>
 8007a6c:	2302      	movs	r3, #2
 8007a6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a72:	e07e      	b.n	8007b72 <UART_SetConfig+0x2fe>
 8007a74:	2304      	movs	r3, #4
 8007a76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a7a:	e07a      	b.n	8007b72 <UART_SetConfig+0x2fe>
 8007a7c:	2308      	movs	r3, #8
 8007a7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a82:	e076      	b.n	8007b72 <UART_SetConfig+0x2fe>
 8007a84:	2310      	movs	r3, #16
 8007a86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a8a:	e072      	b.n	8007b72 <UART_SetConfig+0x2fe>
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a35      	ldr	r2, [pc, #212]	; (8007b68 <UART_SetConfig+0x2f4>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d12a      	bne.n	8007aec <UART_SetConfig+0x278>
 8007a96:	4b30      	ldr	r3, [pc, #192]	; (8007b58 <UART_SetConfig+0x2e4>)
 8007a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007aa0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007aa4:	d01a      	beq.n	8007adc <UART_SetConfig+0x268>
 8007aa6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007aaa:	d81b      	bhi.n	8007ae4 <UART_SetConfig+0x270>
 8007aac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ab0:	d00c      	beq.n	8007acc <UART_SetConfig+0x258>
 8007ab2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ab6:	d815      	bhi.n	8007ae4 <UART_SetConfig+0x270>
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d003      	beq.n	8007ac4 <UART_SetConfig+0x250>
 8007abc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ac0:	d008      	beq.n	8007ad4 <UART_SetConfig+0x260>
 8007ac2:	e00f      	b.n	8007ae4 <UART_SetConfig+0x270>
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007aca:	e052      	b.n	8007b72 <UART_SetConfig+0x2fe>
 8007acc:	2302      	movs	r3, #2
 8007ace:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ad2:	e04e      	b.n	8007b72 <UART_SetConfig+0x2fe>
 8007ad4:	2304      	movs	r3, #4
 8007ad6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ada:	e04a      	b.n	8007b72 <UART_SetConfig+0x2fe>
 8007adc:	2308      	movs	r3, #8
 8007ade:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ae2:	e046      	b.n	8007b72 <UART_SetConfig+0x2fe>
 8007ae4:	2310      	movs	r3, #16
 8007ae6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007aea:	e042      	b.n	8007b72 <UART_SetConfig+0x2fe>
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a17      	ldr	r2, [pc, #92]	; (8007b50 <UART_SetConfig+0x2dc>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d13a      	bne.n	8007b6c <UART_SetConfig+0x2f8>
 8007af6:	4b18      	ldr	r3, [pc, #96]	; (8007b58 <UART_SetConfig+0x2e4>)
 8007af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007afc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007b00:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b04:	d01a      	beq.n	8007b3c <UART_SetConfig+0x2c8>
 8007b06:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b0a:	d81b      	bhi.n	8007b44 <UART_SetConfig+0x2d0>
 8007b0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b10:	d00c      	beq.n	8007b2c <UART_SetConfig+0x2b8>
 8007b12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b16:	d815      	bhi.n	8007b44 <UART_SetConfig+0x2d0>
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d003      	beq.n	8007b24 <UART_SetConfig+0x2b0>
 8007b1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b20:	d008      	beq.n	8007b34 <UART_SetConfig+0x2c0>
 8007b22:	e00f      	b.n	8007b44 <UART_SetConfig+0x2d0>
 8007b24:	2300      	movs	r3, #0
 8007b26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b2a:	e022      	b.n	8007b72 <UART_SetConfig+0x2fe>
 8007b2c:	2302      	movs	r3, #2
 8007b2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b32:	e01e      	b.n	8007b72 <UART_SetConfig+0x2fe>
 8007b34:	2304      	movs	r3, #4
 8007b36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b3a:	e01a      	b.n	8007b72 <UART_SetConfig+0x2fe>
 8007b3c:	2308      	movs	r3, #8
 8007b3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b42:	e016      	b.n	8007b72 <UART_SetConfig+0x2fe>
 8007b44:	2310      	movs	r3, #16
 8007b46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b4a:	e012      	b.n	8007b72 <UART_SetConfig+0x2fe>
 8007b4c:	cfff69f3 	.word	0xcfff69f3
 8007b50:	40008000 	.word	0x40008000
 8007b54:	40013800 	.word	0x40013800
 8007b58:	40021000 	.word	0x40021000
 8007b5c:	40004400 	.word	0x40004400
 8007b60:	40004800 	.word	0x40004800
 8007b64:	40004c00 	.word	0x40004c00
 8007b68:	40005000 	.word	0x40005000
 8007b6c:	2310      	movs	r3, #16
 8007b6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4aae      	ldr	r2, [pc, #696]	; (8007e30 <UART_SetConfig+0x5bc>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	f040 8097 	bne.w	8007cac <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007b7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007b82:	2b08      	cmp	r3, #8
 8007b84:	d823      	bhi.n	8007bce <UART_SetConfig+0x35a>
 8007b86:	a201      	add	r2, pc, #4	; (adr r2, 8007b8c <UART_SetConfig+0x318>)
 8007b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b8c:	08007bb1 	.word	0x08007bb1
 8007b90:	08007bcf 	.word	0x08007bcf
 8007b94:	08007bb9 	.word	0x08007bb9
 8007b98:	08007bcf 	.word	0x08007bcf
 8007b9c:	08007bbf 	.word	0x08007bbf
 8007ba0:	08007bcf 	.word	0x08007bcf
 8007ba4:	08007bcf 	.word	0x08007bcf
 8007ba8:	08007bcf 	.word	0x08007bcf
 8007bac:	08007bc7 	.word	0x08007bc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bb0:	f7fd fca8 	bl	8005504 <HAL_RCC_GetPCLK1Freq>
 8007bb4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007bb6:	e010      	b.n	8007bda <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007bb8:	4b9e      	ldr	r3, [pc, #632]	; (8007e34 <UART_SetConfig+0x5c0>)
 8007bba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007bbc:	e00d      	b.n	8007bda <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007bbe:	f7fd fc09 	bl	80053d4 <HAL_RCC_GetSysClockFreq>
 8007bc2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007bc4:	e009      	b.n	8007bda <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007bcc:	e005      	b.n	8007bda <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007bd8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	f000 8130 	beq.w	8007e42 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be6:	4a94      	ldr	r2, [pc, #592]	; (8007e38 <UART_SetConfig+0x5c4>)
 8007be8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007bec:	461a      	mov	r2, r3
 8007bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf0:	fbb3 f3f2 	udiv	r3, r3, r2
 8007bf4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	685a      	ldr	r2, [r3, #4]
 8007bfa:	4613      	mov	r3, r2
 8007bfc:	005b      	lsls	r3, r3, #1
 8007bfe:	4413      	add	r3, r2
 8007c00:	69ba      	ldr	r2, [r7, #24]
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d305      	bcc.n	8007c12 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007c0c:	69ba      	ldr	r2, [r7, #24]
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	d903      	bls.n	8007c1a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007c12:	2301      	movs	r3, #1
 8007c14:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007c18:	e113      	b.n	8007e42 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	60bb      	str	r3, [r7, #8]
 8007c20:	60fa      	str	r2, [r7, #12]
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c26:	4a84      	ldr	r2, [pc, #528]	; (8007e38 <UART_SetConfig+0x5c4>)
 8007c28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	2200      	movs	r2, #0
 8007c30:	603b      	str	r3, [r7, #0]
 8007c32:	607a      	str	r2, [r7, #4]
 8007c34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c38:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007c3c:	f7f8 fade 	bl	80001fc <__aeabi_uldivmod>
 8007c40:	4602      	mov	r2, r0
 8007c42:	460b      	mov	r3, r1
 8007c44:	4610      	mov	r0, r2
 8007c46:	4619      	mov	r1, r3
 8007c48:	f04f 0200 	mov.w	r2, #0
 8007c4c:	f04f 0300 	mov.w	r3, #0
 8007c50:	020b      	lsls	r3, r1, #8
 8007c52:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007c56:	0202      	lsls	r2, r0, #8
 8007c58:	6979      	ldr	r1, [r7, #20]
 8007c5a:	6849      	ldr	r1, [r1, #4]
 8007c5c:	0849      	lsrs	r1, r1, #1
 8007c5e:	2000      	movs	r0, #0
 8007c60:	460c      	mov	r4, r1
 8007c62:	4605      	mov	r5, r0
 8007c64:	eb12 0804 	adds.w	r8, r2, r4
 8007c68:	eb43 0905 	adc.w	r9, r3, r5
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	2200      	movs	r2, #0
 8007c72:	469a      	mov	sl, r3
 8007c74:	4693      	mov	fp, r2
 8007c76:	4652      	mov	r2, sl
 8007c78:	465b      	mov	r3, fp
 8007c7a:	4640      	mov	r0, r8
 8007c7c:	4649      	mov	r1, r9
 8007c7e:	f7f8 fabd 	bl	80001fc <__aeabi_uldivmod>
 8007c82:	4602      	mov	r2, r0
 8007c84:	460b      	mov	r3, r1
 8007c86:	4613      	mov	r3, r2
 8007c88:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007c8a:	6a3b      	ldr	r3, [r7, #32]
 8007c8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c90:	d308      	bcc.n	8007ca4 <UART_SetConfig+0x430>
 8007c92:	6a3b      	ldr	r3, [r7, #32]
 8007c94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c98:	d204      	bcs.n	8007ca4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	6a3a      	ldr	r2, [r7, #32]
 8007ca0:	60da      	str	r2, [r3, #12]
 8007ca2:	e0ce      	b.n	8007e42 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007caa:	e0ca      	b.n	8007e42 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	69db      	ldr	r3, [r3, #28]
 8007cb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cb4:	d166      	bne.n	8007d84 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007cb6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007cba:	2b08      	cmp	r3, #8
 8007cbc:	d827      	bhi.n	8007d0e <UART_SetConfig+0x49a>
 8007cbe:	a201      	add	r2, pc, #4	; (adr r2, 8007cc4 <UART_SetConfig+0x450>)
 8007cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cc4:	08007ce9 	.word	0x08007ce9
 8007cc8:	08007cf1 	.word	0x08007cf1
 8007ccc:	08007cf9 	.word	0x08007cf9
 8007cd0:	08007d0f 	.word	0x08007d0f
 8007cd4:	08007cff 	.word	0x08007cff
 8007cd8:	08007d0f 	.word	0x08007d0f
 8007cdc:	08007d0f 	.word	0x08007d0f
 8007ce0:	08007d0f 	.word	0x08007d0f
 8007ce4:	08007d07 	.word	0x08007d07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ce8:	f7fd fc0c 	bl	8005504 <HAL_RCC_GetPCLK1Freq>
 8007cec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007cee:	e014      	b.n	8007d1a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007cf0:	f7fd fc1e 	bl	8005530 <HAL_RCC_GetPCLK2Freq>
 8007cf4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007cf6:	e010      	b.n	8007d1a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007cf8:	4b4e      	ldr	r3, [pc, #312]	; (8007e34 <UART_SetConfig+0x5c0>)
 8007cfa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007cfc:	e00d      	b.n	8007d1a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007cfe:	f7fd fb69 	bl	80053d4 <HAL_RCC_GetSysClockFreq>
 8007d02:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007d04:	e009      	b.n	8007d1a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007d0c:	e005      	b.n	8007d1a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007d12:	2301      	movs	r3, #1
 8007d14:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007d18:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	f000 8090 	beq.w	8007e42 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d26:	4a44      	ldr	r2, [pc, #272]	; (8007e38 <UART_SetConfig+0x5c4>)
 8007d28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d30:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d34:	005a      	lsls	r2, r3, #1
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	085b      	lsrs	r3, r3, #1
 8007d3c:	441a      	add	r2, r3
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d46:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d48:	6a3b      	ldr	r3, [r7, #32]
 8007d4a:	2b0f      	cmp	r3, #15
 8007d4c:	d916      	bls.n	8007d7c <UART_SetConfig+0x508>
 8007d4e:	6a3b      	ldr	r3, [r7, #32]
 8007d50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d54:	d212      	bcs.n	8007d7c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d56:	6a3b      	ldr	r3, [r7, #32]
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	f023 030f 	bic.w	r3, r3, #15
 8007d5e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d60:	6a3b      	ldr	r3, [r7, #32]
 8007d62:	085b      	lsrs	r3, r3, #1
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	f003 0307 	and.w	r3, r3, #7
 8007d6a:	b29a      	uxth	r2, r3
 8007d6c:	8bfb      	ldrh	r3, [r7, #30]
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	8bfa      	ldrh	r2, [r7, #30]
 8007d78:	60da      	str	r2, [r3, #12]
 8007d7a:	e062      	b.n	8007e42 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007d82:	e05e      	b.n	8007e42 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d84:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007d88:	2b08      	cmp	r3, #8
 8007d8a:	d828      	bhi.n	8007dde <UART_SetConfig+0x56a>
 8007d8c:	a201      	add	r2, pc, #4	; (adr r2, 8007d94 <UART_SetConfig+0x520>)
 8007d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d92:	bf00      	nop
 8007d94:	08007db9 	.word	0x08007db9
 8007d98:	08007dc1 	.word	0x08007dc1
 8007d9c:	08007dc9 	.word	0x08007dc9
 8007da0:	08007ddf 	.word	0x08007ddf
 8007da4:	08007dcf 	.word	0x08007dcf
 8007da8:	08007ddf 	.word	0x08007ddf
 8007dac:	08007ddf 	.word	0x08007ddf
 8007db0:	08007ddf 	.word	0x08007ddf
 8007db4:	08007dd7 	.word	0x08007dd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007db8:	f7fd fba4 	bl	8005504 <HAL_RCC_GetPCLK1Freq>
 8007dbc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007dbe:	e014      	b.n	8007dea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007dc0:	f7fd fbb6 	bl	8005530 <HAL_RCC_GetPCLK2Freq>
 8007dc4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007dc6:	e010      	b.n	8007dea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007dc8:	4b1a      	ldr	r3, [pc, #104]	; (8007e34 <UART_SetConfig+0x5c0>)
 8007dca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007dcc:	e00d      	b.n	8007dea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007dce:	f7fd fb01 	bl	80053d4 <HAL_RCC_GetSysClockFreq>
 8007dd2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007dd4:	e009      	b.n	8007dea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007dd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007dda:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007ddc:	e005      	b.n	8007dea <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007dde:	2300      	movs	r3, #0
 8007de0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
 8007de4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007de8:	bf00      	nop
    }

    if (pclk != 0U)
 8007dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d028      	beq.n	8007e42 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df4:	4a10      	ldr	r2, [pc, #64]	; (8007e38 <UART_SetConfig+0x5c4>)
 8007df6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfe:	fbb3 f2f2 	udiv	r2, r3, r2
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	085b      	lsrs	r3, r3, #1
 8007e08:	441a      	add	r2, r3
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e12:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e14:	6a3b      	ldr	r3, [r7, #32]
 8007e16:	2b0f      	cmp	r3, #15
 8007e18:	d910      	bls.n	8007e3c <UART_SetConfig+0x5c8>
 8007e1a:	6a3b      	ldr	r3, [r7, #32]
 8007e1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e20:	d20c      	bcs.n	8007e3c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007e22:	6a3b      	ldr	r3, [r7, #32]
 8007e24:	b29a      	uxth	r2, r3
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	60da      	str	r2, [r3, #12]
 8007e2c:	e009      	b.n	8007e42 <UART_SetConfig+0x5ce>
 8007e2e:	bf00      	nop
 8007e30:	40008000 	.word	0x40008000
 8007e34:	00f42400 	.word	0x00f42400
 8007e38:	080085f0 	.word	0x080085f0
      }
      else
      {
        ret = HAL_ERROR;
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	2201      	movs	r2, #1
 8007e46:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	2200      	movs	r2, #0
 8007e56:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007e5e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3730      	adds	r7, #48	; 0x30
 8007e66:	46bd      	mov	sp, r7
 8007e68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007e6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b083      	sub	sp, #12
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e78:	f003 0308 	and.w	r3, r3, #8
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d00a      	beq.n	8007e96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	430a      	orrs	r2, r1
 8007e94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e9a:	f003 0301 	and.w	r3, r3, #1
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d00a      	beq.n	8007eb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	430a      	orrs	r2, r1
 8007eb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ebc:	f003 0302 	and.w	r3, r3, #2
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d00a      	beq.n	8007eda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	430a      	orrs	r2, r1
 8007ed8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ede:	f003 0304 	and.w	r3, r3, #4
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d00a      	beq.n	8007efc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	430a      	orrs	r2, r1
 8007efa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f00:	f003 0310 	and.w	r3, r3, #16
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d00a      	beq.n	8007f1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	689b      	ldr	r3, [r3, #8]
 8007f0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	430a      	orrs	r2, r1
 8007f1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f22:	f003 0320 	and.w	r3, r3, #32
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d00a      	beq.n	8007f40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	430a      	orrs	r2, r1
 8007f3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d01a      	beq.n	8007f82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	430a      	orrs	r2, r1
 8007f60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f6a:	d10a      	bne.n	8007f82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	430a      	orrs	r2, r1
 8007f80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d00a      	beq.n	8007fa4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	430a      	orrs	r2, r1
 8007fa2:	605a      	str	r2, [r3, #4]
  }
}
 8007fa4:	bf00      	nop
 8007fa6:	370c      	adds	r7, #12
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr

08007fb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b098      	sub	sp, #96	; 0x60
 8007fb4:	af02      	add	r7, sp, #8
 8007fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007fc0:	f7fa f9a2 	bl	8002308 <HAL_GetTick>
 8007fc4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f003 0308 	and.w	r3, r3, #8
 8007fd0:	2b08      	cmp	r3, #8
 8007fd2:	d12f      	bne.n	8008034 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fd4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007fd8:	9300      	str	r3, [sp, #0]
 8007fda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007fdc:	2200      	movs	r2, #0
 8007fde:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 f88e 	bl	8008104 <UART_WaitOnFlagUntilTimeout>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d022      	beq.n	8008034 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff6:	e853 3f00 	ldrex	r3, [r3]
 8007ffa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ffe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008002:	653b      	str	r3, [r7, #80]	; 0x50
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	461a      	mov	r2, r3
 800800a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800800c:	647b      	str	r3, [r7, #68]	; 0x44
 800800e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008010:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008012:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008014:	e841 2300 	strex	r3, r2, [r1]
 8008018:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800801a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800801c:	2b00      	cmp	r3, #0
 800801e:	d1e6      	bne.n	8007fee <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2220      	movs	r2, #32
 8008024:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2200      	movs	r2, #0
 800802c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008030:	2303      	movs	r3, #3
 8008032:	e063      	b.n	80080fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f003 0304 	and.w	r3, r3, #4
 800803e:	2b04      	cmp	r3, #4
 8008040:	d149      	bne.n	80080d6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008042:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008046:	9300      	str	r3, [sp, #0]
 8008048:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800804a:	2200      	movs	r2, #0
 800804c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 f857 	bl	8008104 <UART_WaitOnFlagUntilTimeout>
 8008056:	4603      	mov	r3, r0
 8008058:	2b00      	cmp	r3, #0
 800805a:	d03c      	beq.n	80080d6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008064:	e853 3f00 	ldrex	r3, [r3]
 8008068:	623b      	str	r3, [r7, #32]
   return(result);
 800806a:	6a3b      	ldr	r3, [r7, #32]
 800806c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008070:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	461a      	mov	r2, r3
 8008078:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800807a:	633b      	str	r3, [r7, #48]	; 0x30
 800807c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800807e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008080:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008082:	e841 2300 	strex	r3, r2, [r1]
 8008086:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800808a:	2b00      	cmp	r3, #0
 800808c:	d1e6      	bne.n	800805c <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	3308      	adds	r3, #8
 8008094:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	e853 3f00 	ldrex	r3, [r3]
 800809c:	60fb      	str	r3, [r7, #12]
   return(result);
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	f023 0301 	bic.w	r3, r3, #1
 80080a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	3308      	adds	r3, #8
 80080ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80080ae:	61fa      	str	r2, [r7, #28]
 80080b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080b2:	69b9      	ldr	r1, [r7, #24]
 80080b4:	69fa      	ldr	r2, [r7, #28]
 80080b6:	e841 2300 	strex	r3, r2, [r1]
 80080ba:	617b      	str	r3, [r7, #20]
   return(result);
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d1e5      	bne.n	800808e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2220      	movs	r2, #32
 80080c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2200      	movs	r2, #0
 80080ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80080d2:	2303      	movs	r3, #3
 80080d4:	e012      	b.n	80080fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2220      	movs	r2, #32
 80080da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2220      	movs	r2, #32
 80080e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2200      	movs	r2, #0
 80080ea:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2200      	movs	r2, #0
 80080f0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2200      	movs	r2, #0
 80080f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80080fa:	2300      	movs	r3, #0
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3758      	adds	r7, #88	; 0x58
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}

08008104 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b084      	sub	sp, #16
 8008108:	af00      	add	r7, sp, #0
 800810a:	60f8      	str	r0, [r7, #12]
 800810c:	60b9      	str	r1, [r7, #8]
 800810e:	603b      	str	r3, [r7, #0]
 8008110:	4613      	mov	r3, r2
 8008112:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008114:	e049      	b.n	80081aa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008116:	69bb      	ldr	r3, [r7, #24]
 8008118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800811c:	d045      	beq.n	80081aa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800811e:	f7fa f8f3 	bl	8002308 <HAL_GetTick>
 8008122:	4602      	mov	r2, r0
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	1ad3      	subs	r3, r2, r3
 8008128:	69ba      	ldr	r2, [r7, #24]
 800812a:	429a      	cmp	r2, r3
 800812c:	d302      	bcc.n	8008134 <UART_WaitOnFlagUntilTimeout+0x30>
 800812e:	69bb      	ldr	r3, [r7, #24]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d101      	bne.n	8008138 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008134:	2303      	movs	r3, #3
 8008136:	e048      	b.n	80081ca <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f003 0304 	and.w	r3, r3, #4
 8008142:	2b00      	cmp	r3, #0
 8008144:	d031      	beq.n	80081aa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	69db      	ldr	r3, [r3, #28]
 800814c:	f003 0308 	and.w	r3, r3, #8
 8008150:	2b08      	cmp	r3, #8
 8008152:	d110      	bne.n	8008176 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	2208      	movs	r2, #8
 800815a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800815c:	68f8      	ldr	r0, [r7, #12]
 800815e:	f000 f838 	bl	80081d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2208      	movs	r2, #8
 8008166:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2200      	movs	r2, #0
 800816e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8008172:	2301      	movs	r3, #1
 8008174:	e029      	b.n	80081ca <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	69db      	ldr	r3, [r3, #28]
 800817c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008180:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008184:	d111      	bne.n	80081aa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800818e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008190:	68f8      	ldr	r0, [r7, #12]
 8008192:	f000 f81e 	bl	80081d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2220      	movs	r2, #32
 800819a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2200      	movs	r2, #0
 80081a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80081a6:	2303      	movs	r3, #3
 80081a8:	e00f      	b.n	80081ca <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	69da      	ldr	r2, [r3, #28]
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	4013      	ands	r3, r2
 80081b4:	68ba      	ldr	r2, [r7, #8]
 80081b6:	429a      	cmp	r2, r3
 80081b8:	bf0c      	ite	eq
 80081ba:	2301      	moveq	r3, #1
 80081bc:	2300      	movne	r3, #0
 80081be:	b2db      	uxtb	r3, r3
 80081c0:	461a      	mov	r2, r3
 80081c2:	79fb      	ldrb	r3, [r7, #7]
 80081c4:	429a      	cmp	r2, r3
 80081c6:	d0a6      	beq.n	8008116 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80081c8:	2300      	movs	r3, #0
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3710      	adds	r7, #16
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}

080081d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80081d2:	b480      	push	{r7}
 80081d4:	b095      	sub	sp, #84	; 0x54
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081e2:	e853 3f00 	ldrex	r3, [r3]
 80081e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80081e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80081ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	461a      	mov	r2, r3
 80081f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081f8:	643b      	str	r3, [r7, #64]	; 0x40
 80081fa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80081fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008200:	e841 2300 	strex	r3, r2, [r1]
 8008204:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008208:	2b00      	cmp	r3, #0
 800820a:	d1e6      	bne.n	80081da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	3308      	adds	r3, #8
 8008212:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008214:	6a3b      	ldr	r3, [r7, #32]
 8008216:	e853 3f00 	ldrex	r3, [r3]
 800821a:	61fb      	str	r3, [r7, #28]
   return(result);
 800821c:	69fb      	ldr	r3, [r7, #28]
 800821e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008222:	f023 0301 	bic.w	r3, r3, #1
 8008226:	64bb      	str	r3, [r7, #72]	; 0x48
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	3308      	adds	r3, #8
 800822e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008230:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008232:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008234:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008236:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008238:	e841 2300 	strex	r3, r2, [r1]
 800823c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800823e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008240:	2b00      	cmp	r3, #0
 8008242:	d1e3      	bne.n	800820c <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008248:	2b01      	cmp	r3, #1
 800824a:	d118      	bne.n	800827e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	e853 3f00 	ldrex	r3, [r3]
 8008258:	60bb      	str	r3, [r7, #8]
   return(result);
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	f023 0310 	bic.w	r3, r3, #16
 8008260:	647b      	str	r3, [r7, #68]	; 0x44
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	461a      	mov	r2, r3
 8008268:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800826a:	61bb      	str	r3, [r7, #24]
 800826c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800826e:	6979      	ldr	r1, [r7, #20]
 8008270:	69ba      	ldr	r2, [r7, #24]
 8008272:	e841 2300 	strex	r3, r2, [r1]
 8008276:	613b      	str	r3, [r7, #16]
   return(result);
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d1e6      	bne.n	800824c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2220      	movs	r2, #32
 8008282:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2200      	movs	r2, #0
 800828a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2200      	movs	r2, #0
 8008290:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008292:	bf00      	nop
 8008294:	3754      	adds	r7, #84	; 0x54
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr

0800829e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800829e:	b480      	push	{r7}
 80082a0:	b085      	sub	sp, #20
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d101      	bne.n	80082b4 <HAL_UARTEx_DisableFifoMode+0x16>
 80082b0:	2302      	movs	r3, #2
 80082b2:	e027      	b.n	8008304 <HAL_UARTEx_DisableFifoMode+0x66>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2201      	movs	r2, #1
 80082b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2224      	movs	r2, #36	; 0x24
 80082c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	681a      	ldr	r2, [r3, #0]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f022 0201 	bic.w	r2, r2, #1
 80082da:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80082e2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2200      	movs	r2, #0
 80082e8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	68fa      	ldr	r2, [r7, #12]
 80082f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2220      	movs	r2, #32
 80082f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2200      	movs	r2, #0
 80082fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008302:	2300      	movs	r3, #0
}
 8008304:	4618      	mov	r0, r3
 8008306:	3714      	adds	r7, #20
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr

08008310 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b084      	sub	sp, #16
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008320:	2b01      	cmp	r3, #1
 8008322:	d101      	bne.n	8008328 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008324:	2302      	movs	r3, #2
 8008326:	e02d      	b.n	8008384 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2201      	movs	r2, #1
 800832c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2224      	movs	r2, #36	; 0x24
 8008334:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	681a      	ldr	r2, [r3, #0]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f022 0201 	bic.w	r2, r2, #1
 800834e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	689b      	ldr	r3, [r3, #8]
 8008356:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	683a      	ldr	r2, [r7, #0]
 8008360:	430a      	orrs	r2, r1
 8008362:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 f84f 	bl	8008408 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	68fa      	ldr	r2, [r7, #12]
 8008370:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2220      	movs	r2, #32
 8008376:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2200      	movs	r2, #0
 800837e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008382:	2300      	movs	r3, #0
}
 8008384:	4618      	mov	r0, r3
 8008386:	3710      	adds	r7, #16
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}

0800838c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b084      	sub	sp, #16
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800839c:	2b01      	cmp	r3, #1
 800839e:	d101      	bne.n	80083a4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80083a0:	2302      	movs	r3, #2
 80083a2:	e02d      	b.n	8008400 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2201      	movs	r2, #1
 80083a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2224      	movs	r2, #36	; 0x24
 80083b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	681a      	ldr	r2, [r3, #0]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f022 0201 	bic.w	r2, r2, #1
 80083ca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	689b      	ldr	r3, [r3, #8]
 80083d2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	683a      	ldr	r2, [r7, #0]
 80083dc:	430a      	orrs	r2, r1
 80083de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f000 f811 	bl	8008408 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	68fa      	ldr	r2, [r7, #12]
 80083ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2220      	movs	r2, #32
 80083f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2200      	movs	r2, #0
 80083fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80083fe:	2300      	movs	r3, #0
}
 8008400:	4618      	mov	r0, r3
 8008402:	3710      	adds	r7, #16
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}

08008408 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008408:	b480      	push	{r7}
 800840a:	b085      	sub	sp, #20
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008414:	2b00      	cmp	r3, #0
 8008416:	d108      	bne.n	800842a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2201      	movs	r2, #1
 800841c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2201      	movs	r2, #1
 8008424:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008428:	e031      	b.n	800848e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800842a:	2308      	movs	r3, #8
 800842c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800842e:	2308      	movs	r3, #8
 8008430:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	689b      	ldr	r3, [r3, #8]
 8008438:	0e5b      	lsrs	r3, r3, #25
 800843a:	b2db      	uxtb	r3, r3
 800843c:	f003 0307 	and.w	r3, r3, #7
 8008440:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	689b      	ldr	r3, [r3, #8]
 8008448:	0f5b      	lsrs	r3, r3, #29
 800844a:	b2db      	uxtb	r3, r3
 800844c:	f003 0307 	and.w	r3, r3, #7
 8008450:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008452:	7bbb      	ldrb	r3, [r7, #14]
 8008454:	7b3a      	ldrb	r2, [r7, #12]
 8008456:	4911      	ldr	r1, [pc, #68]	; (800849c <UARTEx_SetNbDataToProcess+0x94>)
 8008458:	5c8a      	ldrb	r2, [r1, r2]
 800845a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800845e:	7b3a      	ldrb	r2, [r7, #12]
 8008460:	490f      	ldr	r1, [pc, #60]	; (80084a0 <UARTEx_SetNbDataToProcess+0x98>)
 8008462:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008464:	fb93 f3f2 	sdiv	r3, r3, r2
 8008468:	b29a      	uxth	r2, r3
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008470:	7bfb      	ldrb	r3, [r7, #15]
 8008472:	7b7a      	ldrb	r2, [r7, #13]
 8008474:	4909      	ldr	r1, [pc, #36]	; (800849c <UARTEx_SetNbDataToProcess+0x94>)
 8008476:	5c8a      	ldrb	r2, [r1, r2]
 8008478:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800847c:	7b7a      	ldrb	r2, [r7, #13]
 800847e:	4908      	ldr	r1, [pc, #32]	; (80084a0 <UARTEx_SetNbDataToProcess+0x98>)
 8008480:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008482:	fb93 f3f2 	sdiv	r3, r3, r2
 8008486:	b29a      	uxth	r2, r3
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800848e:	bf00      	nop
 8008490:	3714      	adds	r7, #20
 8008492:	46bd      	mov	sp, r7
 8008494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008498:	4770      	bx	lr
 800849a:	bf00      	nop
 800849c:	08008608 	.word	0x08008608
 80084a0:	08008610 	.word	0x08008610

080084a4 <memset>:
 80084a4:	4402      	add	r2, r0
 80084a6:	4603      	mov	r3, r0
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d100      	bne.n	80084ae <memset+0xa>
 80084ac:	4770      	bx	lr
 80084ae:	f803 1b01 	strb.w	r1, [r3], #1
 80084b2:	e7f9      	b.n	80084a8 <memset+0x4>

080084b4 <__libc_init_array>:
 80084b4:	b570      	push	{r4, r5, r6, lr}
 80084b6:	4d0d      	ldr	r5, [pc, #52]	; (80084ec <__libc_init_array+0x38>)
 80084b8:	4c0d      	ldr	r4, [pc, #52]	; (80084f0 <__libc_init_array+0x3c>)
 80084ba:	1b64      	subs	r4, r4, r5
 80084bc:	10a4      	asrs	r4, r4, #2
 80084be:	2600      	movs	r6, #0
 80084c0:	42a6      	cmp	r6, r4
 80084c2:	d109      	bne.n	80084d8 <__libc_init_array+0x24>
 80084c4:	4d0b      	ldr	r5, [pc, #44]	; (80084f4 <__libc_init_array+0x40>)
 80084c6:	4c0c      	ldr	r4, [pc, #48]	; (80084f8 <__libc_init_array+0x44>)
 80084c8:	f000 f818 	bl	80084fc <_init>
 80084cc:	1b64      	subs	r4, r4, r5
 80084ce:	10a4      	asrs	r4, r4, #2
 80084d0:	2600      	movs	r6, #0
 80084d2:	42a6      	cmp	r6, r4
 80084d4:	d105      	bne.n	80084e2 <__libc_init_array+0x2e>
 80084d6:	bd70      	pop	{r4, r5, r6, pc}
 80084d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80084dc:	4798      	blx	r3
 80084de:	3601      	adds	r6, #1
 80084e0:	e7ee      	b.n	80084c0 <__libc_init_array+0xc>
 80084e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80084e6:	4798      	blx	r3
 80084e8:	3601      	adds	r6, #1
 80084ea:	e7f2      	b.n	80084d2 <__libc_init_array+0x1e>
 80084ec:	08008620 	.word	0x08008620
 80084f0:	08008620 	.word	0x08008620
 80084f4:	08008620 	.word	0x08008620
 80084f8:	08008624 	.word	0x08008624

080084fc <_init>:
 80084fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084fe:	bf00      	nop
 8008500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008502:	bc08      	pop	{r3}
 8008504:	469e      	mov	lr, r3
 8008506:	4770      	bx	lr

08008508 <_fini>:
 8008508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800850a:	bf00      	nop
 800850c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800850e:	bc08      	pop	{r3}
 8008510:	469e      	mov	lr, r3
 8008512:	4770      	bx	lr
